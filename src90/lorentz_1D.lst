IBM XL Fortran for Blue Gene, V14.1 (5799-AH1) Version 14.01.0000.0012 --- lorentz_1D.f90 07/08/15 15:48:07
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              NODIRECTSTORAG  ESCAPE          I4
         INLGLUE         NOLIBESSL       NOLIBPOSIX      OBJECT
         SWAPOMP         THREADED        UNWIND          ZEROSIZE
  
         ==  Options Of Integer Type ==
         ALIAS_SIZE(65536)     MAXMEM(-1)            OPTIMIZE(3)
         SPILLSIZE(512)        STACKTEMP(0)
  
         ==  Options of Integer and Character Type ==
         CACHE(LEVEL(1),TYPE(I),ASSOC(4),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(I),ASSOC(16),COST(80),LINE(128))
         CACHE(LEVEL(1),TYPE(D),ASSOC(8),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(D),ASSOC(16),COST(80),LINE(128))
         INLINE(NOAUTO,LEVEL(5))
         HOT(FASTMATH,LEVEL(0))
         SIMD(AUTO)
  
         ==  Options Of Character Type  ==
         64()                  ALIAS(STD,NOINTPTR)   ALIGN(BINDC(LINUXPPC),STRUCT(NATURAL))
         ARCH(QP)              AUTODBL(NONE)         DESCRIPTOR(V1)
         DIRECTIVE(IBM*,IBMT)  ENUM()                FLAG(I,I)
         FLOAT(MAF,FOLD,RSQRT,FLTINT)
         FREE(F90)             GNU_VERSION(DOT_TRIPLE)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LIST()                LANGLVL(EXTENDED)     REALSIZE(4)
         REPORT(HOTLIST)       STRICT(NONE,NOPRECISION,NOEXCEPTIONS,NOIEEEFP,NONANS,NOINFINITIES,NOSUBNORMALS,NOZEROSIGNS,NOOPERATIONPRECISION,ORDER,NOLIBRARY,NOCONSTRUCTCOPY,NOVECTORPRECISION)
         TUNE(QP)              UNROLL(AUTO)          XFLAG()
         XLF2003(NOPOLYMORPHIC,NOBOZLITARGS,NOSIGNDZEROINTR,NOSTOPEXCEPT,NOVOLATILE,NOAUTOREALLOC,OLDNANINF)
         XLF2008(NOCHECKPRESENCE)
         XLF77(LEADZERO,BLANKPAD)
         XLF90(SIGNEDZERO,AUTODEALLOC)
  
>>>>> SOURCE SECTION <<<<<
** lorentz_1d   === End of Compilation 1 ===
 
>>>>> LOOP TRANSFORMATION SECTION <<<<<

1586-540 (I) Loop (loop index 1) at lorentz_1D.f90 <line 144> was not SIMD vectorized because it contains memory references ((double *)((char *)d-srd1%addr  + d-srd1%rvo))->srd1[].rns0.[(long long) ks][(long long) js][($$CIV0 + (long long) .ibeg->ibeg) - 1ll] = _sqrt@18( 5.0000000000000000E-001 * (((double *)((char *)d-d%addr  + d-d%rvo))->d[].rns1.[(long long) ks][(long long) js][($$CIV0 + (long long) .ibeg->ibeg) - 1ll] + ((double *)((char *)d-d%addr  + d-d%rvo))->d[].rns1.[(long long) ks][(long long) js][($$CIV0 + (long long) .ibeg->ibeg) - 2ll])); with non-vectorizable strides.
1586-540 (I) Loop (loop index 1) at lorentz_1D.f90 <line 144> was not SIMD vectorized because it contains memory references ((double *)((char *)d-srd3%addr  + d-srd3%rvo))->srd3[].rns3.[(long long) ks][(long long) js][($$CIV0 + (long long) .ibeg->ibeg) - 1ll] = _sqrt@18( 5.0000000000000000E-001 * (((double *)((char *)d-d%addr  + d-d%rvo))->d[].rns1.[(long long) ks][(long long) js][($$CIV0 + (long long) .ibeg->ibeg) - 1ll] + ((double *)((char *)d-d%addr  + d-d%rvo))->d[].rns1.[(long long) ks][(long long) js][($$CIV0 + (long long) .ibeg->ibeg) - 1ll])); with non-vectorizable strides.
1586-540 (I) Loop (loop index 1) at lorentz_1D.f90 <line 144> was not SIMD vectorized because it contains memory references ((double *)((char *)d-srd2%addr  + d-srd2%rvo))->srd2[].rns2.[(long long) ks][(long long) js][($$CIV0 + (long long) .ibeg->ibeg) - 1ll] = _sqrt@18( 5.0000000000000000E-001 * (((double *)((char *)d-d%addr  + d-d%rvo))->d[].rns1.[(long long) ks][(long long) js][($$CIV0 + (long long) .ibeg->ibeg) - 1ll] + ((double *)((char *)d-d%addr  + d-d%rvo))->d[].rns1.[(long long) ks][(long long) js][($$CIV0 + (long long) .ibeg->ibeg) - 1ll])); with non-vectorizable strides.
1586-554 (I) Loop (loop index 1) at lorentz_1D.f90 <line 148> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-554 (I) Loop (loop index 1) at lorentz_1D.f90 <line 150> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-554 (I) Loop (loop index 1) at lorentz_1D.f90 <line 149> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 1) at lorentz_1D.f90 <line 145> was not SIMD vectorized because it contains memory references ((char *)d-srd1%addr  + d-srd1%rvo + (d-srd1%bounds%mult[].off48)*((long long) ks) + (d-srd1%bounds%mult[].off72)*((long long) js) + (d-srd1%bounds%mult[].off96)*(($$CIV0 + (long long) .ibeg->ibeg) - 1ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 1) at lorentz_1D.f90 <line 145> was not SIMD vectorized because it contains operation in  5.0000000000000000E-001 * (((double *)((char *)d-d%addr  + d-d%rvo))->d[].rns1.[(long long) ks][(long long) js][($$CIV0 + (long long) .ibeg->ibeg) - 1ll] + ((double *)((char *)d-d%addr  + d-d%rvo))->d[].rns1.[(long long) ks][(long long) js][($$CIV0 + (long long) .ibeg->ibeg) - 2ll]) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 1) at lorentz_1D.f90 <line 145> was not SIMD vectorized because it contains memory references ((char *)d-srd1%addr  + d-srd1%rvo + (d-srd1%bounds%mult[].off48)*((long long) ks) + (d-srd1%bounds%mult[].off72)*((long long) js) + (d-srd1%bounds%mult[].off96)*(($$CIV0 + (long long) .ibeg->ibeg) - 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 1) at lorentz_1D.f90 <line 145> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 1) at lorentz_1D.f90 <line 145> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-srd1%addr  + d-srd1%rvo + (d-srd1%bounds%mult[].off48)*((long long) ks) + (d-srd1%bounds%mult[].off72)*((long long) js) + (d-srd1%bounds%mult[].off96)*(($$CIV0 + (long long) .ibeg->ibeg) - 1ll)).
1586-536 (I) Loop (loop index 1) at lorentz_1D.f90 <line 147> was not SIMD vectorized because it contains memory references ((char *)d-srd3%addr  + d-srd3%rvo + (d-srd3%bounds%mult[].off256)*((long long) ks) + (d-srd3%bounds%mult[].off280)*((long long) js) + (d-srd3%bounds%mult[].off304)*(($$CIV0 + (long long) .ibeg->ibeg) - 1ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 1) at lorentz_1D.f90 <line 147> was not SIMD vectorized because it contains operation in  5.0000000000000000E-001 * (((double *)((char *)d-d%addr  + d-d%rvo))->d[].rns1.[(long long) ks][(long long) js][($$CIV0 + (long long) .ibeg->ibeg) - 1ll] + ((double *)((char *)d-d%addr  + d-d%rvo))->d[].rns1.[(long long) ks][(long long) js][($$CIV0 + (long long) .ibeg->ibeg) - 1ll]) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 1) at lorentz_1D.f90 <line 147> was not SIMD vectorized because it contains memory references ((char *)d-srd3%addr  + d-srd3%rvo + (d-srd3%bounds%mult[].off256)*((long long) ks) + (d-srd3%bounds%mult[].off280)*((long long) js) + (d-srd3%bounds%mult[].off304)*(($$CIV0 + (long long) .ibeg->ibeg) - 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 1) at lorentz_1D.f90 <line 147> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 1) at lorentz_1D.f90 <line 147> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-srd3%addr  + d-srd3%rvo + (d-srd3%bounds%mult[].off256)*((long long) ks) + (d-srd3%bounds%mult[].off280)*((long long) js) + (d-srd3%bounds%mult[].off304)*(($$CIV0 + (long long) .ibeg->ibeg) - 1ll)).
1586-536 (I) Loop (loop index 1) at lorentz_1D.f90 <line 146> was not SIMD vectorized because it contains memory references ((char *)d-srd2%addr  + d-srd2%rvo + (d-srd2%bounds%mult[].off152)*((long long) ks) + (d-srd2%bounds%mult[].off176)*((long long) js) + (d-srd2%bounds%mult[].off200)*(($$CIV0 + (long long) .ibeg->ibeg) - 1ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 1) at lorentz_1D.f90 <line 146> was not SIMD vectorized because it contains operation in  5.0000000000000000E-001 * (((double *)((char *)d-d%addr  + d-d%rvo))->d[].rns1.[(long long) ks][(long long) js][($$CIV0 + (long long) .ibeg->ibeg) - 1ll] + ((double *)((char *)d-d%addr  + d-d%rvo))->d[].rns1.[(long long) ks][(long long) js][($$CIV0 + (long long) .ibeg->ibeg) - 1ll]) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 1) at lorentz_1D.f90 <line 146> was not SIMD vectorized because it contains memory references ((char *)d-srd2%addr  + d-srd2%rvo + (d-srd2%bounds%mult[].off152)*((long long) ks) + (d-srd2%bounds%mult[].off176)*((long long) js) + (d-srd2%bounds%mult[].off200)*(($$CIV0 + (long long) .ibeg->ibeg) - 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 1) at lorentz_1D.f90 <line 146> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 1) at lorentz_1D.f90 <line 146> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-srd2%addr  + d-srd2%rvo + (d-srd2%bounds%mult[].off152)*((long long) ks) + (d-srd2%bounds%mult[].off176)*((long long) js) + (d-srd2%bounds%mult[].off200)*(($$CIV0 + (long long) .ibeg->ibeg) - 1ll)).
1586-540 (I) Loop (loop index 2) at lorentz_1D.f90 <line 168> was not SIMD vectorized because it contains memory references ((double *)((char *)d-srdpi%addr  + -8ll))->srdpi[].rns9.[(long long) .ibeg->ibeg + $$CIV1] =  1.0000000000000000E+000 / ((double *)((char *)d-srd2%addr  + d-srd2%rvo))->srd2[].rns2.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIV1]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 2) at lorentz_1D.f90 <line 168> was not SIMD vectorized because it contains memory references ((double *)((char *)d-valp%addr  + -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + $$CIV1] = - (abs(((double *)((char *)d-bave%addr  + -8ll))->bave[].rns7.[(long long) .ibeg->ibeg + $$CIV1]) * ( 1.0000000000000000E+000 / ((double *)((char *)d-srd2%addr  + d-srd2%rvo))->srd2[].rns2.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIV1])); with non-vectorizable strides.
1586-540 (I) Loop (loop index 2) at lorentz_1D.f90 <line 168> was not SIMD vectorized because it contains memory references ((double *)((char *)d-srdmi%addr  + -8ll))->srdmi[].rns10.[(long long) .ibeg->ibeg + $$CIV1] =  1.0000000000000000E+000 / ((double *)((char *)d-srd2%addr  + d-srd2%rvo))->srd2[].rns2.[(long long) ks][(long long) js][($$CIV1 + (long long) .ibeg->ibeg) - 1ll]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 2) at lorentz_1D.f90 <line 168> was not SIMD vectorized because it contains memory references ((double *)((char *)d-bave%addr  + -8ll))->bave[].rns7.[(long long) .ibeg->ibeg + $$CIV1] =  5.0000000000000000E-001 * (((double *)((char *)d-b1%addr  + d-b1%rvo))->b1[].rns8.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIV1] + ((double *)((char *)d-b1%addr  + d-b1%rvo))->b1[].rns8.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIV1]); with non-vectorizable strides.
1586-540 (I) Loop (loop index 2) at lorentz_1D.f90 <line 168> was not SIMD vectorized because it contains memory references ((double *)((char *)d-valm%addr  + -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + $$CIV1] = abs(((double *)((char *)d-bave%addr  + -8ll))->bave[].rns7.[(long long) .ibeg->ibeg + $$CIV1]) * ( 1.0000000000000000E+000 / ((double *)((char *)d-srd2%addr  + d-srd2%rvo))->srd2[].rns2.[(long long) ks][(long long) js][($$CIV1 + (long long) .ibeg->ibeg) - 1ll]); with non-vectorizable strides.
1586-536 (I) Loop (loop index 2) at lorentz_1D.f90 <line 171> was not SIMD vectorized because it contains memory references ((char *)d-srdpi%addr  + -8ll + (8ll)*((long long) .ibeg->ibeg + $$CIV1)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 2) at lorentz_1D.f90 <line 171> was not SIMD vectorized because it contains operation in  1.0000000000000000E+000 / ((double *)((char *)d-srd2%addr  + d-srd2%rvo))->srd2[].rns2.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIV1] which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 2) at lorentz_1D.f90 <line 171> was not SIMD vectorized because it contains memory references ((char *)d-srd2%addr  + d-srd2%rvo + (d-srd2%bounds%mult[].off152)*((long long) ks) + (d-srd2%bounds%mult[].off176)*((long long) js) + (d-srd2%bounds%mult[].off200)*((long long) .ibeg->ibeg + $$CIV1)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 2) at lorentz_1D.f90 <line 171> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 2) at lorentz_1D.f90 <line 173> was not SIMD vectorized because it contains memory references ((char *)d-valp%addr  + -8ll + (8ll)*((long long) .ibeg->ibeg + $$CIV1)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 2) at lorentz_1D.f90 <line 173> was not SIMD vectorized because it contains operation in - (abs(((double *)((char *)d-bave%addr  + -8ll))->bave[].rns7.[(long long) .ibeg->ibeg + $$CIV1]) * ( 1.0000000000000000E+000 / ((double *)((char *)d-srd2%addr  + d-srd2%rvo))->srd2[].rns2.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIV1])) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 2) at lorentz_1D.f90 <line 173> was not SIMD vectorized because it contains memory references ((char *)d-srd2%addr  + d-srd2%rvo + (d-srd2%bounds%mult[].off152)*((long long) ks) + (d-srd2%bounds%mult[].off176)*((long long) js) + (d-srd2%bounds%mult[].off200)*((long long) .ibeg->ibeg + $$CIV1)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 2) at lorentz_1D.f90 <line 173> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 2) at lorentz_1D.f90 <line 172> was not SIMD vectorized because it contains memory references ((char *)d-srdmi%addr  + -8ll + (8ll)*((long long) .ibeg->ibeg + $$CIV1)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 2) at lorentz_1D.f90 <line 172> was not SIMD vectorized because it contains operation in  1.0000000000000000E+000 / ((double *)((char *)d-srd2%addr  + d-srd2%rvo))->srd2[].rns2.[(long long) ks][(long long) js][($$CIV1 + (long long) .ibeg->ibeg) - 1ll] which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 2) at lorentz_1D.f90 <line 172> was not SIMD vectorized because it contains memory references ((char *)d-srd2%addr  + d-srd2%rvo + (d-srd2%bounds%mult[].off152)*((long long) ks) + (d-srd2%bounds%mult[].off176)*((long long) js) + (d-srd2%bounds%mult[].off200)*(($$CIV1 + (long long) .ibeg->ibeg) - 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 2) at lorentz_1D.f90 <line 172> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 2) at lorentz_1D.f90 <line 169> was not SIMD vectorized because it contains memory references ((char *)d-bave%addr  + -8ll + (8ll)*((long long) .ibeg->ibeg + $$CIV1)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 2) at lorentz_1D.f90 <line 169> was not SIMD vectorized because it contains operation in  5.0000000000000000E-001 * (((double *)((char *)d-b1%addr  + d-b1%rvo))->b1[].rns8.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIV1] + ((double *)((char *)d-b1%addr  + d-b1%rvo))->b1[].rns8.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIV1]) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 2) at lorentz_1D.f90 <line 169> was not SIMD vectorized because it contains memory references ((char *)d-b1%addr  + d-b1%rvo + (d-b1%bounds%mult[].off776)*((long long) ks) + (d-b1%bounds%mult[].off800)*((long long) js) + (d-b1%bounds%mult[].off824)*((long long) .ibeg->ibeg + $$CIV1)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 2) at lorentz_1D.f90 <line 169> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 2) at lorentz_1D.f90 <line 174> was not SIMD vectorized because it contains memory references ((char *)d-valm%addr  + -8ll + (8ll)*((long long) .ibeg->ibeg + $$CIV1)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 2) at lorentz_1D.f90 <line 174> was not SIMD vectorized because it contains operation in abs(((double *)((char *)d-bave%addr  + -8ll))->bave[].rns7.[(long long) .ibeg->ibeg + $$CIV1]) * ( 1.0000000000000000E+000 / ((double *)((char *)d-srd2%addr  + d-srd2%rvo))->srd2[].rns2.[(long long) ks][(long long) js][($$CIV1 + (long long) .ibeg->ibeg) - 1ll]) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 2) at lorentz_1D.f90 <line 174> was not SIMD vectorized because it contains memory references ((char *)d-srd2%addr  + d-srd2%rvo + (d-srd2%bounds%mult[].off152)*((long long) ks) + (d-srd2%bounds%mult[].off176)*((long long) js) + (d-srd2%bounds%mult[].off200)*(($$CIV1 + (long long) .ibeg->ibeg) - 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 2) at lorentz_1D.f90 <line 174> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-540 (I) Loop (loop index 3) at lorentz_1D.f90 <line 180> was not SIMD vectorized because it contains memory references ((double *)((char *)d-btmp%addr  + -8ll))->btmp[].rns15.[($$CIV2 + (long long) .ibeg->ibeg) - 2ll] = ((double *)((char *)d-b2%addr  + d-b2%rvo))->b2[].rns16.[(long long) ks][(long long) js][($$CIV2 + (long long) .ibeg->ibeg) - 2ll]; with non-vectorizable strides.
1586-537 (I) Loop (loop index 3) at lorentz_1D.f90 <line 181> was not SIMD vectorized because it contains operation in ((double *)((char *).u2  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->u2[][(long long) ks][(long long) js][($$CIV2 + (long long) .ibeg->ibeg) - 2ll] - ((double *)((char *)d-vg2%addr  + d-vg2%rvo))->vg2[].rns14.[(long long) js] which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 3) at lorentz_1D.f90 <line 181> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 3) at lorentz_1D.f90 <line 182> was not SIMD vectorized because it contains memory references ((char *)d-btmp%addr  + -8ll + (8ll)*(($$CIV2 + (long long) .ibeg->ibeg) - 2ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 3) at lorentz_1D.f90 <line 182> was not SIMD vectorized because it contains memory references ((char *)d-b2%addr  + d-b2%rvo + (d-b2%bounds%mult[].off880)*((long long) ks) + (d-b2%bounds%mult[].off904)*((long long) js) + (d-b2%bounds%mult[].off928)*(($$CIV2 + (long long) .ibeg->ibeg) - 2ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 3) at lorentz_1D.f90 <line 182> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 4) at lorentz_1D.f90 <line 196> was not SIMD vectorized because it contains memory references ((char *)d-dx1bi%addr  + d-dx1bi%rvo + (8ll)*(($$CIV3 + (long long) .ibeg->ibeg) - 1ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 4) at lorentz_1D.f90 <line 196> was not SIMD vectorized because it contains operation in (((double *)((char *)d-btmp%addr  + -8ll))->btmp[].rns15.[($$CIV3 + (long long) .ibeg->ibeg) - 1ll] - ((double *)((char *)d-btmp%addr  + -8ll))->btmp[].rns15.[($$CIV3 + (long long) .ibeg->ibeg) - 2ll]) * ((double *)((char *)d-dx1bi%addr  + d-dx1bi%rvo))->dx1bi[].rns17.[($$CIV3 + (long long) .ibeg->ibeg) - 1ll] which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 4) at lorentz_1D.f90 <line 196> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 4) at lorentz_1D.f90 <line 191> was not SIMD vectorized because it contains memory references ((char *)d-dx1bi%addr  + d-dx1bi%rvo + (8ll)*(($$CIV3 + (long long) .ibeg->ibeg) - 1ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 4) at lorentz_1D.f90 <line 191> was not SIMD vectorized because it contains operation in (((double *)((char *)d-vtmp%addr  + -8ll))->vtmp[].rns13.[($$CIV3 + (long long) .ibeg->ibeg) - 1ll] - ((double *)((char *)d-vtmp%addr  + -8ll))->vtmp[].rns13.[($$CIV3 + (long long) .ibeg->ibeg) - 2ll]) * ((double *)((char *)d-dx1bi%addr  + d-dx1bi%rvo))->dx1bi[].rns17.[($$CIV3 + (long long) .ibeg->ibeg) - 1ll] which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 4) at lorentz_1D.f90 <line 191> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-537 (I) Loop (loop index 4) at lorentz_1D.f90 <line 193> was not SIMD vectorized because it contains operation in (max(dqm.rnnC * dqp.rnn9, 0.0000000000000000E+000) * $$RET0) / max(abs(dqm.rnnC + dqp.rnn9), 1.0000000000000000E-099) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 4) at lorentz_1D.f90 <line 193> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-537 (I) Loop (loop index 4) at lorentz_1D.f90 <line 192> was not SIMD vectorized because it contains operation in dqm.rnnC + dqp.rnn9 which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 4) at lorentz_1D.f90 <line 192> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 4) at lorentz_1D.f90 <line 197> was not SIMD vectorized because it contains memory references ((char *)d-dx1bi%addr  + d-dx1bi%rvo + (8ll)*((long long) .ibeg->ibeg + $$CIV3)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 4) at lorentz_1D.f90 <line 197> was not SIMD vectorized because it contains operation in (((double *)((char *)d-btmp%addr  + -8ll))->btmp[].rns15.[(long long) .ibeg->ibeg + $$CIV3] - ((double *)((char *)d-btmp%addr  + -8ll))->btmp[].rns15.[($$CIV3 + (long long) .ibeg->ibeg) - 1ll]) * ((double *)((char *)d-dx1bi%addr  + d-dx1bi%rvo))->dx1bi[].rns17.[(long long) .ibeg->ibeg + $$CIV3] which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 4) at lorentz_1D.f90 <line 197> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-537 (I) Loop (loop index 4) at lorentz_1D.f90 <line 198> was not SIMD vectorized because it contains operation in (max(dqm * dqp, 0.0000000000000000E+000) * $$RET1) / max(abs(dqm + dqp), 1.0000000000000000E-099) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 4) at lorentz_1D.f90 <line 198> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 4) at lorentz_1D.f90 <line 192> was not SIMD vectorized because it contains memory references ((char *)d-dx1bi%addr  + d-dx1bi%rvo + (8ll)*((long long) .ibeg->ibeg + $$CIV3)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 4) at lorentz_1D.f90 <line 192> was not SIMD vectorized because it contains operation in (((double *)((char *)d-vtmp%addr  + -8ll))->vtmp[].rns13.[(long long) .ibeg->ibeg + $$CIV3] - ((double *)((char *)d-vtmp%addr  + -8ll))->vtmp[].rns13.[($$CIV3 + (long long) .ibeg->ibeg) - 1ll]) * ((double *)((char *)d-dx1bi%addr  + d-dx1bi%rvo))->dx1bi[].rns17.[(long long) .ibeg->ibeg + $$CIV3] which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 4) at lorentz_1D.f90 <line 192> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-537 (I) Loop (loop index 4) at lorentz_1D.f90 <line 197> was not SIMD vectorized because it contains operation in dqm + dqp which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 4) at lorentz_1D.f90 <line 197> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 5) at lorentz_1D.f90 <line 214> was not SIMD vectorized because it contains memory references ((char *)d-vpal%addr  + -8ll + (8ll)*((long long) .ibeg->ibeg + $$CIV4)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 5) at lorentz_1D.f90 <line 214> was not SIMD vectorized because it contains operation in ( 5.0000000000000000E-001 + q3.rnn3) * (qv1 - (((double *)((char *)d-valp%addr  + -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + $$CIV4] * dt) * ((double *)((char *)d-dv%addr  + -8ll))->dv[].rns18.[($$CIV4 + (long long) .ibeg->ibeg) - 1ll]) + ( 5.0000000000000000E-001 - q3.rnn3) * ((((double *)((char *)d-vtmp%addr  + -8ll))->vtmp[].rns13.[(long long) .ibeg->ibeg + $$CIV4] - ((double *)((char *)d-dx1a%addr  + d-dx1a%rvo))->dx1a[].rns20.[(long long) .ibeg->ibeg + $$CIV4] * ((double *)((char *)d-dv%addr  + -8ll))->dv[].rns18.[(long long) .ibeg->ibeg + $$CIV4]) - (((double *)((char *)d-valp%addr  + -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + $$CIV4] * dt) * ((double *)((char *)d-dv%addr  + -8ll))->dv[].rns18.[(long long) .ibeg->ibeg + $$CIV4]) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 5) at lorentz_1D.f90 <line 214> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 5) at lorentz_1D.f90 <line 221> was not SIMD vectorized because it contains memory references ((char *)d-vmal%addr  + -8ll + (8ll)*((long long) .ibeg->ibeg + $$CIV4)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 5) at lorentz_1D.f90 <line 221> was not SIMD vectorized because it contains operation in ( 5.0000000000000000E-001 + q3) * (qv1 - (((double *)((char *)d-valm%addr  + -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + $$CIV4] * dt) * ((double *)((char *)d-dv%addr  + -8ll))->dv[].rns18.[($$CIV4 + (long long) .ibeg->ibeg) - 1ll]) + ( 5.0000000000000000E-001 - q3) * ((((double *)((char *)d-vtmp%addr  + -8ll))->vtmp[].rns13.[(long long) .ibeg->ibeg + $$CIV4] - ((double *)((char *)d-dx1a%addr  + d-dx1a%rvo))->dx1a[].rns20.[(long long) .ibeg->ibeg + $$CIV4] * ((double *)((char *)d-dv%addr  + -8ll))->dv[].rns18.[(long long) .ibeg->ibeg + $$CIV4]) - (((double *)((char *)d-valm%addr  + -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + $$CIV4] * dt) * ((double *)((char *)d-dv%addr  + -8ll))->dv[].rns18.[(long long) .ibeg->ibeg + $$CIV4]) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 5) at lorentz_1D.f90 <line 221> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-537 (I) Loop (loop index 5) at lorentz_1D.f90 <line 220> was not SIMD vectorized because it contains operation in ((double *)((char *)d-valm%addr  + -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + $$CIV4] * dt which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 5) at lorentz_1D.f90 <line 220> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 5) at lorentz_1D.f90 <line 207> was not SIMD vectorized because it contains memory references ((char *)d-dx1a%addr  + d-dx1a%rvo + (8ll)*(($$CIV4 + (long long) .ibeg->ibeg) - 1ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 5) at lorentz_1D.f90 <line 207> was not SIMD vectorized because it contains operation in ((double *)((char *)d-vtmp%addr  + -8ll))->vtmp[].rns13.[($$CIV4 + (long long) .ibeg->ibeg) - 1ll] + ((double *)((char *)d-dx1a%addr  + d-dx1a%rvo))->dx1a[].rns20.[($$CIV4 + (long long) .ibeg->ibeg) - 1ll] * ((double *)((char *)d-dv%addr  + -8ll))->dv[].rns18.[($$CIV4 + (long long) .ibeg->ibeg) - 1ll] which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 5) at lorentz_1D.f90 <line 207> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 5) at lorentz_1D.f90 <line 216> was not SIMD vectorized because it contains memory references ((char *)d-bpal%addr  + -8ll + (8ll)*((long long) .ibeg->ibeg + $$CIV4)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 5) at lorentz_1D.f90 <line 216> was not SIMD vectorized because it contains operation in ( 5.0000000000000000E-001 + q3.rnn3) * (qb1 - (((double *)((char *)d-valp%addr  + -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + $$CIV4] * dt) * ((double *)((char *)d-db%addr  + -8ll))->db[].rns19.[($$CIV4 + (long long) .ibeg->ibeg) - 1ll]) + ( 5.0000000000000000E-001 - q3.rnn3) * ((((double *)((char *)d-btmp%addr  + -8ll))->btmp[].rns15.[(long long) .ibeg->ibeg + $$CIV4] - ((double *)((char *)d-dx1a%addr  + d-dx1a%rvo))->dx1a[].rns20.[(long long) .ibeg->ibeg + $$CIV4] * ((double *)((char *)d-db%addr  + -8ll))->db[].rns19.[(long long) .ibeg->ibeg + $$CIV4]) - (((double *)((char *)d-valp%addr  + -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + $$CIV4] * dt) * ((double *)((char *)d-db%addr  + -8ll))->db[].rns19.[(long long) .ibeg->ibeg + $$CIV4]) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 5) at lorentz_1D.f90 <line 216> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 5) at lorentz_1D.f90 <line 209> was not SIMD vectorized because it contains memory references ((char *)d-dx1a%addr  + d-dx1a%rvo + (8ll)*(($$CIV4 + (long long) .ibeg->ibeg) - 1ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 5) at lorentz_1D.f90 <line 209> was not SIMD vectorized because it contains operation in ((double *)((char *)d-btmp%addr  + -8ll))->btmp[].rns15.[($$CIV4 + (long long) .ibeg->ibeg) - 1ll] + ((double *)((char *)d-dx1a%addr  + d-dx1a%rvo))->dx1a[].rns20.[($$CIV4 + (long long) .ibeg->ibeg) - 1ll] * ((double *)((char *)d-db%addr  + -8ll))->db[].rns19.[($$CIV4 + (long long) .ibeg->ibeg) - 1ll] which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 5) at lorentz_1D.f90 <line 209> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 5) at lorentz_1D.f90 <line 223> was not SIMD vectorized because it contains memory references ((char *)d-bmal%addr  + -8ll + (8ll)*((long long) .ibeg->ibeg + $$CIV4)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 5) at lorentz_1D.f90 <line 223> was not SIMD vectorized because it contains operation in ( 5.0000000000000000E-001 + q3) * (qb1 - (((double *)((char *)d-valm%addr  + -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + $$CIV4] * dt) * ((double *)((char *)d-db%addr  + -8ll))->db[].rns19.[($$CIV4 + (long long) .ibeg->ibeg) - 1ll]) + ( 5.0000000000000000E-001 - q3) * ((((double *)((char *)d-btmp%addr  + -8ll))->btmp[].rns15.[(long long) .ibeg->ibeg + $$CIV4] - ((double *)((char *)d-dx1a%addr  + d-dx1a%rvo))->dx1a[].rns20.[(long long) .ibeg->ibeg + $$CIV4] * ((double *)((char *)d-db%addr  + -8ll))->db[].rns19.[(long long) .ibeg->ibeg + $$CIV4]) - (((double *)((char *)d-valm%addr  + -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + $$CIV4] * dt) * ((double *)((char *)d-db%addr  + -8ll))->db[].rns19.[(long long) .ibeg->ibeg + $$CIV4]) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 5) at lorentz_1D.f90 <line 223> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-537 (I) Loop (loop index 5) at lorentz_1D.f90 <line 213> was not SIMD vectorized because it contains operation in ((double *)((char *)d-valp%addr  + -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + $$CIV4] * dt which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 5) at lorentz_1D.f90 <line 213> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 6) at lorentz_1D.f90 <line 231> was not SIMD vectorized because it contains memory references ((char *)d-bstar%addr  + -8ll + (8ll)*((long long) .ibeg->ibeg + $$CIV5)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 6) at lorentz_1D.f90 <line 231> was not SIMD vectorized because it contains operation in (((((double *)((char *)d-bpal%addr  + -8ll))->bpal[].rns22.[(long long) .ibeg->ibeg + $$CIV5] * ((double *)((char *)d-srdpi%addr  + -8ll))->srdpi[].rns9.[(long long) .ibeg->ibeg + $$CIV5] + ((double *)((char *)d-bmal%addr  + -8ll))->bmal[].rns24.[(long long) .ibeg->ibeg + $$CIV5] * ((double *)((char *)d-srdmi%addr  + -8ll))->srdmi[].rns10.[(long long) .ibeg->ibeg + $$CIV5]) + q1 * (((double *)((char *)d-vpal%addr  + -8ll))->vpal[].rns21.[(long long) .ibeg->ibeg + $$CIV5] - ((double *)((char *)d-vmal%addr  + -8ll))->vmal[].rns23.[(long long) .ibeg->ibeg + $$CIV5])) * ((double *)((char *)d-g2a%addr  + d-g2a%rvo))->g2a[].rns26.[(long long) .ibeg->ibeg + $$CIV5]) / (((double *)((char *)d-srdpi%addr  + -8ll))->srdpi[].rns9.[(long long) .ibeg->ibeg + $$CIV5] + ((double *)((char *)d-srdmi%addr  + -8ll))->srdmi[].rns10.[(long long) .ibeg->ibeg + $$CIV5]) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 6) at lorentz_1D.f90 <line 231> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-554 (I) Loop (loop index 6) at lorentz_1D.f90 <line 230> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-550 (I) Loop (loop index 7) at lorentz_1D.f90 <line 239> was not SIMD vectorized because it is not profitable to vectorize.
1586-536 (I) Loop (loop index 7) at lorentz_1D.f90 <line 240> was not SIMD vectorized because it contains memory references ((char *)d-st2%addr  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll))) + (8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))*((long long) ks) + (max((long long) in,0ll) * 8ll)*((long long) js) + (8ll)*((long long) .ibeg->ibeg + $$CIV6)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 7) at lorentz_1D.f90 <line 240> was not SIMD vectorized because it contains operation in ((double *)((char *)d-st2%addr  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->st2[].rns5.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIV6] + (((((double *)((char *)d-bave%addr  + -8ll))->bave[].rns7.[1ll + ($$CIV6 + (long long) .ibeg->ibeg)] + ((double *)((char *)d-bave%addr  + -8ll))->bave[].rns7.[(long long) .ibeg->ibeg + $$CIV6]) * ((double *)((char *)d-g2bi%addr  + d-g2bi%rvo))->g2bi[].rns28.[(long long) .ibeg->ibeg + $$CIV6]) * (((double *)((char *)d-bstar%addr  + -8ll))->bstar[].rns25.[1ll + ($$CIV6 + (long long) .ibeg->ibeg)] - ((double *)((char *)d-bstar%addr  + -8ll))->bstar[].rns25.[(long long) .ibeg->ibeg + $$CIV6])) * ((double *)((char *)d-dx1ai%addr  + d-dx1ai%rvo))->dx1ai[].rns27.[(long long) .ibeg->ibeg + $$CIV6] which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 7) at lorentz_1D.f90 <line 240> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-540 (I) Loop (loop index 8) at lorentz_1D.f90 <line 260> was not SIMD vectorized because it contains memory references ((double *)((char *)d-srdmi%addr  + -8ll))->srdmi[].rns10.[(long long) .ibeg->ibeg + $$CIV7] =  1.0000000000000000E+000 / ((double *)((char *)d-srd3%addr  + d-srd3%rvo))->srd3[].rns3.[(long long) ks][(long long) js][($$CIV7 + (long long) .ibeg->ibeg) - 1ll]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 8) at lorentz_1D.f90 <line 260> was not SIMD vectorized because it contains memory references ((double *)((char *)d-srdpi%addr  + -8ll))->srdpi[].rns9.[(long long) .ibeg->ibeg + $$CIV7] =  1.0000000000000000E+000 / ((double *)((char *)d-srd3%addr  + d-srd3%rvo))->srd3[].rns3.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIV7]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 8) at lorentz_1D.f90 <line 260> was not SIMD vectorized because it contains memory references ((double *)((char *)d-valp%addr  + -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + $$CIV7] = - (abs(((double *)((char *)d-bave%addr  + -8ll))->bave[].rns7.[(long long) .ibeg->ibeg + $$CIV7]) * ( 1.0000000000000000E+000 / ((double *)((char *)d-srd3%addr  + d-srd3%rvo))->srd3[].rns3.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIV7])); with non-vectorizable strides.
1586-540 (I) Loop (loop index 8) at lorentz_1D.f90 <line 260> was not SIMD vectorized because it contains memory references ((double *)((char *)d-bave%addr  + -8ll))->bave[].rns7.[(long long) .ibeg->ibeg + $$CIV7] =  5.0000000000000000E-001 * (((double *)((char *)d-b1%addr  + d-b1%rvo))->b1[].rns8.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIV7] + ((double *)((char *)d-b1%addr  + d-b1%rvo))->b1[].rns8.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIV7]); with non-vectorizable strides.
1586-540 (I) Loop (loop index 8) at lorentz_1D.f90 <line 260> was not SIMD vectorized because it contains memory references ((double *)((char *)d-valm%addr  + -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + $$CIV7] = abs(((double *)((char *)d-bave%addr  + -8ll))->bave[].rns7.[(long long) .ibeg->ibeg + $$CIV7]) * ( 1.0000000000000000E+000 / ((double *)((char *)d-srd3%addr  + d-srd3%rvo))->srd3[].rns3.[(long long) ks][(long long) js][($$CIV7 + (long long) .ibeg->ibeg) - 1ll]); with non-vectorizable strides.
1586-536 (I) Loop (loop index 8) at lorentz_1D.f90 <line 264> was not SIMD vectorized because it contains memory references ((char *)d-srdmi%addr  + -8ll + (8ll)*((long long) .ibeg->ibeg + $$CIV7)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 8) at lorentz_1D.f90 <line 264> was not SIMD vectorized because it contains operation in  1.0000000000000000E+000 / ((double *)((char *)d-srd3%addr  + d-srd3%rvo))->srd3[].rns3.[(long long) ks][(long long) js][($$CIV7 + (long long) .ibeg->ibeg) - 1ll] which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 8) at lorentz_1D.f90 <line 264> was not SIMD vectorized because it contains memory references ((char *)d-srd3%addr  + d-srd3%rvo + (d-srd3%bounds%mult[].off256)*((long long) ks) + (d-srd3%bounds%mult[].off280)*((long long) js) + (d-srd3%bounds%mult[].off304)*(($$CIV7 + (long long) .ibeg->ibeg) - 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 8) at lorentz_1D.f90 <line 264> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 8) at lorentz_1D.f90 <line 263> was not SIMD vectorized because it contains memory references ((char *)d-srdpi%addr  + -8ll + (8ll)*((long long) .ibeg->ibeg + $$CIV7)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 8) at lorentz_1D.f90 <line 263> was not SIMD vectorized because it contains operation in  1.0000000000000000E+000 / ((double *)((char *)d-srd3%addr  + d-srd3%rvo))->srd3[].rns3.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIV7] which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 8) at lorentz_1D.f90 <line 263> was not SIMD vectorized because it contains memory references ((char *)d-srd3%addr  + d-srd3%rvo + (d-srd3%bounds%mult[].off256)*((long long) ks) + (d-srd3%bounds%mult[].off280)*((long long) js) + (d-srd3%bounds%mult[].off304)*((long long) .ibeg->ibeg + $$CIV7)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 8) at lorentz_1D.f90 <line 263> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 8) at lorentz_1D.f90 <line 265> was not SIMD vectorized because it contains memory references ((char *)d-valp%addr  + -8ll + (8ll)*((long long) .ibeg->ibeg + $$CIV7)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 8) at lorentz_1D.f90 <line 265> was not SIMD vectorized because it contains operation in - (abs(((double *)((char *)d-bave%addr  + -8ll))->bave[].rns7.[(long long) .ibeg->ibeg + $$CIV7]) * ( 1.0000000000000000E+000 / ((double *)((char *)d-srd3%addr  + d-srd3%rvo))->srd3[].rns3.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIV7])) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 8) at lorentz_1D.f90 <line 265> was not SIMD vectorized because it contains memory references ((char *)d-srd3%addr  + d-srd3%rvo + (d-srd3%bounds%mult[].off256)*((long long) ks) + (d-srd3%bounds%mult[].off280)*((long long) js) + (d-srd3%bounds%mult[].off304)*((long long) .ibeg->ibeg + $$CIV7)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 8) at lorentz_1D.f90 <line 265> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 8) at lorentz_1D.f90 <line 261> was not SIMD vectorized because it contains memory references ((char *)d-bave%addr  + -8ll + (8ll)*((long long) .ibeg->ibeg + $$CIV7)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 8) at lorentz_1D.f90 <line 261> was not SIMD vectorized because it contains operation in  5.0000000000000000E-001 * (((double *)((char *)d-b1%addr  + d-b1%rvo))->b1[].rns8.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIV7] + ((double *)((char *)d-b1%addr  + d-b1%rvo))->b1[].rns8.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIV7]) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 8) at lorentz_1D.f90 <line 261> was not SIMD vectorized because it contains memory references ((char *)d-b1%addr  + d-b1%rvo + (d-b1%bounds%mult[].off776)*((long long) ks) + (d-b1%bounds%mult[].off800)*((long long) js) + (d-b1%bounds%mult[].off824)*((long long) .ibeg->ibeg + $$CIV7)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 8) at lorentz_1D.f90 <line 261> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 8) at lorentz_1D.f90 <line 266> was not SIMD vectorized because it contains memory references ((char *)d-valm%addr  + -8ll + (8ll)*((long long) .ibeg->ibeg + $$CIV7)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 8) at lorentz_1D.f90 <line 266> was not SIMD vectorized because it contains operation in abs(((double *)((char *)d-bave%addr  + -8ll))->bave[].rns7.[(long long) .ibeg->ibeg + $$CIV7]) * ( 1.0000000000000000E+000 / ((double *)((char *)d-srd3%addr  + d-srd3%rvo))->srd3[].rns3.[(long long) ks][(long long) js][($$CIV7 + (long long) .ibeg->ibeg) - 1ll]) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 8) at lorentz_1D.f90 <line 266> was not SIMD vectorized because it contains memory references ((char *)d-srd3%addr  + d-srd3%rvo + (d-srd3%bounds%mult[].off256)*((long long) ks) + (d-srd3%bounds%mult[].off280)*((long long) js) + (d-srd3%bounds%mult[].off304)*(($$CIV7 + (long long) .ibeg->ibeg) - 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 8) at lorentz_1D.f90 <line 266> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-540 (I) Loop (loop index 9) at lorentz_1D.f90 <line 272> was not SIMD vectorized because it contains memory references ((double *)((char *)d-btmp%addr  + -8ll))->btmp[].rns15.[($$CIV8 + (long long) .ibeg->ibeg) - 2ll] = ((double *)((char *)d-b3%addr  + d-b3%rvo))->b3[].rns30.[(long long) ks][(long long) js][($$CIV8 + (long long) .ibeg->ibeg) - 2ll]; with non-vectorizable strides.
1586-537 (I) Loop (loop index 9) at lorentz_1D.f90 <line 273> was not SIMD vectorized because it contains operation in ((double *)((char *).u3  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->u3[][(long long) ks][(long long) js][($$CIV8 + (long long) .ibeg->ibeg) - 2ll] - ((double *)((char *)d-vg3%addr  + d-vg3%rvo))->vg3[].rns29.[(long long) ks] which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 9) at lorentz_1D.f90 <line 273> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 9) at lorentz_1D.f90 <line 274> was not SIMD vectorized because it contains memory references ((char *)d-btmp%addr  + -8ll + (8ll)*(($$CIV8 + (long long) .ibeg->ibeg) - 2ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 9) at lorentz_1D.f90 <line 274> was not SIMD vectorized because it contains memory references ((char *)d-b3%addr  + d-b3%rvo + (d-b3%bounds%mult[].off984)*((long long) ks) + (d-b3%bounds%mult[].off1008)*((long long) js) + (d-b3%bounds%mult[].off1032)*(($$CIV8 + (long long) .ibeg->ibeg) - 2ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 9) at lorentz_1D.f90 <line 274> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-537 (I) Loop (loop index 10) at lorentz_1D.f90 <line 291> was not SIMD vectorized because it contains operation in (max(dqm.rnnB * dqp.rnn8, 0.0000000000000000E+000) * $$RET3) / max(abs(dqm.rnnB + dqp.rnn8), 1.0000000000000000E-099) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 10) at lorentz_1D.f90 <line 291> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-537 (I) Loop (loop index 10) at lorentz_1D.f90 <line 285> was not SIMD vectorized because it contains operation in dqm.rnnA + dqp.rnn7 which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 10) at lorentz_1D.f90 <line 285> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 10) at lorentz_1D.f90 <line 289> was not SIMD vectorized because it contains memory references ((char *)d-dx1bi%addr  + d-dx1bi%rvo + (8ll)*(($$CIV9 + (long long) .ibeg->ibeg) - 1ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 10) at lorentz_1D.f90 <line 289> was not SIMD vectorized because it contains operation in (((double *)((char *)d-btmp%addr  + -8ll))->btmp[].rns15.[($$CIV9 + (long long) .ibeg->ibeg) - 1ll] - ((double *)((char *)d-btmp%addr  + -8ll))->btmp[].rns15.[($$CIV9 + (long long) .ibeg->ibeg) - 2ll]) * ((double *)((char *)d-dx1bi%addr  + d-dx1bi%rvo))->dx1bi[].rns17.[($$CIV9 + (long long) .ibeg->ibeg) - 1ll] which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 10) at lorentz_1D.f90 <line 289> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-537 (I) Loop (loop index 10) at lorentz_1D.f90 <line 290> was not SIMD vectorized because it contains operation in dqm.rnnB + dqp.rnn8 which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 10) at lorentz_1D.f90 <line 290> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-537 (I) Loop (loop index 10) at lorentz_1D.f90 <line 286> was not SIMD vectorized because it contains operation in (max(dqm.rnnA * dqp.rnn7, 0.0000000000000000E+000) * $$RET2) / max(abs(dqm.rnnA + dqp.rnn7), 1.0000000000000000E-099) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 10) at lorentz_1D.f90 <line 286> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 10) at lorentz_1D.f90 <line 285> was not SIMD vectorized because it contains memory references ((char *)d-dx1bi%addr  + d-dx1bi%rvo + (8ll)*((long long) .ibeg->ibeg + $$CIV9)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 10) at lorentz_1D.f90 <line 285> was not SIMD vectorized because it contains operation in (((double *)((char *)d-vtmp%addr  + -8ll))->vtmp[].rns13.[(long long) .ibeg->ibeg + $$CIV9] - ((double *)((char *)d-vtmp%addr  + -8ll))->vtmp[].rns13.[($$CIV9 + (long long) .ibeg->ibeg) - 1ll]) * ((double *)((char *)d-dx1bi%addr  + d-dx1bi%rvo))->dx1bi[].rns17.[(long long) .ibeg->ibeg + $$CIV9] which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 10) at lorentz_1D.f90 <line 285> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 10) at lorentz_1D.f90 <line 284> was not SIMD vectorized because it contains memory references ((char *)d-dx1bi%addr  + d-dx1bi%rvo + (8ll)*(($$CIV9 + (long long) .ibeg->ibeg) - 1ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 10) at lorentz_1D.f90 <line 284> was not SIMD vectorized because it contains operation in (((double *)((char *)d-vtmp%addr  + -8ll))->vtmp[].rns13.[($$CIV9 + (long long) .ibeg->ibeg) - 1ll] - ((double *)((char *)d-vtmp%addr  + -8ll))->vtmp[].rns13.[($$CIV9 + (long long) .ibeg->ibeg) - 2ll]) * ((double *)((char *)d-dx1bi%addr  + d-dx1bi%rvo))->dx1bi[].rns17.[($$CIV9 + (long long) .ibeg->ibeg) - 1ll] which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 10) at lorentz_1D.f90 <line 284> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 10) at lorentz_1D.f90 <line 290> was not SIMD vectorized because it contains memory references ((char *)d-dx1bi%addr  + d-dx1bi%rvo + (8ll)*((long long) .ibeg->ibeg + $$CIV9)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 10) at lorentz_1D.f90 <line 290> was not SIMD vectorized because it contains operation in (((double *)((char *)d-btmp%addr  + -8ll))->btmp[].rns15.[(long long) .ibeg->ibeg + $$CIV9] - ((double *)((char *)d-btmp%addr  + -8ll))->btmp[].rns15.[($$CIV9 + (long long) .ibeg->ibeg) - 1ll]) * ((double *)((char *)d-dx1bi%addr  + d-dx1bi%rvo))->dx1bi[].rns17.[(long long) .ibeg->ibeg + $$CIV9] which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 10) at lorentz_1D.f90 <line 290> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 11) at lorentz_1D.f90 <line 307> was not SIMD vectorized because it contains memory references ((char *)d-vpal%addr  + -8ll + (8ll)*((long long) .ibeg->ibeg + $$CIVA)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 11) at lorentz_1D.f90 <line 307> was not SIMD vectorized because it contains operation in ( 5.0000000000000000E-001 + q3.rnn1) * (qv1.rnn2C - (((double *)((char *)d-valp%addr  + -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + $$CIVA] * dt) * ((double *)((char *)d-dv%addr  + -8ll))->dv[].rns18.[($$CIVA + (long long) .ibeg->ibeg) - 1ll]) + ( 5.0000000000000000E-001 - q3.rnn1) * ((((double *)((char *)d-vtmp%addr  + -8ll))->vtmp[].rns13.[(long long) .ibeg->ibeg + $$CIVA] - ((double *)((char *)d-dx1a%addr  + d-dx1a%rvo))->dx1a[].rns20.[(long long) .ibeg->ibeg + $$CIVA] * ((double *)((char *)d-dv%addr  + -8ll))->dv[].rns18.[(long long) .ibeg->ibeg + $$CIVA]) - (((double *)((char *)d-valp%addr  + -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + $$CIVA] * dt) * ((double *)((char *)d-dv%addr  + -8ll))->dv[].rns18.[(long long) .ibeg->ibeg + $$CIVA]) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 11) at lorentz_1D.f90 <line 307> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 11) at lorentz_1D.f90 <line 314> was not SIMD vectorized because it contains memory references ((char *)d-vmal%addr  + -8ll + (8ll)*((long long) .ibeg->ibeg + $$CIVA)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 11) at lorentz_1D.f90 <line 314> was not SIMD vectorized because it contains operation in ( 5.0000000000000000E-001 + q3.rnn2) * (qv1.rnn2C - (((double *)((char *)d-valm%addr  + -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + $$CIVA] * dt) * ((double *)((char *)d-dv%addr  + -8ll))->dv[].rns18.[($$CIVA + (long long) .ibeg->ibeg) - 1ll]) + ( 5.0000000000000000E-001 - q3.rnn2) * ((((double *)((char *)d-vtmp%addr  + -8ll))->vtmp[].rns13.[(long long) .ibeg->ibeg + $$CIVA] - ((double *)((char *)d-dx1a%addr  + d-dx1a%rvo))->dx1a[].rns20.[(long long) .ibeg->ibeg + $$CIVA] * ((double *)((char *)d-dv%addr  + -8ll))->dv[].rns18.[(long long) .ibeg->ibeg + $$CIVA]) - (((double *)((char *)d-valm%addr  + -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + $$CIVA] * dt) * ((double *)((char *)d-dv%addr  + -8ll))->dv[].rns18.[(long long) .ibeg->ibeg + $$CIVA]) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 11) at lorentz_1D.f90 <line 314> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 11) at lorentz_1D.f90 <line 300> was not SIMD vectorized because it contains memory references ((char *)d-dx1a%addr  + d-dx1a%rvo + (8ll)*(($$CIVA + (long long) .ibeg->ibeg) - 1ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 11) at lorentz_1D.f90 <line 300> was not SIMD vectorized because it contains operation in ((double *)((char *)d-vtmp%addr  + -8ll))->vtmp[].rns13.[($$CIVA + (long long) .ibeg->ibeg) - 1ll] + ((double *)((char *)d-dx1a%addr  + d-dx1a%rvo))->dx1a[].rns20.[($$CIVA + (long long) .ibeg->ibeg) - 1ll] * ((double *)((char *)d-dv%addr  + -8ll))->dv[].rns18.[($$CIVA + (long long) .ibeg->ibeg) - 1ll] which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 11) at lorentz_1D.f90 <line 300> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 11) at lorentz_1D.f90 <line 316> was not SIMD vectorized because it contains memory references ((char *)d-bmal%addr  + -8ll + (8ll)*((long long) .ibeg->ibeg + $$CIVA)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 11) at lorentz_1D.f90 <line 316> was not SIMD vectorized because it contains operation in ( 5.0000000000000000E-001 + q3.rnn2) * (qb1.rnn2A - (((double *)((char *)d-valm%addr  + -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + $$CIVA] * dt) * ((double *)((char *)d-db%addr  + -8ll))->db[].rns19.[($$CIVA + (long long) .ibeg->ibeg) - 1ll]) + ( 5.0000000000000000E-001 - q3.rnn2) * ((((double *)((char *)d-btmp%addr  + -8ll))->btmp[].rns15.[(long long) .ibeg->ibeg + $$CIVA] - ((double *)((char *)d-dx1a%addr  + d-dx1a%rvo))->dx1a[].rns20.[(long long) .ibeg->ibeg + $$CIVA] * ((double *)((char *)d-db%addr  + -8ll))->db[].rns19.[(long long) .ibeg->ibeg + $$CIVA]) - (((double *)((char *)d-valm%addr  + -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + $$CIVA] * dt) * ((double *)((char *)d-db%addr  + -8ll))->db[].rns19.[(long long) .ibeg->ibeg + $$CIVA]) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 11) at lorentz_1D.f90 <line 316> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 11) at lorentz_1D.f90 <line 302> was not SIMD vectorized because it contains memory references ((char *)d-dx1a%addr  + d-dx1a%rvo + (8ll)*(($$CIVA + (long long) .ibeg->ibeg) - 1ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 11) at lorentz_1D.f90 <line 302> was not SIMD vectorized because it contains operation in ((double *)((char *)d-btmp%addr  + -8ll))->btmp[].rns15.[($$CIVA + (long long) .ibeg->ibeg) - 1ll] + ((double *)((char *)d-dx1a%addr  + d-dx1a%rvo))->dx1a[].rns20.[($$CIVA + (long long) .ibeg->ibeg) - 1ll] * ((double *)((char *)d-db%addr  + -8ll))->db[].rns19.[($$CIVA + (long long) .ibeg->ibeg) - 1ll] which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 11) at lorentz_1D.f90 <line 302> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-537 (I) Loop (loop index 11) at lorentz_1D.f90 <line 306> was not SIMD vectorized because it contains operation in ((double *)((char *)d-valp%addr  + -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + $$CIVA] * dt which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 11) at lorentz_1D.f90 <line 306> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 11) at lorentz_1D.f90 <line 309> was not SIMD vectorized because it contains memory references ((char *)d-bpal%addr  + -8ll + (8ll)*((long long) .ibeg->ibeg + $$CIVA)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 11) at lorentz_1D.f90 <line 309> was not SIMD vectorized because it contains operation in ( 5.0000000000000000E-001 + q3.rnn1) * (qb1.rnn2A - (((double *)((char *)d-valp%addr  + -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + $$CIVA] * dt) * ((double *)((char *)d-db%addr  + -8ll))->db[].rns19.[($$CIVA + (long long) .ibeg->ibeg) - 1ll]) + ( 5.0000000000000000E-001 - q3.rnn1) * ((((double *)((char *)d-btmp%addr  + -8ll))->btmp[].rns15.[(long long) .ibeg->ibeg + $$CIVA] - ((double *)((char *)d-dx1a%addr  + d-dx1a%rvo))->dx1a[].rns20.[(long long) .ibeg->ibeg + $$CIVA] * ((double *)((char *)d-db%addr  + -8ll))->db[].rns19.[(long long) .ibeg->ibeg + $$CIVA]) - (((double *)((char *)d-valp%addr  + -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + $$CIVA] * dt) * ((double *)((char *)d-db%addr  + -8ll))->db[].rns19.[(long long) .ibeg->ibeg + $$CIVA]) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 11) at lorentz_1D.f90 <line 309> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-537 (I) Loop (loop index 11) at lorentz_1D.f90 <line 313> was not SIMD vectorized because it contains operation in ((double *)((char *)d-valm%addr  + -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + $$CIVA] * dt which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 11) at lorentz_1D.f90 <line 313> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-554 (I) Loop (loop index 12) at lorentz_1D.f90 <line 323> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 12) at lorentz_1D.f90 <line 324> was not SIMD vectorized because it contains memory references ((char *)d-bstar%addr  + -8ll + (8ll)*((long long) .ibeg->ibeg + $$CIVB)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 12) at lorentz_1D.f90 <line 324> was not SIMD vectorized because it contains operation in (((((double *)((char *)d-bpal%addr  + -8ll))->bpal[].rns22.[(long long) .ibeg->ibeg + $$CIVB] * ((double *)((char *)d-srdpi%addr  + -8ll))->srdpi[].rns9.[(long long) .ibeg->ibeg + $$CIVB] + ((double *)((char *)d-bmal%addr  + -8ll))->bmal[].rns24.[(long long) .ibeg->ibeg + $$CIVB] * ((double *)((char *)d-srdmi%addr  + -8ll))->srdmi[].rns10.[(long long) .ibeg->ibeg + $$CIVB]) + q1.rnn28 * (((double *)((char *)d-vpal%addr  + -8ll))->vpal[].rns21.[(long long) .ibeg->ibeg + $$CIVB] - ((double *)((char *)d-vmal%addr  + -8ll))->vmal[].rns23.[(long long) .ibeg->ibeg + $$CIVB])) * ((double *)((char *)d-g31a%addr  + d-g31a%rvo))->g31a[].rns31.[(long long) .ibeg->ibeg + $$CIVB]) / (((double *)((char *)d-srdpi%addr  + -8ll))->srdpi[].rns9.[(long long) .ibeg->ibeg + $$CIVB] + ((double *)((char *)d-srdmi%addr  + -8ll))->srdmi[].rns10.[(long long) .ibeg->ibeg + $$CIVB]) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 12) at lorentz_1D.f90 <line 324> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-538 (I) Loop (loop index 13) at lorentz_1D.f90 <line 332> was not SIMD vectorized because it contains unsupported loop structure.
1586-552 (I) Loop (loop index 13) at lorentz_1D.f90 <line 332> was not SIMD vectorized because it contains control flow.
1586-540 (I) Loop (loop index 14) at lorentz_1D.f90 <line 352> was not SIMD vectorized because it contains memory references ((double *)((char *).w2  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->w2[][(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD] = ((double *)((char *).u2  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->u2[][(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD] + (( 5.0000000000000000E-001 * dt) * ((double *)((char *)d-st2%addr  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->st2[].rns5.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD]) / (((double *)((char *)d-srd2%addr  + d-srd2%rvo))->srd2[].rns2.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD] * ((double *)((char *)d-srd2%addr  + d-srd2%rvo))->srd2[].rns2.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD]); with non-vectorizable strides.
1586-540 (I) Loop (loop index 14) at lorentz_1D.f90 <line 352> was not SIMD vectorized because it contains memory references ((double *)((char *).w1  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->w1[][(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD] = ((double *)((char *).u1  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->u1[][(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD] + (( 5.0000000000000000E-001 * dt) * ((double *)((char *)d-st1%addr  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->st1[].rns4.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD]) / (((double *)((char *)d-srd1%addr  + d-srd1%rvo))->srd1[].rns0.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD] * ((double *)((char *)d-srd1%addr  + d-srd1%rvo))->srd1[].rns0.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD]); with non-vectorizable strides.
1586-540 (I) Loop (loop index 14) at lorentz_1D.f90 <line 352> was not SIMD vectorized because it contains memory references ((double *)((char *).w3  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->w3[][(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD] = ((double *)((char *).u3  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->u3[][(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD] + (( 5.0000000000000000E-001 * dt) * ((double *)((char *)d-st3%addr  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->st3[].rns6.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD]) / (((double *)((char *)d-srd3%addr  + d-srd3%rvo))->srd3[].rns3.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD] * ((double *)((char *)d-srd3%addr  + d-srd3%rvo))->srd3[].rns3.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD]); with non-vectorizable strides.
1586-536 (I) Loop (loop index 14) at lorentz_1D.f90 <line 354> was not SIMD vectorized because it contains memory references ((char *).w2  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll))) + (8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))*((long long) ks) + (max((long long) in,0ll) * 8ll)*((long long) js) + (8ll)*((long long) .ibeg->ibeg + $$CIVD)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 14) at lorentz_1D.f90 <line 354> was not SIMD vectorized because it contains operation in ((double *)((char *).u2  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->u2[][(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD] + (( 5.0000000000000000E-001 * dt) * ((double *)((char *)d-st2%addr  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->st2[].rns5.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD]) / (((double *)((char *)d-srd2%addr  + d-srd2%rvo))->srd2[].rns2.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD] * ((double *)((char *)d-srd2%addr  + d-srd2%rvo))->srd2[].rns2.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD]) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 14) at lorentz_1D.f90 <line 354> was not SIMD vectorized because it contains memory references ((char *)d-srd2%addr  + d-srd2%rvo + (d-srd2%bounds%mult[].off152)*((long long) ks) + (d-srd2%bounds%mult[].off176)*((long long) js) + (d-srd2%bounds%mult[].off200)*((long long) .ibeg->ibeg + $$CIVD)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 14) at lorentz_1D.f90 <line 354> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 14) at lorentz_1D.f90 <line 353> was not SIMD vectorized because it contains memory references ((char *).w1  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll))) + (8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))*((long long) ks) + (max((long long) in,0ll) * 8ll)*((long long) js) + (8ll)*((long long) .ibeg->ibeg + $$CIVD)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 14) at lorentz_1D.f90 <line 353> was not SIMD vectorized because it contains operation in ((double *)((char *).u1  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->u1[][(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD] + (( 5.0000000000000000E-001 * dt) * ((double *)((char *)d-st1%addr  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->st1[].rns4.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD]) / (((double *)((char *)d-srd1%addr  + d-srd1%rvo))->srd1[].rns0.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD] * ((double *)((char *)d-srd1%addr  + d-srd1%rvo))->srd1[].rns0.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD]) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 14) at lorentz_1D.f90 <line 353> was not SIMD vectorized because it contains memory references ((char *)d-srd1%addr  + d-srd1%rvo + (d-srd1%bounds%mult[].off48)*((long long) ks) + (d-srd1%bounds%mult[].off72)*((long long) js) + (d-srd1%bounds%mult[].off96)*((long long) .ibeg->ibeg + $$CIVD)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 14) at lorentz_1D.f90 <line 353> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 14) at lorentz_1D.f90 <line 355> was not SIMD vectorized because it contains memory references ((char *).w3  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll))) + (8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))*((long long) ks) + (max((long long) in,0ll) * 8ll)*((long long) js) + (8ll)*((long long) .ibeg->ibeg + $$CIVD)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 14) at lorentz_1D.f90 <line 355> was not SIMD vectorized because it contains operation in ((double *)((char *).u3  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->u3[][(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD] + (( 5.0000000000000000E-001 * dt) * ((double *)((char *)d-st3%addr  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->st3[].rns6.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD]) / (((double *)((char *)d-srd3%addr  + d-srd3%rvo))->srd3[].rns3.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD] * ((double *)((char *)d-srd3%addr  + d-srd3%rvo))->srd3[].rns3.[(long long) ks][(long long) js][(long long) .ibeg->ibeg + $$CIVD]) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 14) at lorentz_1D.f90 <line 355> was not SIMD vectorized because it contains memory references ((char *)d-srd3%addr  + d-srd3%rvo + (d-srd3%bounds%mult[].off256)*((long long) ks) + (d-srd3%bounds%mult[].off280)*((long long) js) + (d-srd3%bounds%mult[].off304)*((long long) .ibeg->ibeg + $$CIVD)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 14) at lorentz_1D.f90 <line 355> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"14">. Total number of the innermost loops SIMD vectorized <"0">.


    11|         SUBROUTINE lorentz_1d (ibeg, iend, jbeg, jend, kbeg, kend, u1, u2, u3, w1, w2, w3)
    11|           d-dv%addr = _alloca((max(int(%VAL(ijkn)),0) * 8))
                  d-db%addr = _alloca((max(int(%VAL(ijkn)),0) * 8))
                  d-bave%addr = _alloca((max(int(%VAL(ijkn)),0) * 8))
                  d-srdpi%addr = _alloca((max(int(%VAL(ijkn)),0) * 8))
                  d-srdmi%addr = _alloca((max(int(%VAL(ijkn)),0) * 8))
                  d-valp%addr = _alloca((max(int(%VAL(ijkn)),0) * 8))
                  d-valm%addr = _alloca((max(int(%VAL(ijkn)),0) * 8))
                  d-vtmp%addr = _alloca((max(int(%VAL(ijkn)),0) * 8))
                  d-btmp%addr = _alloca((max(int(%VAL(ijkn)),0) * 8))
                  d-vpal%addr = _alloca((max(int(%VAL(ijkn)),0) * 8))
                  d-vmal%addr = _alloca((max(int(%VAL(ijkn)),0) * 8))
                  d-bpal%addr = _alloca((max(int(%VAL(ijkn)),0) * 8))
                  d-bmal%addr = _alloca((max(int(%VAL(ijkn)),0) * 8))
                  d-bstar%addr = _alloca((max(int(%VAL(ijkn)),0) * 8))
                  d-st1%addr = _alloca((8 * (max(int(%VAL(kn)),0) * (max(int(&
                &   %VAL(jn)),0) * max(int(%VAL(in)),0)))))
                  d-st2%addr = _alloca((8 * (max(int(%VAL(kn)),0) * (max(int(&
                &   %VAL(jn)),0) * max(int(%VAL(in)),0)))))
                  d-st3%addr = _alloca((8 * (max(int(%VAL(kn)),0) * (max(int(&
                &   %VAL(jn)),0) * max(int(%VAL(in)),0)))))
   144|           IF ((1 + (int((iend + 1)) - int((ibeg - 1))) > 0)) THEN
                    $$CIV0 = 0
                    $$PRC2C = d-d%addr%d(int(ibeg) - 2,int(js),int(ks))
       Id=1         DO $$CIV0 = $$CIV0, int((1 + (int((iend + 1)) - int((ibeg &
                &       - 1)))))-1
                      $$PRC2D = d-d%addr%d((int(ibeg) + $$CIV0) - 1,int(js),int(&
                &       ks))
   145|               d-srd1%addr%srd1(($$CIV0 + int(ibeg)) - 1,int(js),int(ks))&
                &        = _sqrt( 5.0000000000000000E-001 * (%VAL($$PRC2D) + %VAL(&
                &       $$PRC2C)))
   146|               d-srd2%addr%srd2(($$CIV0 + int(ibeg)) - 1,int(js),int(ks))&
                &        = _sqrt( 5.0000000000000000E-001 * (%VAL($$PRC2D) + %VAL(&
                &       $$PRC2D)))
   147|               d-srd3%addr%srd3(($$CIV0 + int(ibeg)) - 1,int(js),int(ks))&
                &        = _sqrt( 5.0000000000000000E-001 * (%VAL($$PRC2D) + %VAL(&
                &       $$PRC2D)))
   148|               d-st1%addr%st1[].rns4.(($$CIV0 + int(ibeg)) - 1,int(js),&
                &       int(ks)) =  0.0000000000000000E+000
   149|               d-st2%addr%st2[].rns5.(($$CIV0 + int(ibeg)) - 1,int(js),&
                &       int(ks)) =  0.0000000000000000E+000
   150|               d-st3%addr%st3[].rns6.(($$CIV0 + int(ibeg)) - 1,int(js),&
                &       int(ks)) =  0.0000000000000000E+000
                      $$PRC2C = $$PRC2D
   151|             ENDDO
                  ENDIF
   168|           IF ((1 + (int((iend + 1)) - int(ibeg)) > 0)) THEN
                    $$CIV1 = 0
                    $$PRC2A = d-srd2%addr%srd2(int(ibeg) - 1,int(js),int(ks))
       Id=2         DO $$CIV1 = $$CIV1, int((1 + (int((iend + 1)) - int(ibeg))&
                &       ))-1
                      $$PRC2B = d-srd2%addr%srd2(int(ibeg) + $$CIV1,int(js),int(&
                &       ks))
   169|               d-bave%addr%bave[].rns7.(int(ibeg) + $$CIV1) =  &
                &       5.0000000000000000E-001 * (d-b1%addr%b1(int(ibeg) + &
                &       $$CIV1,int(js),int(ks)) + d-b1%addr%b1(int(ibeg) + $$CIV1,&
                &       int(js),int(ks)))
   171|               d-srdpi%addr%srdpi[].rns9.(int(ibeg) + $$CIV1) =  &
                &       1.0000000000000000E+000 / $$PRC2B
   172|               d-srdmi%addr%srdmi[].rns10.(int(ibeg) + $$CIV1) =  &
                &       1.0000000000000000E+000 / $$PRC2A
   173|               d-valp%addr%valp[].rns11.(int(ibeg) + $$CIV1) = -(abs(&
                &       d-bave%addr%bave[].rns7.(int(ibeg) + $$CIV1)) * ( &
                &       1.0000000000000000E+000 / $$PRC2B))
   174|               d-valm%addr%valm[].rns12.(int(ibeg) + $$CIV1) = abs(&
                &       d-bave%addr%bave[].rns7.(int(ibeg) + $$CIV1)) * ( &
                &       1.0000000000000000E+000 / $$PRC2A)
                      $$PRC2A = $$PRC2B
   175|             ENDDO
                  ENDIF
   180|           IF ((1 + (int((iend + 2)) - int((ibeg - 2))) > 0)) THEN
                    $$CIV2 = 0
       Id=3         DO $$CIV2 = $$CIV2, int((1 + (int((iend + 2)) - int((ibeg &
                &       - 2)))))-1
   181|               d-vtmp%addr%vtmp[].rns13.(($$CIV2 + int(ibeg)) - 2) = u2((&
                &       $$CIV2 + int(ibeg)) - 2,int(js),int(ks)) - d-vg2%addr%vg2(&
                &       int(js))
   182|               d-btmp%addr%btmp[].rns15.(($$CIV2 + int(ibeg)) - 2) = &
                &       d-b2%addr%b2(($$CIV2 + int(ibeg)) - 2,int(js),int(ks))
   183|             ENDDO
                  ENDIF
   190|           IF ((1 + (int((iend + 1)) - int((ibeg - 1))) > 0)) THEN
                    $$CIV3 = 0
                    $$PRC22 = d-dx1bi%addr%dx1bi(int(ibeg) - 1)
                    $$PRC24 = d-vtmp%addr%vtmp[].rns13.(int(ibeg) - 2)
                    $$PRC25 = d-vtmp%addr%vtmp[].rns13.(int(ibeg) - 1)
                    $$PRC27 = d-btmp%addr%btmp[].rns15.(int(ibeg) - 2)
                    $$PRC28 = d-btmp%addr%btmp[].rns15.(int(ibeg) - 1)
       Id=4         DO $$CIV3 = $$CIV3, int((1 + (int((iend + 1)) - int((ibeg &
                &       - 1)))))-1
                      $$PRC23 = d-dx1bi%addr%dx1bi(int(ibeg) + $$CIV3)
                      $$PRC26 = d-vtmp%addr%vtmp[].rns13.(int(ibeg) + $$CIV3)
                      $$PRC29 = d-btmp%addr%btmp[].rns15.(int(ibeg) + $$CIV3)
   191|               dqm.rnnC = ($$PRC25 - $$PRC24) * $$PRC22
   192|               dqp.rnn9 = ($$PRC26 - $$PRC25) * $$PRC23
                      $$RET0 = __cpdsign( 1.0000000000000000E+000,(%VAL(&
                &       dqm.rnnC) + %VAL(dqp.rnn9)))
   193|               d-dv%addr%dv[].rns18.(($$CIV3 + int(ibeg)) - 1) = (max(&
                &       dqm.rnnC * dqp.rnn9, 0.0000000000000000E+000) * $$RET0) / &
                &       max(abs(dqm.rnnC + dqp.rnn9), 1.0000000000000000E-099)
   196|               dqm = ($$PRC28 - $$PRC27) * $$PRC22
   197|               dqp = ($$PRC29 - $$PRC28) * $$PRC23
                      $$RET1 = __cpdsign( 1.0000000000000000E+000,(%VAL(dqm) + &
                &       %VAL(dqp)))
   198|               d-db%addr%db[].rns19.(($$CIV3 + int(ibeg)) - 1) = (max(&
                &       dqm * dqp, 0.0000000000000000E+000) * $$RET1) / max(abs(&
                &       dqm + dqp), 1.0000000000000000E-099)
                      $$PRC27 = $$PRC28
                      $$PRC28 = $$PRC29
                      $$PRC24 = $$PRC25
                      $$PRC25 = $$PRC26
                      $$PRC22 = $$PRC23
   201|             ENDDO
                  ENDIF
   206|           IF ((1 + (int((iend + 1)) - int(ibeg)) > 0)) THEN
                    $$CIV4 = 0
                    $$PRC18 = d-dv%addr%dv[].rns18.(int(ibeg) - 1)
                    $$PRC1A = d-dx1a%addr%dx1a(int(ibeg) - 1)
                    $$PRC1C = d-vtmp%addr%vtmp[].rns13.(int(ibeg) - 1)
                    $$PRC1E = d-db%addr%db[].rns19.(int(ibeg) - 1)
                    $$PRC20 = d-btmp%addr%btmp[].rns15.(int(ibeg) - 1)
       Id=5         DO $$CIV4 = $$CIV4, int((1 + (int((iend + 1)) - int(ibeg))&
                &       ))-1
                      $$PRC19 = d-dv%addr%dv[].rns18.(int(ibeg) + $$CIV4)
                      $$PRC1B = d-dx1a%addr%dx1a(int(ibeg) + $$CIV4)
                      $$PRC1D = d-vtmp%addr%vtmp[].rns13.(int(ibeg) + $$CIV4)
                      $$PRC1F = d-db%addr%db[].rns19.(int(ibeg) + $$CIV4)
                      $$PRC21 = d-btmp%addr%btmp[].rns15.(int(ibeg) + $$CIV4)
   207|               qv1 = $$PRC1C + $$PRC1A * $$PRC18
   209|               qb1 = $$PRC20 + $$PRC1A * $$PRC1E
   213|               q3.rnn3 = __cpdsign( 5.0000000000000000E-001,(&
                &       d-valp%addr%valp[].rns11.(int(ibeg) + %VAL($$CIV4)) * &
                &       %VAL(dt)))
   214|               d-vpal%addr%vpal[].rns21.(int(ibeg) + $$CIV4) = ( &
                &       5.0000000000000000E-001 + q3.rnn3) * (qv1 - (&
                &       d-valp%addr%valp[].rns11.(int(ibeg) + $$CIV4) * dt) * &
                &       $$PRC18) + ( 5.0000000000000000E-001 - q3.rnn3) * ((&
                &       $$PRC1D - $$PRC1B * $$PRC19) - (d-valp%addr%valp[].rns11.(&
                &       int(ibeg) + $$CIV4) * dt) * $$PRC19)
   216|               d-bpal%addr%bpal[].rns22.(int(ibeg) + $$CIV4) = ( &
                &       5.0000000000000000E-001 + q3.rnn3) * (qb1 - (&
                &       d-valp%addr%valp[].rns11.(int(ibeg) + $$CIV4) * dt) * &
                &       $$PRC1E) + ( 5.0000000000000000E-001 - q3.rnn3) * ((&
                &       $$PRC21 - $$PRC1B * $$PRC1F) - (d-valp%addr%valp[].rns11.(&
                &       int(ibeg) + $$CIV4) * dt) * $$PRC1F)
   220|               q3 = __cpdsign( 5.0000000000000000E-001,(&
                &       d-valm%addr%valm[].rns12.(int(ibeg) + %VAL($$CIV4)) * &
                &       %VAL(dt)))
   221|               d-vmal%addr%vmal[].rns23.(int(ibeg) + $$CIV4) = ( &
                &       5.0000000000000000E-001 + q3) * (qv1 - (&
                &       d-valm%addr%valm[].rns12.(int(ibeg) + $$CIV4) * dt) * &
                &       $$PRC18) + ( 5.0000000000000000E-001 - q3) * (($$PRC1D - &
                &       $$PRC1B * $$PRC19) - (d-valm%addr%valm[].rns12.(int(ibeg) &
                &       + $$CIV4) * dt) * $$PRC19)
   223|               d-bmal%addr%bmal[].rns24.(int(ibeg) + $$CIV4) = ( &
                &       5.0000000000000000E-001 + q3) * (qb1 - (&
                &       d-valm%addr%valm[].rns12.(int(ibeg) + $$CIV4) * dt) * &
                &       $$PRC1E) + ( 5.0000000000000000E-001 - q3) * (($$PRC21 - &
                &       $$PRC1B * $$PRC1F) - (d-valm%addr%valm[].rns12.(int(ibeg) &
                &       + $$CIV4) * dt) * $$PRC1F)
                      $$PRC20 = $$PRC21
                      $$PRC1E = $$PRC1F
                      $$PRC1C = $$PRC1D
                      $$PRC1A = $$PRC1B
                      $$PRC18 = $$PRC19
   225|             ENDDO
                  ENDIF
   229|           IF ((1 + (int((iend + 1)) - int(ibeg)) > 0)) THEN
                    $$CIV5 = 0
       Id=6         DO $$CIV5 = $$CIV5, int((1 + (int((iend + 1)) - int(ibeg))&
                &       ))-1
   230|               q1 = __cpdsign( 1.0000000000000000E+000,&
                &       d-bave%addr%bave[].rns7.(int(ibeg) + %VAL($$CIV5)))
   231|               d-bstar%addr%bstar[].rns25.(int(ibeg) + $$CIV5) = (((&
                &       d-bpal%addr%bpal[].rns22.(int(ibeg) + $$CIV5) * &
                &       d-srdpi%addr%srdpi[].rns9.(int(ibeg) + $$CIV5) + &
                &       d-bmal%addr%bmal[].rns24.(int(ibeg) + $$CIV5) * &
                &       d-srdmi%addr%srdmi[].rns10.(int(ibeg) + $$CIV5)) + q1 * (&
                &       d-vpal%addr%vpal[].rns21.(int(ibeg) + $$CIV5) - &
                &       d-vmal%addr%vmal[].rns23.(int(ibeg) + $$CIV5))) * &
                &       d-g2a%addr%g2a(int(ibeg) + $$CIV5)) / (&
                &       d-srdpi%addr%srdpi[].rns9.(int(ibeg) + $$CIV5) + &
                &       d-srdmi%addr%srdmi[].rns10.(int(ibeg) + $$CIV5))
   234|             ENDDO
                  ENDIF
   239|           IF ((1 + (int(iend) - int(ibeg)) > 0)) THEN
                    $$CIV6 = 0
                    $$PRC14 = d-bstar%addr%bstar[].rns25.(int(ibeg))
                    $$PRC16 = d-bave%addr%bave[].rns7.(int(ibeg))
       Id=7         DO $$CIV6 = $$CIV6, int((1 + (int(iend) - int(ibeg))))-1
                      $$PRC15 = d-bstar%addr%bstar[].rns25.(1 + (int(ibeg) + &
                &       $$CIV6))
                      $$PRC17 = d-bave%addr%bave[].rns7.(1 + (int(ibeg) + &
                &       $$CIV6))
   240|               d-st2%addr%st2[].rns5.(int(ibeg) + $$CIV6,int(js),int(ks))&
                &        = d-st2%addr%st2[].rns5.(int(ibeg) + $$CIV6,int(js),int(&
                &       ks)) + ((($$PRC17 + $$PRC16) * d-g2bi%addr%g2bi(int(ibeg) &
                &       + $$CIV6)) * ($$PRC15 - $$PRC14)) * d-dx1ai%addr%dx1ai(&
                &       int(ibeg) + $$CIV6)
                      $$PRC16 = $$PRC17
                      $$PRC14 = $$PRC15
   243|             ENDDO
                  ENDIF
   260|           IF ((1 + (int((iend + 1)) - int(ibeg)) > 0)) THEN
                    $$CIV7 = 0
                    $$PRC12 = d-srd3%addr%srd3(int(ibeg) - 1,int(js),int(ks))
       Id=8         DO $$CIV7 = $$CIV7, int((1 + (int((iend + 1)) - int(ibeg))&
                &       ))-1
                      $$PRC13 = d-srd3%addr%srd3(int(ibeg) + $$CIV7,int(js),int(&
                &       ks))
   261|               d-bave%addr%bave[].rns7.(int(ibeg) + $$CIV7) =  &
                &       5.0000000000000000E-001 * (d-b1%addr%b1(int(ibeg) + &
                &       $$CIV7,int(js),int(ks)) + d-b1%addr%b1(int(ibeg) + $$CIV7,&
                &       int(js),int(ks)))
   263|               d-srdpi%addr%srdpi[].rns9.(int(ibeg) + $$CIV7) =  &
                &       1.0000000000000000E+000 / $$PRC13
   264|               d-srdmi%addr%srdmi[].rns10.(int(ibeg) + $$CIV7) =  &
                &       1.0000000000000000E+000 / $$PRC12
   265|               d-valp%addr%valp[].rns11.(int(ibeg) + $$CIV7) = -(abs(&
                &       d-bave%addr%bave[].rns7.(int(ibeg) + $$CIV7)) * ( &
                &       1.0000000000000000E+000 / $$PRC13))
   266|               d-valm%addr%valm[].rns12.(int(ibeg) + $$CIV7) = abs(&
                &       d-bave%addr%bave[].rns7.(int(ibeg) + $$CIV7)) * ( &
                &       1.0000000000000000E+000 / $$PRC12)
                      $$PRC12 = $$PRC13
   267|             ENDDO
                  ENDIF
   272|           IF ((1 + (int((iend + 2)) - int((ibeg - 2))) > 0)) THEN
                    $$CIV8 = 0
       Id=9         DO $$CIV8 = $$CIV8, int((1 + (int((iend + 2)) - int((ibeg &
                &       - 2)))))-1
   273|               d-vtmp%addr%vtmp[].rns13.(($$CIV8 + int(ibeg)) - 2) = u3((&
                &       $$CIV8 + int(ibeg)) - 2,int(js),int(ks)) - d-vg3%addr%vg3(&
                &       int(ks))
   274|               d-btmp%addr%btmp[].rns15.(($$CIV8 + int(ibeg)) - 2) = &
                &       d-b3%addr%b3(($$CIV8 + int(ibeg)) - 2,int(js),int(ks))
   275|             ENDDO
                  ENDIF
   283|           IF ((1 + (int((iend + 1)) - int((ibeg - 1))) > 0)) THEN
                    $$CIV9 = 0
                    $$PRCA = d-dx1bi%addr%dx1bi(int(ibeg) - 1)
                    $$PRCC = d-vtmp%addr%vtmp[].rns13.(int(ibeg) - 2)
                    $$PRCD = d-vtmp%addr%vtmp[].rns13.(int(ibeg) - 1)
                    $$PRCF = d-btmp%addr%btmp[].rns15.(int(ibeg) - 2)
                    $$PRC10 = d-btmp%addr%btmp[].rns15.(int(ibeg) - 1)
       Id=10        DO $$CIV9 = $$CIV9, int((1 + (int((iend + 1)) - int((ibeg &
                &       - 1)))))-1
                      $$PRCB = d-dx1bi%addr%dx1bi(int(ibeg) + $$CIV9)
                      $$PRCE = d-vtmp%addr%vtmp[].rns13.(int(ibeg) + $$CIV9)
                      $$PRC11 = d-btmp%addr%btmp[].rns15.(int(ibeg) + $$CIV9)
   284|               dqm.rnnA = ($$PRCD - $$PRCC) * $$PRCA
   285|               dqp.rnn7 = ($$PRCE - $$PRCD) * $$PRCB
                      $$RET2 = __cpdsign( 1.0000000000000000E+000,(%VAL(&
                &       dqm.rnnA) + %VAL(dqp.rnn7)))
   286|               d-dv%addr%dv[].rns18.(($$CIV9 + int(ibeg)) - 1) = (max(&
                &       dqm.rnnA * dqp.rnn7, 0.0000000000000000E+000) * $$RET2) / &
                &       max(abs(dqm.rnnA + dqp.rnn7), 1.0000000000000000E-099)
   289|               dqm.rnnB = ($$PRC10 - $$PRCF) * $$PRCA
   290|               dqp.rnn8 = ($$PRC11 - $$PRC10) * $$PRCB
                      $$RET3 = __cpdsign( 1.0000000000000000E+000,(%VAL(&
                &       dqm.rnnB) + %VAL(dqp.rnn8)))
   291|               d-db%addr%db[].rns19.(($$CIV9 + int(ibeg)) - 1) = (max(&
                &       dqm.rnnB * dqp.rnn8, 0.0000000000000000E+000) * $$RET3) / &
                &       max(abs(dqm.rnnB + dqp.rnn8), 1.0000000000000000E-099)
                      $$PRCF = $$PRC10
                      $$PRC10 = $$PRC11
                      $$PRCC = $$PRCD
                      $$PRCD = $$PRCE
                      $$PRCA = $$PRCB
   294|             ENDDO
                  ENDIF
   299|           IF ((1 + (int((iend + 1)) - int(ibeg)) > 0)) THEN
                    $$CIVA = 0
                    $$PRC0 = d-dv%addr%dv[].rns18.(int(ibeg) - 1)
                    $$PRC2 = d-dx1a%addr%dx1a(int(ibeg) - 1)
                    $$PRC4 = d-vtmp%addr%vtmp[].rns13.(int(ibeg) - 1)
                    $$PRC6 = d-db%addr%db[].rns19.(int(ibeg) - 1)
                    $$PRC8 = d-btmp%addr%btmp[].rns15.(int(ibeg) - 1)
       Id=11        DO $$CIVA = $$CIVA, int((1 + (int((iend + 1)) - int(ibeg))&
                &       ))-1
                      $$PRC1 = d-dv%addr%dv[].rns18.(int(ibeg) + $$CIVA)
                      $$PRC3 = d-dx1a%addr%dx1a(int(ibeg) + $$CIVA)
                      $$PRC5 = d-vtmp%addr%vtmp[].rns13.(int(ibeg) + $$CIVA)
                      $$PRC7 = d-db%addr%db[].rns19.(int(ibeg) + $$CIVA)
                      $$PRC9 = d-btmp%addr%btmp[].rns15.(int(ibeg) + $$CIVA)
   300|               qv1.rnn2C = $$PRC4 + $$PRC2 * $$PRC0
   302|               qb1.rnn2A = $$PRC8 + $$PRC2 * $$PRC6
   306|               q3.rnn1 = __cpdsign( 5.0000000000000000E-001,(&
                &       d-valp%addr%valp[].rns11.(int(ibeg) + %VAL($$CIVA)) * &
                &       %VAL(dt)))
   307|               d-vpal%addr%vpal[].rns21.(int(ibeg) + $$CIVA) = ( &
                &       5.0000000000000000E-001 + q3.rnn1) * (qv1.rnn2C - (&
                &       d-valp%addr%valp[].rns11.(int(ibeg) + $$CIVA) * dt) * &
                &       $$PRC0) + ( 5.0000000000000000E-001 - q3.rnn1) * (($$PRC5 &
                &       - $$PRC3 * $$PRC1) - (d-valp%addr%valp[].rns11.(int(ibeg) &
                &       + $$CIVA) * dt) * $$PRC1)
   309|               d-bpal%addr%bpal[].rns22.(int(ibeg) + $$CIVA) = ( &
                &       5.0000000000000000E-001 + q3.rnn1) * (qb1.rnn2A - (&
                &       d-valp%addr%valp[].rns11.(int(ibeg) + $$CIVA) * dt) * &
                &       $$PRC6) + ( 5.0000000000000000E-001 - q3.rnn1) * (($$PRC9 &
                &       - $$PRC3 * $$PRC7) - (d-valp%addr%valp[].rns11.(int(ibeg) &
                &       + $$CIVA) * dt) * $$PRC7)
   313|               q3.rnn2 = __cpdsign( 5.0000000000000000E-001,(&
                &       d-valm%addr%valm[].rns12.(int(ibeg) + %VAL($$CIVA)) * &
                &       %VAL(dt)))
   314|               d-vmal%addr%vmal[].rns23.(int(ibeg) + $$CIVA) = ( &
                &       5.0000000000000000E-001 + q3.rnn2) * (qv1.rnn2C - (&
                &       d-valm%addr%valm[].rns12.(int(ibeg) + $$CIVA) * dt) * &
                &       $$PRC0) + ( 5.0000000000000000E-001 - q3.rnn2) * (($$PRC5 &
                &       - $$PRC3 * $$PRC1) - (d-valm%addr%valm[].rns12.(int(ibeg) &
                &       + $$CIVA) * dt) * $$PRC1)
   316|               d-bmal%addr%bmal[].rns24.(int(ibeg) + $$CIVA) = ( &
                &       5.0000000000000000E-001 + q3.rnn2) * (qb1.rnn2A - (&
                &       d-valm%addr%valm[].rns12.(int(ibeg) + $$CIVA) * dt) * &
                &       $$PRC6) + ( 5.0000000000000000E-001 - q3.rnn2) * (($$PRC9 &
                &       - $$PRC3 * $$PRC7) - (d-valm%addr%valm[].rns12.(int(ibeg) &
                &       + $$CIVA) * dt) * $$PRC7)
                      $$PRC8 = $$PRC9
                      $$PRC6 = $$PRC7
                      $$PRC4 = $$PRC5
                      $$PRC2 = $$PRC3
                      $$PRC0 = $$PRC1
   318|             ENDDO
                  ENDIF
   322|           IF ((1 + (int((iend + 1)) - int(ibeg)) > 0)) THEN
                    $$CIVB = 0
       Id=12        DO $$CIVB = $$CIVB, int((1 + (int((iend + 1)) - int(ibeg))&
                &       ))-1
   323|               q1.rnn28 = __cpdsign( 1.0000000000000000E+000,&
                &       d-bave%addr%bave[].rns7.(int(ibeg) + %VAL($$CIVB)))
   324|               d-bstar%addr%bstar[].rns25.(int(ibeg) + $$CIVB) = (((&
                &       d-bpal%addr%bpal[].rns22.(int(ibeg) + $$CIVB) * &
                &       d-srdpi%addr%srdpi[].rns9.(int(ibeg) + $$CIVB) + &
                &       d-bmal%addr%bmal[].rns24.(int(ibeg) + $$CIVB) * &
                &       d-srdmi%addr%srdmi[].rns10.(int(ibeg) + $$CIVB)) + &
                &       q1.rnn28 * (d-vpal%addr%vpal[].rns21.(int(ibeg) + $$CIVB) &
                &       - d-vmal%addr%vmal[].rns23.(int(ibeg) + $$CIVB))) * &
                &       d-g31a%addr%g31a(int(ibeg) + $$CIVB)) / (&
                &       d-srdpi%addr%srdpi[].rns9.(int(ibeg) + $$CIVB) + &
                &       d-srdmi%addr%srdmi[].rns10.(int(ibeg) + $$CIVB))
   327|             ENDDO
                  ENDIF
   332|           IF ((1 + (int(iend) - int(ibeg)) > 0)) THEN
                    $$CIVC = 0
       Id=13        DO $$CIVC = $$CIVC, int((1 + (int(iend) - int(ibeg))))-1
   334|               IF (.NOT.(lgeom == 3)) GOTO lab_50
   335|               IF ((d-x1a%addr%x1a(int(ibeg) + $$CIVC) ==  &
                &       0.0000000000000000E+000)) THEN
   336|                 d-st3%addr%st3[].rns6.(int(ibeg) + $$CIVC,int(js),int(&
                &         ks)) =  0.0000000000000000E+000
   337|               ELSE
   339|                 lab_50
   340|                 d-st3%addr%st3[].rns6.(int(ibeg) + $$CIVC,int(js),int(&
                &         ks)) = (((d-bave%addr%bave[].rns7.(1 + ($$CIVC + int(&
                &         ibeg))) + d-bave%addr%bave[].rns7.(int(ibeg) + $$CIVC)) &
                &         * d-g31bi%addr%g31bi(int(ibeg) + $$CIVC)) * (&
                &         d-bstar%addr%bstar[].rns25.(1 + ($$CIVC + int(ibeg))) - &
                &         d-bstar%addr%bstar[].rns25.(int(ibeg) + $$CIVC))) * &
                &         d-dx1ai%addr%dx1ai(int(ibeg) + $$CIVC)
   342|               ENDIF
                    ENDDO
                  ENDIF
   352|           IF ((1 + (int(iend) - int(ibeg)) > 0)) THEN
                    $$CIVD = 0
       Id=14        DO $$CIVD = $$CIVD, int((1 + (int(iend) - int(ibeg))))-1
   353|               w1(int(ibeg) + $$CIVD,int(js),int(ks)) = u1(int(ibeg) + &
                &       $$CIVD,int(js),int(ks)) + (( 5.0000000000000000E-001 * dt)&
                &        * d-st1%addr%st1[].rns4.(int(ibeg) + $$CIVD,int(js),int(&
                &       ks))) / (d-srd1%addr%srd1(int(ibeg) + $$CIVD,int(js),int(&
                &       ks)) * d-srd1%addr%srd1(int(ibeg) + $$CIVD,int(js),int(ks)&
                &       ))
   354|               w2(int(ibeg) + $$CIVD,int(js),int(ks)) = u2(int(ibeg) + &
                &       $$CIVD,int(js),int(ks)) + (( 5.0000000000000000E-001 * dt)&
                &        * d-st2%addr%st2[].rns5.(int(ibeg) + $$CIVD,int(js),int(&
                &       ks))) / (d-srd2%addr%srd2(int(ibeg) + $$CIVD,int(js),int(&
                &       ks)) * d-srd2%addr%srd2(int(ibeg) + $$CIVD,int(js),int(ks)&
                &       ))
   355|               w3(int(ibeg) + $$CIVD,int(js),int(ks)) = u3(int(ibeg) + &
                &       $$CIVD,int(js),int(ks)) + (( 5.0000000000000000E-001 * dt)&
                &        * d-st3%addr%st3[].rns6.(int(ibeg) + $$CIVD,int(js),int(&
                &       ks))) / (d-srd3%addr%srd3(int(ibeg) + $$CIVD,int(js),int(&
                &       ks)) * d-srd3%addr%srd3(int(ibeg) + $$CIVD,int(js),int(ks)&
                &       ))
   356|             ENDDO
                  ENDIF
   359|           RETURN
                END SUBROUTINE lorentz_1d


Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
         0           145                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-srd1%addr  + d-srd1%rvo 
                                          + (d-srd1%bounds%mult[].off48)*((long long) ks) + 
                                          (d-srd1%bounds%mult[].off72)*((long long) js) + 
                                          (d-srd1%bounds%mult[].off96)*(($$CIV0 + (long long) 
                                          .ibeg->ibeg) - 1ll))  with non-vectorizable alignment.
         0           145                  Loop was not SIMD vectorized because it contains 
                                          operation in  5.0000000000000000E-001 * (((double 
                                          *)((char *)d-d%addr  + d-d%rvo))->d[].rns1.[(long 
                                          long) ks][(long long) js][($$CIV0 + (long long) 
                                          .ibeg->ibeg) - 1ll] + ((double *)((char *)d-d%addr  + 
                                          d-d%rvo))->d[].rns1.[(long long) ks][(long long) 
                                          js][($$CIV0 + (long long) .ibeg->ibeg) - 2ll]) which 
                                          is not  suitable for SIMD vectorization.
         0           145                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-srd1%addr  + d-srd1%rvo 
                                          + (d-srd1%bounds%mult[].off48)*((long long) ks) + 
                                          (d-srd1%bounds%mult[].off72)*((long long) js) + 
                                          (d-srd1%bounds%mult[].off96)*(($$CIV0 + (long long) 
                                          .ibeg->ibeg) - 1ll)) with  non-vectorizable strides.
         0           145                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           145                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)d-srd1%addr 
                                          + d-srd1%rvo + (d-srd1%bounds%mult[].off48)*((long 
                                          long) ks) + (d-srd1%bounds%mult[].off72)*((long long) 
                                          js) + (d-srd1%bounds%mult[].off96)*(($$CIV0 + (long 
                                          long) .ibeg->ibeg) - 1ll)).
         0           146                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-srd2%addr  + d-srd2%rvo 
                                          + (d-srd2%bounds%mult[].off152)*((long long) ks) + 
                                          (d-srd2%bounds%mult[].off176)*((long long) js) + 
                                          (d-srd2%bounds%mult[].off200)*(($$CIV0 + (long long) 
                                          .ibeg->ibeg) - 1ll))  with non-vectorizable alignment.
         0           146                  Loop was not SIMD vectorized because it contains 
                                          operation in  5.0000000000000000E-001 * (((double 
                                          *)((char *)d-d%addr  + d-d%rvo))->d[].rns1.[(long 
                                          long) ks][(long long) js][($$CIV0 + (long long) 
                                          .ibeg->ibeg) - 1ll] + ((double *)((char *)d-d%addr  + 
                                          d-d%rvo))->d[].rns1.[(long long) ks][(long long) 
                                          js][($$CIV0 + (long long) .ibeg->ibeg) - 1ll]) which 
                                          is not  suitable for SIMD vectorization.
         0           146                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-srd2%addr  + d-srd2%rvo 
                                          + (d-srd2%bounds%mult[].off152)*((long long) ks) + 
                                          (d-srd2%bounds%mult[].off176)*((long long) js) + 
                                          (d-srd2%bounds%mult[].off200)*(($$CIV0 + (long long) 
                                          .ibeg->ibeg) - 1ll)) with  non-vectorizable strides.
         0           146                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           146                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)d-srd2%addr 
                                          + d-srd2%rvo + (d-srd2%bounds%mult[].off152)*((long 
                                          long) ks) + (d-srd2%bounds%mult[].off176)*((long 
                                          long) js) + (d-srd2%bounds%mult[].off200)*(($$CIV0 + 
                                          (long long) .ibeg->ibeg) - 1ll)).
         0           147                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-srd3%addr  + d-srd3%rvo 
                                          + (d-srd3%bounds%mult[].off256)*((long long) ks) + 
                                          (d-srd3%bounds%mult[].off280)*((long long) js) + 
                                          (d-srd3%bounds%mult[].off304)*(($$CIV0 + (long long) 
                                          .ibeg->ibeg) - 1ll))  with non-vectorizable alignment.
         0           147                  Loop was not SIMD vectorized because it contains 
                                          operation in  5.0000000000000000E-001 * (((double 
                                          *)((char *)d-d%addr  + d-d%rvo))->d[].rns1.[(long 
                                          long) ks][(long long) js][($$CIV0 + (long long) 
                                          .ibeg->ibeg) - 1ll] + ((double *)((char *)d-d%addr  + 
                                          d-d%rvo))->d[].rns1.[(long long) ks][(long long) 
                                          js][($$CIV0 + (long long) .ibeg->ibeg) - 1ll]) which 
                                          is not  suitable for SIMD vectorization.
         0           147                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-srd3%addr  + d-srd3%rvo 
                                          + (d-srd3%bounds%mult[].off256)*((long long) ks) + 
                                          (d-srd3%bounds%mult[].off280)*((long long) js) + 
                                          (d-srd3%bounds%mult[].off304)*(($$CIV0 + (long long) 
                                          .ibeg->ibeg) - 1ll)) with  non-vectorizable strides.
         0           147                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           147                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)d-srd3%addr 
                                          + d-srd3%rvo + (d-srd3%bounds%mult[].off256)*((long 
                                          long) ks) + (d-srd3%bounds%mult[].off280)*((long 
                                          long) js) + (d-srd3%bounds%mult[].off304)*(($$CIV0 + 
                                          (long long) .ibeg->ibeg) - 1ll)).
         0           148                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           149                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           150                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           169                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-bave%addr  + -8ll + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIV1))  with 
                                          non-vectorizable alignment.
         0           169                  Loop was not SIMD vectorized because it contains 
                                          operation in  5.0000000000000000E-001 * (((double 
                                          *)((char *)d-b1%addr  + d-b1%rvo))->b1[].rns8.[(long 
                                          long) ks][(long long) js][(long long) .ibeg->ibeg + 
                                          $$CIV1] + ((double *)((char *)d-b1%addr  + 
                                          d-b1%rvo))->b1[].rns8.[(long long) ks][(long long) 
                                          js][(long long) .ibeg->ibeg + $$CIV1]) which is not  
                                          suitable for SIMD vectorization.
         0           169                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-b1%addr  + d-b1%rvo + 
                                          (d-b1%bounds%mult[].off776)*((long long) ks) + 
                                          (d-b1%bounds%mult[].off800)*((long long) js) + 
                                          (d-b1%bounds%mult[].off824)*((long long) .ibeg->ibeg 
                                          + $$CIV1)) with  non-vectorizable strides.
         0           169                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           171                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-srdpi%addr  + -8ll + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIV1))  with 
                                          non-vectorizable alignment.
         0           171                  Loop was not SIMD vectorized because it contains 
                                          operation in  1.0000000000000000E+000 / ((double 
                                          *)((char *)d-srd2%addr  + 
                                          d-srd2%rvo))->srd2[].rns2.[(long long) ks][(long 
                                          long) js][(long long) .ibeg->ibeg + $$CIV1] which is 
                                          not  suitable for SIMD vectorization.
         0           171                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-srd2%addr  + d-srd2%rvo 
                                          + (d-srd2%bounds%mult[].off152)*((long long) ks) + 
                                          (d-srd2%bounds%mult[].off176)*((long long) js) + 
                                          (d-srd2%bounds%mult[].off200)*((long long) 
                                          .ibeg->ibeg + $$CIV1)) with  non-vectorizable strides.
         0           171                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           172                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-srdmi%addr  + -8ll + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIV1))  with 
                                          non-vectorizable alignment.
         0           172                  Loop was not SIMD vectorized because it contains 
                                          operation in  1.0000000000000000E+000 / ((double 
                                          *)((char *)d-srd2%addr  + 
                                          d-srd2%rvo))->srd2[].rns2.[(long long) ks][(long 
                                          long) js][($$CIV1 + (long long) .ibeg->ibeg) - 1ll] 
                                          which is not  suitable for SIMD vectorization.
         0           172                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-srd2%addr  + d-srd2%rvo 
                                          + (d-srd2%bounds%mult[].off152)*((long long) ks) + 
                                          (d-srd2%bounds%mult[].off176)*((long long) js) + 
                                          (d-srd2%bounds%mult[].off200)*(($$CIV1 + (long long) 
                                          .ibeg->ibeg) - 1ll)) with  non-vectorizable strides.
         0           172                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           173                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-valp%addr  + -8ll + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIV1))  with 
                                          non-vectorizable alignment.
         0           173                  Loop was not SIMD vectorized because it contains 
                                          operation in - (abs(((double *)((char *)d-bave%addr  
                                          + -8ll))->bave[].rns7.[(long long) .ibeg->ibeg + 
                                          $$CIV1]) * ( 1.0000000000000000E+000 / ((double 
                                          *)((char *)d-srd2%addr  + 
                                          d-srd2%rvo))->srd2[].rns2.[(long long) ks][(long 
                                          long) js][(long long) .ibeg->ibeg + $$CIV1])) which 
                                          is not  suitable for SIMD vectorization.
         0           173                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-srd2%addr  + d-srd2%rvo 
                                          + (d-srd2%bounds%mult[].off152)*((long long) ks) + 
                                          (d-srd2%bounds%mult[].off176)*((long long) js) + 
                                          (d-srd2%bounds%mult[].off200)*((long long) 
                                          .ibeg->ibeg + $$CIV1)) with  non-vectorizable strides.
         0           173                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           174                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-valm%addr  + -8ll + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIV1))  with 
                                          non-vectorizable alignment.
         0           174                  Loop was not SIMD vectorized because it contains 
                                          operation in abs(((double *)((char *)d-bave%addr  + 
                                          -8ll))->bave[].rns7.[(long long) .ibeg->ibeg + 
                                          $$CIV1]) * ( 1.0000000000000000E+000 / ((double 
                                          *)((char *)d-srd2%addr  + 
                                          d-srd2%rvo))->srd2[].rns2.[(long long) ks][(long 
                                          long) js][($$CIV1 + (long long) .ibeg->ibeg) - 1ll]) 
                                          which is not  suitable for SIMD vectorization.
         0           174                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-srd2%addr  + d-srd2%rvo 
                                          + (d-srd2%bounds%mult[].off152)*((long long) ks) + 
                                          (d-srd2%bounds%mult[].off176)*((long long) js) + 
                                          (d-srd2%bounds%mult[].off200)*(($$CIV1 + (long long) 
                                          .ibeg->ibeg) - 1ll)) with  non-vectorizable strides.
         0           174                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           181                  Loop was not SIMD vectorized because it contains 
                                          operation in ((double *)((char *).u2  + -8ll - 
                                          (max((long long) in,0ll) * 8ll + 8ll * (max((long 
                                          long) jn,0ll) * max((long long) 
                                          in,0ll)))))->u2[][(long long) ks][(long long) 
                                          js][($$CIV2 + (long long) .ibeg->ibeg) - 2ll] - 
                                          ((double *)((char *)d-vg2%addr  + 
                                          d-vg2%rvo))->vg2[].rns14.[(long long) js] which is 
                                          not  suitable for SIMD vectorization.
         0           181                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           182                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-btmp%addr  + -8ll + 
                                          (8ll)*(($$CIV2 + (long long) .ibeg->ibeg) - 2ll))  
                                          with non-vectorizable alignment.
         0           182                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-b2%addr  + d-b2%rvo + 
                                          (d-b2%bounds%mult[].off880)*((long long) ks) + 
                                          (d-b2%bounds%mult[].off904)*((long long) js) + 
                                          (d-b2%bounds%mult[].off928)*(($$CIV2 + (long long) 
                                          .ibeg->ibeg) - 2ll)) with  non-vectorizable strides.
         0           182                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           191                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-dx1bi%addr  + 
                                          d-dx1bi%rvo + (8ll)*(($$CIV3 + (long long) 
                                          .ibeg->ibeg) - 1ll))  with non-vectorizable alignment.
         0           191                  Loop was not SIMD vectorized because it contains 
                                          operation in (((double *)((char *)d-vtmp%addr  + 
                                          -8ll))->vtmp[].rns13.[($$CIV3 + (long long) 
                                          .ibeg->ibeg) - 1ll] - ((double *)((char *)d-vtmp%addr 
                                          + -8ll))->vtmp[].rns13.[($$CIV3 + (long long) 
                                          .ibeg->ibeg) - 2ll]) * ((double *)((char 
                                          *)d-dx1bi%addr  + 
                                          d-dx1bi%rvo))->dx1bi[].rns17.[($$CIV3 + (long long) 
                                          .ibeg->ibeg) - 1ll] which is not  suitable for SIMD 
                                          vectorization.
         0           191                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           192                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-dx1bi%addr  + 
                                          d-dx1bi%rvo + (8ll)*((long long) .ibeg->ibeg + 
                                          $$CIV3))  with non-vectorizable alignment.
         0           192                  Loop was not SIMD vectorized because it contains 
                                          operation in (((double *)((char *)d-vtmp%addr  + 
                                          -8ll))->vtmp[].rns13.[(long long) .ibeg->ibeg + 
                                          $$CIV3] - ((double *)((char *)d-vtmp%addr  + 
                                          -8ll))->vtmp[].rns13.[($$CIV3 + (long long) 
                                          .ibeg->ibeg) - 1ll]) * ((double *)((char 
                                          *)d-dx1bi%addr  + d-dx1bi%rvo))->dx1bi[].rns17.[(long 
                                          long) .ibeg->ibeg + $$CIV3] which is not  suitable 
                                          for SIMD vectorization.
         0           192                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           192                  Loop was not SIMD vectorized because it contains 
                                          operation in dqm.rnnC + dqp.rnn9 which is not  
                                          suitable for SIMD vectorization.
         0           192                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           193                  Loop was not SIMD vectorized because it contains 
                                          operation in (max(dqm.rnnC * dqp.rnn9, 
                                          0.0000000000000000E+000) * $$RET0) / max(abs(dqm.rnnC 
                                          + dqp.rnn9), 1.0000000000000000E-099) which is not  
                                          suitable for SIMD vectorization.
         0           193                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           196                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-dx1bi%addr  + 
                                          d-dx1bi%rvo + (8ll)*(($$CIV3 + (long long) 
                                          .ibeg->ibeg) - 1ll))  with non-vectorizable alignment.
         0           196                  Loop was not SIMD vectorized because it contains 
                                          operation in (((double *)((char *)d-btmp%addr  + 
                                          -8ll))->btmp[].rns15.[($$CIV3 + (long long) 
                                          .ibeg->ibeg) - 1ll] - ((double *)((char *)d-btmp%addr 
                                          + -8ll))->btmp[].rns15.[($$CIV3 + (long long) 
                                          .ibeg->ibeg) - 2ll]) * ((double *)((char 
                                          *)d-dx1bi%addr  + 
                                          d-dx1bi%rvo))->dx1bi[].rns17.[($$CIV3 + (long long) 
                                          .ibeg->ibeg) - 1ll] which is not  suitable for SIMD 
                                          vectorization.
         0           196                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           197                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-dx1bi%addr  + 
                                          d-dx1bi%rvo + (8ll)*((long long) .ibeg->ibeg + 
                                          $$CIV3))  with non-vectorizable alignment.
         0           197                  Loop was not SIMD vectorized because it contains 
                                          operation in (((double *)((char *)d-btmp%addr  + 
                                          -8ll))->btmp[].rns15.[(long long) .ibeg->ibeg + 
                                          $$CIV3] - ((double *)((char *)d-btmp%addr  + 
                                          -8ll))->btmp[].rns15.[($$CIV3 + (long long) 
                                          .ibeg->ibeg) - 1ll]) * ((double *)((char 
                                          *)d-dx1bi%addr  + d-dx1bi%rvo))->dx1bi[].rns17.[(long 
                                          long) .ibeg->ibeg + $$CIV3] which is not  suitable 
                                          for SIMD vectorization.
         0           197                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           197                  Loop was not SIMD vectorized because it contains 
                                          operation in dqm + dqp which is not  suitable for 
                                          SIMD vectorization.
         0           197                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           198                  Loop was not SIMD vectorized because it contains 
                                          operation in (max(dqm * dqp, 0.0000000000000000E+000) 
                                          * $$RET1) / max(abs(dqm + dqp), 
                                          1.0000000000000000E-099) which is not  suitable for 
                                          SIMD vectorization.
         0           198                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           207                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-dx1a%addr  + d-dx1a%rvo 
                                          + (8ll)*(($$CIV4 + (long long) .ibeg->ibeg) - 1ll))  
                                          with non-vectorizable alignment.
         0           207                  Loop was not SIMD vectorized because it contains 
                                          operation in ((double *)((char *)d-vtmp%addr  + 
                                          -8ll))->vtmp[].rns13.[($$CIV4 + (long long) 
                                          .ibeg->ibeg) - 1ll] + ((double *)((char *)d-dx1a%addr 
                                          + d-dx1a%rvo))->dx1a[].rns20.[($$CIV4 + (long long) 
                                          .ibeg->ibeg) - 1ll] * ((double *)((char *)d-dv%addr  
                                          + -8ll))->dv[].rns18.[($$CIV4 + (long long) 
                                          .ibeg->ibeg) - 1ll] which is not  suitable for SIMD 
                                          vectorization.
         0           207                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           209                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-dx1a%addr  + d-dx1a%rvo 
                                          + (8ll)*(($$CIV4 + (long long) .ibeg->ibeg) - 1ll))  
                                          with non-vectorizable alignment.
         0           209                  Loop was not SIMD vectorized because it contains 
                                          operation in ((double *)((char *)d-btmp%addr  + 
                                          -8ll))->btmp[].rns15.[($$CIV4 + (long long) 
                                          .ibeg->ibeg) - 1ll] + ((double *)((char *)d-dx1a%addr 
                                          + d-dx1a%rvo))->dx1a[].rns20.[($$CIV4 + (long long) 
                                          .ibeg->ibeg) - 1ll] * ((double *)((char *)d-db%addr  
                                          + -8ll))->db[].rns19.[($$CIV4 + (long long) 
                                          .ibeg->ibeg) - 1ll] which is not  suitable for SIMD 
                                          vectorization.
         0           209                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           213                  Loop was not SIMD vectorized because it contains 
                                          operation in ((double *)((char *)d-valp%addr  + 
                                          -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + 
                                          $$CIV4] * dt which is not  suitable for SIMD 
                                          vectorization.
         0           213                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           214                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-vpal%addr  + -8ll + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIV4))  with 
                                          non-vectorizable alignment.
         0           214                  Loop was not SIMD vectorized because it contains 
                                          operation in ( 5.0000000000000000E-001 + q3.rnn3) * 
                                          (qv1 - (((double *)((char *)d-valp%addr  + 
                                          -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + 
                                          $$CIV4] * dt) * ((double *)((char *)d-dv%addr  + 
                                          -8ll))->dv[].rns18.[($$CIV4 + (long long) 
                                          .ibeg->ibeg) - 1ll]) + ( 5.0000000000000000E-001 - 
                                          q3.rnn3) * ((((double *)((char *)d-vtmp%addr  + 
                                          -8ll))->vtmp[].rns13.[(long long) .ibeg->ibeg + 
                                          $$CIV4] - ((double *)((char *)d-dx1a%addr  + 
                                          d-dx1a%rvo))->dx1a[].rns20.[(long long) .ibeg->ibeg + 
                                          $$CIV4] * ((double *)((char *)d-dv%addr  + 
                                          -8ll))->dv[].rns18.[(long long) .ibeg->ibeg + 
                                          $$CIV4]) - (((double *)((char *)d-valp%addr  + 
                                          -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + 
                                          $$CIV4] * dt) * ((double *)((char *)d-dv%addr  + 
                                          -8ll))->dv[].rns18.[(long long) .ibeg->ibeg + 
                                          $$CIV4]) which is not  suitable for SIMD 
                                          vectorization.
         0           214                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           216                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-bpal%addr  + -8ll + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIV4))  with 
                                          non-vectorizable alignment.
         0           216                  Loop was not SIMD vectorized because it contains 
                                          operation in ( 5.0000000000000000E-001 + q3.rnn3) * 
                                          (qb1 - (((double *)((char *)d-valp%addr  + 
                                          -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + 
                                          $$CIV4] * dt) * ((double *)((char *)d-db%addr  + 
                                          -8ll))->db[].rns19.[($$CIV4 + (long long) 
                                          .ibeg->ibeg) - 1ll]) + ( 5.0000000000000000E-001 - 
                                          q3.rnn3) * ((((double *)((char *)d-btmp%addr  + 
                                          -8ll))->btmp[].rns15.[(long long) .ibeg->ibeg + 
                                          $$CIV4] - ((double *)((char *)d-dx1a%addr  + 
                                          d-dx1a%rvo))->dx1a[].rns20.[(long long) .ibeg->ibeg + 
                                          $$CIV4] * ((double *)((char *)d-db%addr  + 
                                          -8ll))->db[].rns19.[(long long) .ibeg->ibeg + 
                                          $$CIV4]) - (((double *)((char *)d-valp%addr  + 
                                          -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + 
                                          $$CIV4] * dt) * ((double *)((char *)d-db%addr  + 
                                          -8ll))->db[].rns19.[(long long) .ibeg->ibeg + 
                                          $$CIV4]) which is not  suitable for SIMD 
                                          vectorization.
         0           216                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           220                  Loop was not SIMD vectorized because it contains 
                                          operation in ((double *)((char *)d-valm%addr  + 
                                          -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + 
                                          $$CIV4] * dt which is not  suitable for SIMD 
                                          vectorization.
         0           220                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           221                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-vmal%addr  + -8ll + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIV4))  with 
                                          non-vectorizable alignment.
         0           221                  Loop was not SIMD vectorized because it contains 
                                          operation in ( 5.0000000000000000E-001 + q3) * (qv1 - 
                                          (((double *)((char *)d-valm%addr  + 
                                          -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + 
                                          $$CIV4] * dt) * ((double *)((char *)d-dv%addr  + 
                                          -8ll))->dv[].rns18.[($$CIV4 + (long long) 
                                          .ibeg->ibeg) - 1ll]) + ( 5.0000000000000000E-001 - 
                                          q3) * ((((double *)((char *)d-vtmp%addr  + 
                                          -8ll))->vtmp[].rns13.[(long long) .ibeg->ibeg + 
                                          $$CIV4] - ((double *)((char *)d-dx1a%addr  + 
                                          d-dx1a%rvo))->dx1a[].rns20.[(long long) .ibeg->ibeg + 
                                          $$CIV4] * ((double *)((char *)d-dv%addr  + 
                                          -8ll))->dv[].rns18.[(long long) .ibeg->ibeg + 
                                          $$CIV4]) - (((double *)((char *)d-valm%addr  + 
                                          -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + 
                                          $$CIV4] * dt) * ((double *)((char *)d-dv%addr  + 
                                          -8ll))->dv[].rns18.[(long long) .ibeg->ibeg + 
                                          $$CIV4]) which is not  suitable for SIMD 
                                          vectorization.
         0           221                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           223                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-bmal%addr  + -8ll + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIV4))  with 
                                          non-vectorizable alignment.
         0           223                  Loop was not SIMD vectorized because it contains 
                                          operation in ( 5.0000000000000000E-001 + q3) * (qb1 - 
                                          (((double *)((char *)d-valm%addr  + 
                                          -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + 
                                          $$CIV4] * dt) * ((double *)((char *)d-db%addr  + 
                                          -8ll))->db[].rns19.[($$CIV4 + (long long) 
                                          .ibeg->ibeg) - 1ll]) + ( 5.0000000000000000E-001 - 
                                          q3) * ((((double *)((char *)d-btmp%addr  + 
                                          -8ll))->btmp[].rns15.[(long long) .ibeg->ibeg + 
                                          $$CIV4] - ((double *)((char *)d-dx1a%addr  + 
                                          d-dx1a%rvo))->dx1a[].rns20.[(long long) .ibeg->ibeg + 
                                          $$CIV4] * ((double *)((char *)d-db%addr  + 
                                          -8ll))->db[].rns19.[(long long) .ibeg->ibeg + 
                                          $$CIV4]) - (((double *)((char *)d-valm%addr  + 
                                          -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + 
                                          $$CIV4] * dt) * ((double *)((char *)d-db%addr  + 
                                          -8ll))->db[].rns19.[(long long) .ibeg->ibeg + 
                                          $$CIV4]) which is not  suitable for SIMD 
                                          vectorization.
         0           223                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           230                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           231                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-bstar%addr  + -8ll + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIV5))  with 
                                          non-vectorizable alignment.
         0           231                  Loop was not SIMD vectorized because it contains 
                                          operation in (((((double *)((char *)d-bpal%addr  + 
                                          -8ll))->bpal[].rns22.[(long long) .ibeg->ibeg + 
                                          $$CIV5] * ((double *)((char *)d-srdpi%addr  + 
                                          -8ll))->srdpi[].rns9.[(long long) .ibeg->ibeg + 
                                          $$CIV5] + ((double *)((char *)d-bmal%addr  + 
                                          -8ll))->bmal[].rns24.[(long long) .ibeg->ibeg + 
                                          $$CIV5] * ((double *)((char *)d-srdmi%addr  + 
                                          -8ll))->srdmi[].rns10.[(long long) .ibeg->ibeg + 
                                          $$CIV5]) + q1 * (((double *)((char *)d-vpal%addr  + 
                                          -8ll))->vpal[].rns21.[(long long) .ibeg->ibeg + 
                                          $$CIV5] - ((double *)((char *)d-vmal%addr  + 
                                          -8ll))->vmal[].rns23.[(long long) .ibeg->ibeg + 
                                          $$CIV5])) * ((double *)((char *)d-g2a%addr  + 
                                          d-g2a%rvo))->g2a[].rns26.[(long long) .ibeg->ibeg + 
                                          $$CIV5]) / (((double *)((char *)d-srdpi%addr  + 
                                          -8ll))->srdpi[].rns9.[(long long) .ibeg->ibeg + 
                                          $$CIV5] + ((double *)((char *)d-srdmi%addr  + 
                                          -8ll))->srdmi[].rns10.[(long long) .ibeg->ibeg + 
                                          $$CIV5]) which is not  suitable for SIMD 
                                          vectorization.
         0           231                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           239             7    Loop was not SIMD vectorized because it is not 
                                          profitable to vectorize.
         0           240                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-st2%addr  + -8ll - 
                                          (max((long long) in,0ll) * 8ll + 8ll * (max((long 
                                          long) jn,0ll) * max((long long) in,0ll))) + (8ll * 
                                          (max((long long) jn,0ll) * max((long long) 
                                          in,0ll)))*((long long) ks) + (max((long long) in,0ll) 
                                          * 8ll)*((long long) js) + (8ll)*((long long) 
                                          .ibeg->ibeg + $$CIV6))  with non-vectorizable 
                                          alignment.
         0           240                  Loop was not SIMD vectorized because it contains 
                                          operation in ((double *)((char *)d-st2%addr  + -8ll - 
                                          (max((long long) in,0ll) * 8ll + 8ll * (max((long 
                                          long) jn,0ll) * max((long long) 
                                          in,0ll)))))->st2[].rns5.[(long long) ks][(long long) 
                                          js][(long long) .ibeg->ibeg + $$CIV6] + (((((double 
                                          *)((char *)d-bave%addr  + -8ll))->bave[].rns7.[1ll + 
                                          ($$CIV6 + (long long) .ibeg->ibeg)] + ((double 
                                          *)((char *)d-bave%addr  + -8ll))->bave[].rns7.[(long 
                                          long) .ibeg->ibeg + $$CIV6]) * ((double *)((char 
                                          *)d-g2bi%addr  + d-g2bi%rvo))->g2bi[].rns28.[(long 
                                          long) .ibeg->ibeg + $$CIV6]) * (((double *)((char 
                                          *)d-bstar%addr  + -8ll))->bstar[].rns25.[1ll + 
                                          ($$CIV6 + (long long) .ibeg->ibeg)] - ((double 
                                          *)((char *)d-bstar%addr  + 
                                          -8ll))->bstar[].rns25.[(long long) .ibeg->ibeg + 
                                          $$CIV6])) * ((double *)((char *)d-dx1ai%addr  + 
                                          d-dx1ai%rvo))->dx1ai[].rns27.[(long long) .ibeg->ibeg 
                                          + $$CIV6] which is not  suitable for SIMD 
                                          vectorization.
         0           240                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           261                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-bave%addr  + -8ll + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIV7))  with 
                                          non-vectorizable alignment.
         0           261                  Loop was not SIMD vectorized because it contains 
                                          operation in  5.0000000000000000E-001 * (((double 
                                          *)((char *)d-b1%addr  + d-b1%rvo))->b1[].rns8.[(long 
                                          long) ks][(long long) js][(long long) .ibeg->ibeg + 
                                          $$CIV7] + ((double *)((char *)d-b1%addr  + 
                                          d-b1%rvo))->b1[].rns8.[(long long) ks][(long long) 
                                          js][(long long) .ibeg->ibeg + $$CIV7]) which is not  
                                          suitable for SIMD vectorization.
         0           261                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-b1%addr  + d-b1%rvo + 
                                          (d-b1%bounds%mult[].off776)*((long long) ks) + 
                                          (d-b1%bounds%mult[].off800)*((long long) js) + 
                                          (d-b1%bounds%mult[].off824)*((long long) .ibeg->ibeg 
                                          + $$CIV7)) with  non-vectorizable strides.
         0           261                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           263                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-srdpi%addr  + -8ll + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIV7))  with 
                                          non-vectorizable alignment.
         0           263                  Loop was not SIMD vectorized because it contains 
                                          operation in  1.0000000000000000E+000 / ((double 
                                          *)((char *)d-srd3%addr  + 
                                          d-srd3%rvo))->srd3[].rns3.[(long long) ks][(long 
                                          long) js][(long long) .ibeg->ibeg + $$CIV7] which is 
                                          not  suitable for SIMD vectorization.
         0           263                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-srd3%addr  + d-srd3%rvo 
                                          + (d-srd3%bounds%mult[].off256)*((long long) ks) + 
                                          (d-srd3%bounds%mult[].off280)*((long long) js) + 
                                          (d-srd3%bounds%mult[].off304)*((long long) 
                                          .ibeg->ibeg + $$CIV7)) with  non-vectorizable strides.
         0           263                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           264                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-srdmi%addr  + -8ll + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIV7))  with 
                                          non-vectorizable alignment.
         0           264                  Loop was not SIMD vectorized because it contains 
                                          operation in  1.0000000000000000E+000 / ((double 
                                          *)((char *)d-srd3%addr  + 
                                          d-srd3%rvo))->srd3[].rns3.[(long long) ks][(long 
                                          long) js][($$CIV7 + (long long) .ibeg->ibeg) - 1ll] 
                                          which is not  suitable for SIMD vectorization.
         0           264                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-srd3%addr  + d-srd3%rvo 
                                          + (d-srd3%bounds%mult[].off256)*((long long) ks) + 
                                          (d-srd3%bounds%mult[].off280)*((long long) js) + 
                                          (d-srd3%bounds%mult[].off304)*(($$CIV7 + (long long) 
                                          .ibeg->ibeg) - 1ll)) with  non-vectorizable strides.
         0           264                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           265                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-valp%addr  + -8ll + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIV7))  with 
                                          non-vectorizable alignment.
         0           265                  Loop was not SIMD vectorized because it contains 
                                          operation in - (abs(((double *)((char *)d-bave%addr  
                                          + -8ll))->bave[].rns7.[(long long) .ibeg->ibeg + 
                                          $$CIV7]) * ( 1.0000000000000000E+000 / ((double 
                                          *)((char *)d-srd3%addr  + 
                                          d-srd3%rvo))->srd3[].rns3.[(long long) ks][(long 
                                          long) js][(long long) .ibeg->ibeg + $$CIV7])) which 
                                          is not  suitable for SIMD vectorization.
         0           265                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-srd3%addr  + d-srd3%rvo 
                                          + (d-srd3%bounds%mult[].off256)*((long long) ks) + 
                                          (d-srd3%bounds%mult[].off280)*((long long) js) + 
                                          (d-srd3%bounds%mult[].off304)*((long long) 
                                          .ibeg->ibeg + $$CIV7)) with  non-vectorizable strides.
         0           265                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           266                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-valm%addr  + -8ll + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIV7))  with 
                                          non-vectorizable alignment.
         0           266                  Loop was not SIMD vectorized because it contains 
                                          operation in abs(((double *)((char *)d-bave%addr  + 
                                          -8ll))->bave[].rns7.[(long long) .ibeg->ibeg + 
                                          $$CIV7]) * ( 1.0000000000000000E+000 / ((double 
                                          *)((char *)d-srd3%addr  + 
                                          d-srd3%rvo))->srd3[].rns3.[(long long) ks][(long 
                                          long) js][($$CIV7 + (long long) .ibeg->ibeg) - 1ll]) 
                                          which is not  suitable for SIMD vectorization.
         0           266                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-srd3%addr  + d-srd3%rvo 
                                          + (d-srd3%bounds%mult[].off256)*((long long) ks) + 
                                          (d-srd3%bounds%mult[].off280)*((long long) js) + 
                                          (d-srd3%bounds%mult[].off304)*(($$CIV7 + (long long) 
                                          .ibeg->ibeg) - 1ll)) with  non-vectorizable strides.
         0           266                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           273                  Loop was not SIMD vectorized because it contains 
                                          operation in ((double *)((char *).u3  + -8ll - 
                                          (max((long long) in,0ll) * 8ll + 8ll * (max((long 
                                          long) jn,0ll) * max((long long) 
                                          in,0ll)))))->u3[][(long long) ks][(long long) 
                                          js][($$CIV8 + (long long) .ibeg->ibeg) - 2ll] - 
                                          ((double *)((char *)d-vg3%addr  + 
                                          d-vg3%rvo))->vg3[].rns29.[(long long) ks] which is 
                                          not  suitable for SIMD vectorization.
         0           273                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           274                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-btmp%addr  + -8ll + 
                                          (8ll)*(($$CIV8 + (long long) .ibeg->ibeg) - 2ll))  
                                          with non-vectorizable alignment.
         0           274                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-b3%addr  + d-b3%rvo + 
                                          (d-b3%bounds%mult[].off984)*((long long) ks) + 
                                          (d-b3%bounds%mult[].off1008)*((long long) js) + 
                                          (d-b3%bounds%mult[].off1032)*(($$CIV8 + (long long) 
                                          .ibeg->ibeg) - 2ll)) with  non-vectorizable strides.
         0           274                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           284                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-dx1bi%addr  + 
                                          d-dx1bi%rvo + (8ll)*(($$CIV9 + (long long) 
                                          .ibeg->ibeg) - 1ll))  with non-vectorizable alignment.
         0           284                  Loop was not SIMD vectorized because it contains 
                                          operation in (((double *)((char *)d-vtmp%addr  + 
                                          -8ll))->vtmp[].rns13.[($$CIV9 + (long long) 
                                          .ibeg->ibeg) - 1ll] - ((double *)((char *)d-vtmp%addr 
                                          + -8ll))->vtmp[].rns13.[($$CIV9 + (long long) 
                                          .ibeg->ibeg) - 2ll]) * ((double *)((char 
                                          *)d-dx1bi%addr  + 
                                          d-dx1bi%rvo))->dx1bi[].rns17.[($$CIV9 + (long long) 
                                          .ibeg->ibeg) - 1ll] which is not  suitable for SIMD 
                                          vectorization.
         0           284                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           285                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-dx1bi%addr  + 
                                          d-dx1bi%rvo + (8ll)*((long long) .ibeg->ibeg + 
                                          $$CIV9))  with non-vectorizable alignment.
         0           285                  Loop was not SIMD vectorized because it contains 
                                          operation in (((double *)((char *)d-vtmp%addr  + 
                                          -8ll))->vtmp[].rns13.[(long long) .ibeg->ibeg + 
                                          $$CIV9] - ((double *)((char *)d-vtmp%addr  + 
                                          -8ll))->vtmp[].rns13.[($$CIV9 + (long long) 
                                          .ibeg->ibeg) - 1ll]) * ((double *)((char 
                                          *)d-dx1bi%addr  + d-dx1bi%rvo))->dx1bi[].rns17.[(long 
                                          long) .ibeg->ibeg + $$CIV9] which is not  suitable 
                                          for SIMD vectorization.
         0           285                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           285                  Loop was not SIMD vectorized because it contains 
                                          operation in dqm.rnnA + dqp.rnn7 which is not  
                                          suitable for SIMD vectorization.
         0           285                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           286                  Loop was not SIMD vectorized because it contains 
                                          operation in (max(dqm.rnnA * dqp.rnn7, 
                                          0.0000000000000000E+000) * $$RET2) / max(abs(dqm.rnnA 
                                          + dqp.rnn7), 1.0000000000000000E-099) which is not  
                                          suitable for SIMD vectorization.
         0           286                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           289                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-dx1bi%addr  + 
                                          d-dx1bi%rvo + (8ll)*(($$CIV9 + (long long) 
                                          .ibeg->ibeg) - 1ll))  with non-vectorizable alignment.
         0           289                  Loop was not SIMD vectorized because it contains 
                                          operation in (((double *)((char *)d-btmp%addr  + 
                                          -8ll))->btmp[].rns15.[($$CIV9 + (long long) 
                                          .ibeg->ibeg) - 1ll] - ((double *)((char *)d-btmp%addr 
                                          + -8ll))->btmp[].rns15.[($$CIV9 + (long long) 
                                          .ibeg->ibeg) - 2ll]) * ((double *)((char 
                                          *)d-dx1bi%addr  + 
                                          d-dx1bi%rvo))->dx1bi[].rns17.[($$CIV9 + (long long) 
                                          .ibeg->ibeg) - 1ll] which is not  suitable for SIMD 
                                          vectorization.
         0           289                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           290                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-dx1bi%addr  + 
                                          d-dx1bi%rvo + (8ll)*((long long) .ibeg->ibeg + 
                                          $$CIV9))  with non-vectorizable alignment.
         0           290                  Loop was not SIMD vectorized because it contains 
                                          operation in (((double *)((char *)d-btmp%addr  + 
                                          -8ll))->btmp[].rns15.[(long long) .ibeg->ibeg + 
                                          $$CIV9] - ((double *)((char *)d-btmp%addr  + 
                                          -8ll))->btmp[].rns15.[($$CIV9 + (long long) 
                                          .ibeg->ibeg) - 1ll]) * ((double *)((char 
                                          *)d-dx1bi%addr  + d-dx1bi%rvo))->dx1bi[].rns17.[(long 
                                          long) .ibeg->ibeg + $$CIV9] which is not  suitable 
                                          for SIMD vectorization.
         0           290                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           290                  Loop was not SIMD vectorized because it contains 
                                          operation in dqm.rnnB + dqp.rnn8 which is not  
                                          suitable for SIMD vectorization.
         0           290                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           291                  Loop was not SIMD vectorized because it contains 
                                          operation in (max(dqm.rnnB * dqp.rnn8, 
                                          0.0000000000000000E+000) * $$RET3) / max(abs(dqm.rnnB 
                                          + dqp.rnn8), 1.0000000000000000E-099) which is not  
                                          suitable for SIMD vectorization.
         0           291                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           300                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-dx1a%addr  + d-dx1a%rvo 
                                          + (8ll)*(($$CIVA + (long long) .ibeg->ibeg) - 1ll))  
                                          with non-vectorizable alignment.
         0           300                  Loop was not SIMD vectorized because it contains 
                                          operation in ((double *)((char *)d-vtmp%addr  + 
                                          -8ll))->vtmp[].rns13.[($$CIVA + (long long) 
                                          .ibeg->ibeg) - 1ll] + ((double *)((char *)d-dx1a%addr 
                                          + d-dx1a%rvo))->dx1a[].rns20.[($$CIVA + (long long) 
                                          .ibeg->ibeg) - 1ll] * ((double *)((char *)d-dv%addr  
                                          + -8ll))->dv[].rns18.[($$CIVA + (long long) 
                                          .ibeg->ibeg) - 1ll] which is not  suitable for SIMD 
                                          vectorization.
         0           300                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           302                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-dx1a%addr  + d-dx1a%rvo 
                                          + (8ll)*(($$CIVA + (long long) .ibeg->ibeg) - 1ll))  
                                          with non-vectorizable alignment.
         0           302                  Loop was not SIMD vectorized because it contains 
                                          operation in ((double *)((char *)d-btmp%addr  + 
                                          -8ll))->btmp[].rns15.[($$CIVA + (long long) 
                                          .ibeg->ibeg) - 1ll] + ((double *)((char *)d-dx1a%addr 
                                          + d-dx1a%rvo))->dx1a[].rns20.[($$CIVA + (long long) 
                                          .ibeg->ibeg) - 1ll] * ((double *)((char *)d-db%addr  
                                          + -8ll))->db[].rns19.[($$CIVA + (long long) 
                                          .ibeg->ibeg) - 1ll] which is not  suitable for SIMD 
                                          vectorization.
         0           302                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           306                  Loop was not SIMD vectorized because it contains 
                                          operation in ((double *)((char *)d-valp%addr  + 
                                          -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + 
                                          $$CIVA] * dt which is not  suitable for SIMD 
                                          vectorization.
         0           306                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           307                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-vpal%addr  + -8ll + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIVA))  with 
                                          non-vectorizable alignment.
         0           307                  Loop was not SIMD vectorized because it contains 
                                          operation in ( 5.0000000000000000E-001 + q3.rnn1) * 
                                          (qv1.rnn2C - (((double *)((char *)d-valp%addr  + 
                                          -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + 
                                          $$CIVA] * dt) * ((double *)((char *)d-dv%addr  + 
                                          -8ll))->dv[].rns18.[($$CIVA + (long long) 
                                          .ibeg->ibeg) - 1ll]) + ( 5.0000000000000000E-001 - 
                                          q3.rnn1) * ((((double *)((char *)d-vtmp%addr  + 
                                          -8ll))->vtmp[].rns13.[(long long) .ibeg->ibeg + 
                                          $$CIVA] - ((double *)((char *)d-dx1a%addr  + 
                                          d-dx1a%rvo))->dx1a[].rns20.[(long long) .ibeg->ibeg + 
                                          $$CIVA] * ((double *)((char *)d-dv%addr  + 
                                          -8ll))->dv[].rns18.[(long long) .ibeg->ibeg + 
                                          $$CIVA]) - (((double *)((char *)d-valp%addr  + 
                                          -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + 
                                          $$CIVA] * dt) * ((double *)((char *)d-dv%addr  + 
                                          -8ll))->dv[].rns18.[(long long) .ibeg->ibeg + 
                                          $$CIVA]) which is not  suitable for SIMD 
                                          vectorization.
         0           307                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           309                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-bpal%addr  + -8ll + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIVA))  with 
                                          non-vectorizable alignment.
         0           309                  Loop was not SIMD vectorized because it contains 
                                          operation in ( 5.0000000000000000E-001 + q3.rnn1) * 
                                          (qb1.rnn2A - (((double *)((char *)d-valp%addr  + 
                                          -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + 
                                          $$CIVA] * dt) * ((double *)((char *)d-db%addr  + 
                                          -8ll))->db[].rns19.[($$CIVA + (long long) 
                                          .ibeg->ibeg) - 1ll]) + ( 5.0000000000000000E-001 - 
                                          q3.rnn1) * ((((double *)((char *)d-btmp%addr  + 
                                          -8ll))->btmp[].rns15.[(long long) .ibeg->ibeg + 
                                          $$CIVA] - ((double *)((char *)d-dx1a%addr  + 
                                          d-dx1a%rvo))->dx1a[].rns20.[(long long) .ibeg->ibeg + 
                                          $$CIVA] * ((double *)((char *)d-db%addr  + 
                                          -8ll))->db[].rns19.[(long long) .ibeg->ibeg + 
                                          $$CIVA]) - (((double *)((char *)d-valp%addr  + 
                                          -8ll))->valp[].rns11.[(long long) .ibeg->ibeg + 
                                          $$CIVA] * dt) * ((double *)((char *)d-db%addr  + 
                                          -8ll))->db[].rns19.[(long long) .ibeg->ibeg + 
                                          $$CIVA]) which is not  suitable for SIMD 
                                          vectorization.
         0           309                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           313                  Loop was not SIMD vectorized because it contains 
                                          operation in ((double *)((char *)d-valm%addr  + 
                                          -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + 
                                          $$CIVA] * dt which is not  suitable for SIMD 
                                          vectorization.
         0           313                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           314                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-vmal%addr  + -8ll + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIVA))  with 
                                          non-vectorizable alignment.
         0           314                  Loop was not SIMD vectorized because it contains 
                                          operation in ( 5.0000000000000000E-001 + q3.rnn2) * 
                                          (qv1.rnn2C - (((double *)((char *)d-valm%addr  + 
                                          -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + 
                                          $$CIVA] * dt) * ((double *)((char *)d-dv%addr  + 
                                          -8ll))->dv[].rns18.[($$CIVA + (long long) 
                                          .ibeg->ibeg) - 1ll]) + ( 5.0000000000000000E-001 - 
                                          q3.rnn2) * ((((double *)((char *)d-vtmp%addr  + 
                                          -8ll))->vtmp[].rns13.[(long long) .ibeg->ibeg + 
                                          $$CIVA] - ((double *)((char *)d-dx1a%addr  + 
                                          d-dx1a%rvo))->dx1a[].rns20.[(long long) .ibeg->ibeg + 
                                          $$CIVA] * ((double *)((char *)d-dv%addr  + 
                                          -8ll))->dv[].rns18.[(long long) .ibeg->ibeg + 
                                          $$CIVA]) - (((double *)((char *)d-valm%addr  + 
                                          -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + 
                                          $$CIVA] * dt) * ((double *)((char *)d-dv%addr  + 
                                          -8ll))->dv[].rns18.[(long long) .ibeg->ibeg + 
                                          $$CIVA]) which is not  suitable for SIMD 
                                          vectorization.
         0           314                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           316                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-bmal%addr  + -8ll + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIVA))  with 
                                          non-vectorizable alignment.
         0           316                  Loop was not SIMD vectorized because it contains 
                                          operation in ( 5.0000000000000000E-001 + q3.rnn2) * 
                                          (qb1.rnn2A - (((double *)((char *)d-valm%addr  + 
                                          -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + 
                                          $$CIVA] * dt) * ((double *)((char *)d-db%addr  + 
                                          -8ll))->db[].rns19.[($$CIVA + (long long) 
                                          .ibeg->ibeg) - 1ll]) + ( 5.0000000000000000E-001 - 
                                          q3.rnn2) * ((((double *)((char *)d-btmp%addr  + 
                                          -8ll))->btmp[].rns15.[(long long) .ibeg->ibeg + 
                                          $$CIVA] - ((double *)((char *)d-dx1a%addr  + 
                                          d-dx1a%rvo))->dx1a[].rns20.[(long long) .ibeg->ibeg + 
                                          $$CIVA] * ((double *)((char *)d-db%addr  + 
                                          -8ll))->db[].rns19.[(long long) .ibeg->ibeg + 
                                          $$CIVA]) - (((double *)((char *)d-valm%addr  + 
                                          -8ll))->valm[].rns12.[(long long) .ibeg->ibeg + 
                                          $$CIVA] * dt) * ((double *)((char *)d-db%addr  + 
                                          -8ll))->db[].rns19.[(long long) .ibeg->ibeg + 
                                          $$CIVA]) which is not  suitable for SIMD 
                                          vectorization.
         0           316                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           323                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           324                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-bstar%addr  + -8ll + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIVB))  with 
                                          non-vectorizable alignment.
         0           324                  Loop was not SIMD vectorized because it contains 
                                          operation in (((((double *)((char *)d-bpal%addr  + 
                                          -8ll))->bpal[].rns22.[(long long) .ibeg->ibeg + 
                                          $$CIVB] * ((double *)((char *)d-srdpi%addr  + 
                                          -8ll))->srdpi[].rns9.[(long long) .ibeg->ibeg + 
                                          $$CIVB] + ((double *)((char *)d-bmal%addr  + 
                                          -8ll))->bmal[].rns24.[(long long) .ibeg->ibeg + 
                                          $$CIVB] * ((double *)((char *)d-srdmi%addr  + 
                                          -8ll))->srdmi[].rns10.[(long long) .ibeg->ibeg + 
                                          $$CIVB]) + q1.rnn28 * (((double *)((char 
                                          *)d-vpal%addr  + -8ll))->vpal[].rns21.[(long long) 
                                          .ibeg->ibeg + $$CIVB] - ((double *)((char 
                                          *)d-vmal%addr  + -8ll))->vmal[].rns23.[(long long) 
                                          .ibeg->ibeg + $$CIVB])) * ((double *)((char 
                                          *)d-g31a%addr  + d-g31a%rvo))->g31a[].rns31.[(long 
                                          long) .ibeg->ibeg + $$CIVB]) / (((double *)((char 
                                          *)d-srdpi%addr  + -8ll))->srdpi[].rns9.[(long long) 
                                          .ibeg->ibeg + $$CIVB] + ((double *)((char 
                                          *)d-srdmi%addr  + -8ll))->srdmi[].rns10.[(long long) 
                                          .ibeg->ibeg + $$CIVB]) which is not  suitable for 
                                          SIMD vectorization.
         0           324                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           332            13    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0           332            13    Loop was not SIMD vectorized because it contains 
                                          control flow.
         0           353                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).w1  + -8ll - (max((long 
                                          long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) 
                                          * max((long long) in,0ll))) + (8ll * (max((long long) 
                                          jn,0ll) * max((long long) in,0ll)))*((long long) ks) 
                                          + (max((long long) in,0ll) * 8ll)*((long long) js) + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIVD))  with 
                                          non-vectorizable alignment.
         0           353                  Loop was not SIMD vectorized because it contains 
                                          operation in ((double *)((char *).u1  + -8ll - 
                                          (max((long long) in,0ll) * 8ll + 8ll * (max((long 
                                          long) jn,0ll) * max((long long) 
                                          in,0ll)))))->u1[][(long long) ks][(long long) 
                                          js][(long long) .ibeg->ibeg + $$CIVD] + (( 
                                          5.0000000000000000E-001 * dt) * ((double *)((char 
                                          *)d-st1%addr  + -8ll - (max((long long) in,0ll) * 8ll 
                                          + 8ll * (max((long long) jn,0ll) * max((long long) 
                                          in,0ll)))))->st1[].rns4.[(long long) ks][(long long) 
                                          js][(long long) .ibeg->ibeg + $$CIVD]) / (((double 
                                          *)((char *)d-srd1%addr  + 
                                          d-srd1%rvo))->srd1[].rns0.[(long long) ks][(long 
                                          long) js][(long long) .ibeg->ibeg + $$CIVD] * 
                                          ((double *)((char *)d-srd1%addr  + 
                                          d-srd1%rvo))->srd1[].rns0.[(long long) ks][(long 
                                          long) js][(long long) .ibeg->ibeg + $$CIVD]) which is 
                                          not  suitable for SIMD vectorization.
         0           353                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-srd1%addr  + d-srd1%rvo 
                                          + (d-srd1%bounds%mult[].off48)*((long long) ks) + 
                                          (d-srd1%bounds%mult[].off72)*((long long) js) + 
                                          (d-srd1%bounds%mult[].off96)*((long long) .ibeg->ibeg 
                                          + $$CIVD)) with  non-vectorizable strides.
         0           353                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           354                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).w2  + -8ll - (max((long 
                                          long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) 
                                          * max((long long) in,0ll))) + (8ll * (max((long long) 
                                          jn,0ll) * max((long long) in,0ll)))*((long long) ks) 
                                          + (max((long long) in,0ll) * 8ll)*((long long) js) + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIVD))  with 
                                          non-vectorizable alignment.
         0           354                  Loop was not SIMD vectorized because it contains 
                                          operation in ((double *)((char *).u2  + -8ll - 
                                          (max((long long) in,0ll) * 8ll + 8ll * (max((long 
                                          long) jn,0ll) * max((long long) 
                                          in,0ll)))))->u2[][(long long) ks][(long long) 
                                          js][(long long) .ibeg->ibeg + $$CIVD] + (( 
                                          5.0000000000000000E-001 * dt) * ((double *)((char 
                                          *)d-st2%addr  + -8ll - (max((long long) in,0ll) * 8ll 
                                          + 8ll * (max((long long) jn,0ll) * max((long long) 
                                          in,0ll)))))->st2[].rns5.[(long long) ks][(long long) 
                                          js][(long long) .ibeg->ibeg + $$CIVD]) / (((double 
                                          *)((char *)d-srd2%addr  + 
                                          d-srd2%rvo))->srd2[].rns2.[(long long) ks][(long 
                                          long) js][(long long) .ibeg->ibeg + $$CIVD] * 
                                          ((double *)((char *)d-srd2%addr  + 
                                          d-srd2%rvo))->srd2[].rns2.[(long long) ks][(long 
                                          long) js][(long long) .ibeg->ibeg + $$CIVD]) which is 
                                          not  suitable for SIMD vectorization.
         0           354                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-srd2%addr  + d-srd2%rvo 
                                          + (d-srd2%bounds%mult[].off152)*((long long) ks) + 
                                          (d-srd2%bounds%mult[].off176)*((long long) js) + 
                                          (d-srd2%bounds%mult[].off200)*((long long) 
                                          .ibeg->ibeg + $$CIVD)) with  non-vectorizable strides.
         0           354                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           355                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).w3  + -8ll - (max((long 
                                          long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) 
                                          * max((long long) in,0ll))) + (8ll * (max((long long) 
                                          jn,0ll) * max((long long) in,0ll)))*((long long) ks) 
                                          + (max((long long) in,0ll) * 8ll)*((long long) js) + 
                                          (8ll)*((long long) .ibeg->ibeg + $$CIVD))  with 
                                          non-vectorizable alignment.
         0           355                  Loop was not SIMD vectorized because it contains 
                                          operation in ((double *)((char *).u3  + -8ll - 
                                          (max((long long) in,0ll) * 8ll + 8ll * (max((long 
                                          long) jn,0ll) * max((long long) 
                                          in,0ll)))))->u3[][(long long) ks][(long long) 
                                          js][(long long) .ibeg->ibeg + $$CIVD] + (( 
                                          5.0000000000000000E-001 * dt) * ((double *)((char 
                                          *)d-st3%addr  + -8ll - (max((long long) in,0ll) * 8ll 
                                          + 8ll * (max((long long) jn,0ll) * max((long long) 
                                          in,0ll)))))->st3[].rns6.[(long long) ks][(long long) 
                                          js][(long long) .ibeg->ibeg + $$CIVD]) / (((double 
                                          *)((char *)d-srd3%addr  + 
                                          d-srd3%rvo))->srd3[].rns3.[(long long) ks][(long 
                                          long) js][(long long) .ibeg->ibeg + $$CIVD] * 
                                          ((double *)((char *)d-srd3%addr  + 
                                          d-srd3%rvo))->srd3[].rns3.[(long long) ks][(long 
                                          long) js][(long long) .ibeg->ibeg + $$CIVD]) which is 
                                          not  suitable for SIMD vectorization.
         0           355                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-srd3%addr  + d-srd3%rvo 
                                          + (d-srd3%bounds%mult[].off256)*((long long) ks) + 
                                          (d-srd3%bounds%mult[].off280)*((long long) js) + 
                                          (d-srd3%bounds%mult[].off304)*((long long) 
                                          .ibeg->ibeg + $$CIVD)) with  non-vectorizable strides.
         0           355                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.


    11|         SUBROUTINE lorentz_1d (ibeg, iend, jbeg, jend, kbeg, kend, u1, u2, u3, w1, w2, w3)
   147|           d-dv%addr = _alloca(max(int(%VAL(ijkn)),0) * 8)
                  d-db%addr = _alloca(max(int(%VAL(ijkn)),0) * 8)
                  d-bave%addr = _alloca(max(int(%VAL(ijkn)),0) * 8)
                  d-srdpi%addr = _alloca(max(int(%VAL(ijkn)),0) * 8)
                  d-srdmi%addr = _alloca(max(int(%VAL(ijkn)),0) * 8)
                  d-valp%addr = _alloca(max(int(%VAL(ijkn)),0) * 8)
                  d-valm%addr = _alloca(max(int(%VAL(ijkn)),0) * 8)
                  d-vtmp%addr = _alloca(max(int(%VAL(ijkn)),0) * 8)
                  d-btmp%addr = _alloca(max(int(%VAL(ijkn)),0) * 8)
                  d-vpal%addr = _alloca(max(int(%VAL(ijkn)),0) * 8)
                  d-vmal%addr = _alloca(max(int(%VAL(ijkn)),0) * 8)
                  d-bpal%addr = _alloca(max(int(%VAL(ijkn)),0) * 8)
                  d-bmal%addr = _alloca(max(int(%VAL(ijkn)),0) * 8)
                  d-bstar%addr = _alloca(max(int(%VAL(ijkn)),0) * 8)
                  d-st1%addr = _alloca(8 * (max(int(%VAL(kn)),0) * (max(int(&
                &   %VAL(jn)),0) * max(int(%VAL(in)),0))))
                  d-st2%addr = _alloca(8 * (max(int(%VAL(kn)),0) * (max(int(&
                &   %VAL(jn)),0) * max(int(%VAL(in)),0))))
                  d-st3%addr = _alloca(8 * (max(int(%VAL(kn)),0) * (max(int(&
                &   %VAL(jn)),0) * max(int(%VAL(in)),0))))
   144|           IF ((1 + (int((iend + 1)) - int((ibeg - 1))) > 0)) THEN
                    $$CIV0 = 0
                    $$PRC2C = d-d%addr%d(int(ibeg) - 2,int(js),int(ks))
       Id=1         DO $$CIV0 = $$CIV0, int((1 + (int((iend + 1)) - int((ibeg &
                &       - 1)))))-1
                      $$PRC2D = d-d%addr%d((int(ibeg) + $$CIV0) - 1,int(js),int(&
                &       ks))
   145|               d-srd1%addr%srd1(($$CIV0 + int(ibeg)) - 1,int(js),int(ks))&
                &        = _sqrt( 5.0000000000000000E-001 * (%VAL($$PRC2D) + %VAL(&
                &       $$PRC2C)))
   146|               $$csx0 = _sqrt( 5.0000000000000000E-001 * (%VAL($$PRC2D) &
                &       + %VAL($$PRC2D)))
                      d-srd2%addr%srd2(($$CIV0 + int(ibeg)) - 1,int(js),int(ks))&
                &        = $$csx0
   147|               d-srd3%addr%srd3(($$CIV0 + int(ibeg)) - 1,int(js),int(ks))&
                &        = $$csx0
   148|               d-st1%addr%st1[].rns4.(($$CIV0 + int(ibeg)) - 1,int(js),&
                &       int(ks)) =  0.0000000000000000E+000
   149|               d-st2%addr%st2[].rns5.(($$CIV0 + int(ibeg)) - 1,int(js),&
                &       int(ks)) =  0.0000000000000000E+000
   150|               d-st3%addr%st3[].rns6.(($$CIV0 + int(ibeg)) - 1,int(js),&
                &       int(ks)) =  0.0000000000000000E+000
                      $$PRC2C = $$PRC2D
   151|             ENDDO
                  ENDIF
   168|           IF ((1 + (int((iend + 1)) - int(ibeg)) > 0)) THEN
                    $$CIV1 = 0
                    $$PRC2A = d-srd2%addr%srd2(int(ibeg) - 1,int(js),int(ks))
       Id=2         DO $$CIV1 = $$CIV1, int((1 + (int((iend + 1)) - int(ibeg))&
                &       ))-1
                      $$PRC2B = d-srd2%addr%srd2(int(ibeg) + $$CIV1,int(js),int(&
                &       ks))
   169|               $$csx1 =  5.0000000000000000E-001 * (d-b1%addr%b1(int(&
                &       ibeg) + $$CIV1,int(js),int(ks)) + d-b1%addr%b1(int(ibeg) &
                &       + $$CIV1,int(js),int(ks)))
                      d-bave%addr%bave[].rns7.(int(ibeg) + $$CIV1) = $$csx1
   171|               d-srdpi%addr%srdpi[].rns9.(int(ibeg) + $$CIV1) =  &
                &       1.0000000000000000E+000 / $$PRC2B
   172|               d-srdmi%addr%srdmi[].rns10.(int(ibeg) + $$CIV1) =  &
                &       1.0000000000000000E+000 / $$PRC2A
   173|               d-valp%addr%valp[].rns11.(int(ibeg) + $$CIV1) = -(abs(&
                &       $$csx1) * ( 1.0000000000000000E+000 / $$PRC2B))
   174|               d-valm%addr%valm[].rns12.(int(ibeg) + $$CIV1) = abs(&
                &       $$csx1) * ( 1.0000000000000000E+000 / $$PRC2A)
                      $$PRC2A = $$PRC2B
   175|             ENDDO
                  ENDIF
   180|           IF ((1 + (int((iend + 2)) - int((ibeg - 2))) > 0)) THEN
                    $$CIV2 = 0
       Id=3         DO $$CIV2 = $$CIV2, int((1 + (int((iend + 2)) - int((ibeg &
                &       - 2)))))-1
   181|               d-vtmp%addr%vtmp[].rns13.(($$CIV2 + int(ibeg)) - 2) = u2((&
                &       $$CIV2 + int(ibeg)) - 2,int(js),int(ks)) - d-vg2%addr%vg2(&
                &       int(js))
   182|               d-btmp%addr%btmp[].rns15.(($$CIV2 + int(ibeg)) - 2) = &
                &       d-b2%addr%b2(($$CIV2 + int(ibeg)) - 2,int(js),int(ks))
   183|             ENDDO
                  ENDIF
   190|           IF ((1 + (int((iend + 1)) - int((ibeg - 1))) > 0)) THEN
                    $$CIV3 = 0
                    $$PRC22 = d-dx1bi%addr%dx1bi(int(ibeg) - 1)
                    $$PRC24 = d-vtmp%addr%vtmp[].rns13.(int(ibeg) - 2)
                    $$PRC25 = d-vtmp%addr%vtmp[].rns13.(int(ibeg) - 1)
                    $$PRC27 = d-btmp%addr%btmp[].rns15.(int(ibeg) - 2)
                    $$PRC28 = d-btmp%addr%btmp[].rns15.(int(ibeg) - 1)
       Id=4         DO $$CIV3 = $$CIV3, int((1 + (int((iend + 1)) - int((ibeg &
                &       - 1)))))-1
                      $$PRC23 = d-dx1bi%addr%dx1bi(int(ibeg) + $$CIV3)
                      $$PRC26 = d-vtmp%addr%vtmp[].rns13.(int(ibeg) + $$CIV3)
                      $$PRC29 = d-btmp%addr%btmp[].rns15.(int(ibeg) + $$CIV3)
   191|               dqm.rnnC = ($$PRC25 - $$PRC24) * $$PRC22
   192|               dqp.rnn9 = ($$PRC26 - $$PRC25) * $$PRC23
                      $$RET0 = __cpdsign( 1.0000000000000000E+000,%VAL(dqm.rnnC)&
                &        + %VAL(dqp.rnn9))
   193|               d-dv%addr%dv[].rns18.(($$CIV3 + int(ibeg)) - 1) = (max(&
                &       dqm.rnnC * dqp.rnn9, 0.0000000000000000E+000) * $$RET0) / &
                &       max(abs(dqm.rnnC + dqp.rnn9), 1.0000000000000000E-099)
   196|               dqm = ($$PRC28 - $$PRC27) * $$PRC22
   197|               dqp = ($$PRC29 - $$PRC28) * $$PRC23
                      $$RET1 = __cpdsign( 1.0000000000000000E+000,%VAL(dqm) + &
                &       %VAL(dqp))
   198|               d-db%addr%db[].rns19.(($$CIV3 + int(ibeg)) - 1) = (max(&
                &       dqm * dqp, 0.0000000000000000E+000) * $$RET1) / max(abs(&
                &       dqm + dqp), 1.0000000000000000E-099)
                      $$PRC27 = $$PRC28
                      $$PRC28 = $$PRC29
                      $$PRC24 = $$PRC25
                      $$PRC25 = $$PRC26
                      $$PRC22 = $$PRC23
   201|             ENDDO
                  ENDIF
   206|           IF ((1 + (int((iend + 1)) - int(ibeg)) > 0)) THEN
                    $$CIV4 = 0
                    $$PRC18 = d-dv%addr%dv[].rns18.(int(ibeg) - 1)
                    $$PRC1A = d-dx1a%addr%dx1a(int(ibeg) - 1)
                    $$PRC1C = d-vtmp%addr%vtmp[].rns13.(int(ibeg) - 1)
                    $$PRC1E = d-db%addr%db[].rns19.(int(ibeg) - 1)
                    $$PRC20 = d-btmp%addr%btmp[].rns15.(int(ibeg) - 1)
       Id=5         DO $$CIV4 = $$CIV4, int((1 + (int((iend + 1)) - int(ibeg))&
                &       ))-1
                      $$PRC19 = d-dv%addr%dv[].rns18.(int(ibeg) + $$CIV4)
                      $$PRC1B = d-dx1a%addr%dx1a(int(ibeg) + $$CIV4)
                      $$PRC1D = d-vtmp%addr%vtmp[].rns13.(int(ibeg) + $$CIV4)
                      $$PRC1F = d-db%addr%db[].rns19.(int(ibeg) + $$CIV4)
                      $$PRC21 = d-btmp%addr%btmp[].rns15.(int(ibeg) + $$CIV4)
   207|               qv1 = $$PRC1C + $$PRC1A * $$PRC18
   209|               qb1 = $$PRC20 + $$PRC1A * $$PRC1E
   213|               q3.rnn3 = __cpdsign( 5.0000000000000000E-001,&
                &       d-valp%addr%valp[].rns11.(int(ibeg) + %VAL($$CIV4)) * &
                &       %VAL(dt))
   214|               d-vpal%addr%vpal[].rns21.(int(ibeg) + $$CIV4) = ( &
                &       5.0000000000000000E-001 + q3.rnn3) * (qv1 - (&
                &       d-valp%addr%valp[].rns11.(int(ibeg) + $$CIV4) * dt) * &
                &       $$PRC18) + ( 5.0000000000000000E-001 - q3.rnn3) * ((&
                &       $$PRC1D - $$PRC1B * $$PRC19) - (d-valp%addr%valp[].rns11.(&
                &       int(ibeg) + $$CIV4) * dt) * $$PRC19)
   216|               d-bpal%addr%bpal[].rns22.(int(ibeg) + $$CIV4) = ( &
                &       5.0000000000000000E-001 + q3.rnn3) * (qb1 - (&
                &       d-valp%addr%valp[].rns11.(int(ibeg) + $$CIV4) * dt) * &
                &       $$PRC1E) + ( 5.0000000000000000E-001 - q3.rnn3) * ((&
                &       $$PRC21 - $$PRC1B * $$PRC1F) - (d-valp%addr%valp[].rns11.(&
                &       int(ibeg) + $$CIV4) * dt) * $$PRC1F)
   220|               q3 = __cpdsign( 5.0000000000000000E-001,&
                &       d-valm%addr%valm[].rns12.(int(ibeg) + %VAL($$CIV4)) * &
                &       %VAL(dt))
   221|               d-vmal%addr%vmal[].rns23.(int(ibeg) + $$CIV4) = ( &
                &       5.0000000000000000E-001 + q3) * (qv1 - (&
                &       d-valm%addr%valm[].rns12.(int(ibeg) + $$CIV4) * dt) * &
                &       $$PRC18) + ( 5.0000000000000000E-001 - q3) * (($$PRC1D - &
                &       $$PRC1B * $$PRC19) - (d-valm%addr%valm[].rns12.(int(ibeg) &
                &       + $$CIV4) * dt) * $$PRC19)
   223|               d-bmal%addr%bmal[].rns24.(int(ibeg) + $$CIV4) = ( &
                &       5.0000000000000000E-001 + q3) * (qb1 - (&
                &       d-valm%addr%valm[].rns12.(int(ibeg) + $$CIV4) * dt) * &
                &       $$PRC1E) + ( 5.0000000000000000E-001 - q3) * (($$PRC21 - &
                &       $$PRC1B * $$PRC1F) - (d-valm%addr%valm[].rns12.(int(ibeg) &
                &       + $$CIV4) * dt) * $$PRC1F)
                      $$PRC20 = $$PRC21
                      $$PRC1E = $$PRC1F
                      $$PRC1C = $$PRC1D
                      $$PRC1A = $$PRC1B
                      $$PRC18 = $$PRC19
   225|             ENDDO
                  ENDIF
   229|           IF ((1 + (int((iend + 1)) - int(ibeg)) > 0)) THEN
                    $$CIV5 = 0
       Id=6         DO $$CIV5 = $$CIV5, int((1 + (int((iend + 1)) - int(ibeg))&
                &       ))-1
   230|               q1 = __cpdsign( 1.0000000000000000E+000,&
                &       d-bave%addr%bave[].rns7.(int(ibeg) + %VAL($$CIV5)))
   231|               d-bstar%addr%bstar[].rns25.(int(ibeg) + $$CIV5) = (((&
                &       d-bpal%addr%bpal[].rns22.(int(ibeg) + $$CIV5) * &
                &       d-srdpi%addr%srdpi[].rns9.(int(ibeg) + $$CIV5) + &
                &       d-bmal%addr%bmal[].rns24.(int(ibeg) + $$CIV5) * &
                &       d-srdmi%addr%srdmi[].rns10.(int(ibeg) + $$CIV5)) + q1 * (&
                &       d-vpal%addr%vpal[].rns21.(int(ibeg) + $$CIV5) - &
                &       d-vmal%addr%vmal[].rns23.(int(ibeg) + $$CIV5))) * &
                &       d-g2a%addr%g2a(int(ibeg) + $$CIV5)) / (&
                &       d-srdpi%addr%srdpi[].rns9.(int(ibeg) + $$CIV5) + &
                &       d-srdmi%addr%srdmi[].rns10.(int(ibeg) + $$CIV5))
   234|             ENDDO
                  ENDIF
   239|           IF ((1 + (int(iend) - int(ibeg)) > 0)) THEN
                    $$CIV6 = 0
                    $$PRC14 = d-bstar%addr%bstar[].rns25.(int(ibeg))
                    $$PRC16 = d-bave%addr%bave[].rns7.(int(ibeg))
       Id=7         DO $$CIV6 = $$CIV6, int((1 + (int(iend) - int(ibeg))))-1
                      $$PRC15 = d-bstar%addr%bstar[].rns25.(1 + (int(ibeg) + &
                &       $$CIV6))
                      $$PRC17 = d-bave%addr%bave[].rns7.(1 + (int(ibeg) + &
                &       $$CIV6))
   240|               d-st2%addr%st2[].rns5.(int(ibeg) + $$CIV6,int(js),int(ks))&
                &        = d-st2%addr%st2[].rns5.(int(ibeg) + $$CIV6,int(js),int(&
                &       ks)) + ((($$PRC17 + $$PRC16) * d-g2bi%addr%g2bi(int(ibeg) &
                &       + $$CIV6)) * ($$PRC15 - $$PRC14)) * d-dx1ai%addr%dx1ai(&
                &       int(ibeg) + $$CIV6)
                      $$PRC16 = $$PRC17
                      $$PRC14 = $$PRC15
   243|             ENDDO
                  ENDIF
   260|           IF ((1 + (int((iend + 1)) - int(ibeg)) > 0)) THEN
                    $$CIV7 = 0
                    $$PRC12 = d-srd3%addr%srd3(int(ibeg) - 1,int(js),int(ks))
       Id=8         DO $$CIV7 = $$CIV7, int((1 + (int((iend + 1)) - int(ibeg))&
                &       ))-1
                      $$PRC13 = d-srd3%addr%srd3(int(ibeg) + $$CIV7,int(js),int(&
                &       ks))
   261|               $$csx2 =  5.0000000000000000E-001 * (d-b1%addr%b1(int(&
                &       ibeg) + $$CIV7,int(js),int(ks)) + d-b1%addr%b1(int(ibeg) &
                &       + $$CIV7,int(js),int(ks)))
                      d-bave%addr%bave[].rns7.(int(ibeg) + $$CIV7) = $$csx2
   263|               d-srdpi%addr%srdpi[].rns9.(int(ibeg) + $$CIV7) =  &
                &       1.0000000000000000E+000 / $$PRC13
   264|               d-srdmi%addr%srdmi[].rns10.(int(ibeg) + $$CIV7) =  &
                &       1.0000000000000000E+000 / $$PRC12
   265|               d-valp%addr%valp[].rns11.(int(ibeg) + $$CIV7) = -(abs(&
                &       $$csx2) * ( 1.0000000000000000E+000 / $$PRC13))
   266|               d-valm%addr%valm[].rns12.(int(ibeg) + $$CIV7) = abs(&
                &       $$csx2) * ( 1.0000000000000000E+000 / $$PRC12)
                      $$PRC12 = $$PRC13
   267|             ENDDO
                  ENDIF
   272|           IF ((1 + (int((iend + 2)) - int((ibeg - 2))) > 0)) THEN
                    $$CIV8 = 0
       Id=9         DO $$CIV8 = $$CIV8, int((1 + (int((iend + 2)) - int((ibeg &
                &       - 2)))))-1
   273|               d-vtmp%addr%vtmp[].rns13.(($$CIV8 + int(ibeg)) - 2) = u3((&
                &       $$CIV8 + int(ibeg)) - 2,int(js),int(ks)) - d-vg3%addr%vg3(&
                &       int(ks))
   274|               d-btmp%addr%btmp[].rns15.(($$CIV8 + int(ibeg)) - 2) = &
                &       d-b3%addr%b3(($$CIV8 + int(ibeg)) - 2,int(js),int(ks))
   275|             ENDDO
                  ENDIF
   283|           IF ((1 + (int((iend + 1)) - int((ibeg - 1))) > 0)) THEN
                    $$CIV9 = 0
                    $$PRCA = d-dx1bi%addr%dx1bi(int(ibeg) - 1)
                    $$PRCC = d-vtmp%addr%vtmp[].rns13.(int(ibeg) - 2)
                    $$PRCD = d-vtmp%addr%vtmp[].rns13.(int(ibeg) - 1)
                    $$PRCF = d-btmp%addr%btmp[].rns15.(int(ibeg) - 2)
                    $$PRC10 = d-btmp%addr%btmp[].rns15.(int(ibeg) - 1)
       Id=10        DO $$CIV9 = $$CIV9, int((1 + (int((iend + 1)) - int((ibeg &
                &       - 1)))))-1
                      $$PRCB = d-dx1bi%addr%dx1bi(int(ibeg) + $$CIV9)
                      $$PRCE = d-vtmp%addr%vtmp[].rns13.(int(ibeg) + $$CIV9)
                      $$PRC11 = d-btmp%addr%btmp[].rns15.(int(ibeg) + $$CIV9)
   284|               dqm.rnnA = ($$PRCD - $$PRCC) * $$PRCA
   285|               dqp.rnn7 = ($$PRCE - $$PRCD) * $$PRCB
                      $$RET2 = __cpdsign( 1.0000000000000000E+000,%VAL(dqm.rnnA)&
                &        + %VAL(dqp.rnn7))
   286|               d-dv%addr%dv[].rns18.(($$CIV9 + int(ibeg)) - 1) = (max(&
                &       dqm.rnnA * dqp.rnn7, 0.0000000000000000E+000) * $$RET2) / &
                &       max(abs(dqm.rnnA + dqp.rnn7), 1.0000000000000000E-099)
   289|               dqm.rnnB = ($$PRC10 - $$PRCF) * $$PRCA
   290|               dqp.rnn8 = ($$PRC11 - $$PRC10) * $$PRCB
                      $$RET3 = __cpdsign( 1.0000000000000000E+000,%VAL(dqm.rnnB)&
                &        + %VAL(dqp.rnn8))
   291|               d-db%addr%db[].rns19.(($$CIV9 + int(ibeg)) - 1) = (max(&
                &       dqm.rnnB * dqp.rnn8, 0.0000000000000000E+000) * $$RET3) / &
                &       max(abs(dqm.rnnB + dqp.rnn8), 1.0000000000000000E-099)
                      $$PRCF = $$PRC10
                      $$PRC10 = $$PRC11
                      $$PRCC = $$PRCD
                      $$PRCD = $$PRCE
                      $$PRCA = $$PRCB
   294|             ENDDO
                  ENDIF
   299|           IF ((1 + (int((iend + 1)) - int(ibeg)) > 0)) THEN
                    $$CIVA = 0
                    $$PRC0 = d-dv%addr%dv[].rns18.(int(ibeg) - 1)
                    $$PRC2 = d-dx1a%addr%dx1a(int(ibeg) - 1)
                    $$PRC4 = d-vtmp%addr%vtmp[].rns13.(int(ibeg) - 1)
                    $$PRC6 = d-db%addr%db[].rns19.(int(ibeg) - 1)
                    $$PRC8 = d-btmp%addr%btmp[].rns15.(int(ibeg) - 1)
       Id=11        DO $$CIVA = $$CIVA, int((1 + (int((iend + 1)) - int(ibeg))&
                &       ))-1
                      $$PRC1 = d-dv%addr%dv[].rns18.(int(ibeg) + $$CIVA)
                      $$PRC3 = d-dx1a%addr%dx1a(int(ibeg) + $$CIVA)
                      $$PRC5 = d-vtmp%addr%vtmp[].rns13.(int(ibeg) + $$CIVA)
                      $$PRC7 = d-db%addr%db[].rns19.(int(ibeg) + $$CIVA)
                      $$PRC9 = d-btmp%addr%btmp[].rns15.(int(ibeg) + $$CIVA)
   300|               qv1.rnn2C = $$PRC4 + $$PRC2 * $$PRC0
   302|               qb1.rnn2A = $$PRC8 + $$PRC2 * $$PRC6
   306|               q3.rnn1 = __cpdsign( 5.0000000000000000E-001,&
                &       d-valp%addr%valp[].rns11.(int(ibeg) + %VAL($$CIVA)) * &
                &       %VAL(dt))
   307|               d-vpal%addr%vpal[].rns21.(int(ibeg) + $$CIVA) = ( &
                &       5.0000000000000000E-001 + q3.rnn1) * (qv1.rnn2C - (&
                &       d-valp%addr%valp[].rns11.(int(ibeg) + $$CIVA) * dt) * &
                &       $$PRC0) + ( 5.0000000000000000E-001 - q3.rnn1) * (($$PRC5 &
                &       - $$PRC3 * $$PRC1) - (d-valp%addr%valp[].rns11.(int(ibeg) &
                &       + $$CIVA) * dt) * $$PRC1)
   309|               d-bpal%addr%bpal[].rns22.(int(ibeg) + $$CIVA) = ( &
                &       5.0000000000000000E-001 + q3.rnn1) * (qb1.rnn2A - (&
                &       d-valp%addr%valp[].rns11.(int(ibeg) + $$CIVA) * dt) * &
                &       $$PRC6) + ( 5.0000000000000000E-001 - q3.rnn1) * (($$PRC9 &
                &       - $$PRC3 * $$PRC7) - (d-valp%addr%valp[].rns11.(int(ibeg) &
                &       + $$CIVA) * dt) * $$PRC7)
   313|               q3.rnn2 = __cpdsign( 5.0000000000000000E-001,&
                &       d-valm%addr%valm[].rns12.(int(ibeg) + %VAL($$CIVA)) * &
                &       %VAL(dt))
   314|               d-vmal%addr%vmal[].rns23.(int(ibeg) + $$CIVA) = ( &
                &       5.0000000000000000E-001 + q3.rnn2) * (qv1.rnn2C - (&
                &       d-valm%addr%valm[].rns12.(int(ibeg) + $$CIVA) * dt) * &
                &       $$PRC0) + ( 5.0000000000000000E-001 - q3.rnn2) * (($$PRC5 &
                &       - $$PRC3 * $$PRC1) - (d-valm%addr%valm[].rns12.(int(ibeg) &
                &       + $$CIVA) * dt) * $$PRC1)
   316|               d-bmal%addr%bmal[].rns24.(int(ibeg) + $$CIVA) = ( &
                &       5.0000000000000000E-001 + q3.rnn2) * (qb1.rnn2A - (&
                &       d-valm%addr%valm[].rns12.(int(ibeg) + $$CIVA) * dt) * &
                &       $$PRC6) + ( 5.0000000000000000E-001 - q3.rnn2) * (($$PRC9 &
                &       - $$PRC3 * $$PRC7) - (d-valm%addr%valm[].rns12.(int(ibeg) &
                &       + $$CIVA) * dt) * $$PRC7)
                      $$PRC8 = $$PRC9
                      $$PRC6 = $$PRC7
                      $$PRC4 = $$PRC5
                      $$PRC2 = $$PRC3
                      $$PRC0 = $$PRC1
   318|             ENDDO
                  ENDIF
   322|           IF ((1 + (int((iend + 1)) - int(ibeg)) > 0)) THEN
                    $$CIVB = 0
       Id=12        DO $$CIVB = $$CIVB, int((1 + (int((iend + 1)) - int(ibeg))&
                &       ))-1
   323|               q1.rnn28 = __cpdsign( 1.0000000000000000E+000,&
                &       d-bave%addr%bave[].rns7.(int(ibeg) + %VAL($$CIVB)))
   324|               d-bstar%addr%bstar[].rns25.(int(ibeg) + $$CIVB) = (((&
                &       d-bpal%addr%bpal[].rns22.(int(ibeg) + $$CIVB) * &
                &       d-srdpi%addr%srdpi[].rns9.(int(ibeg) + $$CIVB) + &
                &       d-bmal%addr%bmal[].rns24.(int(ibeg) + $$CIVB) * &
                &       d-srdmi%addr%srdmi[].rns10.(int(ibeg) + $$CIVB)) + &
                &       q1.rnn28 * (d-vpal%addr%vpal[].rns21.(int(ibeg) + $$CIVB) &
                &       - d-vmal%addr%vmal[].rns23.(int(ibeg) + $$CIVB))) * &
                &       d-g31a%addr%g31a(int(ibeg) + $$CIVB)) / (&
                &       d-srdpi%addr%srdpi[].rns9.(int(ibeg) + $$CIVB) + &
                &       d-srdmi%addr%srdmi[].rns10.(int(ibeg) + $$CIVB))
   327|             ENDDO
                  ENDIF
   332|           IF ((1 + (int(iend) - int(ibeg)) > 0)) THEN
                    $$CIVC = 0
       Id=13        DO $$CIVC = $$CIVC, int((1 + (int(iend) - int(ibeg))))-1
   334|               IF (.NOT.(lgeom == 3)) GOTO lab_50
   335|               IF ((d-x1a%addr%x1a(int(ibeg) + $$CIVC) ==  &
                &       0.0000000000000000E+000)) THEN
   336|                 d-st3%addr%st3[].rns6.(int(ibeg) + $$CIVC,int(js),int(&
                &         ks)) =  0.0000000000000000E+000
   337|               ELSE
   339|                 lab_50
   340|                 d-st3%addr%st3[].rns6.(int(ibeg) + $$CIVC,int(js),int(&
                &         ks)) = (((d-bave%addr%bave[].rns7.(1 + ($$CIVC + int(&
                &         ibeg))) + d-bave%addr%bave[].rns7.(int(ibeg) + $$CIVC)) &
                &         * d-g31bi%addr%g31bi(int(ibeg) + $$CIVC)) * (&
                &         d-bstar%addr%bstar[].rns25.(1 + ($$CIVC + int(ibeg))) - &
                &         d-bstar%addr%bstar[].rns25.(int(ibeg) + $$CIVC))) * &
                &         d-dx1ai%addr%dx1ai(int(ibeg) + $$CIVC)
   342|               ENDIF
                    ENDDO
                  ENDIF
   352|           IF ((1 + (int(iend) - int(ibeg)) > 0)) THEN
                    $$CIVD = 0
       Id=14        DO $$CIVD = $$CIVD, int((1 + (int(iend) - int(ibeg))))-1
   353|               w1(int(ibeg) + $$CIVD,int(js),int(ks)) = u1(int(ibeg) + &
                &       $$CIVD,int(js),int(ks)) + (( 5.0000000000000000E-001 * dt)&
                &        * d-st1%addr%st1[].rns4.(int(ibeg) + $$CIVD,int(js),int(&
                &       ks))) / (d-srd1%addr%srd1(int(ibeg) + $$CIVD,int(js),int(&
                &       ks)) * d-srd1%addr%srd1(int(ibeg) + $$CIVD,int(js),int(ks)&
                &       ))
   354|               w2(int(ibeg) + $$CIVD,int(js),int(ks)) = u2(int(ibeg) + &
                &       $$CIVD,int(js),int(ks)) + (( 5.0000000000000000E-001 * dt)&
                &        * d-st2%addr%st2[].rns5.(int(ibeg) + $$CIVD,int(js),int(&
                &       ks))) / (d-srd2%addr%srd2(int(ibeg) + $$CIVD,int(js),int(&
                &       ks)) * d-srd2%addr%srd2(int(ibeg) + $$CIVD,int(js),int(ks)&
                &       ))
   355|               w3(int(ibeg) + $$CIVD,int(js),int(ks)) = u3(int(ibeg) + &
                &       $$CIVD,int(js),int(ks)) + (( 5.0000000000000000E-001 * dt)&
                &        * d-st3%addr%st3[].rns6.(int(ibeg) + $$CIVD,int(js),int(&
                &       ks))) / (d-srd3%addr%srd3(int(ibeg) + $$CIVD,int(js),int(&
                &       ks)) * d-srd3%addr%srd3(int(ibeg) + $$CIVD,int(js),int(ks)&
                &       ))
   356|             ENDDO
                  ENDIF
   359|           RETURN
                END SUBROUTINE lorentz_1d

 
 
>>>>> OBJECT SECTION <<<<<
 GPR's set/used:   ssus ssss ssss s-ss  ssss ssss ssss ssss
 FPR's set/used:   ssss ssss ssss ssss  ssss ssss ssss ssss
 CCR's set/used:   ss-- ssss
     | 000000                           PDEF     lorentz_1d
   11|                                  PROC      .ibeg,.iend,.jbeg,.jend,.kbeg,.kend,.u1,.u2,.u3,.w1,.w2,.w3,gr3-gr10
    0| 000000 stfd     DBE1FFF8   1     STFL      #stack(gr1,-8)=fp31
    0| 000004 stfd     DBC1FFF0   1     STFL      #stack(gr1,-16)=fp30
    0| 000008 stfd     DBA1FFE8   1     STFL      #stack(gr1,-24)=fp29
    0| 00000C stfd     DB81FFE0   1     STFL      #stack(gr1,-32)=fp28
    0| 000010 stfd     DB61FFD8   1     STFL      #stack(gr1,-40)=fp27
    0| 000014 stfd     DB41FFD0   1     STFL      #stack(gr1,-48)=fp26
    0| 000018 stfd     DB21FFC8   1     STFL      #stack(gr1,-56)=fp25
    0| 00001C stfd     DB01FFC0   1     STFL      #stack(gr1,-64)=fp24
    0| 000020 stfd     DAE1FFB8   1     STFL      #stack(gr1,-72)=fp23
    0| 000024 stfd     DAC1FFB0   1     STFL      #stack(gr1,-80)=fp22
    0| 000028 stfd     DAA1FFA8   1     STFL      #stack(gr1,-88)=fp21
    0| 00002C stfd     DA81FFA0   1     STFL      #stack(gr1,-96)=fp20
    0| 000030 stfd     DA61FF98   1     STFL      #stack(gr1,-104)=fp19
    0| 000034 stfd     DA41FF90   1     STFL      #stack(gr1,-112)=fp18
    0| 000038 stfd     DA21FF88   1     STFL      #stack(gr1,-120)=fp17
    0| 00003C stfd     DA01FF80   1     STFL      #stack(gr1,-128)=fp16
    0| 000040 stfd     D9E1FF78   1     STFL      #stack(gr1,-136)=fp15
    0| 000044 stfd     D9C1FF70   1     STFL      #stack(gr1,-144)=fp14
    0| 000048 std      FBE1FF68   1     ST8       #stack(gr1,-152)=gr31
    0| 00004C std      FBC1FF60   1     ST8       #stack(gr1,-160)=gr30
    0| 000050 std      FBA1FF58   1     ST8       #stack(gr1,-168)=gr29
    0| 000054 std      FB81FF50   1     ST8       #stack(gr1,-176)=gr28
    0| 000058 std      FB61FF48   1     ST8       #stack(gr1,-184)=gr27
    0| 00005C std      FB41FF40   1     ST8       #stack(gr1,-192)=gr26
    0| 000060 std      FB21FF38   1     ST8       #stack(gr1,-200)=gr25
    0| 000064 std      FB01FF30   1     ST8       #stack(gr1,-208)=gr24
    0| 000068 std      FAE1FF28   1     ST8       #stack(gr1,-216)=gr23
    0| 00006C std      FAC1FF20   1     ST8       #stack(gr1,-224)=gr22
    0| 000070 std      FAA1FF18   1     ST8       #stack(gr1,-232)=gr21
    0| 000074 std      FA81FF10   1     ST8       #stack(gr1,-240)=gr20
    0| 000078 std      FA61FF08   1     ST8       #stack(gr1,-248)=gr19
    0| 00007C std      FA41FF00   1     ST8       #stack(gr1,-256)=gr18
    0| 000080 std      FA21FEF8   1     ST8       #stack(gr1,-264)=gr17
    0| 000084 std      FA01FEF0   1     ST8       #stack(gr1,-272)=gr16
    0| 000088 std      F9E1FEE8   1     ST8       #stack(gr1,-280)=gr15
    0| 00008C std      F9C1FEE0   1     ST8       #stack(gr1,-288)=gr14
    0| 000090 mfcr     7D800026   1     LFCR      gr12=cr4,4
    0| 000094 stw      91810008   1     ST4A      #stack(gr1,8)=gr12
    0| 000098 stdu     F821FC81   1     ST8U      gr1,#stack(gr1,-896)=gr1
    0| 00009C or       7C3F0B78   1     LR        gr31=gr1
    0| 0000A0 ld       EAC20000   1     L8        gr22=.&&N&&param(gr2,0)
  147| 0000A4 ld       E9610000   1     L8        gr11=#stack(gr1,0)
  213| 0000A8 ld       E8C20000   1     L8        gr6=.&&N&&root(gr2,0)
  144| 0000AC ld       E8E20000   1     L8        gr7=.&&N&&grid(gr2,0)
  145| 0000B0 ld       E9020000   1     L8        gr8=.&&N&lor_scr(gr2,0)
  144| 0000B4 ld       EB620000   1     L8        gr27=.&&N&field(gr2,0)
  147| 0000B8 lwa      EBD6000E   1     L4A       gr30=<s21:d12:l4>(gr22,12)
    0| 0000BC lwa      E8160002   1     L4A       gr0=<s21:d0:l4>(gr22,0)
  213| 0000C0 lfd      C8060078   1     LFL       fp0=<s381:d120:l8>(gr6,120)
    0| 0000C4 lwa      EB960006   1     L4A       gr28=<s21:d4:l4>(gr22,4)
  206| 0000C8 ld       E8A20000   1     L8        gr5=.&&N&grid(gr2,0)
  169| 0000CC ld       EB3B02D8   1     L8        gr25=<s189:d728:l8>(gr27,728)
  147| 0000D0 sradi    7FDDFE76   1     SRA8      gr29=gr30,63,ca"
  147| 0000D4 sradi    7C0CFE76   1     SRA8      gr12=gr0,63,ca"
  147| 0000D8 andc     7FDEE878   1     ANDC      gr30=gr30,gr29
  147| 0000DC rldicr   7BDE1F24   1     SLL8      gr30=gr30,3
  147| 0000E0 andc     7C006078   1     ANDC      gr0=gr0,gr12
  169| 0000E4 std      FB3F0088   1     ST8       #SPILL0(gr31,136)=gr25
  147| 0000E8 neg      7FDE00D0   1     COMP      gr30=gr30
  144| 0000EC lwa      E987000A   1     L4A       gr12=<s364:d8:l4>(gr7,8)
  147| 0000F0 rldicr   7BD806A4   1     RN8       gr24=gr30,0,0xFFFFFFFFFFFFFFE0
  144| 0000F4 lwa      EBC70012   1     L4A       gr30=<s364:d16:l4>(gr7,16)
  147| 0000F8 stdux    7D61C16A   1     ST8U      gr1,#stack(gr1,gr24,0)=gr11
  147| 0000FC sradi    7F9DFE76   1     SRA8      gr29=gr28,63,ca"
  147| 000100 std      F83F00A0   1     ST8       #SPILL3(gr31,160)=gr1
  147| 000104 ld       E9610000   1     L8        gr11=#stack(gr1,0)
  147| 000108 addi     3A810080   1     AI        gr20=gr1,128
  147| 00010C andc     7F97E878   1     ANDC      gr23=gr28,gr29
  147| 000110 std      FAFF0090   1     ST8       #SPILL1(gr31,144)=gr23
  147| 000114 std      FA9F00A8   1     ST8       #SPILL4(gr31,168)=gr20
  146| 000118 ld       EB880068   1     L8        gr28=<s319:d104:l8>(gr8,104)
  147| 00011C stdux    7D61C16A   1     ST8U      gr1,#stack(gr1,gr24,0)=gr11
  206| 000120 ld       EAA50150   1     L8        gr21=<s227:d336:l8>(gr5,336)
  147| 000124 std      F83F00D0   1     ST8       #SPILL9(gr31,208)=gr1
  147| 000128 ld       E9610000   1     L8        gr11=#stack(gr1,0)
  147| 00012C addi     39E10080   1     AI        gr15=gr1,128
  146| 000130 std      FB9F00E8   1     ST8       #SPILL12(gr31,232)=gr28
  147| 000134 std      F9FF00D8   1     ST8       #SPILL10(gr31,216)=gr15
  206| 000138 std      FABF0098   1     ST8       #SPILL2(gr31,152)=gr21
  147| 00013C ld       EBA800D0   1     L8        gr29=<s319:d208:l8>(gr8,208)
  147| 000140 stdux    7D61C16A   1     ST8U      gr1,#stack(gr1,gr24,0)=gr11
  146| 000144 ld       E9680080   1     L8        gr11=<s319:d128:l8>(gr8,128)
  147| 000148 std      F83F00F8   1     ST8       #SPILL14(gr31,248)=gr1
  147| 00014C ld       E8C10000   1     L8        gr6=#stack(gr1,0)
  147| 000150 addi     38E10080   1     AI        gr7=gr1,128
  147| 000154 std      FBBF00F0   1     ST8       #SPILL13(gr31,240)=gr29
  147| 000158 std      F8FF0100   1     ST8       #SPILL15(gr31,256)=gr7
  146| 00015C std      F97F0110   1     ST8       #SPILL17(gr31,272)=gr11
  147| 000160 ld       EB8800E8   1     L8        gr28=<s319:d232:l8>(gr8,232)
  147| 000164 stdux    7CC1C16A   1     ST8U      gr1,#stack(gr1,gr24,0)=gr6
  145| 000168 ld       EAE80030   1     L8        gr23=<s319:d48:l8>(gr8,48)
  147| 00016C std      F83F0118   1     ST8       #SPILL18(gr31,280)=gr1
  147| 000170 ld       E8E10000   1     L8        gr7=#stack(gr1,0)
  145| 000174 ld       EB280018   1     L8        gr25=<s319:d24:l8>(gr8,24)
  147| 000178 std      FB9F0120   1     ST8       #SPILL19(gr31,288)=gr28
  145| 00017C ld       EBA80048   1     L8        gr29=<s319:d72:l8>(gr8,72)
  145| 000180 std      FAFF0128   1     ST8       #SPILL20(gr31,296)=gr23
  147| 000184 ld       EAA80100   1     L8        gr21=<s319:d256:l8>(gr8,256)
  147| 000188 stdux    7CE1C16A   1     ST8U      gr1,#stack(gr1,gr24,0)=gr7
  145| 00018C std      FB3F0108   1     ST8       #SPILL16(gr31,264)=gr25
  147| 000190 std      F83F0140   1     ST8       #SPILL23(gr31,320)=gr1
  145| 000194 std      FBBF0130   1     ST8       #SPILL21(gr31,304)=gr29
  147| 000198 ld       E9610000   1     L8        gr11=#stack(gr1,0)
  147| 00019C std      FABF0150   1     ST8       #SPILL25(gr31,336)=gr21
  147| 0001A0 ld       EB880118   1     L8        gr28=<s319:d280:l8>(gr8,280)
  169| 0001A4 ld       EAFB02F0   1     L8        gr23=<s189:d752:l8>(gr27,752)
  240| 0001A8 ld       EA6501F8   1     L8        gr19=<s227:d504:l8>(gr5,504)
  190| 0001AC ld       EA4508C0   1     L8        gr18=<s227:d2240:l8>(gr5,2240)
  147| 0001B0 stdux    7D61C16A   1     ST8U      gr1,#stack(gr1,gr24,0)=gr11
  181| 0001B4 ld       EA250DC8   1     L8        gr17=<s227:d3528:l8>(gr5,3528)
  147| 0001B8 std      FB9F0158   1     ST8       #SPILL26(gr31,344)=gr28
  169| 0001BC std      FAFF0168   1     ST8       #SPILL28(gr31,360)=gr23
  147| 0001C0 std      F83F0160   1     ST8       #SPILL27(gr31,352)=gr1
  240| 0001C4 std      FA7F00B0   1     ST8       #SPILL5(gr31,176)=gr19
  190| 0001C8 std      FA5F00B8   1     ST8       #SPILL6(gr31,184)=gr18
  181| 0001CC std      FA3F00C0   1     ST8       #SPILL7(gr31,192)=gr17
  147| 0001D0 ld       E9610000   1     L8        gr11=#stack(gr1,0)
  273| 0001D4 ld       EA050E00   1     L8        gr16=<s227:d3584:l8>(gr5,3584)
  145| 0001D8 ld       E9C80000   1     L8        gr14=<s319:d0:l8>(gr8,0)
  146| 0001DC ld       EB280098   1     L8        gr25=<s319:d152:l8>(gr8,152)
  146| 0001E0 ld       E8E800B0   1     L8        gr7=<s319:d176:l8>(gr8,176)
  181| 0001E4 ld       EBA50DE0   1     L8        gr29=<s227:d3552:l8>(gr5,3552)
  147| 0001E8 stdux    7D61C16A   1     ST8U      gr1,#stack(gr1,gr24,0)=gr11
  273| 0001EC std      FA1F00C8   1     ST8       #SPILL8(gr31,200)=gr16
  145| 0001F0 std      F9DF00E0   1     ST8       #SPILL11(gr31,224)=gr14
  146| 0001F4 std      FB3F0138   1     ST8       #SPILL22(gr31,312)=gr25
  146| 0001F8 std      F8FF0148   1     ST8       #SPILL24(gr31,328)=gr7
  240| 0001FC ld       EAE50210   1     L8        gr23=<s227:d528:l8>(gr5,528)
  147| 000200 std      F83F0188   1     ST8       #SPILL32(gr31,392)=gr1
  190| 000204 ld       EAA508D8   1     L8        gr21=<s227:d2264:l8>(gr5,2264)
  206| 000208 ld       EB850168   1     L8        gr28=<s227:d360:l8>(gr5,360)
  181| 00020C std      FBBF0170   1     ST8       #SPILL29(gr31,368)=gr29
  144| 000210 ld       EB5B0000   1     L8        gr26=<s189:d0:l8>(gr27,0)
  240| 000214 std      FAFF0190   1     ST8       #SPILL33(gr31,400)=gr23
  145| 000218 ld       E8C80060   1     L8        gr6=<s319:d96:l8>(gr8,96)
  190| 00021C std      FABF0178   1     ST8       #SPILL30(gr31,376)=gr21
  146| 000220 ld       E8E800C8   1     L8        gr7=<s319:d200:l8>(gr8,200)
  147| 000224 ld       E9080130   1     L8        gr8=<s319:d304:l8>(gr8,304)
  206| 000228 std      FB9F0180   1     ST8       #SPILL31(gr31,384)=gr28
  144| 00022C ld       EB3B0018   1     L8        gr25=<s189:d24:l8>(gr27,24)
  147| 000230 ld       E9610000   1     L8        gr11=#stack(gr1,0)
  144| 000234 ld       EA820000   1     L8        gr20=.&&N&field(gr2,0)
  147| 000238 stdux    7D61C16A   1     ST8U      gr1,#stack(gr1,gr24,0)=gr11
  273| 00023C ld       EBA50E18   1     L8        gr29=<s227:d3608:l8>(gr5,3608)
  147| 000240 addi     3AA10080   1     AI        gr21=gr1,128
  147| 000244 std      F83F01A0   1     ST8       #SPILL35(gr31,416)=gr1
  147| 000248 ld       EAE10000   1     L8        gr23=#stack(gr1,0)
  169| 00024C ld       E9740308   1     L8        gr11=<s189:d776:l8>(gr20,776)
  147| 000250 std      FABF01A8   1     ST8       #SPILL36(gr31,424)=gr21
  169| 000254 ld       EAB40320   1     L8        gr21=<s189:d800:l8>(gr20,800)
  273| 000258 std      FBBF0198   1     ST8       #SPILL34(gr31,408)=gr29
  144| 00025C ld       EBB40060   1     L8        gr29=<s189:d96:l8>(gr20,96)
  147| 000260 stdux    7EE1C16A   1     ST8U      gr1,#stack(gr1,gr24,0)=gr23
  169| 000264 std      F97F01B0   1     ST8       #SPILL37(gr31,432)=gr11
  169| 000268 ld       E9740338   1     L8        gr11=<s189:d824:l8>(gr20,824)
  147| 00026C ld       EA9F0090   1     L8        gr20=#SPILL1(gr31,144)
  169| 000270 std      FABF01B8   1     ST8       #SPILL38(gr31,440)=gr21
  147| 000274 ld       EAA10000   1     L8        gr21=#stack(gr1,0)
  147| 000278 std      F83F01C0   1     ST8       #SPILL39(gr31,448)=gr1
  147| 00027C lwa      EAD6000A   1     L4A       gr22=<s21:d8:l4>(gr22,8)
  142| 000280 lwz      81C40000   1     L4Z       gr14=iend(gr4,0)
  147| 000284 mulld    7EE0A1D2   1     M         gr23=gr0,gr20
  147| 000288 addi     3A810080   1     AI        gr20=gr1,128
  147| 00028C stdux    7EA1C16A   1     ST8U      gr1,#stack(gr1,gr24,0)=gr21
  142| 000290 lwz      80630000   1     L4Z       gr3=ibeg(gr3,0)
  147| 000294 ld       EAA10000   1     L8        gr21=#stack(gr1,0)
  147| 000298 std      F83F01D0   1     ST8       #SPILL41(gr31,464)=gr1
  147| 00029C std      FA9F01C8   1     ST8       #SPILL40(gr31,456)=gr20
  142| 0002A0 std      F9DF01F0   1     ST8       #SPILL45(gr31,496)=gr14
  144| 0002A4 ld       EB9B0030   1     L8        gr28=<s189:d48:l8>(gr27,48)
  142| 0002A8 addi     3A83FFFF   1     AI        gr20=gr3,-1
  147| 0002AC stdux    7EA1C16A   1     ST8U      gr1,#stack(gr1,gr24,0)=gr21
  144| 0002B0 ld       EB7B0048   1     L8        gr27=<s189:d72:l8>(gr27,72)
  147| 0002B4 ld       EAA10000   1     L8        gr21=#stack(gr1,0)
  147| 0002B8 std      F83F01D8   1     ST8       #SPILL42(gr31,472)=gr1
  147| 0002BC stdux    7EA1C16A   1     ST8U      gr1,#stack(gr1,gr24,0)=gr21
  147| 0002C0 ld       EAA10000   1     L8        gr21=#stack(gr1,0)
  147| 0002C4 std      F83F01E0   1     ST8       #SPILL43(gr31,480)=gr1
  147| 0002C8 stdux    7EA1C16A   1     ST8U      gr1,#stack(gr1,gr24,0)=gr21
  147| 0002CC sradi    7ED5FE76   1     SRA8      gr21=gr22,63,ca"
  147| 0002D0 ld       E8810000   1     L8        gr4=#stack(gr1,0)
  147| 0002D4 andc     7ED6A878   1     ANDC      gr22=gr22,gr21
  147| 0002D8 std      F83F01E8   1     ST8       #SPILL44(gr31,488)=gr1
  142| 0002DC extsw    7E9507B4   1     EXTS4     gr21=gr20
  142| 0002E0 std      FABF01F8   1     ST8       #SPILL46(gr31,504)=gr21
  147| 0002E4 stdux    7C81C16A   1     ST8U      gr1,#stack(gr1,gr24,0)=gr4
  147| 0002E8 mulld    7C96B9D2   1     M         gr4=gr22,gr23
  147| 0002EC ld       EB010000   1     L8        gr24=#stack(gr1,0)
  147| 0002F0 rldicr   78841F24   1     SLL8      gr4=gr4,3
  142| 0002F4 addi     3AEE0001   1     AI        gr23=gr14,1
  147| 0002F8 neg      7C8400D0   1     COMP      gr4=gr4
  142| 0002FC extsw    7EF607B4   1     EXTS4     gr22=gr23
  147| 000300 rldicr   788406A4   1     RN8       gr4=gr4,0,0xFFFFFFFFFFFFFFE0
  147| 000304 std      F83F0200   1     ST8       #SPILL47(gr31,512)=gr1
  147| 000308 addi     3A810080   1     AI        gr20=gr1,128
  147| 00030C stdux    7F01216A   1     ST8U      gr1,#stack(gr1,gr4,0)=gr24
  142| 000310 subf     7F15B050   1     S         gr24=gr22,gr21
  147| 000314 ld       EAE10000   1     L8        gr23=#stack(gr1,0)
  142| 000318 addic.   37180001   1     AI_R      gr24,cr0=gr24,1,ca"
  142| 00031C ld       EB1F01F0   1     L8        gr24=#SPILL45(gr31,496)
  147| 000320 addi     39C10080   1     AI        gr14=gr1,128
  147| 000324 std      FA9F0208   1     ST8       #SPILL48(gr31,520)=gr20
  142| 000328 std      FADF0210   1     ST8       #SPILL49(gr31,528)=gr22
  147| 00032C stdux    7EE1216A   1     ST8U      gr1,#stack(gr1,gr4,0)=gr23
  147| 000330 std      F9DF0218   1     ST8       #SPILL50(gr31,536)=gr14
  142| 000334 extsw    7F1307B4   1     EXTS4     gr19=gr24
  147| 000338 ld       EB010000   1     L8        gr24=#stack(gr1,0)
  147| 00033C addi     3AE10080   1     AI        gr23=gr1,128
  142| 000340 extsw    7C6E07B4   1     EXTS4     gr14=gr3
  142| 000344 std      FA7F0220   1     ST8       #SPILL51(gr31,544)=gr19
  144| 000348 mcrf     4C800000   1     LRCR      cr1=cr0
  147| 00034C std      FAFF0228   1     ST8       #SPILL52(gr31,552)=gr23
  147| 000350 stdux    7F01216A   1     ST8U      gr1,#stack(gr1,gr4,0)=gr24
  147| 000354 addi     38810080   1     AI        gr4=gr1,128
  147| 000358 std      F89F0250   1     ST8       #SPILL57(gr31,592)=gr4
  144| 00035C bc       40810428   1     BF        CL.60,cr0,0x2/gt,taken=50%(0,0)
  150| 000360 ld       EA7F0090   1     L8        gr19=#SPILL1(gr31,144)
  144| 000364 add      7E39D214   1     A         gr17=gr25,gr26
  150| 000368 rldicr   7BDA1F24   1     SLL8      gr26=gr30,3
  150| 00036C rldicr   79991F24   1     SLL8      gr25=gr12,3
    0| 000370 subfic   23150001   1     SFI       gr24=1,gr21,ca"
  147| 000374 ld       EABF0158   1     L8        gr21=#SPILL26(gr31,344)
  150| 000378 rldicr   7A641F24   1     SLL8      gr4=gr19,3
  150| 00037C mulld    7F53D1D2   1     M         gr26=gr19,gr26
  150| 000380 neg      7C8400D0   1     COMP      gr4=gr4
  150| 000384 mulld    7F20C9D2   1     M         gr25=gr0,gr25
  150| 000388 mulld    7EE021D2   1     M         gr23=gr0,gr4
    0| 00038C ld       E8820000   1     L8        gr4=.+CONSTANT_AREA(gr2,0)
    0| 000390 add      7F16C214   1     A         gr24=gr22,gr24
  150| 000394 add      7F39BA14   1     A         gr25=gr25,gr23
    0| 000398 rldicl   7B170FE0   1     SRL8      gr23=gr24,63
  147| 00039C mulld    7E0CA9D2   1     M         gr16=gr12,gr21
    0| 0003A0 ld       EAC40030   1     L8        gr22=+CONSTANT_AREA(gr4,48)
  144| 0003A4 mulld    7F9CF1D2   1     M         gr28=gr28,gr30
    0| 0003A8 mulhd    7EB6C092   0     MULHD     gr21=gr22,gr24
  144| 0003AC mulld    7F6CD9D2   2     M         gr27=gr12,gr27
  150| 0003B0 mulld    7F40D1D2   1     M         gr26=gr0,gr26
    0| 0003B4 lfs      C0240000   1     LFS       fp1=+CONSTANT_AREA(gr4,0)
    0| 0003B8 lfs      C0440004   1     LFS       fp2=+CONSTANT_AREA(gr4,4)
    0| 0003BC lfs      C0640008   1     LFS       fp3=+CONSTANT_AREA(gr4,8)
  147| 0003C0 mulld    7EC871D2   1     M         gr22=gr8,gr14
    0| 0003C4 add      7EF5BA14   1     A         gr23=gr21,gr23
  145| 0003C8 std      F87F0230   1     ST8       #SPILL53(gr31,560)=gr3
  147| 0003CC ld       EA9F0150   1     L8        gr20=#SPILL25(gr31,336)
  146| 0003D0 ld       EA5F0138   1     L8        gr18=#SPILL22(gr31,312)
  146| 0003D4 ld       EA7F0148   1     L8        gr19=#SPILL24(gr31,328)
    0| 0003D8 cmpdi    2F370000   1     C8        cr6=gr23,0
    0| 0003DC lfs      C0A4000C   1     LFS       fp5=+CONSTANT_AREA(gr4,12)
    0| 0003E0 lfs      C0C40010   1     LFS       fp6=+CONSTANT_AREA(gr4,16)
  147| 0003E4 mulld    7EB4F1D2   1     M         gr21=gr20,gr30
  146| 0003E8 mulld    7E92F1D2   1     M         gr20=gr18,gr30
  145| 0003EC ld       EA5F0128   1     L8        gr18=#SPILL20(gr31,296)
  147| 0003F0 add      7DF5B214   1     A         gr15=gr21,gr22
  146| 0003F4 mulld    7EA771D2   1     M         gr21=gr7,gr14
  146| 0003F8 mulld    7ECC99D2   1     M         gr22=gr12,gr19
  145| 0003FC mulld    7E72F1D2   1     M         gr19=gr18,gr30
  145| 000400 ld       EA5F0130   1     L8        gr18=#SPILL21(gr31,304)
  146| 000404 add      7EB4AA14   1     A         gr21=gr20,gr21
  145| 000408 mulld    7E8671D2   1     M         gr20=gr6,gr14
  145| 00040C mulld    7C6C91D2   1     M         gr3=gr12,gr18
  144| 000410 mulld    7E4EE9D2   1     M         gr18=gr14,gr29
  145| 000414 add      7E93A214   1     A         gr20=gr19,gr20
  150| 000418 rldicr   78131F24   1     SLL8      gr19=gr0,3
    0| 00041C lfs      C0E40014   1     LFS       fp7=+CONSTANT_AREA(gr4,20)
  150| 000420 subf     7F53D050   1     S         gr26=gr26,gr19
  144| 000424 add      7E719214   1     A         gr19=gr17,gr18
  150| 000428 add      7E59D214   1     A         gr18=gr25,gr26
  144| 00042C rldicr   7BB90FA4   1     SLL8      gr25=gr29,1
  150| 000430 rldicr   79DA1F24   1     SLL8      gr26=gr14,3
  144| 000434 subf     7F99E050   1     S         gr28=gr28,gr25
  150| 000438 addi     3B5AFFE8   1     AI        gr26=gr26,-24
  144| 00043C add      7F9BE214   1     A         gr28=gr27,gr28
  150| 000440 add      7F72D214   1     A         gr27=gr18,gr26
  144| 000444 lfdx     7C93E4AE   1     LFL       fp4=d(gr19,gr28,0)
  144| 000448 add      7F93E214   1     A         gr28=gr19,gr28
  150| 00044C ld       EA3F0250   1     L8        gr17=#SPILL57(gr31,592)
  148| 000450 ld       EA7F0218   1     L8        gr19=#SPILL50(gr31,536)
  149| 000454 ld       EA5F0228   1     L8        gr18=#SPILL52(gr31,552)
  150| 000458 add      7F51DA14   1     A         gr26=gr17,gr27
  148| 00045C add      7F33DA14   1     A         gr25=gr19,gr27
  149| 000460 add      7F72DA14   1     A         gr27=gr18,gr27
  147| 000464 ld       EA5F00F0   1     L8        gr18=#SPILL13(gr31,240)
  147| 000468 ld       EA7F0120   1     L8        gr19=#SPILL19(gr31,288)
  146| 00046C ld       EA3F0110   1     L8        gr17=#SPILL17(gr31,272)
  147| 000470 add      7E729A14   1     A         gr19=gr18,gr19
  146| 000474 ld       EA5F00E8   1     L8        gr18=#SPILL12(gr31,232)
  147| 000478 add      7E709A14   1     A         gr19=gr16,gr19
  145| 00047C ld       EA1F00E0   1     L8        gr16=#SPILL11(gr31,224)
  147| 000480 add      7E737A14   1     A         gr19=gr19,gr15
  145| 000484 ld       E9FF0108   1     L8        gr15=#SPILL16(gr31,264)
  146| 000488 add      7E528A14   1     A         gr18=gr18,gr17
  146| 00048C add      7ED69214   1     A         gr22=gr22,gr18
    0| 000490 rldicr   7AF21764   1     SLL8      gr18=gr23,2
  146| 000494 add      7ED5B214   1     A         gr22=gr21,gr22
  145| 000498 add      7EAF8214   1     A         gr21=gr15,gr16
    0| 00049C subf     7E579050   1     S         gr18=gr18,gr23
  145| 0004A0 add      7EA3AA14   1     A         gr21=gr3,gr21
    0| 0004A4 subf     7F12C051   1     S_R       gr24,cr0=gr24,gr18
  145| 0004A8 add      7EB4AA14   1     A         gr21=gr20,gr21
  147| 0004AC rldicr   79140FA4   1     SLL8      gr20=gr8,1
  146| 0004B0 rldicr   78F20FA4   1     SLL8      gr18=gr7,1
  147| 0004B4 subf     7E949850   1     S         gr20=gr19,gr20
  145| 0004B8 rldicr   78D30FA4   1     SLL8      gr19=gr6,1
  146| 0004BC subf     7ED2B050   1     S         gr22=gr22,gr18
  145| 0004C0 subf     7EB3A850   1     S         gr21=gr21,gr19
    0| 0004C4 ld       E87F0230   1     L8        gr3=#SPILL53(gr31,560)
    0| 0004C8 bc       418200BC   1     BT        CL.352,cr0,0x4/eq,taken=50%(0,0)
    0| 0004CC mtspr    7F0903A6   1     LCTR      ctr=gr24
    0| 0004D0 ori      60210000   1     XNOP      
    0| 0004D4 ori      60210000   1     XNOP      
    0| 0004D8 ori      60210000   1     XNOP      
  144|                              CL.351:
  149| 0004DC stfdu    DCFB0008   1     STFDU     gr27,st2[].rns5.(gr27,8)=fp7
  144| 0004E0 lfdux    7D1CECEE   1     LFDU      fp8,gr28=d(gr28,gr29,0)
  148| 0004E4 stfdu    DCF90008   1     STFDU     gr25,st1[].rns4.(gr25,8)=fp7
  150| 0004E8 stfdu    DCFA0008   1     STFDU     gr26,st3[].rns6.(gr26,8)=fp7
  145| 0004EC fadd     FD48202A   1     AFL       fp10=fp8,fp4,fcr
  146| 0004F0 fadd     FD28402A   2     AFL       fp9=fp8,fp8,fcr
  150| 0004F4 fmr      FC804090   2     LRFL      fp4=fp8
  145| 0004F8 fmul     FD0A0072   2     MFL       fp8=fp10,fp1,fcr
  146| 0004FC fmul     FD290072   2     MFL       fp9=fp9,fp1,fcr
  145| 000500 frsqrte  FD404034   2     FRSQRE    fp10=fp8
  146| 000504 frsqrte  FD604834   2     FRSQRE    fp11=fp9
  145| 000508 fnabs    FD804110   2     NABSFL    fp12=fp8
  146| 00050C fnabs    FDA04910   2     NABSFL    fp13=fp9
  145| 000510 fmul     FFE802B2   2     MFL       fp31=fp8,fp10,fcr
  146| 000514 fmul     FFC902F2   2     MFL       fp30=fp9,fp11,fcr
  145| 000518 fmadd    FFAA17FA   2     FMA       fp29=fp2,fp10,fp31,fcr
  146| 00051C fmadd    FF8B17BA   2     FMA       fp28=fp2,fp11,fp30,fcr
  145| 000520 fmadd    FF7D28FA   2     FMA       fp27=fp5,fp29,fp3,fcr
  146| 000524 fmadd    FF5C28FA   2     FMA       fp26=fp5,fp28,fp3,fcr
  145| 000528 fmadd    FF7D36FA   2     FMA       fp27=fp6,fp29,fp27,fcr
  146| 00052C fmadd    FF5C36BA   2     FMA       fp26=fp6,fp28,fp26,fcr
  145| 000530 fmul     FFBD06F2   2     MFL       fp29=fp29,fp27,fcr
  146| 000534 fmul     FF9C06B2   2     MFL       fp28=fp28,fp26,fcr
  145| 000538 fmul     FFFF0772   2     MFL       fp31=fp31,fp29,fcr
  146| 00053C fmul     FFDE0732   2     MFL       fp30=fp30,fp28,fcr
  145| 000540 fmadd    FFAA577A   2     FMA       fp29=fp10,fp10,fp29,fcr
  146| 000544 fmadd    FF8B5F3A   2     FMA       fp28=fp11,fp11,fp28,fcr
  145| 000548 fmadd    FD48FABA   2     FMA       fp10=fp31,fp8,fp10,fcr
  146| 00054C fmadd    FD69F2FA   2     FMA       fp11=fp30,fp9,fp11,fcr
  145| 000550 fmul     FFFD0072   2     MFL       fp31=fp29,fp1,fcr
  146| 000554 fmul     FFDC0072   2     MFL       fp30=fp28,fp1,fcr
  145| 000558 fmsub    FFAA42B8   2     FMS       fp29=fp8,fp10,fp10,fcr
  146| 00055C fmsub    FF8B4AF8   2     FMS       fp28=fp9,fp11,fp11,fcr
  145| 000560 fnmsub   FD5D57FC   2     FNMS      fp10=fp10,fp29,fp31,fcr
  146| 000564 fnmsub   FD7C5FBC   2     FNMS      fp11=fp11,fp28,fp30,fcr
  145| 000568 fsel     FD0C522E   2     FSEL      fp8=fp12,fp10,fp8
  146| 00056C fsel     FD2D5A6E   2     FSEL      fp9=fp13,fp11,fp9
  145| 000570 stfdux   7D1535EE   1     STFDU     gr21,srd1(gr21,gr6,0)=fp8
  146| 000574 stfdux   7D363DEE   1     STFDU     gr22,srd2(gr22,gr7,0)=fp9
  147| 000578 stfdux   7D3445EE   1     STFDU     gr20,srd3(gr20,gr8,0)=fp9
  151| 00057C bc       4200FF60   1     BCT       ctr=CL.351,taken=100%(100,0)
    0| 000580 bc       419A0204   1     BT        CL.60,cr6,0x4/eq,taken=20%(20,80)
    0|                              CL.352:
    0| 000584 stfd     D81F0230   1     STFL      #SPILL53(gr31,560)=fp0
    0| 000588 mtspr    7EE903A6   1     LCTR      ctr=gr23
  144|                              CL.61:
  149| 00058C stfd     D8FB0008   1     STFL      st2[].rns5.(gr27,8)=fp7
  144| 000590 lfdux    7D5CECEE   1     LFDU      fp10,gr28=d(gr28,gr29,0)
  148| 000594 stfd     D8F90008   1     STFL      st1[].rns4.(gr25,8)=fp7
  150| 000598 stfd     D8FA0008   1     STFL      st3[].rns6.(gr26,8)=fp7
  148| 00059C stfd     D8F90010   1     STFL      st1[].rns4.(gr25,16)=fp7
  149| 0005A0 stfd     D8FB0010   1     STFL      st2[].rns5.(gr27,16)=fp7
  150| 0005A4 stfd     D8FA0010   1     STFL      st3[].rns6.(gr26,16)=fp7
  145| 0005A8 fadd     FC8A202A   1     AFL       fp4=fp10,fp4,fcr
  144| 0005AC lfdux    7DBCECEE   1     LFDU      fp13,gr28=d(gr28,gr29,0)
  146| 0005B0 fadd     FD2A502A   1     AFL       fp9=fp10,fp10,fcr
  145| 0005B4 fmul     FD040072   2     MFL       fp8=fp4,fp1,fcr
  144| 0005B8 lfdux    7C9CECEE   1     LFDU      fp4,gr28=d(gr28,gr29,0)
  145| 0005BC fadd     FD6D502A   1     AFL       fp11=fp13,fp10,fcr
  146| 0005C0 fadd     FD8D682A   2     AFL       fp12=fp13,fp13,fcr
  146| 0005C4 fmul     FD290072   2     MFL       fp9=fp9,fp1,fcr
  145| 0005C8 frsqrte  FD404034   2     FRSQRE    fp10=fp8
  145| 0005CC fnabs    FC004110   2     NABSFL    fp0=fp8
  145| 0005D0 fadd     FFC4682A   2     AFL       fp30=fp4,fp13,fcr
  145| 0005D4 stfd     D81F0238   1     STFL      #SPILL54(gr31,568)=fp0
  145| 0005D8 fmul     FD6B0072   1     MFL       fp11=fp11,fp1,fcr
  146| 0005DC fmul     FD8C0072   2     MFL       fp12=fp12,fp1,fcr
  146| 0005E0 frsqrte  FDA04834   2     FRSQRE    fp13=fp9
  145| 0005E4 fmul     FFE802B2   2     MFL       fp31=fp8,fp10,fcr
  145| 0005E8 fmul     FFDE0072   2     MFL       fp30=fp30,fp1,fcr
  146| 0005EC fnabs    FE804910   2     NABSFL    fp20=fp9
  145| 0005F0 frsqrte  FFA05834   2     FRSQRE    fp29=fp11
  146| 0005F4 frsqrte  FF806034   2     FRSQRE    fp28=fp12
  146| 0005F8 stfd     DA9F0240   1     STFL      #SPILL55(gr31,576)=fp20
  146| 0005FC fmul     FF690372   1     MFL       fp27=fp9,fp13,fcr
  145| 000600 fmadd    FF4A17FA   2     FMA       fp26=fp2,fp10,fp31,fcr
  145| 000604 frsqrte  FF00F034   2     FRSQRE    fp24=fp30
  145| 000608 fmul     FEEB0772   2     MFL       fp23=fp11,fp29,fcr
  146| 00060C fmul     FECC0732   2     MFL       fp22=fp12,fp28,fcr
  145| 000610 fnabs    FDE05910   2     NABSFL    fp15=fp11
  146| 000614 fmadd    FEAD16FA   2     FMA       fp21=fp2,fp13,fp27,fcr
  145| 000618 fmadd    FE1A28FA   2     FMA       fp16=fp5,fp26,fp3,fcr
  145| 00061C stfd     D9FF0248   1     STFL      #SPILL56(gr31,584)=fp15
  145| 000620 fmul     FE9E0632   1     MFL       fp20=fp30,fp24,fcr
  145| 000624 fmadd    FE7D15FA   2     FMA       fp19=fp2,fp29,fp23,fcr
  146| 000628 fmadd    FE5C15BA   2     FMA       fp18=fp2,fp28,fp22,fcr
  146| 00062C fmadd    FE3528FA   2     FMA       fp17=fp5,fp21,fp3,fcr
  145| 000630 fmadd    FE1A343A   2     FMA       fp16=fp6,fp26,fp16,fcr
  146| 000634 fadd     FF24202A   2     AFL       fp25=fp4,fp4,fcr
  145| 000638 fmadd    FDF8153A   2     FMA       fp15=fp2,fp24,fp20,fcr
  145| 00063C fmadd    FC1328FA   2     FMA       fp0=fp5,fp19,fp3,fcr
  146| 000640 fmadd    FDD228FA   2     FMA       fp14=fp5,fp18,fp3,fcr
  146| 000644 fmadd    FE35347A   2     FMA       fp17=fp6,fp21,fp17,fcr
  145| 000648 fmul     FF5A0432   2     MFL       fp26=fp26,fp16,fcr
  146| 00064C fmul     FF390072   2     MFL       fp25=fp25,fp1,fcr
  145| 000650 fmadd    FC4F28FA   2     FMA       fp2=fp5,fp15,fp3,fcr
  145| 000654 fmadd    FC13303A   2     FMA       fp0=fp6,fp19,fp0,fcr
  146| 000658 fmadd    FDD233BA   2     FMA       fp14=fp6,fp18,fp14,fcr
  146| 00065C fmul     FEB50472   2     MFL       fp21=fp21,fp17,fcr
  145| 000660 fmul     FFFF06B2   2     MFL       fp31=fp31,fp26,fcr
  145| 000664 fmadd    FF4A56BA   2     FMA       fp26=fp10,fp10,fp26,fcr
  145| 000668 fmadd    FE2F30BA   2     FMA       fp17=fp6,fp15,fp2,fcr
  145| 00066C fmul     FE730032   2     MFL       fp19=fp19,fp0,fcr
  146| 000670 lfd      C81F0240   1     LFL       fp0=#SPILL55(gr31,576)
  146| 000674 fmul     FE5203B2   1     MFL       fp18=fp18,fp14,fcr
  145| 000678 lfd      C9DF0248   1     LFL       fp14=#SPILL56(gr31,584)
  146| 00067C fmul     FF7B0572   1     MFL       fp27=fp27,fp21,fcr
  145| 000680 fmadd    FD48FABA   2     FMA       fp10=fp31,fp8,fp10,fcr
  146| 000684 fmadd    FFED6D7A   2     FMA       fp31=fp13,fp13,fp21,fcr
  145| 000688 fmul     FEAF0472   2     MFL       fp21=fp15,fp17,fcr
  145| 00068C lfd      C9FF0238   1     LFL       fp15=#SPILL54(gr31,568)
  145| 000690 fmul     FEF704F2   1     MFL       fp23=fp23,fp19,fcr
  145| 000694 fmadd    FE7DECFA   2     FMA       fp19=fp29,fp29,fp19,fcr
  146| 000698 fmul     FED604B2   2     MFL       fp22=fp22,fp18,fcr
  146| 00069C fmadd    FDA9DB7A   2     FMA       fp13=fp27,fp9,fp13,fcr
  145| 0006A0 fmsub    FF6A42B8   2     FMS       fp27=fp8,fp10,fp10,fcr
  145| 0006A4 fmul     FF5A0072   2     MFL       fp26=fp26,fp1,fcr
  145| 0006A8 fmadd    FFABBF7A   2     FMA       fp29=fp23,fp11,fp29,fcr
  145| 0006AC fmul     FEF40572   2     MFL       fp23=fp20,fp21,fcr
  146| 0006B0 fmadd    FE5CE4BA   2     FMA       fp18=fp28,fp28,fp18,fcr
  145| 0006B4 fmadd    FEB8C57A   2     FMA       fp21=fp24,fp24,fp21,fcr
  146| 0006B8 fmadd    FF8CB73A   2     FMA       fp28=fp22,fp12,fp28,fcr
  146| 0006BC fmsub    FE8D4B78   2     FMS       fp20=fp9,fp13,fp13,fcr
  146| 0006C0 fmul     FFFF0072   2     MFL       fp31=fp31,fp1,fcr
  145| 0006C4 fmadd    FF1EBE3A   2     FMA       fp24=fp23,fp30,fp24,fcr
  145| 0006C8 fnmsub   FD5B56BC   2     FNMS      fp10=fp10,fp27,fp26,fcr
  145| 0006CC fmsub    FEDD5F78   2     FMS       fp22=fp11,fp29,fp29,fcr
  145| 0006D0 fmul     FEF30072   2     MFL       fp23=fp19,fp1,fcr
  146| 0006D4 fmul     FE720072   2     MFL       fp19=fp18,fp1,fcr
  146| 0006D8 fmsub    FE5C6738   2     FMS       fp18=fp12,fp28,fp28,fcr
  145| 0006DC fmul     FF750072   2     MFL       fp27=fp21,fp1,fcr
  145| 0006E0 fmsub    FF58F638   2     FMS       fp26=fp30,fp24,fp24,fcr
  146| 0006E4 fnmsub   FDB46FFC   2     FNMS      fp13=fp13,fp20,fp31,fcr
  145| 0006E8 fsel     FD0F522E   2     FSEL      fp8=fp15,fp10,fp8
  146| 0006EC frsqrte  FE00C834   2     FRSQRE    fp16=fp25
  145| 0006F0 fnmsub   FFF6EDFC   2     FNMS      fp31=fp29,fp22,fp23,fcr
  146| 0006F4 fnmsub   FFB2E4FC   2     FNMS      fp29=fp28,fp18,fp19,fcr
  145| 0006F8 fnmsub   FF9AC6FC   2     FNMS      fp28=fp24,fp26,fp27,fcr
  146| 0006FC fnabs    FD406110   2     NABSFL    fp10=fp12
  146| 000700 fsel     FD206A6E   2     FSEL      fp9=fp0,fp13,fp9
  145| 000704 stfdux   7D1535EE   1     STFDU     gr21,srd1(gr21,gr6,0)=fp8
  145| 000708 fnabs    FDA0F110   1     NABSFL    fp13=fp30
  145| 00070C fsel     FD6EFAEE   2     FSEL      fp11=fp14,fp31,fp11
  146| 000710 fsel     FD4AEB2E   2     FSEL      fp10=fp10,fp29,fp12
  145| 000714 fsel     FD0DE7AE   2     FSEL      fp8=fp13,fp28,fp30
  146| 000718 fmul     FD990432   2     MFL       fp12=fp25,fp16,fcr
  148| 00071C stfdu    DCF90018   2     STFDU     gr25,st1[].rns4.(gr25,24)=fp7
    0| 000720 lfs      C0440004   1     LFS       fp2=+CONSTANT_AREA(gr4,4)
  146| 000724 stfdux   7D363DEE   1     STFDU     gr22,srd2(gr22,gr7,0)=fp9
  147| 000728 stfdux   7D3445EE   1     STFDU     gr20,srd3(gr20,gr8,0)=fp9
  145| 00072C stfdux   7D7535EE   1     STFDU     gr21,srd1(gr21,gr6,0)=fp11
  146| 000730 stfdux   7D563DEE   1     STFDU     gr22,srd2(gr22,gr7,0)=fp10
  145| 000734 stfdux   7D1535EE   1     STFDU     gr21,srd1(gr21,gr6,0)=fp8
  147| 000738 stfdux   7D5445EE   1     STFDU     gr20,srd3(gr20,gr8,0)=fp10
  146| 00073C fmadd    FD30133A   1     FMA       fp9=fp2,fp16,fp12,fcr
  149| 000740 stfdu    DCFB0018   2     STFDU     gr27,st2[].rns5.(gr27,24)=fp7
  146| 000744 fnabs    FD40C910   1     NABSFL    fp10=fp25
  150| 000748 stfdu    DCFA0018   2     STFDU     gr26,st3[].rns6.(gr26,24)=fp7
  146| 00074C fmadd    FD0928FA   1     FMA       fp8=fp5,fp9,fp3,fcr
  146| 000750 fmadd    FD09323A   2     FMA       fp8=fp6,fp9,fp8,fcr
  146| 000754 fmul     FD090232   2     MFL       fp8=fp9,fp8,fcr
  146| 000758 fmul     FD2C0232   2     MFL       fp9=fp12,fp8,fcr
  146| 00075C fmadd    FD10823A   2     FMA       fp8=fp16,fp16,fp8,fcr
  146| 000760 fmadd    FD394C3A   2     FMA       fp9=fp9,fp25,fp16,fcr
  146| 000764 fmul     FD080072   2     MFL       fp8=fp8,fp1,fcr
  146| 000768 fmsub    FD69CA78   2     FMS       fp11=fp25,fp9,fp9,fcr
  146| 00076C fnmsub   FD0B4A3C   2     FNMS      fp8=fp9,fp11,fp8,fcr
  146| 000770 fsel     FD0A466E   2     FSEL      fp8=fp10,fp8,fp25
  146| 000774 stfdux   7D163DEE   1     STFDU     gr22,srd2(gr22,gr7,0)=fp8
  147| 000778 stfdux   7D1445EE   1     STFDU     gr20,srd3(gr20,gr8,0)=fp8
  151| 00077C bc       4200FE10   1     BCT       ctr=CL.61,taken=100%(100,0)
  151| 000780 lfd      C81F0230   1     LFL       fp0=#SPILL53(gr31,560)
  151|                              CL.60:
  151| 000784 ld       EBBF0210   1     L8        gr29=#SPILL49(gr31,528)
  151| 000788 subf     7C8EE850   1     S         gr4=gr29,gr14
  151| 00078C addic.   34840001   1     AI_R      gr4,cr0=gr4,1,ca"
  168| 000790 mcrf     4F000000   1     LRCR      cr6=cr0
  168| 000794 bc       4081053C   1     BF        CL.62,cr0,0x2/gt,taken=50%(0,0)
  168| 000798 ld       EA3F0138   1     L8        gr17=#SPILL22(gr31,312)
  168| 00079C ld       EA1F0148   1     L8        gr16=#SPILL24(gr31,328)
  168| 0007A0 ld       EB9F00E8   1     L8        gr28=#SPILL12(gr31,232)
  168| 0007A4 ld       EADF0110   1     L8        gr22=#SPILL17(gr31,272)
  168| 0007A8 or       7FAFEB78   1     LR        gr15=gr29
  168| 0007AC mulld    7FA771D2   1     M         gr29=gr7,gr14
  168| 0007B0 mulld    7F11F1D2   1     M         gr24=gr17,gr30
  168| 0007B4 mulld    7F6C81D2   1     M         gr27=gr12,gr16
  169| 0007B8 ld       E89F01B0   1     L8        gr4=#SPILL37(gr31,432)
    0| 0007BC ld       EA9F01F0   1     L8        gr20=#SPILL45(gr31,496)
  169| 0007C0 ld       EA7F0088   1     L8        gr19=#SPILL0(gr31,136)
  174| 0007C4 ld       EA5F0188   1     L8        gr18=#SPILL32(gr31,392)
  168| 0007C8 add      7F36E214   1     A         gr25=gr22,gr28
  169| 0007CC ld       EABF01B8   1     L8        gr21=#SPILL38(gr31,440)
  168| 0007D0 add      7FB8EA14   1     A         gr29=gr24,gr29
  168| 0007D4 add      7F7BCA14   1     A         gr27=gr27,gr25
    0| 0007D8 addi     3B340002   1     AI        gr25=gr20,2
  168| 0007DC add      7FBDDA14   1     A         gr29=gr29,gr27
  169| 0007E0 subf     7F6B9850   1     S         gr27=gr19,gr11
  174| 0007E4 addi     3AD20070   1     AI        gr22=gr18,112
  173| 0007E8 ld       EA9F0160   1     L8        gr20=#SPILL27(gr31,352)
  172| 0007EC ld       EA7F0140   1     L8        gr19=#SPILL23(gr31,320)
  171| 0007F0 ld       EA5F0118   1     L8        gr18=#SPILL18(gr31,280)
  169| 0007F4 mulld    7F4B71D2   1     M         gr26=gr11,gr14
  169| 0007F8 mulld    7EE4F1D2   1     M         gr23=gr4,gr30
    0| 0007FC subfic   208E0001   1     SFI       gr4=1,gr14,ca"
  169| 000800 mulld    7F8CA9D2   1     M         gr28=gr12,gr21
    0| 000804 add      7F047A14   1     A         gr24=gr4,gr15
  168| 000808 subf     7FA7E850   1     S         gr29=gr29,gr7
  173| 00080C addi     3AB40070   1     AI        gr21=gr20,112
  172| 000810 addi     3A930070   1     AI        gr20=gr19,112
  171| 000814 addi     3A720070   1     AI        gr19=gr18,112
  169| 000818 ld       EA5F00F8   1     L8        gr18=#SPILL14(gr31,248)
  169| 00081C ld       E9FF0168   1     L8        gr15=#SPILL28(gr31,360)
    0| 000820 ld       E8820000   1     L8        gr4=.+CONSTANT_AREA(gr2,0)
  168| 000824 lfd      C91D0000   1     LFL       fp8=srd2(gr29,0)
  169| 000828 add      7F57D214   1     A         gr26=gr23,gr26
    0| 00082C subf     7F23C850   1     S         gr25=gr25,gr3
    0| 000830 rldicl   7B18F082   1     SRL8      gr24=gr24,2
  174| 000834 rldicr   79D71F24   1     SLL8      gr23=gr14,3
  169| 000838 addi     3A520070   1     AI        gr18=gr18,112
  169| 00083C add      7F6FDA14   1     A         gr27=gr15,gr27
  169| 000840 add      7F9CD214   1     A         gr28=gr28,gr26
    0| 000844 andi.    733A0003   1     RN4_R     gr26,cr0=gr25,0,0x3
    0| 000848 cmpdi    2FB80000   1     C8        cr7=gr24,0
  174| 00084C add      7F36BA14   1     A         gr25=gr22,gr23
  173| 000850 add      7ED5BA14   1     A         gr22=gr21,gr23
  172| 000854 add      7EB4BA14   1     A         gr21=gr20,gr23
  171| 000858 add      7E93BA14   1     A         gr20=gr19,gr23
  169| 00085C add      7EF2BA14   1     A         gr23=gr18,gr23
  169| 000860 add      7F9CDA14   1     A         gr28=gr28,gr27
    0| 000864 lfs      C0240000   1     LFS       fp1=+CONSTANT_AREA(gr4,0)
    0| 000868 lfs      C0440018   1     LFS       fp2=+CONSTANT_AREA(gr4,24)
    0| 00086C bc       418200F8   1     BT        CL.355,cr0,0x4/eq,taken=50%(0,0)
  172| 000870 qvfre    10A04030   1     QVFRE     fp5=fp8
  168| 000874 lfdux    7C7D3CEE   1     LFDU      fp3,gr29=srd2(gr29,gr7,0)
  169| 000878 lfdux    7C9C5CEE   1     LFDU      fp4,gr28=b1(gr28,gr11,0)
    0| 00087C mtspr    7F4903A6   1     LCTR      ctr=gr26
  172| 000880 fmsub    FCC81178   1     FMS       fp6=fp2,fp8,fp5,fcr
  171| 000884 qvfre    11201830   1     QVFRE     fp9=fp3
  169| 000888 fadd     FC84202A   1     AFL       fp4=fp4,fp4,fcr
  172| 00088C fnmsub   FCA529BC   2     FNMS      fp5=fp5,fp5,fp6,fcr
  171| 000890 fmsub    FCC31278   2     FMS       fp6=fp2,fp3,fp9,fcr
  172| 000894 fmsub    FCE81178   2     FMS       fp7=fp2,fp8,fp5,fcr
  171| 000898 fnmsub   FCC949BC   2     FNMS      fp6=fp9,fp9,fp6,fcr
  172| 00089C fnmsub   FCE529FC   2     FNMS      fp7=fp5,fp5,fp7,fcr
  171| 0008A0 fmsub    FCA311B8   2     FMS       fp5=fp2,fp3,fp6,fcr
  172| 0008A4 fmsub    FD2811F8   2     FMS       fp9=fp2,fp8,fp7,fcr
  174| 0008A8 fmr      FD001890   2     LRFL      fp8=fp3
  171| 0008AC fnmsub   FCC6317C   2     FNMS      fp6=fp6,fp6,fp5,fcr
  171| 0008B0 fmsub    FCA311B8   2     FMS       fp5=fp2,fp3,fp6,fcr
    0| 0008B4 bc       4240007C   1     BCF       ctr=CL.488,taken=0%(0,100)
    0| 0008B8 ori      60210000   1     XNOP      
    0|                              CL.489:
  168| 0008BC lfdux    7C7D3CEE   1     LFDU      fp3,gr29=srd2(gr29,gr7,0)
  169| 0008C0 fmul     FC840072   1     MFL       fp4=fp4,fp1,fcr
  171| 0008C4 fnmsub   FCA6317C   2     FNMS      fp5=fp6,fp6,fp5,fcr
  172| 0008C8 fnmsub   FCC73A7C   2     FNMS      fp6=fp7,fp7,fp9,fcr
  172| 0008CC qvfre    10E04030   1     QVFRE     fp7=fp8
  173| 0008D0 fabs     FD202210   1     ABSFL     fp9=fp4
  171| 0008D4 qvfre    11401830   1     QVFRE     fp10=fp3
  173| 0008D8 fmul     FD650272   1     MFL       fp11=fp5,fp9,fcr
  174| 0008DC fmul     FD260272   2     MFL       fp9=fp6,fp9,fcr
  171| 0008E0 stfdu    DCB40008   2     STFDU     gr20,srdpi[].rns9.(gr20,8)=fp5
  172| 0008E4 stfdu    DCD50008   1     STFDU     gr21,srdmi[].rns10.(gr21,8)=fp6
  172| 0008E8 fmsub    FCA811F8   1     FMS       fp5=fp2,fp8,fp7,fcr
  171| 0008EC fmsub    FCC312B8   2     FMS       fp6=fp2,fp3,fp10,fcr
  173| 0008F0 fneg     FD605850   2     COMPFL    fp11=fp11
  169| 0008F4 stfdu    DC970008   2     STFDU     gr23,bave[].rns7.(gr23,8)=fp4
  174| 0008F8 stfdu    DD390008   1     STFDU     gr25,valm[].rns12.(gr25,8)=fp9
  173| 0008FC stfdu    DD760008   1     STFDU     gr22,valp[].rns11.(gr22,8)=fp11
  171| 000900 fnmsub   FC8A51BC   1     FNMS      fp4=fp10,fp10,fp6,fcr
  172| 000904 fnmsub   FCA7397C   2     FNMS      fp5=fp7,fp7,fp5,fcr
  171| 000908 fmsub    FCC31138   2     FMS       fp6=fp2-fp4,fcr
  172| 00090C fmsub    FCE81178   2     FMS       fp7=fp2,fp8,fp5,fcr
  169| 000910 lfdux    7D3C5CEE   1     LFDU      fp9,gr28=b1(gr28,gr11,0)
  171| 000914 fnmsub   FCC421BC   1     FNMS      fp6=fp4,fp4,fp6,fcr
  172| 000918 fnmsub   FCE529FC   2     FNMS      fp7=fp5,fp5,fp7,fcr
  169| 00091C fadd     FC89482A   2     AFL       fp4=fp9,fp9,fcr
  171| 000920 fmsub    FCA311B8   2     FMS       fp5=fp2,fp3,fp6,fcr
  172| 000924 fmsub    FD2811F8   2     FMS       fp9=fp2,fp8,fp7,fcr
  174| 000928 fmr      FD001890   2     LRFL      fp8=fp3
    0| 00092C bc       4200FF90   1     BCT       ctr=CL.489,taken=100%(100,0)
    0|                              CL.488:
  169| 000930 fmul     FC640072   1     MFL       fp3=fp4,fp1,fcr
  171| 000934 fnmsub   FC86317C   2     FNMS      fp4=fp6,fp6,fp5,fcr
  172| 000938 fnmsub   FCA73A7C   2     FNMS      fp5=fp7,fp7,fp9,fcr
  173| 00093C fabs     FCC01A10   2     ABSFL     fp6=fp3
  169| 000940 stfdu    DC770008   2     STFDU     gr23,bave[].rns7.(gr23,8)=fp3
  173| 000944 fmul     FC6401B2   1     MFL       fp3=fp4,fp6,fcr
  171| 000948 stfdu    DC940008   2     STFDU     gr20,srdpi[].rns9.(gr20,8)=fp4
  174| 00094C fmul     FC8501B2   1     MFL       fp4=fp5,fp6,fcr
  172| 000950 stfdu    DCB50008   2     STFDU     gr21,srdmi[].rns10.(gr21,8)=fp5
  173| 000954 fneg     FC601850   1     COMPFL    fp3=fp3
  174| 000958 stfdu    DC990008   2     STFDU     gr25,valm[].rns12.(gr25,8)=fp4
  173| 00095C stfdu    DC760008   1     STFDU     gr22,valp[].rns11.(gr22,8)=fp3
    0| 000960 bc       419E0370   1     BT        CL.62,cr7,0x4/eq,taken=20%(20,80)
    0|                              CL.355:
  168| 000964 lfdux    7FFD3CEE   1     LFDU      fp31,gr29=srd2(gr29,gr7,0)
  172| 000968 qvfre    10604030   1     QVFRE     fp3=fp8
  169| 00096C lfdux    7CBC5CEE   1     LFDU      fp5,gr28=b1(gr28,gr11,0)
    0| 000970 mtspr    7F0903A6   1     LCTR      ctr=gr24
  171| 000974 qvfre    13C0F830   1     QVFRE     fp30=fp31
  168| 000978 lfdux    7DBD3CEE   1     LFDU      fp13,gr29=srd2(gr29,gr7,0)
  172| 00097C fmsub    FC8810F8   1     FMS       fp4=fp2,fp8,fp3,fcr
  169| 000980 lfdux    7CDC5CEE   1     LFDU      fp6,gr28=b1(gr28,gr11,0)
  169| 000984 fadd     FCA5282A   1     AFL       fp5=fp5,fp5,fcr
  171| 000988 fmsub    FD3F17B8   2     FMS       fp9=fp2,fp31,fp30,fcr
  172| 00098C fmr      FD60F090   2     LRFL      fp11=fp30
  168| 000990 lfdux    7D9D3CEE   1     LFDU      fp12,gr29=srd2(gr29,gr7,0)
  171| 000994 qvfre    13A06830   1     QVFRE     fp29=fp13
  169| 000998 lfdux    7CFC5CEE   1     LFDU      fp7,gr28=b1(gr28,gr11,0)
  169| 00099C fadd     FCC6302A   1     AFL       fp6=fp6,fp6,fcr
  171| 0009A0 fnmsub   FF9EF27C   2     FNMS      fp28=fp30,fp30,fp9,fcr
  172| 0009A4 fnmsub   FFC3193C   2     FNMS      fp30=fp3,fp3,fp4,fcr
  172| 0009A8 fmr      FF404890   2     LRFL      fp26=fp9
  168| 0009AC lfdux    7C7D3CEE   1     LFDU      fp3,gr29=srd2(gr29,gr7,0)
  171| 0009B0 fmsub    FECD1778   1     FMS       fp22=fp2,fp13,fp29,fcr
  169| 0009B4 lfdux    7C9C5CEE   1     LFDU      fp4,gr28=b1(gr28,gr11,0)
  172| 0009B8 fnmsub   FD6B5EBC   1     FNMS      fp11=fp11,fp11,fp26,fcr
  171| 0009BC qvfre    13606030   1     QVFRE     fp27=fp12
  172| 0009C0 fmr      FD40E890   1     LRFL      fp10=fp29
  169| 0009C4 fadd     FCE7382A   2     AFL       fp7=fp7,fp7,fcr
  171| 0009C8 qvfre    13401830   1     QVFRE     fp26=fp3
  172| 0009CC fmr      FF20B090   1     LRFL      fp25=fp22
  171| 0009D0 fnmsub   FFBDEDBC   2     FNMS      fp29=fp29,fp29,fp22,fcr
  171| 0009D4 fmsub    FEEC16F8   2     FMS       fp23=fp2,fp12,fp27,fcr
  172| 0009D8 fnmsub   FD4A567C   2     FNMS      fp10=fp10,fp10,fp25,fcr
  171| 0009DC fmsub    FF3F1738   2     FMS       fp25=fp2,fp31,fp28,fcr
  171| 0009E0 fmsub    FEC316B8   2     FMS       fp22=fp2,fp3,fp26,fcr
  172| 0009E4 fmr      FD20D890   2     LRFL      fp9=fp27
  171| 0009E8 fmsub    FE8D1778   2     FMS       fp20=fp2,fp13,fp29,fcr
  172| 0009EC fmr      FF00B890   2     LRFL      fp24=fp23
  171| 0009F0 fnmsub   FF7BDDFC   2     FNMS      fp27=fp27,fp27,fp23,fcr
  172| 0009F4 fnmsub   FD294E3C   2     FNMS      fp9=fp9,fp9,fp24,fcr
  171| 0009F8 fnmsub   FF5AD5BC   2     FNMS      fp26=fp26,fp26,fp22,fcr
  171| 0009FC fnmsub   FF9CE67C   2     FNMS      fp28=fp28,fp28,fp25,fcr
  172| 000A00 fmsub    FEED12B8   2     FMS       fp23=fp2,fp13,fp10,fcr
  172| 000A04 fmsub    FF1F12F8   2     FMS       fp24=fp2,fp31,fp11,fcr
  171| 000A08 fmsub    FEAC16F8   2     FMS       fp21=fp2,fp12,fp27,fcr
  172| 000A0C fmsub    FECC1278   2     FMS       fp22=fp2,fp12,fp9,fcr
  171| 000A10 fmsub    FF2316B8   2     FMS       fp25=fp2,fp3,fp26,fcr
  171| 000A14 fnmsub   FFBDED3C   2     FNMS      fp29=fp29,fp29,fp20,fcr
  169| 000A18 fadd     FC84202A   2     AFL       fp4=fp4,fp4,fcr
  172| 000A1C fnmsub   FD4A55FC   2     FNMS      fp10=fp10,fp10,fp23,fcr
  171| 000A20 fnmsub   FF7BDD7C   2     FNMS      fp27=fp27,fp27,fp21,fcr
  172| 000A24 fnmsub   FD294DBC   2     FNMS      fp9=fp9,fp9,fp22,fcr
  171| 000A28 fnmsub   FF5AD67C   2     FNMS      fp26=fp26,fp26,fp25,fcr
  172| 000A2C fnmsub   FD6B5E3C   2     FNMS      fp11=fp11,fp11,fp24,fcr
  172| 000A30 fmsub    FF2817B8   2     FMS       fp25=fp2,fp8,fp30,fcr
  171| 000A34 fmsub    FF0D1778   2     FMS       fp24=fp2,fp13,fp29,fcr
  171| 000A38 fmsub    FECC16F8   2     FMS       fp22=fp2,fp12,fp27,fcr
  172| 000A3C fmsub    FD8C1278   2     FMS       fp12=fp2,fp12,fp9,fcr
  171| 000A40 fmsub    FEA316B8   2     FMS       fp21=fp2,fp3,fp26,fcr
  171| 000A44 fmsub    FEFF1738   2     FMS       fp23=fp2,fp31,fp28,fcr
  169| 000A48 fmul     FC840072   2     MFL       fp4=fp4,fp1,fcr
  172| 000A4C fmsub    FDAD12B8   2     FMS       fp13=fp2,fp13,fp10,fcr
  172| 000A50 fmsub    FFFF12F8   2     FMS       fp31=fp2,fp31,fp11,fcr
  172| 000A54 fnmsub   FFDEF67C   2     FNMS      fp30=fp30,fp30,fp25,fcr
  171| 000A58 fnmsub   FF5AD57C   2     FNMS      fp26=fp26,fp26,fp21,fcr
  169| 000A5C fmul     FCA50072   2     MFL       fp5=fp5,fp1,fcr
  169| 000A60 fmul     FCC60072   2     MFL       fp6=fp6,fp1,fcr
  169| 000A64 fmul     FCE70072   2     MFL       fp7=fp7,fp1,fcr
  171| 000A68 fnmsub   FF3DEE3C   2     FNMS      fp25=fp29,fp29,fp24,fcr
  171| 000A6C fnmsub   FF7BDDBC   2     FNMS      fp27=fp27,fp27,fp22,fcr
  172| 000A70 fnmsub   FD294B3C   2     FNMS      fp9=fp9,fp9,fp12,fcr
  171| 000A74 stfdu    DF540020   2     STFDU     gr20,srdpi[].rns9.(gr20,32)=fp26
  171| 000A78 fnmsub   FFBCE5FC   1     FNMS      fp29=fp28,fp28,fp23,fcr
  173| 000A7C fabs     FD802210   2     ABSFL     fp12=fp4
  172| 000A80 fnmsub   FDAA537C   2     FNMS      fp13=fp10,fp10,fp13,fcr
  171| 000A84 stfd     DB34FFF0   1     STFL      srdpi[].rns9.(gr20,-16)=fp25
  172| 000A88 fnmsub   FD4B5FFC   1     FNMS      fp10=fp11,fp11,fp31,fcr
  171| 000A8C stfd     DB74FFF8   1     STFL      srdpi[].rns9.(gr20,-8)=fp27
  172| 000A90 fmsub    FD0817B8   1     FMS       fp8=fp2,fp8,fp30,fcr
  172| 000A94 stfdu    DD350020   2     STFDU     gr21,srdmi[].rns10.(gr21,32)=fp9
  173| 000A98 fmul     FF5A0332   1     MFL       fp26=fp26,fp12,fcr
  172| 000A9C stfd     D9B5FFF8   1     STFL      srdmi[].rns10.(gr21,-8)=fp13
  173| 000AA0 fabs     FD602A10   1     ABSFL     fp11=fp5
  173| 000AA4 fabs     FFE03210   2     ABSFL     fp31=fp6
  173| 000AA8 fabs     FF803A10   2     ABSFL     fp28=fp7
  173| 000AAC fmul     FF3907F2   2     MFL       fp25=fp25,fp31,fcr
  173| 000AB0 fmul     FF7B0732   2     MFL       fp27=fp27,fp28,fcr
  173| 000AB4 fmul     FF1D02F2   2     MFL       fp24=fp29,fp11,fcr
  174| 000AB8 fmul     FD290332   2     MFL       fp9=fp9,fp12,fcr
  174| 000ABC fmul     FD8D0732   2     MFL       fp12=fp13,fp28,fcr
  174| 000AC0 fmul     FDAA07F2   2     MFL       fp13=fp10,fp31,fcr
  172| 000AC4 fnmsub   FFFEF23C   2     FNMS      fp31=fp30,fp30,fp8,fcr
  173| 000AC8 fneg     FD00D050   2     COMPFL    fp8=fp26
  173| 000ACC fneg     FFC0D850   2     COMPFL    fp30=fp27
  173| 000AD0 fneg     FF80C850   2     COMPFL    fp28=fp25
  173| 000AD4 stfdu    DD160020   2     STFDU     gr22,valp[].rns11.(gr22,32)=fp8
  173| 000AD8 fneg     FD00C050   1     COMPFL    fp8=fp24
  174| 000ADC stfdu    DD390020   2     STFDU     gr25,valm[].rns12.(gr25,32)=fp9
  174| 000AE0 fmul     FD3F02F2   1     MFL       fp9=fp31,fp11,fcr
  173| 000AE4 stfd     DBD6FFF8   1     STFL      valp[].rns11.(gr22,-8)=fp30
  173| 000AE8 stfd     DB96FFF0   1     STFL      valp[].rns11.(gr22,-16)=fp28
  174| 000AEC stfd     D999FFF8   1     STFL      valm[].rns12.(gr25,-8)=fp12
  173| 000AF0 stfd     D916FFE8   1     STFL      valp[].rns11.(gr22,-24)=fp8
  174| 000AF4 stfd     D9B9FFF0   1     STFL      valm[].rns12.(gr25,-16)=fp13
    0| 000AF8 bc       424001B8   1     BCF       ctr=CL.490,taken=0%(0,100)
    0|                              CL.491:
  169| 000AFC lfdux    7D1C5CEE   1     LFDU      fp8,gr28=b1(gr28,gr11,0)
  171| 000B00 stfd     DBB4FFE8   1     STFL      srdpi[].rns9.(gr20,-24)=fp29
  172| 000B04 stfd     D955FFF0   1     STFL      srdmi[].rns10.(gr21,-16)=fp10
  174| 000B08 stfd     D939FFE8   1     STFL      valm[].rns12.(gr25,-24)=fp9
  172| 000B0C stfd     DBF5FFE8   1     STFL      srdmi[].rns10.(gr21,-24)=fp31
  169| 000B10 stfdu    DC970020   1     STFDU     gr23,bave[].rns7.(gr23,32)=fp4
  169| 000B14 lfdux    7C9C5CEE   1     LFDU      fp4,gr28=b1(gr28,gr11,0)
  169| 000B18 stfd     D8F7FFF8   1     STFL      bave[].rns7.(gr23,-8)=fp7
  169| 000B1C stfd     D8D7FFF0   1     STFL      bave[].rns7.(gr23,-16)=fp6
  169| 000B20 stfd     D8B7FFE8   1     STFL      bave[].rns7.(gr23,-24)=fp5
  169| 000B24 fadd     FCA8402A   1     AFL       fp5=fp8,fp8,fcr
  172| 000B28 qvfre    10C01830   1     QVFRE     fp6=fp3
  169| 000B2C lfdux    7CFC5CEE   1     LFDU      fp7,gr28=b1(gr28,gr11,0)
  169| 000B30 fmul     FCA50072   1     MFL       fp5=fp5,fp1,fcr
  172| 000B34 fmsub    FD4311B8   2     FMS       fp10=fp2,fp3,fp6,fcr
  169| 000B38 fadd     FC84202A   2     AFL       fp4=fp4,fp4,fcr
  169| 000B3C fadd     FCE7382A   2     AFL       fp7=fp7,fp7,fcr
  168| 000B40 lfdux    7D1D3CEE   1     LFDU      fp8,gr29=srd2(gr29,gr7,0)
  173| 000B44 fabs     FD202A10   1     ABSFL     fp9=fp5
  172| 000B48 fnmsub   FFE632BC   2     FNMS      fp31=fp6,fp6,fp10,fcr
  169| 000B4C fmul     FCC40072   2     MFL       fp6=fp4,fp1,fcr
  169| 000B50 lfdux    7C9C5CEE   1     LFDU      fp4,gr28=b1(gr28,gr11,0)
  169| 000B54 fmul     FCE70072   1     MFL       fp7=fp7,fp1,fcr
  168| 000B58 lfdux    7D5D3CEE   1     LFDU      fp10,gr29=srd2(gr29,gr7,0)
  171| 000B5C qvfre    13A04030   1     QVFRE     fp29=fp8
  172| 000B60 fmsub    FFC317F8   1     FMS       fp30=fp2,fp3,fp31,fcr
  172| 000B64 fmr      FF80E890   2     LRFL      fp28=fp29
  173| 000B68 fabs     FD603210   2     ABSFL     fp11=fp6
  173| 000B6C fabs     FD803A10   2     ABSFL     fp12=fp7
  169| 000B70 fadd     FC84202A   2     AFL       fp4=fp4,fp4,fcr
  168| 000B74 lfdux    7DBD3CEE   1     LFDU      fp13,gr29=srd2(gr29,gr7,0)
  172| 000B78 fnmsub   FFFFFFBC   1     FNMS      fp31=fp31,fp31,fp30,fcr
  171| 000B7C qvfre    13605030   1     QVFRE     fp27=fp10
  172| 000B80 fmr      FF40D890   1     LRFL      fp26=fp27
  171| 000B84 fmsub    FEA81778   2     FMS       fp21=fp2,fp8,fp29,fcr
  172| 000B88 fmr      FEC0A890   2     LRFL      fp22=fp21
  169| 000B8C fmul     FC840072   2     MFL       fp4=fp4,fp1,fcr
  172| 000B90 fmsub    FFC317F8   2     FMS       fp30=fp2,fp3,fp31,fcr
  168| 000B94 lfdux    7C7D3CEE   1     LFDU      fp3,gr29=srd2(gr29,gr7,0)
  171| 000B98 qvfre    13006830   1     QVFRE     fp24=fp13
  172| 000B9C fmr      FEE0C090   1     LRFL      fp23=fp24
  171| 000BA0 fmsub    FE6A16F8   2     FMS       fp19=fp2,fp10,fp27,fcr
  172| 000BA4 fmr      FF209890   2     LRFL      fp25=fp19
  171| 000BA8 fnmsub   FFBDED7C   2     FNMS      fp29=fp29,fp29,fp21,fcr
  172| 000BAC fnmsub   FF9CE5BC   2     FNMS      fp28=fp28,fp28,fp22,fcr
  171| 000BB0 qvfre    12801830   1     QVFRE     fp20=fp3
  171| 000BB4 fmsub    FEAD1638   1     FMS       fp21=fp2,fp13,fp24,fcr
  172| 000BB8 fmr      FEC0A890   2     LRFL      fp22=fp21
  171| 000BBC fnmsub   FF7BDCFC   2     FNMS      fp27=fp27,fp27,fp19,fcr
  172| 000BC0 fnmsub   FF5AD67C   2     FNMS      fp26=fp26,fp26,fp25,fcr
  171| 000BC4 fmsub    FF281778   2     FMS       fp25=fp2,fp8,fp29,fcr
  171| 000BC8 fmsub    FE631538   2     FMS       fp19=fp2,fp3,fp20,fcr
  171| 000BCC fnmsub   FF18C57C   2     FNMS      fp24=fp24,fp24,fp21,fcr
  172| 000BD0 fnmsub   FEF7BDBC   2     FNMS      fp23=fp23,fp23,fp22,fcr
  171| 000BD4 fmsub    FECA16F8   2     FMS       fp22=fp2,fp10,fp27,fcr
  172| 000BD8 fmsub    FEAA16B8   2     FMS       fp21=fp2,fp10,fp26,fcr
  172| 000BDC fmsub    FE281738   2     FMS       fp17=fp2,fp8,fp28,fcr
  171| 000BE0 fnmsub   FE94A4FC   2     FNMS      fp20=fp20,fp20,fp19,fcr
  171| 000BE4 fmsub    FE6D1638   2     FMS       fp19=fp2,fp13,fp24,fcr
  172| 000BE8 fmsub    FE4D15F8   2     FMS       fp18=fp2,fp13,fp23,fcr
  171| 000BEC fnmsub   FF7BDDBC   2     FNMS      fp27=fp27,fp27,fp22,fcr
  171| 000BF0 fnmsub   FFBDEE7C   2     FNMS      fp29=fp29,fp29,fp25,fcr
  172| 000BF4 fnmsub   FF5AD57C   2     FNMS      fp26=fp26,fp26,fp21,fcr
  171| 000BF8 fmsub    FF231538   2     FMS       fp25=fp2,fp3,fp20,fcr
  171| 000BFC fnmsub   FF18C4FC   2     FNMS      fp24=fp24,fp24,fp19,fcr
  172| 000C00 fnmsub   FEF7BCBC   2     FNMS      fp23=fp23,fp23,fp18,fcr
  172| 000C04 fnmsub   FF9CE47C   2     FNMS      fp28=fp28,fp28,fp17,fcr
  171| 000C08 fmsub    FECA16F8   2     FMS       fp22=fp2,fp10,fp27,fcr
  171| 000C0C fmsub    FEA81778   2     FMS       fp21=fp2,fp8,fp29,fcr
  171| 000C10 fnmsub   FF34A67C   2     FNMS      fp25=fp20,fp20,fp25,fcr
  171| 000C14 fmsub    FE8D1638   2     FMS       fp20=fp2,fp13,fp24,fcr
  172| 000C18 fmsub    FDAD15F8   2     FMS       fp13=fp2,fp13,fp23,fcr
  172| 000C1C fmsub    FD4A16B8   2     FMS       fp10=fp2,fp10,fp26,fcr
  172| 000C20 fmsub    FD081738   2     FMS       fp8=fp2,fp8,fp28,fcr
  171| 000C24 fnmsub   FF7BDDBC   2     FNMS      fp27=fp27,fp27,fp22,fcr
  171| 000C28 fmsub    FEC31678   2     FMS       fp22=fp2,fp3,fp25,fcr
  171| 000C2C fnmsub   FF18C53C   2     FNMS      fp24=fp24,fp24,fp20,fcr
  171| 000C30 fnmsub   FFBDED7C   2     FNMS      fp29=fp29,fp29,fp21,fcr
  172| 000C34 fnmsub   FDB7BB7C   2     FNMS      fp13=fp23,fp23,fp13,fcr
  172| 000C38 fnmsub   FF5AD2BC   2     FNMS      fp26=fp26,fp26,fp10,fcr
  172| 000C3C fnmsub   FD5CE23C   2     FNMS      fp10=fp28,fp28,fp8,fcr
  171| 000C40 fnmsub   FD19CDBC   2     FNMS      fp8=fp25,fp25,fp22,fcr
  172| 000C44 fnmsub   FFFFFFBC   2     FNMS      fp31=fp31,fp31,fp30,fcr
  173| 000C48 fmul     FFD80332   2     MFL       fp30=fp24,fp12,fcr
  173| 000C4C fmul     FF9B02F2   2     MFL       fp28=fp27,fp11,fcr
  173| 000C50 fabs     FF202210   2     ABSFL     fp25=fp4
  173| 000C54 fmul     FEFD0272   2     MFL       fp23=fp29,fp9,fcr
  173| 000C58 fmul     FEC80672   2     MFL       fp22=fp8,fp25,fcr
  174| 000C5C fmul     FF2D0672   2     MFL       fp25=fp13,fp25,fcr
  174| 000C60 fmul     FD9A0332   2     MFL       fp12=fp26,fp12,fcr
  174| 000C64 fmul     FD6A02F2   2     MFL       fp11=fp10,fp11,fcr
  174| 000C68 fmul     FD3F0272   2     MFL       fp9=fp31,fp9,fcr
  173| 000C6C fneg     FFC0F050   2     COMPFL    fp30=fp30
  173| 000C70 fneg     FEC0B050   2     COMPFL    fp22=fp22
  173| 000C74 fneg     FF80E050   2     COMPFL    fp28=fp28
  173| 000C78 fneg     FEE0B850   2     COMPFL    fp23=fp23
  173| 000C7C stfdu    DED60020   2     STFDU     gr22,valp[].rns11.(gr22,32)=fp22
  171| 000C80 stfdu    DD140020   1     STFDU     gr20,srdpi[].rns9.(gr20,32)=fp8
  173| 000C84 stfd     DBD6FFF8   1     STFL      valp[].rns11.(gr22,-8)=fp30
  174| 000C88 stfdu    DF390020   1     STFDU     gr25,valm[].rns12.(gr25,32)=fp25
  173| 000C8C stfd     DB96FFF0   1     STFL      valp[].rns11.(gr22,-16)=fp28
  171| 000C90 stfd     DB14FFF8   1     STFL      srdpi[].rns9.(gr20,-8)=fp24
  172| 000C94 stfdu    DDB50020   1     STFDU     gr21,srdmi[].rns10.(gr21,32)=fp13
  174| 000C98 stfd     D999FFF8   1     STFL      valm[].rns12.(gr25,-8)=fp12
  173| 000C9C stfd     DAF6FFE8   1     STFL      valp[].rns11.(gr22,-24)=fp23
  171| 000CA0 stfd     DB74FFF0   1     STFL      srdpi[].rns9.(gr20,-16)=fp27
  172| 000CA4 stfd     DB55FFF8   1     STFL      srdmi[].rns10.(gr21,-8)=fp26
  174| 000CA8 stfd     D979FFF0   1     STFL      valm[].rns12.(gr25,-16)=fp11
    0| 000CAC bc       4200FE50   1     BCT       ctr=CL.491,taken=100%(100,0)
    0|                              CL.490:
  169| 000CB0 stfdu    DC970020   1     STFDU     gr23,bave[].rns7.(gr23,32)=fp4
  171| 000CB4 stfd     DBB4FFE8   1     STFL      srdpi[].rns9.(gr20,-24)=fp29
  172| 000CB8 stfd     D955FFF0   1     STFL      srdmi[].rns10.(gr21,-16)=fp10
  174| 000CBC stfd     D939FFE8   1     STFL      valm[].rns12.(gr25,-24)=fp9
  172| 000CC0 stfd     DBF5FFE8   1     STFL      srdmi[].rns10.(gr21,-24)=fp31
  169| 000CC4 stfd     D8F7FFF8   1     STFL      bave[].rns7.(gr23,-8)=fp7
  169| 000CC8 stfd     D8D7FFF0   1     STFL      bave[].rns7.(gr23,-16)=fp6
  169| 000CCC stfd     D8B7FFE8   1     STFL      bave[].rns7.(gr23,-24)=fp5
  175|                              CL.62:
  175| 000CD0 ld       EBBF01F0   1     L8        gr29=#SPILL45(gr31,496)
  175| 000CD4 addi     3883FFFE   1     AI        gr4=gr3,-2
  175| 000CD8 extsw    7C9A07B4   1     EXTS4     gr26=gr4
  175| 000CDC std      FB5F0240   1     ST8       #SPILL55(gr31,576)=gr26
  175| 000CE0 addi     3B9D0002   1     AI        gr28=gr29,2
  175| 000CE4 extsw    7F9B07B4   1     EXTS4     gr27=gr28
  175| 000CE8 std      FB9F0230   1     ST8       #SPILL53(gr31,560)=gr28
  175| 000CEC subf     7C9AD850   1     S         gr4=gr27,gr26
  175| 000CF0 std      FB7F0238   1     ST8       #SPILL54(gr31,568)=gr27
  175| 000CF4 addic.   34840001   1     AI_R      gr4,cr0=gr4,1,ca"
  180| 000CF8 mcrf     4F800000   1     LRCR      cr7=cr0
  180| 000CFC bc       408101D0   1     BF        CL.64,cr0,0x2/gt,taken=50%(0,0)
  181| 000D00 ld       EA5F0090   1     L8        gr18=#SPILL1(gr31,144)
  181| 000D04 rldicr   7BC41F24   1     SLL8      gr4=gr30,3
  182| 000D08 ld       EA020000   1     L8        gr16=.&&N&field(gr2,0)
    0| 000D0C ld       E9FF0240   1     L8        gr15=#SPILL55(gr31,576)
  181| 000D10 rldicr   78161F24   1     SLL8      gr22=gr0,3
    0| 000D14 ld       EA3F01F0   1     L8        gr17=#SPILL45(gr31,496)
  181| 000D18 mulld    7F4491D2   1     M         gr26=gr4,gr18
  181| 000D1C rldicr   7A5D1F24   1     SLL8      gr29=gr18,3
  181| 000D20 rldicr   79841F24   1     SLL8      gr4=gr12,3
  181| 000D24 neg      7F3D00D0   1     COMP      gr25=gr29
  182| 000D28 ld       EBB003A0   1     L8        gr29=<s189:d928:l8>(gr16,928)
  181| 000D2C mulld    7F00D1D2   1     M         gr24=gr0,gr26
  182| 000D30 ld       EA900340   1     L8        gr20=<s189:d832:l8>(gr16,832)
  182| 000D34 ld       EA700358   1     L8        gr19=<s189:d856:l8>(gr16,856)
    0| 000D38 ld       EA5F0238   1     L8        gr18=#SPILL54(gr31,568)
  182| 000D3C rldicr   7BB71764   1     SLL8      gr23=gr29,2
  181| 000D40 mulld    7F4021D2   1     M         gr26=gr0,gr4
  181| 000D44 mulld    7F20C9D2   1     M         gr25=gr0,gr25
  181| 000D48 subf     7ED6C050   1     S         gr22=gr24,gr22
    0| 000D4C subfic   230F0001   1     SFI       gr24=1,gr15,ca"
  182| 000D50 subf     7EF7E850   1     S         gr23=gr29,gr23
  182| 000D54 add      7E73A214   1     A         gr19=gr19,gr20
    0| 000D58 add      7E92C214   1     A         gr20=gr18,gr24
  182| 000D5C add      7EF3BA14   1     A         gr23=gr19,gr23
  181| 000D60 ld       EA7F00C0   1     L8        gr19=#SPILL7(gr31,192)
  181| 000D64 ld       EA5F0170   1     L8        gr18=#SPILL29(gr31,368)
  182| 000D68 ld       EB900370   1     L8        gr28=<s189:d880:l8>(gr16,880)
  182| 000D6C ld       EB700388   1     L8        gr27=<s189:d904:l8>(gr16,904)
  181| 000D70 add      7EB9D214   1     A         gr21=gr25,gr26
  182| 000D74 mulld    7F2EE9D2   1     M         gr25=gr14,gr29
  181| 000D78 add      7ED5B214   1     A         gr22=gr21,gr22
    0| 000D7C addi     3AB10005   1     AI        gr21=gr17,5
  181| 000D80 add      7E329A14   1     A         gr17=gr18,gr19
  182| 000D84 ld       EA5F01C0   1     L8        gr18=#SPILL39(gr31,448)
  182| 000D88 mulld    7F6CD9D2   1     M         gr27=gr12,gr27
  182| 000D8C mulld    7F5CF1D2   1     M         gr26=gr28,gr30
  182| 000D90 addi     3A720060   1     AI        gr19=gr18,96
  181| 000D94 ld       EA5F01A0   1     L8        gr18=#SPILL35(gr31,416)
  182| 000D98 rldicr   79DC1F24   1     SLL8      gr28=gr14,3
  181| 000D9C add      7ECAB214   1     A         gr22=gr10,gr22
  182| 000DA0 addi     3B1CFFE0   1     AI        gr24=gr28,-32
    0| 000DA4 subf     7EA3A850   1     S         gr21=gr21,gr3
    0| 000DA8 rldicl   7A94F082   1     SRL8      gr20=gr20,2
  181| 000DAC addi     3A520060   1     AI        gr18=gr18,96
  182| 000DB0 add      7F7BD214   1     A         gr27=gr27,gr26
  182| 000DB4 add      7F57CA14   1     A         gr26=gr23,gr25
  181| 000DB8 add      7F36C214   1     A         gr25=gr22,gr24
    0| 000DBC andi.    72B80003   1     RN4_R     gr24,cr0=gr21,0,0x3
    0| 000DC0 cmpdi    2EB40000   1     C8        cr5=gr20,0
  181| 000DC4 lfdx     7C3124AE   1     LFL       fp1=vg2(gr17,gr4,0)
  182| 000DC8 add      7C93E214   1     A         gr4=gr19,gr28
  181| 000DCC add      7F92E214   1     A         gr28=gr18,gr28
  182| 000DD0 add      7F7BD214   1     A         gr27=gr27,gr26
    0| 000DD4 bc       41820048   1     BT        CL.358,cr0,0x4/eq,taken=50%(0,0)
  181| 000DD8 lfdu     CC590008   1     LFDU      fp2,gr25=u2[](gr25,8)
    0| 000DDC mtspr    7F0903A6   1     LCTR      ctr=gr24
  182| 000DE0 lfdux    7C9BECEE   1     LFDU      fp4,gr27=b2(gr27,gr29,0)
  181| 000DE4 fsub     FC420828   1     SFL       fp2=fp2,fp1,fcr
    0| 000DE8 bc       42400028   1     BCF       ctr=CL.492,taken=0%(0,100)
    0| 000DEC ori      60210000   1     XNOP      
    0| 000DF0 ori      60210000   1     XNOP      
    0| 000DF4 ori      60210000   1     XNOP      
    0|                              CL.493:
  181| 000DF8 lfdu     CC790008   1     LFDU      fp3,gr25=u2[](gr25,8)
  182| 000DFC stfdu    DC840008   1     STFDU     gr4,btmp[].rns15.(gr4,8)=fp4
  182| 000E00 lfdux    7C9BECEE   1     LFDU      fp4,gr27=b2(gr27,gr29,0)
  181| 000E04 stfdu    DC5C0008   1     STFDU     gr28,vtmp[].rns13.(gr28,8)=fp2
  181| 000E08 fsub     FC430828   1     SFL       fp2=fp3,fp1,fcr
    0| 000E0C bc       4200FFEC   1     BCT       ctr=CL.493,taken=100%(100,0)
    0|                              CL.492:
  182| 000E10 stfdu    DC840008   1     STFDU     gr4,btmp[].rns15.(gr4,8)=fp4
  181| 000E14 stfdu    DC5C0008   1     STFDU     gr28,vtmp[].rns13.(gr28,8)=fp2
    0| 000E18 bc       419600B4   1     BT        CL.64,cr5,0x4/eq,taken=20%(20,80)
    0|                              CL.358:
  182| 000E1C lfdux    7C5BECEE   1     LFDU      fp2,gr27=b2(gr27,gr29,0)
  181| 000E20 lfd      C8790008   1     LFL       fp3=u2[](gr25,8)
  181| 000E24 lfd      C8B90018   1     LFL       fp5=u2[](gr25,24)
  181| 000E28 lfd      C8990010   1     LFL       fp4=u2[](gr25,16)
    0| 000E2C mtspr    7E8903A6   1     LCTR      ctr=gr20
  181| 000E30 lfdu     CCD90020   1     LFDU      fp6,gr25=u2[](gr25,32)
  182| 000E34 lfdux    7CFBECEE   1     LFDU      fp7,gr27=b2(gr27,gr29,0)
  181| 000E38 fsub     FC630828   1     SFL       fp3=fp3,fp1,fcr
  182| 000E3C stfd     D8440008   1     STFL      btmp[].rns15.(gr4,8)=fp2
  181| 000E40 fsub     FC450828   1     SFL       fp2=fp5,fp1,fcr
  181| 000E44 fsub     FC840828   2     SFL       fp4=fp4,fp1,fcr
  182| 000E48 lfdux    7CBBECEE   1     LFDU      fp5,gr27=b2(gr27,gr29,0)
  181| 000E4C stfd     D87C0008   1     STFL      vtmp[].rns13.(gr28,8)=fp3
  182| 000E50 stfd     D8E40010   1     STFL      btmp[].rns15.(gr4,16)=fp7
  181| 000E54 stfd     D89C0010   1     STFL      vtmp[].rns13.(gr28,16)=fp4
  182| 000E58 lfdux    7C7BECEE   1     LFDU      fp3,gr27=b2(gr27,gr29,0)
  182| 000E5C stfd     D8A40018   1     STFL      btmp[].rns15.(gr4,24)=fp5
  182| 000E60 stfdu    DC640020   1     STFDU     gr4,btmp[].rns15.(gr4,32)=fp3
    0| 000E64 bc       4240005C   1     BCF       ctr=CL.494,taken=0%(0,100)
    0| 000E68 ori      60210000   1     XNOP      
    0|                              CL.495:
  182| 000E6C lfdux    7C7BECEE   1     LFDU      fp3,gr27=b2(gr27,gr29,0)
  181| 000E70 lfd      C8990008   1     LFL       fp4=u2[](gr25,8)
  181| 000E74 fsub     FCA60828   1     SFL       fp5=fp6,fp1,fcr
  181| 000E78 stfd     D85C0018   1     STFL      vtmp[].rns13.(gr28,24)=fp2
  182| 000E7C lfdux    7C5BECEE   1     LFDU      fp2,gr27=b2(gr27,gr29,0)
  182| 000E80 stfd     D8640008   1     STFL      btmp[].rns15.(gr4,8)=fp3
  181| 000E84 lfd      C8790010   1     LFL       fp3=u2[](gr25,16)
  181| 000E88 fsub     FC840828   1     SFL       fp4=fp4,fp1,fcr
  181| 000E8C stfdu    DCBC0020   2     STFDU     gr28,vtmp[].rns13.(gr28,32)=fp5
  182| 000E90 lfdux    7CBBECEE   1     LFDU      fp5,gr27=b2(gr27,gr29,0)
  182| 000E94 stfd     D8440010   1     STFL      btmp[].rns15.(gr4,16)=fp2
  181| 000E98 lfd      C8590018   1     LFL       fp2=u2[](gr25,24)
  181| 000E9C fsub     FC630828   1     SFL       fp3=fp3,fp1,fcr
  181| 000EA0 stfd     D89C0008   1     STFL      vtmp[].rns13.(gr28,8)=fp4
  182| 000EA4 lfdux    7C9BECEE   1     LFDU      fp4,gr27=b2(gr27,gr29,0)
  182| 000EA8 stfd     D8A40018   1     STFL      btmp[].rns15.(gr4,24)=fp5
  181| 000EAC lfdu     CCD90020   1     LFDU      fp6,gr25=u2[](gr25,32)
  181| 000EB0 fsub     FC420828   1     SFL       fp2=fp2,fp1,fcr
  181| 000EB4 stfd     D87C0010   1     STFL      vtmp[].rns13.(gr28,16)=fp3
  182| 000EB8 stfdu    DC840020   1     STFDU     gr4,btmp[].rns15.(gr4,32)=fp4
    0| 000EBC bc       4200FFB0   1     BCT       ctr=CL.495,taken=100%(100,0)
    0|                              CL.494:
  181| 000EC0 fsub     FC260828   1     SFL       fp1=fp6,fp1,fcr
  181| 000EC4 stfd     D85C0018   1     STFL      vtmp[].rns13.(gr28,24)=fp2
  181| 000EC8 stfdu    DC3C0020   1     STFDU     gr28,vtmp[].rns13.(gr28,32)=fp1
  183|                              CL.64:
  190| 000ECC bc       40850490   1     BF        CL.66,cr1,0x2/gt,taken=50%(0,0)
  190| 000ED0 ld       EB7F01A0   1     L8        gr27=#SPILL35(gr31,416)
  190| 000ED4 ld       EAFF01C0   1     L8        gr23=#SPILL39(gr31,448)
  190| 000ED8 ld       EA5F01C8   1     L8        gr18=#SPILL40(gr31,456)
    0| 000EDC ld       EA3F01F8   1     L8        gr17=#SPILL46(gr31,504)
    0| 000EE0 ld       EA1F01F0   1     L8        gr16=#SPILL45(gr31,496)
  190| 000EE4 rldicr   79C41F24   1     SLL8      gr4=gr14,3
    0| 000EE8 ld       E9FF0210   1     L8        gr15=#SPILL49(gr31,528)
  190| 000EEC addi     3B9B0070   1     AI        gr28=gr27,112
  190| 000EF0 addi     3B770070   1     AI        gr27=gr23,112
  190| 000EF4 ld       EA7F01A8   1     L8        gr19=#SPILL36(gr31,424)
  190| 000EF8 add      7EE49214   1     A         gr23=gr4,gr18
  198| 000EFC ld       EA5F00D0   1     L8        gr18=#SPILL9(gr31,208)
    0| 000F00 subfic   23B10001   1     SFI       gr29=1,gr17,ca"
    0| 000F04 addi     3B100003   1     AI        gr24=gr16,3
    0| 000F08 add      7F2FEA14   1     A         gr25=gr15,gr29
    0| 000F0C subf     7EA3C050   1     S         gr21=gr24,gr3
    0| 000F10 rldicl   7B34F842   1     SRL8      gr20=gr25,1
  190| 000F14 ld       EADF0178   1     L8        gr22=#SPILL30(gr31,376)
  190| 000F18 add      7F249A14   1     A         gr25=gr4,gr19
  198| 000F1C addi     3A720068   1     AI        gr19=gr18,104
  193| 000F20 ld       EA5F00A0   1     L8        gr18=#SPILL3(gr31,160)
    0| 000F24 andi.    72B50001   1     RN4_R     gr21,cr0=gr21,0,0x1
    0| 000F28 ld       EBA20000   1     L8        gr29=.+CONSTANT_AREA(gr2,0)
  190| 000F2C ld       EABF00B8   1     L8        gr21=#SPILL6(gr31,184)
  190| 000F30 ld       E9FF00B8   1     L8        gr15=#SPILL6(gr31,184)
  190| 000F34 addi     3B44FFF8   1     AI        gr26=gr4,-8
  190| 000F38 add      7F04E214   1     A         gr24=gr4,gr28
  190| 000F3C add      7F56D214   1     A         gr26=gr22,gr26
  190| 000F40 add      7EC4DA14   1     A         gr22=gr4,gr27
  193| 000F44 addi     3A520068   1     AI        gr18=gr18,104
    0| 000F48 cmpdi    2EB40000   1     C8        cr5=gr20,0
  190| 000F4C add      7EB5D214   1     A         gr21=gr21,gr26
  190| 000F50 lfdx     7C2FD4AE   1     LFL       fp1=dx1bi(gr15,gr26,0)
  190| 000F54 lfd      C919FFE8   1     LFL       fp8=vtmp[].rns13.(gr25,-24)
  190| 000F58 lfdx     7C5C24AE   1     LFL       fp2=vtmp[].rns13.(gr28,gr4,0)
  190| 000F5C lfd      CB37FFE8   1     LFL       fp25=btmp[].rns15.(gr23,-24)
  190| 000F60 lfdx     7C7B24AE   1     LFL       fp3=btmp[].rns15.(gr27,gr4,0)
  198| 000F64 add      7F849A14   1     A         gr28=gr4,gr19
  193| 000F68 add      7C849214   1     A         gr4=gr4,gr18
    0| 000F6C lfs      C09D0014   1     LFS       fp4=+CONSTANT_AREA(gr29,20)
    0| 000F70 lfs      C0BD0018   1     LFS       fp5=+CONSTANT_AREA(gr29,24)
    0| 000F74 lfd      C8DD0020   1     LFL       fp6=+CONSTANT_AREA(gr29,32)
    0| 000F78 mtspr    7E8903A6   1     LCTR      ctr=gr20
    0| 000F7C bc       418200D8   1     BT        CL.523,cr0,0x4/eq,taken=50%(0,0)
  191| 000F80 fsub     FCE24028   1     SFL       fp7=fp2,fp8,fcr
  190| 000F84 lfdu     CD980008   1     LFDU      fp12,gr24=vtmp[].rns13.(gr24,8)
  196| 000F88 fsub     FD43C828   1     SFL       fp10=fp3,fp25,fcr
  190| 000F8C lfdu     CDB60008   1     LFDU      fp13,gr22=btmp[].rns15.(gr22,8)
  198| 000F90 fmr      FF201890   1     LRFL      fp25=fp3
  190| 000F94 lfdu     CD350008   1     LFDU      fp9,gr21=dx1bi(gr21,8)
  191| 000F98 fmul     FFA70072   1     MFL       fp29=fp7,fp1,fcr
  198| 000F9C fmr      FD001090   2     LRFL      fp8=fp2
  192| 000FA0 fsub     FFEC1028   2     SFL       fp31=fp12,fp2,fcr
  196| 000FA4 fmul     FD6102B2   2     MFL       fp11=fp1,fp10,fcr
  197| 000FA8 fsub     FFCD1828   2     SFL       fp30=fp13,fp3,fcr
  198| 000FAC fmr      FC606890   2     LRFL      fp3=fp13
  198| 000FB0 fmr      FC406090   2     LRFL      fp2=fp12
  192| 000FB4 fmul     FDBF0272   2     MFL       fp13=fp31,fp9,fcr
  197| 000FB8 fmul     FFE907B2   2     MFL       fp31=fp9,fp30,fcr
  192| 000FBC fmadd    FD87687A   2     FMA       fp12=fp13,fp7,fp1,fcr
  193| 000FC0 fmul     FCFD0372   2     MFL       fp7=fp29,fp13,fcr
  197| 000FC4 fmadd    FDA1FABA   2     FMA       fp13=fp31,fp1,fp10,fcr
  198| 000FC8 fmul     FF8B07F2   2     MFL       fp28=fp11,fp31,fcr
  198| 000FCC fmr      FC204890   2     LRFL      fp1=fp9
  192| 000FD0 qvfcpsgn 112C2810   1     CPYSFL    fp9=fp5,fp12
  193| 000FD4 fabs     FD406210   1     ABSFL     fp10=fp12
  197| 000FD8 qvfcpsgn 116D2810   1     CPYSFL    fp11=fp5,fp13
  198| 000FDC fabs     FD806A10   1     ABSFL     fp12=fp13
  193| 000FE0 fsub     FDA65028   2     SFL       fp13=fp6,fp10,fcr
  198| 000FE4 fsub     FFE66028   2     SFL       fp31=fp6,fp12,fcr
  193| 000FE8 fneg     FFC03850   2     COMPFL    fp30=fp7
  198| 000FEC fneg     FFA0E050   2     COMPFL    fp29=fp28
  193| 000FF0 fsel     FCFE392E   2     FSEL      fp7=fp30,fp7,fp4
  198| 000FF4 fsel     FFDDE12E   2     FSEL      fp30=fp29,fp28,fp4
  193| 000FF8 fsel     FD4D51AE   2     FSEL      fp10=fp13,fp10,fp6
  198| 000FFC fsel     FD9F61AE   2     FSEL      fp12=fp31,fp12,fp6
  193| 001000 fmul     FCE70272   2     MFL       fp7=fp7,fp9,fcr
  198| 001004 fmul     FD3E02F2   2     MFL       fp9=fp30,fp11,fcr
  193| 001008 qvfre    11605030   1     QVFRE     fp11=fp10
  198| 00100C qvfre    11A06030   1     QVFRE     fp13=fp12
  193| 001010 fmsub    FFEA2AF8   1     FMS       fp31=fp5,fp10,fp11,fcr
  198| 001014 fmsub    FFCC2B78   2     FMS       fp30=fp5,fp12,fp13,fcr
  193| 001018 fnmsub   FD6B5FFC   2     FNMS      fp11=fp11,fp11,fp31,fcr
  198| 00101C fnmsub   FDAD6FBC   2     FNMS      fp13=fp13,fp13,fp30,fcr
  193| 001020 fmsub    FFEA2AF8   2     FMS       fp31=fp5,fp10,fp11,fcr
  198| 001024 fmsub    FFCC2B78   2     FMS       fp30=fp5,fp12,fp13,fcr
  193| 001028 fnmsub   FD6B5FFC   2     FNMS      fp11=fp11,fp11,fp31,fcr
  198| 00102C fnmsub   FDAD6FBC   2     FNMS      fp13=fp13,fp13,fp30,fcr
  193| 001030 fmul     FFE702F2   2     MFL       fp31=fp7,fp11,fcr
  198| 001034 fmul     FFC90372   2     MFL       fp30=fp9,fp13,fcr
  193| 001038 fmsub    FCEA3FF8   2     FMS       fp7=fp7,fp10,fp31,fcr
  198| 00103C fmsub    FD2C4FB8   2     FMS       fp9=fp9,fp12,fp30,fcr
  193| 001040 fnmsub   FCEBF9FC   2     FNMS      fp7=fp31,fp11,fp7,fcr
  198| 001044 fnmsub   FD2DF27C   2     FNMS      fp9=fp30,fp13,fp9,fcr
  193| 001048 stfdu    DCE40008   2     STFDU     gr4,dv[].rns18.(gr4,8)=fp7
  198| 00104C stfdu    DD3C0008   1     STFDU     gr28,db[].rns19.(gr28,8)=fp9
    0| 001050 bc       4196030C   1     BT        CL.66,cr5,0x4/eq,taken=20%(20,80)
    0|                              CL.523:
  190| 001054 lfd      C8F80008   1     LFL       fp7=vtmp[].rns13.(gr24,8)
  191| 001058 fsub     FD024028   1     SFL       fp8=fp2,fp8,fcr
  190| 00105C lfd      C9360008   1     LFL       fp9=btmp[].rns15.(gr22,8)
  190| 001060 lfd      C9550008   1     LFL       fp10=dx1bi(gr21,8)
  192| 001064 fsub     FD671028   1     SFL       fp11=fp7,fp2,fcr
  197| 001068 fsub     FDA91828   2     SFL       fp13=fp9,fp3,fcr
  192| 00106C fmul     FD6B02B2   2     MFL       fp11=fp11,fp10,fcr
    0| 001070 bc       42400190   1     BCF       ctr=CL.600,taken=0%(0,100)
    0| 001074 ori      60210000   1     XNOP      
  190|                              CL.67:
  196| 001078 fsub     FF83C828   1     SFL       fp28=fp3,fp25,fcr
  190| 00107C lfdu     CD980010   1     LFDU      fp12,gr24=vtmp[].rns13.(gr24,16)
  197| 001080 fmul     FDAA0372   1     MFL       fp13=fp10,fp13,fcr
  190| 001084 lfdu     CFF60010   1     LFDU      fp31,gr22=btmp[].rns15.(gr22,16)
  191| 001088 fmul     FFC80072   1     MFL       fp30=fp8,fp1,fcr
  192| 00108C fmadd    FF08587A   2     FMA       fp24=fp11,fp8,fp1,fcr
  196| 001090 fmul     FFA10732   2     MFL       fp29=fp1,fp28,fcr
  191| 001094 fsub     FEE71028   2     SFL       fp23=fp7,fp2,fcr
  197| 001098 fmadd    FD016F3A   2     FMA       fp8=fp13,fp1,fp28,fcr
  190| 00109C lfdu     CC350010   1     LFDU      fp1,gr21=dx1bi(gr21,16)
  192| 0010A0 fsub     FF4C3828   1     SFL       fp26=fp12,fp7,fcr
  192| 0010A4 qvfcpsgn 13982810   1     CPYSFL    fp28=fp5,fp24
  197| 0010A8 fsub     FF3F4828   1     SFL       fp25=fp31,fp9,fcr
  193| 0010AC fabs     FEC0C210   2     ABSFL     fp22=fp24
  197| 0010B0 qvfcpsgn 13682810   1     CPYSFL    fp27=fp5,fp8
  196| 0010B4 fsub     FC491828   1     SFL       fp2=fp9,fp3,fcr
  192| 0010B8 fmul     FF5A0072   2     MFL       fp26=fp26,fp1,fcr
  198| 0010BC fabs     FD004210   2     ABSFL     fp8=fp8
  197| 0010C0 fmul     FF210672   2     MFL       fp25=fp1,fp25,fcr
  193| 0010C4 fsub     FE86B028   2     SFL       fp20=fp6,fp22,fcr
  198| 0010C8 fsub     FEA64028   2     SFL       fp21=fp6,fp8,fcr
  191| 0010CC fmul     FF1702B2   2     MFL       fp24=fp23,fp10,fcr
  192| 0010D0 fmadd    FC77D2BA   2     FMA       fp3=fp26,fp23,fp10,fcr
  196| 0010D4 fmul     FEEA00B2   2     MFL       fp23=fp10,fp2,fcr
  197| 0010D8 fmadd    FC4AC8BA   2     FMA       fp2=fp25,fp10,fp2,fcr
  190| 0010DC lfd      C9550008   1     LFL       fp10=dx1bi(gr21,8)
  193| 0010E0 fsel     FED4B1AE   1     FSEL      fp22=fp20,fp22,fp6
  198| 0010E4 fsel     FEB541AE   2     FSEL      fp21=fp21,fp8,fp6
  192| 0010E8 qvfcpsgn 12832810   1     CPYSFL    fp20=fp5,fp3
  193| 0010EC fabs     FE601A10   1     ABSFL     fp19=fp3
  197| 0010F0 qvfcpsgn 12422810   1     CPYSFL    fp18=fp5,fp2
  193| 0010F4 fsub     FE069828   1     SFL       fp16=fp6,fp19,fcr
  198| 0010F8 fabs     FE201210   2     ABSFL     fp17=fp2
  191| 0010FC fsub     FD0C3828   2     SFL       fp8=fp12,fp7,fcr
  190| 001100 lfd      C8F80008   1     LFL       fp7=vtmp[].rns13.(gr24,8)
  198| 001104 fmr      FC406090   1     LRFL      fp2=fp12
  193| 001108 qvfre    1180B030   1     QVFRE     fp12=fp22
  198| 00110C fmr      FC60F890   1     LRFL      fp3=fp31
  193| 001110 fsel     FFF099AE   2     FSEL      fp31=fp16,fp19,fp6
  198| 001114 qvfre    1260A830   1     QVFRE     fp19=fp21
  198| 001118 fsub     FDE68828   1     SFL       fp15=fp6,fp17,fcr
  193| 00111C fmul     FD7E02F2   2     MFL       fp11=fp30,fp11,fcr
  198| 001120 fmul     FDBD0372   2     MFL       fp13=fp29,fp13,fcr
  193| 001124 fmul     FFB806B2   2     MFL       fp29=fp24,fp26,fcr
  193| 001128 fmsub    FF562B38   2     FMS       fp26=fp5,fp22,fp12,fcr
  198| 00112C fmsub    FE152CF8   2     FMS       fp16=fp5,fp21,fp19,fcr
  198| 001130 fsel     FFCF89AE   2     FSEL      fp30=fp15,fp17,fp6
  193| 001134 qvfre    1300F830   1     QVFRE     fp24=fp31
  198| 001138 fmul     FEF70672   1     MFL       fp23=fp23,fp25,fcr
  198| 00113C fmr      FF204890   2     LRFL      fp25=fp9
  190| 001140 lfd      C9360008   1     LFL       fp9=btmp[].rns15.(gr22,8)
  193| 001144 fnmsub   FD8C66BC   1     FNMS      fp12=fp12,fp12,fp26,fcr
  193| 001148 fneg     FF405850   2     COMPFL    fp26=fp11
  198| 00114C fnmsub   FE739C3C   2     FNMS      fp19=fp19,fp19,fp16,fcr
  193| 001150 fsel     FE1A592E   2     FSEL      fp16=fp26,fp11,fp4
  198| 001154 fneg     FD606850   2     COMPFL    fp11=fp13
  198| 001158 qvfre    1220F030   1     QVFRE     fp17=fp30
  198| 00115C fsel     FD6B692E   1     FSEL      fp11=fp11,fp13,fp4
  193| 001160 fneg     FF40E850   2     COMPFL    fp26=fp29
  197| 001164 fsub     FDA91828   2     SFL       fp13=fp9,fp3,fcr
  193| 001168 fsel     FFBAE92E   2     FSEL      fp29=fp26,fp29,fp4
  193| 00116C fmsub    FF5F2E38   2     FMS       fp26=fp5,fp31,fp24,fcr
  193| 001170 fmul     FF900732   2     MFL       fp28=fp16,fp28,fcr
  198| 001174 fmul     FF6B06F2   2     MFL       fp27=fp11,fp27,fcr
  198| 001178 fmsub    FD7E2C78   2     FMS       fp11=fp5,fp30,fp17,fcr
  198| 00117C fneg     FE00B850   2     COMPFL    fp16=fp23
  193| 001180 fmul     FFBD0532   2     MFL       fp29=fp29,fp20,fcr
  198| 001184 fsel     FEF0B92E   2     FSEL      fp23=fp16,fp23,fp4
  193| 001188 fnmsub   FF58C6BC   2     FNMS      fp26=fp24,fp24,fp26,fcr
  193| 00118C fmsub    FF162B38   2     FMS       fp24=fp5,fp22,fp12,fcr
  198| 001190 fmsub    FE952CF8   2     FMS       fp20=fp5,fp21,fp19,fcr
  198| 001194 fnmsub   FD718AFC   2     FNMS      fp11=fp17,fp17,fp11,fcr
  198| 001198 fmul     FEF704B2   2     MFL       fp23=fp23,fp18,fcr
  193| 00119C fmsub    FE5F2EB8   2     FMS       fp18=fp5,fp31,fp26,fcr
  193| 0011A0 fnmsub   FD8C663C   2     FNMS      fp12=fp12,fp12,fp24,fcr
  198| 0011A4 fnmsub   FF139D3C   2     FNMS      fp24=fp19,fp19,fp20,fcr
  198| 0011A8 fmsub    FE9E2AF8   2     FMS       fp20=fp5,fp30,fp11,fcr
  192| 0011AC fsub     FE671028   2     SFL       fp19=fp7,fp2,fcr
  193| 0011B0 fnmsub   FF5AD4BC   2     FNMS      fp26=fp26,fp26,fp18,fcr
  193| 0011B4 fmul     FE5C0332   2     MFL       fp18=fp28,fp12,fcr
  198| 0011B8 fmul     FE3B0632   2     MFL       fp17=fp27,fp24,fcr
  198| 0011BC fnmsub   FE8B5D3C   2     FNMS      fp20=fp11,fp11,fp20,fcr
  192| 0011C0 fmul     FD7302B2   2     MFL       fp11=fp19,fp10,fcr
  193| 0011C4 fmul     FE7D06B2   2     MFL       fp19=fp29,fp26,fcr
  193| 0011C8 fmsub    FF96E4B8   2     FMS       fp28=fp28,fp22,fp18,fcr
  198| 0011CC fmsub    FF75DC78   2     FMS       fp27=fp27,fp21,fp17,fcr
  198| 0011D0 fmul     FED70532   2     MFL       fp22=fp23,fp20,fcr
  193| 0011D4 fmsub    FFFFECF8   2     FMS       fp31=fp29,fp31,fp19,fcr
  193| 0011D8 fnmsub   FD8C973C   2     FNMS      fp12=fp18,fp12,fp28,fcr
  198| 0011DC fnmsub   FFB88EFC   2     FNMS      fp29=fp17,fp24,fp27,fcr
  198| 0011E0 fmsub    FFDEBDB8   2     FMS       fp30=fp23,fp30,fp22,fcr
  193| 0011E4 fnmsub   FFFA9FFC   2     FNMS      fp31=fp19,fp26,fp31,fcr
  193| 0011E8 stfd     D9840008   1     STFL      dv[].rns18.(gr4,8)=fp12
  198| 0011EC fnmsub   FD94B7BC   1     FNMS      fp12=fp22,fp20,fp30,fcr
  198| 0011F0 stfd     DBBC0008   1     STFL      db[].rns19.(gr28,8)=fp29
  193| 0011F4 stfdu    DFE40010   1     STFDU     gr4,dv[].rns18.(gr4,16)=fp31
  198| 0011F8 stfdu    DD9C0010   1     STFDU     gr28,db[].rns19.(gr28,16)=fp12
    0| 0011FC bc       4200FE7C   1     BCT       ctr=CL.67,taken=100%(100,0)
    0|                              CL.600:
  190| 001200 lfdu     CFF80010   1     LFDU      fp31,gr24=vtmp[].rns13.(gr24,16)
  191| 001204 fsub     FFC71028   1     SFL       fp30=fp7,fp2,fcr
  190| 001208 lfdu     CF960010   1     LFDU      fp28,gr22=btmp[].rns15.(gr22,16)
  197| 00120C fmul     FD8A0372   1     MFL       fp12=fp10,fp13,fcr
  190| 001210 lfdu     CC550010   1     LFDU      fp2,gr21=dx1bi(gr21,16)
  196| 001214 fsub     FFA3C828   1     SFL       fp29=fp3,fp25,fcr
  196| 001218 fsub     FC691828   2     SFL       fp3=fp9,fp3,fcr
  192| 00121C fsub     FDBF3828   2     SFL       fp13=fp31,fp7,fcr
  192| 001220 fmadd    FCE8587A   2     FMA       fp7=fp11,fp8,fp1,fcr
  197| 001224 fsub     FFFC4828   2     SFL       fp31=fp28,fp9,fcr
  191| 001228 fmul     FF480072   2     MFL       fp26=fp8,fp1,fcr
  197| 00122C fmadd    FD21677A   2     FMA       fp9=fp12,fp1,fp29,fcr
  196| 001230 fmul     FF210772   2     MFL       fp25=fp1,fp29,fcr
  192| 001234 fmul     FDAD00B2   2     MFL       fp13=fp13,fp2,fcr
  192| 001238 qvfcpsgn 10272810   1     CPYSFL    fp1=fp5,fp7
  197| 00123C fmul     FFE207F2   1     MFL       fp31=fp2,fp31,fcr
  193| 001240 fabs     FD003A10   2     ABSFL     fp8=fp7
  197| 001244 qvfcpsgn 10492810   1     CPYSFL    fp2=fp5,fp9
  198| 001248 fabs     FD204A10   1     ABSFL     fp9=fp9
  192| 00124C fmadd    FCFE6ABA   2     FMA       fp7=fp13,fp30,fp10,fcr
  196| 001250 fmul     FFAA00F2   2     MFL       fp29=fp10,fp3,fcr
  197| 001254 fmadd    FF8AF8FA   2     FMA       fp28=fp31,fp10,fp3,fcr
  193| 001258 fsub     FEA64028   2     SFL       fp21=fp6,fp8,fcr
  198| 00125C fsub     FEC64828   2     SFL       fp22=fp6,fp9,fcr
  191| 001260 fmul     FFDE02B2   2     MFL       fp30=fp30,fp10,fcr
  192| 001264 qvfcpsgn 10672810   1     CPYSFL    fp3=fp5,fp7
  193| 001268 fabs     FF003A10   1     ABSFL     fp24=fp7
  197| 00126C qvfcpsgn 10FC2810   1     CPYSFL    fp7=fp5,fp28
  198| 001270 fabs     FF80E210   1     ABSFL     fp28=fp28
  193| 001274 fsub     FEE6C028   2     SFL       fp23=fp6,fp24,fcr
  198| 001278 fsub     FF66E028   2     SFL       fp27=fp6,fp28,fcr
  193| 00127C fsel     FD1541AE   2     FSEL      fp8=fp21,fp8,fp6
  198| 001280 fsel     FD3649AE   2     FSEL      fp9=fp22,fp9,fp6
  193| 001284 fmul     FD5A02F2   2     MFL       fp10=fp26,fp11,fcr
  198| 001288 fmul     FD790332   2     MFL       fp11=fp25,fp12,fcr
  193| 00128C fsel     FD97C1AE   2     FSEL      fp12=fp23,fp24,fp6
  198| 001290 fsel     FCDBE1AE   2     FSEL      fp6=fp27,fp28,fp6
  193| 001294 qvfre    12A04030   1     QVFRE     fp21=fp8
  198| 001298 qvfre    13004830   1     QVFRE     fp24=fp9
  193| 00129C fmul     FDBE0372   1     MFL       fp13=fp30,fp13,fcr
  198| 0012A0 fmul     FFFD07F2   2     MFL       fp31=fp29,fp31,fcr
  193| 0012A4 qvfre    13C06030   1     QVFRE     fp30=fp12
  198| 0012A8 qvfre    13A03030   1     QVFRE     fp29=fp6
  193| 0012AC fmsub    FEC82D78   1     FMS       fp22=fp5,fp8,fp21,fcr
  198| 0012B0 fmsub    FEE92E38   2     FMS       fp23=fp5,fp9,fp24,fcr
  193| 0012B4 fneg     FF805050   2     COMPFL    fp28=fp10
  198| 0012B8 fneg     FF605850   2     COMPFL    fp27=fp11
  193| 0012BC fmsub    FF4C2FB8   2     FMS       fp26=fp5,fp12,fp30,fcr
  198| 0012C0 fmsub    FF262F78   2     FMS       fp25=fp5,fp6,fp29,fcr
  193| 0012C4 fnmsub   FEB5ADBC   2     FNMS      fp21=fp21,fp21,fp22,fcr
  198| 0012C8 fnmsub   FF18C5FC   2     FNMS      fp24=fp24,fp24,fp23,fcr
  193| 0012CC fneg     FEE06850   2     COMPFL    fp23=fp13
  198| 0012D0 fneg     FEC0F850   2     COMPFL    fp22=fp31
  193| 0012D4 fnmsub   FFDEF6BC   2     FNMS      fp30=fp30,fp30,fp26,fcr
  198| 0012D8 fnmsub   FFBDEE7C   2     FNMS      fp29=fp29,fp29,fp25,fcr
  193| 0012DC fsel     FD5C512E   2     FSEL      fp10=fp28,fp10,fp4
  198| 0012E0 fsel     FD7B592E   2     FSEL      fp11=fp27,fp11,fp4
  193| 0012E4 fmsub    FF882D78   2     FMS       fp28=fp5,fp8,fp21,fcr
  193| 0012E8 fsel     FDB7692E   2     FSEL      fp13=fp23,fp13,fp4
  198| 0012EC fsel     FC96F92E   2     FSEL      fp4=fp22,fp31,fp4
  198| 0012F0 fmsub    FFE92E38   2     FMS       fp31=fp5,fp9,fp24,fcr
  193| 0012F4 fmsub    FF6C2FB8   2     FMS       fp27=fp5,fp12,fp30,fcr
  198| 0012F8 fmsub    FCA62F78   2     FMS       fp5=fp5,fp6,fp29,fcr
  193| 0012FC fmul     FC2A0072   2     MFL       fp1=fp10,fp1,fcr
  193| 001300 fnmsub   FD55AF3C   2     FNMS      fp10=fp21,fp21,fp28,fcr
  198| 001304 fmul     FC4B00B2   2     MFL       fp2=fp11,fp2,fcr
  198| 001308 fnmsub   FD78C7FC   2     FNMS      fp11=fp24,fp24,fp31,fcr
  193| 00130C fmul     FC6D00F2   2     MFL       fp3=fp13,fp3,fcr
  198| 001310 fmul     FC8401F2   2     MFL       fp4=fp4,fp7,fcr
  193| 001314 fnmsub   FCFEF6FC   2     FNMS      fp7=fp30,fp30,fp27,fcr
  198| 001318 fnmsub   FCBDE97C   2     FNMS      fp5=fp29,fp29,fp5,fcr
  193| 00131C fmul     FDA102B2   2     MFL       fp13=fp1,fp10,fcr
  198| 001320 fmul     FFE202F2   2     MFL       fp31=fp2,fp11,fcr
  193| 001324 fmul     FFC301F2   2     MFL       fp30=fp3,fp7,fcr
  198| 001328 fmul     FFA40172   2     MFL       fp29=fp4,fp5,fcr
  193| 00132C fmsub    FC280B78   2     FMS       fp1=fp1,fp8,fp13,fcr
  198| 001330 fmsub    FC4917F8   2     FMS       fp2=fp2,fp9,fp31,fcr
  193| 001334 fmsub    FC6C1FB8   2     FMS       fp3=fp3,fp12,fp30,fcr
  198| 001338 fmsub    FC862778   2     FMS       fp4=fp4,fp6,fp29,fcr
  193| 00133C fnmsub   FC2A687C   2     FNMS      fp1=fp13,fp10,fp1,fcr
  198| 001340 fnmsub   FC4BF8BC   2     FNMS      fp2=fp31,fp11,fp2,fcr
  193| 001344 fnmsub   FC67F0FC   2     FNMS      fp3=fp30,fp7,fp3,fcr
  198| 001348 fnmsub   FC85E93C   2     FNMS      fp4=fp29,fp5,fp4,fcr
  193| 00134C stfd     D8240008   1     STFL      dv[].rns18.(gr4,8)=fp1
  198| 001350 stfd     D85C0008   1     STFL      db[].rns19.(gr28,8)=fp2
  193| 001354 stfdu    DC640010   1     STFDU     gr4,dv[].rns18.(gr4,16)=fp3
  198| 001358 stfdu    DC9C0010   1     STFDU     gr28,db[].rns19.(gr28,16)=fp4
  201|                              CL.66:
  206| 00135C bc       409904BC   1     BF        CL.70,cr6,0x2/gt,taken=20%(20,80)
  213| 001360 std      F81F0170   1     ST8       #SPILL29(gr31,368)=gr0
  213| 001364 ld       E9FF0160   1     L8        gr15=#SPILL27(gr31,352)
  206| 001368 ld       EB7F0180   1     L8        gr27=#SPILL31(gr31,384)
  206| 00136C rldicr   79C41F24   1     SLL8      gr4=gr14,3
  220| 001370 ld       EA3F0188   1     L8        gr17=#SPILL32(gr31,392)
  206| 001374 ld       EA5F0098   1     L8        gr18=#SPILL2(gr31,152)
  206| 001378 addi     3A04FFF8   1     AI        gr16=gr4,-8
  213| 00137C addi     3B8F0070   1     AI        gr28=gr15,112
  206| 001380 ld       EB5F01A0   1     L8        gr26=#SPILL35(gr31,416)
  206| 001384 ld       EB3F01C0   1     L8        gr25=#SPILL39(gr31,448)
  206| 001388 ld       EAFF00D0   1     L8        gr23=#SPILL9(gr31,208)
  206| 00138C ld       EA7F00A0   1     L8        gr19=#SPILL3(gr31,160)
  213| 001390 add      7F84E214   1     A         gr28=gr4,gr28
  206| 001394 add      7ED0DA14   1     A         gr22=gr16,gr27
  220| 001398 addi     3BB10070   1     AI        gr29=gr17,112
  213| 00139C lfdu     CCFC0008   1     LFDU      fp7,gr28=valp[].rns11.(gr28,8)
  206| 0013A0 add      7F72B214   1     A         gr27=gr18,gr22
    0| 0013A4 ld       EA420000   1     L8        gr18=.+CONSTANT_AREA(gr2,0)
  206| 0013A8 addi     3ABA0070   1     AI        gr21=gr26,112
  206| 0013AC addi     3A990070   1     AI        gr20=gr25,112
  206| 0013B0 addi     3B170070   1     AI        gr24=gr23,112
  206| 0013B4 addi     3AF30070   1     AI        gr23=gr19,112
  213| 0013B8 fmul     FF2001F2   1     MFL       fp25=fp0,fp7,fcr
  220| 0013BC add      7FA4EA14   1     A         gr29=gr4,gr29
  206| 0013C0 add      7F44AA14   1     A         gr26=gr4,gr21
  206| 0013C4 add      7F24A214   1     A         gr25=gr4,gr20
  206| 0013C8 add      7F04C214   1     A         gr24=gr4,gr24
  206| 0013CC add      7EE4BA14   1     A         gr23=gr4,gr23
  220| 0013D0 lfdu     CCDD0008   1     LFDU      fp6,gr29=valm[].rns12.(gr29,8)
  206| 0013D4 lfdu     CC370008   1     LFDU      fp1,gr23=dv[].rns18.(gr23,8)
  206| 0013D8 lfdu     CC5B0008   1     LFDU      fp2,gr27=dx1a(gr27,8)
  206| 0013DC lfdu     CC7A0008   1     LFDU      fp3,gr26=vtmp[].rns13.(gr26,8)
  206| 0013E0 lfdu     CC980008   1     LFDU      fp4,gr24=db[].rns19.(gr24,8)
  206| 0013E4 lfdu     CCB90008   1     LFDU      fp5,gr25=btmp[].rns15.(gr25,8)
    0| 0013E8 lfs      C0F20000   1     LFS       fp7=+CONSTANT_AREA(gr18,0)
  220| 0013EC fmul     FCC001B2   1     MFL       fp6=fp0,fp6,fcr
  206| 0013F0 ld       EA5F00A8   1     L8        gr18=#SPILL4(gr31,168)
  206| 0013F4 ld       EA3F0098   1     L8        gr17=#SPILL2(gr31,152)
  214| 0013F8 fnmsub   FF62187C   1     FNMS      fp27=fp3,fp2,fp1,fcr
  206| 0013FC ld       E9FF00D8   1     L8        gr15=#SPILL10(gr31,216)
  216| 001400 fnmsub   FF42293C   1     FNMS      fp26=fp5,fp2,fp4,fcr
  206| 001404 addi     3A64FFF0   1     AI        gr19=gr4,-16
  206| 001408 lfdx     7FD524AE   1     LFL       fp30=vtmp[].rns13.(gr21,gr4,0)
  206| 00140C lfdx     7D129CAE   1     LFL       fp8=dv[].rns18.(gr18,gr19,0)
  214| 001410 fnmsub   FD59D87C   1     FNMS      fp10=fp27,fp25,fp1,fcr
  206| 001414 lfdx     7FB1B4AE   2     LFL       fp29=dx1a(gr17,gr22,0)
  216| 001418 fnmsub   FD79D13C   1     FNMS      fp11=fp26,fp25,fp4,fcr
  206| 00141C lfdx     7D2F9CAE   1     LFL       fp9=db[].rns19.(gr15,gr19,0)
  221| 001420 fnmsub   FF61D9BC   1     FNMS      fp27=fp27,fp1,fp6,fcr
  206| 001424 lfdx     7F9424AE   1     LFL       fp28=btmp[].rns15.(gr20,gr4,0)
  223| 001428 fnmsub   FF44D1BC   1     FNMS      fp26=fp26,fp4,fp6,fcr
    0| 00142C ld       EA1F0210   1     L8        gr16=#SPILL49(gr31,528)
  207| 001430 fmadd    FFDDF23A   1     FMA       fp30=fp30,fp29,fp8,fcr
  213| 001434 qvfcpsgn 11993810   1     CPYSFL    fp12=fp7,fp25
  214| 001438 fsub     FDA76028   1     SFL       fp13=fp7,fp12,fcr
  220| 00143C qvfcpsgn 13E63810   1     CPYSFL    fp31=fp7,fp6
  209| 001440 fmadd    FFBDE27A   1     FMA       fp29=fp28,fp29,fp9,fcr
    0| 001444 subfic   22CE0001   1     SFI       gr22=1,gr14,ca"
  221| 001448 fsub     FF87F828   1     SFL       fp28=fp7,fp31,fcr
    0| 00144C add      7E50B214   1     A         gr18=gr16,gr22
  214| 001450 fnmsub   FF08F67C   1     FNMS      fp24=fp30,fp8,fp25,fcr
  223| 001454 ld       EA9F01E8   1     L8        gr20=#SPILL44(gr31,488)
  216| 001458 fnmsub   FF29EE7C   1     FNMS      fp25=fp29,fp9,fp25,fcr
    0| 00145C std      FA5F00C0   1     ST8       #SPILL7(gr31,192)=gr18
  221| 001460 fnmsub   FD08F1BC   1     FNMS      fp8=fp30,fp8,fp6,fcr
  221| 001464 ld       EA3F01D8   1     L8        gr17=#SPILL42(gr31,472)
  223| 001468 fnmsub   FCC9E9BC   1     FNMS      fp6=fp29,fp9,fp6,fcr
  216| 00146C ld       E9FF01E0   1     L8        gr15=#SPILL43(gr31,480)
  214| 001470 fadd     FD2C382A   1     AFL       fp9=fp12,fp7,fcr
  214| 001474 ld       EADF01D0   1     L8        gr22=#SPILL41(gr31,464)
  221| 001478 fadd     FD9F382A   1     AFL       fp12=fp31,fp7,fcr
  213| 00147C ld       E8020000   1     L8        gr0=.+CONSTANT_AREA(gr2,0)
  214| 001480 fmul     FD4D02B2   1     MFL       fp10=fp13,fp10,fcr
    0| 001484 mtspr    7E4903A6   1     LCTR      ctr=gr18
  216| 001488 fmul     FD6D02F2   1     MFL       fp11=fp13,fp11,fcr
  223| 00148C addi     3AB40070   1     AI        gr21=gr20,112
  221| 001490 fmul     FFFC06F2   1     MFL       fp31=fp28,fp27,fcr
  213| 001494 std      F81F0248   1     ST8       #SPILL56(gr31,584)=gr0
  223| 001498 fmul     FFDC06B2   1     MFL       fp30=fp28,fp26,fcr
  221| 00149C addi     3A710070   1     AI        gr19=gr17,112
  214| 0014A0 fmadd    FDA9563A   1     FMA       fp13=fp10,fp9,fp24,fcr
  216| 0014A4 addi     3A2F0070   1     AI        gr17=gr15,112
  216| 0014A8 fmadd    FD495E7A   1     FMA       fp10=fp11,fp9,fp25,fcr
  214| 0014AC addi     39F60070   1     AI        gr15=gr22,112
  221| 0014B0 fmadd    FD0CFA3A   1     FMA       fp8=fp31,fp12,fp8,fcr
  223| 0014B4 add      7EC4AA14   1     A         gr22=gr4,gr21
  223| 0014B8 fmadd    FD6CF1BA   1     FMA       fp11=fp30,fp12,fp6,fcr
  221| 0014BC add      7E849A14   1     A         gr20=gr4,gr19
  216| 0014C0 add      7E448A14   1     A         gr18=gr4,gr17
  214| 0014C4 add      7E047A14   1     A         gr16=gr4,gr15
  223| 0014C8 or       7ED5B378   1     LR        gr21=gr22
  221| 0014CC or       7E93A378   1     LR        gr19=gr20
  216| 0014D0 or       7E519378   1     LR        gr17=gr18
  214| 0014D4 or       7E0F8378   1     LR        gr15=gr16
  213| 0014D8 ld       E81F0170   1     L8        gr0=#SPILL29(gr31,368)
  213| 0014DC bc       424000B4   1     BCF       ctr=CL.498,taken=0%(0,100)
  213|                              CL.499:
  206| 0014E0 lfdu     CCD70008   1     LFDU      fp6,gr23=dv[].rns18.(gr23,8)
  207| 0014E4 fmadd    FFC2187A   1     FMA       fp30=fp3,fp2,fp1,fcr
  214| 0014E8 stfdu    DDAF0008   2     STFDU     gr15,vpal[].rns21.(gr15,8)=fp13
  216| 0014EC stfdu    DD510008   1     STFDU     gr17,bpal[].rns22.(gr17,8)=fp10
  221| 0014F0 stfdu    DD130008   1     STFDU     gr19,vmal[].rns23.(gr19,8)=fp8
  223| 0014F4 stfdu    DD750008   1     STFDU     gr21,bmal[].rns24.(gr21,8)=fp11
  213| 0014F8 lfdu     CD7C0008   1     LFDU      fp11,gr28=valp[].rns11.(gr28,8)
  206| 0014FC lfdu     CD9B0008   1     LFDU      fp12,gr27=dx1a(gr27,8)
  220| 001500 lfdu     CD5D0008   1     LFDU      fp10,gr29=valm[].rns12.(gr29,8)
  206| 001504 lfdu     CC7A0008   1     LFDU      fp3,gr26=vtmp[].rns13.(gr26,8)
  206| 001508 lfdu     CD180008   1     LFDU      fp8,gr24=db[].rns19.(gr24,8)
  206| 00150C lfdu     CD390008   1     LFDU      fp9,gr25=btmp[].rns15.(gr25,8)
  209| 001510 fmadd    FFA2293A   1     FMA       fp29=fp5,fp2,fp4,fcr
  213| 001514 fmul     FCA002F2   2     MFL       fp5=fp0,fp11,fcr
  223| 001518 fmr      FC406090   2     LRFL      fp2=fp12
  220| 00151C fmul     FD4002B2   2     MFL       fp10=fp0,fp10,fcr
  214| 001520 fnmsub   FD6C19BC   2     FNMS      fp11=fp3,fp12,fp6,fcr
  216| 001524 fnmsub   FD8C4A3C   2     FNMS      fp12=fp9,fp12,fp8,fcr
  214| 001528 fnmsub   FDA1F17C   2     FNMS      fp13=fp30,fp1,fp5,fcr
  216| 00152C fnmsub   FFE4E97C   2     FNMS      fp31=fp29,fp4,fp5,fcr
  221| 001530 fnmsub   FFC1F2BC   2     FNMS      fp30=fp30,fp1,fp10,fcr
  223| 001534 fnmsub   FFA4EABC   2     FNMS      fp29=fp29,fp4,fp10,fcr
  213| 001538 qvfcpsgn 10253810   1     CPYSFL    fp1=fp7,fp5
  220| 00153C qvfcpsgn 108A3810   1     CPYSFL    fp4=fp7,fp10
  214| 001540 fsub     FF870828   1     SFL       fp28=fp7,fp1,fcr
  221| 001544 fsub     FF672028   2     SFL       fp27=fp7,fp4,fcr
  214| 001548 fnmsub   FF4559BC   2     FNMS      fp26=fp11,fp5,fp6,fcr
  216| 00154C fnmsub   FCA5623C   2     FNMS      fp5=fp12,fp5,fp8,fcr
  221| 001550 fnmsub   FD665ABC   2     FNMS      fp11=fp11,fp6,fp10,fcr
  223| 001554 fnmsub   FD8862BC   2     FNMS      fp12=fp12,fp8,fp10,fcr
  214| 001558 fadd     FD41382A   2     AFL       fp10=fp1,fp7,fcr
  221| 00155C fadd     FF24382A   2     AFL       fp25=fp4,fp7,fcr
  214| 001560 fmul     FF5C06B2   2     MFL       fp26=fp28,fp26,fcr
  216| 001564 fmul     FCBC0172   2     MFL       fp5=fp28,fp5,fcr
  221| 001568 fmul     FD7B02F2   2     MFL       fp11=fp27,fp11,fcr
  223| 00156C fmul     FD9B0332   2     MFL       fp12=fp27,fp12,fcr
  223| 001570 fmr      FC804090   2     LRFL      fp4=fp8
  223| 001574 fmr      FC203090   2     LRFL      fp1=fp6
  214| 001578 fmadd    FDAAD37A   2     FMA       fp13=fp26,fp10,fp13,fcr
  216| 00157C fmadd    FD4A2FFA   2     FMA       fp10=fp5,fp10,fp31,fcr
  221| 001580 fmadd    FD195FBA   2     FMA       fp8=fp11,fp25,fp30,fcr
  223| 001584 fmadd    FD79677A   2     FMA       fp11=fp12,fp25,fp29,fcr
  223| 001588 fmr      FCA04890   2     LRFL      fp5=fp9
    0| 00158C bc       4200FF54   1     BCT       ctr=CL.499,taken=100%(100,0)
  213|                              CL.498:
  214| 001590 stfdu    DDAF0008   1     STFDU     gr15,vpal[].rns21.(gr15,8)=fp13
    0| 001594 ld       EB7F0230   1     L8        gr27=#SPILL53(gr31,560)
  231| 001598 ld       EBA504B0   1     L8        gr29=<s227:d1200:l8>(gr5,1200)
  231| 00159C ld       EB9F0140   1     L8        gr28=#SPILL23(gr31,320)
    0| 0015A0 ld       EB3F00C0   1     L8        gr25=#SPILL7(gr31,192)
  231| 0015A4 ld       EB450498   1     L8        gr26=<s227:d1176:l8>(gr5,1176)
  231| 0015A8 addi     39E4FFF8   1     AI        gr15=gr4,-8
    0| 0015AC subf     7EE3D850   1     S         gr23=gr27,gr3
  231| 0015B0 ld       EB7F0200   1     L8        gr27=#SPILL47(gr31,512)
  231| 0015B4 std      FBBF0170   1     ST8       #SPILL29(gr31,368)=gr29
  231| 0015B8 addi     3BBC0070   1     AI        gr29=gr28,112
    0| 0015BC rldicl   7B3CF842   1     SRL8      gr28=gr25,1
  231| 0015C0 add      7F5A7A14   1     A         gr26=gr26,gr15
  231| 0015C4 add      7FA4EA14   1     A         gr29=gr4,gr29
  231| 0015C8 addi     3B1B0070   1     AI        gr24=gr27,112
  231| 0015CC ld       EB7F0118   1     L8        gr27=#SPILL18(gr31,280)
  231| 0015D0 add      7F04C214   1     A         gr24=gr4,gr24
    0| 0015D4 andi.    72F70001   1     RN4_R     gr23,cr0=gr23,0,0x1
  231| 0015D8 ld       E9FF0170   1     L8        gr15=#SPILL29(gr31,368)
  216| 0015DC stfdu    DD510008   1     STFDU     gr17,bpal[].rns22.(gr17,8)=fp10
    0| 0015E0 cmpdi    2EBC0000   1     C8        cr5=gr28,0
  231| 0015E4 addi     3B3B0070   1     AI        gr25=gr27,112
  230| 0015E8 ld       EB7F00F8   1     L8        gr27=#SPILL14(gr31,248)
  231| 0015EC add      7F24CA14   1     A         gr25=gr4,gr25
  221| 0015F0 stfdu    DD130008   1     STFDU     gr19,vmal[].rns23.(gr19,8)=fp8
  223| 0015F4 stfdu    DD750008   1     STFDU     gr21,bmal[].rns24.(gr21,8)=fp11
    0| 0015F8 mtspr    7F8903A6   1     LCTR      ctr=gr28
  230| 0015FC addi     3B7B0070   1     AI        gr27=gr27,112
  230| 001600 add      7C84DA14   1     A         gr4=gr4,gr27
  231| 001604 add      7F6FD214   1     A         gr27=gr15,gr26
    0| 001608 ld       EB5F0248   1     L8        gr26=#SPILL56(gr31,584)
    0| 00160C lfs      C03A0018   1     LFS       fp1=+CONSTANT_AREA(gr26,24)
  231| 001610 lfs      C05A0028   1     LFS       fp2=+CONSTANT_AREA(gr26,40)
    0| 001614 bc       41820068   1     BT        CL.442,cr0,0x4/eq,taken=50%(0,0)
  231| 001618 lfdu     CC760008   1     LFDU      fp3,gr22=bmal[].rns24.(gr22,8)
  231| 00161C lfdu     CC9D0008   1     LFDU      fp4,gr29=srdmi[].rns10.(gr29,8)
  231| 001620 lfdu     CCB20008   1     LFDU      fp5,gr18=bpal[].rns22.(gr18,8)
  231| 001624 lfdu     CCD90008   1     LFDU      fp6,gr25=srdpi[].rns9.(gr25,8)
  231| 001628 lfdu     CD100008   1     LFDU      fp8,gr16=vpal[].rns21.(gr16,8)
  231| 00162C lfdu     CD340008   1     LFDU      fp9,gr20=vmal[].rns23.(gr20,8)
  230| 001630 lfdu     CD440008   1     LFDU      fp10,gr4=bave[].rns7.(gr4,8)
  231| 001634 lfdu     CD7B0008   1     LFDU      fp11,gr27=g2a(gr27,8)
  231| 001638 fmul     FC630132   1     MFL       fp3=fp3,fp4,fcr
  231| 00163C fadd     FC86202A   2     AFL       fp4=fp6,fp4,fcr
  231| 001640 fsub     FD084828   2     SFL       fp8=fp8,fp9,fcr
  230| 001644 qvfcpsgn 112A0810   1     CPYSFL    fp9=fp1,fp10
  231| 001648 fmadd    FC6519BA   1     FMA       fp3=fp3,fp5,fp6,fcr
  231| 00164C fre      FCA02030   1     FRED      fp5=fp4
  231| 001650 fnmsub   FC84097C   1     FNMS      fp4=fp1,fp4,fp5,fcr
  231| 001654 fmadd    FC691A3A   2     FMA       fp3=fp3,fp9,fp8,fcr
  231| 001658 fmadd    FCC4393A   2     FMA       fp6=fp7,fp4,fp4,fcr
  231| 00165C fmul     FC6302F2   2     MFL       fp3=fp3,fp11,fcr
  231| 001660 fmadd    FC4611BA   2     FMA       fp2=fp2,fp6,fp6,fcr
  231| 001664 fmul     FCA30172   2     MFL       fp5=fp3,fp5,fcr
  231| 001668 fmadd    FC65293A   2     FMA       fp3=fp5,fp5,fp4,fcr
  231| 00166C fmul     FC6400F2   2     MFL       fp3=fp4,fp3,fcr
  231| 001670 fmadd    FC4228FA   2     FMA       fp2=fp5,fp2,fp3,fcr
  231| 001674 stfdu    DC580008   2     STFDU     gr24,bstar[].rns25.(gr24,8)=fp2
    0| 001678 bc       419601A0   1     BT        CL.70,cr5,0x4/eq,taken=20%(20,80)
    0|                              CL.442:
  231| 00167C lfd      C8760008   1     LFL       fp3=bmal[].rns24.(gr22,8)
  231| 001680 lfd      C85D0008   1     LFL       fp2=srdmi[].rns10.(gr29,8)
  231| 001684 lfdu     CCD60010   1     LFDU      fp6,gr22=bmal[].rns24.(gr22,16)
  231| 001688 lfdu     CC9D0010   1     LFDU      fp4,gr29=srdmi[].rns10.(gr29,16)
  231| 00168C lfd      C9590008   1     LFL       fp10=srdpi[].rns9.(gr25,8)
  231| 001690 lfd      C8B00008   1     LFL       fp5=vpal[].rns21.(gr16,8)
  231| 001694 lfd      C9740008   1     LFL       fp11=vmal[].rns23.(gr20,8)
  231| 001698 lfd      C9320008   1     LFL       fp9=bpal[].rns22.(gr18,8)
  231| 00169C fmul     FD8300B2   1     MFL       fp12=fp3,fp2,fcr
  231| 0016A0 lfdu     CC720010   2     LFDU      fp3,gr18=bpal[].rns22.(gr18,16)
  231| 0016A4 fmul     FCE60132   1     MFL       fp7=fp6,fp4,fcr
  231| 0016A8 lfdu     CD190010   1     LFDU      fp8,gr25=srdpi[].rns9.(gr25,16)
  231| 0016AC fadd     FCCA102A   1     AFL       fp6=fp10,fp2,fcr
  231| 0016B0 lfdu     CC500010   2     LFDU      fp2,gr16=vpal[].rns21.(gr16,16)
  231| 0016B4 fsub     FCA55828   1     SFL       fp5=fp5,fp11,fcr
  231| 0016B8 lfdu     CD740010   1     LFDU      fp11,gr20=vmal[].rns23.(gr20,16)
  231| 0016BC fmadd    FD2962BA   1     FMA       fp9=fp12,fp9,fp10,fcr
  230| 0016C0 lfd      C9440008   1     LFL       fp10=bave[].rns7.(gr4,8)
  231| 0016C4 fmadd    FC633A3A   1     FMA       fp3=fp7,fp3,fp8,fcr
  230| 0016C8 lfdu     CCE40010   1     LFDU      fp7,gr4=bave[].rns7.(gr4,16)
  231| 0016CC fadd     FD08202A   1     AFL       fp8=fp8,fp4,fcr
  231| 0016D0 lfd      C89B0008   1     LFL       fp4=g2a(gr27,8)
  231| 0016D4 fsub     FD625828   1     SFL       fp11=fp2,fp11,fcr
  231| 0016D8 lfdu     CC5B0010   1     LFDU      fp2,gr27=g2a(gr27,16)
  230| 0016DC qvfcpsgn 114A0810   1     CPYSFL    fp10=fp1,fp10
  231| 0016E0 fmadd    FCAA497A   1     FMA       fp5=fp9,fp10,fp5,fcr
  230| 0016E4 qvfcpsgn 10E70810   1     CPYSFL    fp7=fp1,fp7
  230| 0016E8 ld       EB820000   1     L8        gr28=.+CONSTANT_AREA(gr2,0)
  231| 0016EC fmadd    FC671AFA   1     FMA       fp3=fp3,fp7,fp11,fcr
  231| 0016F0 fre      FCE03030   1     FRED      fp7=fp6
  231| 0016F4 fnmsub   FD8609FC   1     FNMS      fp12=fp1,fp6,fp7,fcr
  231| 0016F8 fre      FCC04030   1     FRED      fp6=fp8
  231| 0016FC fnmsub   FD4809BC   1     FNMS      fp10=fp1,fp8,fp6,fcr
  231| 001700 lfs      C3DC0028   1     LFS       fp30=+CONSTANT_AREA(gr28,40)
  231| 001704 fmul     FD650132   1     MFL       fp11=fp5,fp4,fcr
  231| 001708 lfs      C11C0000   1     LFS       fp8=+CONSTANT_AREA(gr28,0)
  231| 00170C fmul     FD2300B2   1     MFL       fp9=fp3,fp2,fcr
  230| 001710 bc       424000D0   1     BCF       ctr=CL.496,taken=0%(0,100)
  230|                              CL.497:
  231| 001714 lfd      C85B0008   1     LFL       fp2=g2a(gr27,8)
  231| 001718 lfdu     CC7B0010   1     LFDU      fp3,gr27=g2a(gr27,16)
  230| 00171C lfd      C8840008   1     LFL       fp4=bave[].rns7.(gr4,8)
  230| 001720 lfdu     CCA40010   1     LFDU      fp5,gr4=bave[].rns7.(gr4,16)
  231| 001724 fmul     FF8B01F2   1     MFL       fp28=fp11,fp7,fcr
  231| 001728 fmul     FFE901B2   2     MFL       fp31=fp9,fp6,fcr
  231| 00172C lfd      C8D20008   2     LFL       fp6=bpal[].rns22.(gr18,8)
  231| 001730 lfd      C8F90008   1     LFL       fp7=srdpi[].rns9.(gr25,8)
  231| 001734 fmadd    FF6C433A   1     FMA       fp27=fp8,fp12,fp12,fcr
  231| 001738 fmadd    FFAA42BA   2     FMA       fp29=fp8,fp10,fp10,fcr
  231| 00173C fmadd    FDBCE33A   2     FMA       fp13=fp28,fp28,fp12,fcr
  231| 001740 fmadd    FD7FFABA   2     FMA       fp11=fp31,fp31,fp10,fcr
  231| 001744 lfd      C9100008   2     LFL       fp8=vpal[].rns21.(gr16,8)
  231| 001748 lfd      C9340008   1     LFL       fp9=vmal[].rns23.(gr20,8)
  231| 00174C fmadd    FF7BF6FA   1     FMA       fp27=fp30,fp27,fp27,fcr
  231| 001750 fmadd    FFDDF77A   2     FMA       fp30=fp30,fp29,fp29,fcr
  231| 001754 fmul     FF4C0372   2     MFL       fp26=fp12,fp13,fcr
  231| 001758 fmul     FFAA02F2   2     MFL       fp29=fp10,fp11,fcr
  231| 00175C lfdu     CD520010   2     LFDU      fp10,gr18=bpal[].rns22.(gr18,16)
  231| 001760 lfdu     CD790010   1     LFDU      fp11,gr25=srdpi[].rns9.(gr25,16)
  231| 001764 lfd      C9960008   1     LFL       fp12=bmal[].rns24.(gr22,8)
  231| 001768 lfd      C9BD0008   1     LFL       fp13=srdmi[].rns10.(gr29,8)
  231| 00176C fmadd    FF3BE6BA   1     FMA       fp25=fp28,fp27,fp26,fcr
  231| 001770 fmadd    FFFEFF7A   2     FMA       fp31=fp31,fp30,fp29,fcr
  231| 001774 lfdu     CFD60010   1     LFDU      fp30,gr22=bmal[].rns24.(gr22,16)
  231| 001778 lfdu     CFBD0010   1     LFDU      fp29,gr29=srdmi[].rns10.(gr29,16)
  231| 00177C lfdu     CF900010   1     LFDU      fp28,gr16=vpal[].rns21.(gr16,16)
  231| 001780 lfdu     CF740010   1     LFDU      fp27,gr20=vmal[].rns23.(gr20,16)
  231| 001784 fadd     FF47682A   1     AFL       fp26=fp7,fp13,fcr
  231| 001788 stfd     DB380008   1     STFL      bstar[].rns25.(gr24,8)=fp25
  231| 00178C stfdu    DFF80010   1     STFDU     gr24,bstar[].rns25.(gr24,16)=fp31
  231| 001790 fmul     FD8C0372   1     MFL       fp12=fp12,fp13,fcr
  231| 001794 fmul     FDBE0772   2     MFL       fp13=fp30,fp29,fcr
  231| 001798 fadd     FFEBE82A   2     AFL       fp31=fp11,fp29,fcr
  230| 00179C qvfcpsgn 10840810   1     CPYSFL    fp4=fp1,fp4
  231| 0017A0 fsub     FD084828   1     SFL       fp8=fp8,fp9,fcr
  231| 0017A4 fsub     FD3CD828   2     SFL       fp9=fp28,fp27,fcr
  231| 0017A8 fmadd    FD8661FA   2     FMA       fp12=fp12,fp6,fp7,fcr
  231| 0017AC fmadd    FD6A6AFA   2     FMA       fp11=fp13,fp10,fp11,fcr
  230| 0017B0 qvfcpsgn 10A50810   1     CPYSFL    fp5=fp1,fp5
  231| 0017B4 fre      FCE0D030   1     FRED      fp7=fp26
  231| 0017B8 fre      FCC0F830   1     FRED      fp6=fp31
  231| 0017BC fnmsub   FD5F09BC   1     FNMS      fp10=fp1,fp31,fp6,fcr
  231| 0017C0 fmadd    FC84623A   2     FMA       fp4=fp12,fp4,fp8,fcr
  231| 0017C4 fmadd    FCA55A7A   2     FMA       fp5=fp11,fp5,fp9,fcr
  231| 0017C8 fnmsub   FD9A09FC   2     FNMS      fp12=fp1,fp26,fp7,fcr
  231| 0017CC lfs      C3DC0028   1     LFS       fp30=+CONSTANT_AREA(gr28,40)
  231| 0017D0 lfs      C11C0000   1     LFS       fp8=+CONSTANT_AREA(gr28,0)
  231| 0017D4 fmul     FD6400B2   1     MFL       fp11=fp4,fp2,fcr
  231| 0017D8 fmul     FD2500F2   2     MFL       fp9=fp5,fp3,fcr
    0| 0017DC bc       4200FF38   1     BCT       ctr=CL.497,taken=100%(100,0)
  230|                              CL.496:
  231| 0017E0 fmul     FC2B01F2   1     MFL       fp1=fp11,fp7,fcr
  231| 0017E4 fmul     FC4901B2   2     MFL       fp2=fp9,fp6,fcr
  231| 0017E8 fmadd    FC6C433A   2     FMA       fp3=fp8,fp12,fp12,fcr
  231| 0017EC fmadd    FC8A42BA   2     FMA       fp4=fp8,fp10,fp10,fcr
  231| 0017F0 fmadd    FCA10B3A   2     FMA       fp5=fp1,fp1,fp12,fcr
  231| 0017F4 fmadd    FCC212BA   2     FMA       fp6=fp2,fp2,fp10,fcr
  231| 0017F8 fmadd    FC63F0FA   2     FMA       fp3=fp30,fp3,fp3,fcr
  231| 0017FC fmadd    FC84F13A   2     FMA       fp4=fp30,fp4,fp4,fcr
  231| 001800 fmul     FCAC0172   2     MFL       fp5=fp12,fp5,fcr
  231| 001804 fmul     FCCA01B2   2     MFL       fp6=fp10,fp6,fcr
  231| 001808 fmadd    FC23097A   2     FMA       fp1=fp1,fp3,fp5,fcr
  231| 00180C fmadd    FC4411BA   2     FMA       fp2=fp2,fp4,fp6,fcr
  231| 001810 stfd     D8380008   1     STFL      bstar[].rns25.(gr24,8)=fp1
  231| 001814 stfdu    DC580010   1     STFDU     gr24,bstar[].rns25.(gr24,16)=fp2
  234|                              CL.70:
  234| 001818 ld       EBBF0220   1     L8        gr29=#SPILL51(gr31,544)
  234| 00181C subf     7C8EE850   1     S         gr4=gr29,gr14
  234| 001820 addic.   34840001   1     AI_R      gr4,cr0=gr4,1,ca"
  239| 001824 mcrf     4E000000   1     LRCR      cr4=cr0
  239| 001828 bc       408102B4   1     BF        CL.72,cr0,0x2/gt,taken=50%(0,0)
  240| 00182C ld       EA9F0090   1     L8        gr20=#SPILL1(gr31,144)
  240| 001830 or       7FAFEB78   1     LR        gr15=gr29
  240| 001834 rldicr   7BDD1F24   1     SLL8      gr29=gr30,3
    0| 001838 subfic   22EE0001   1     SFI       gr23=1,gr14,ca"
    0| 00183C ld       EA5F01F0   1     L8        gr18=#SPILL45(gr31,496)
    0| 001840 add      7F2FBA14   1     A         gr25=gr15,gr23
  240| 001844 rldicr   7A841F24   1     SLL8      gr4=gr20,3
  240| 001848 mulld    7F94E9D2   1     M         gr28=gr20,gr29
  240| 00184C rldicr   799D1F24   1     SLL8      gr29=gr12,3
  240| 001850 neg      7C8400D0   1     COMP      gr4=gr4
  240| 001854 mulld    7FA0E9D2   1     M         gr29=gr0,gr29
  240| 001858 mulld    7F6021D2   1     M         gr27=gr0,gr4
  239| 00185C ld       E9FF0208   1     L8        gr15=#SPILL48(gr31,520)
  239| 001860 rldicr   79C41F24   1     SLL8      gr4=gr14,3
  240| 001864 add      7F1BEA14   1     A         gr24=gr27,gr29
  239| 001868 addi     3BA4FFF8   1     AI        gr29=gr4,-8
  240| 00186C mulld    7F80E1D2   1     M         gr28=gr0,gr28
  239| 001870 lfdx     7C2FECAE   1     LFL       fp1=bstar[].rns25.(gr15,gr29,0)
  239| 001874 ld       E9FF0100   1     L8        gr15=#SPILL15(gr31,256)
  239| 001878 ld       EA7F00F8   1     L8        gr19=#SPILL14(gr31,248)
  240| 00187C rldicr   781A1F24   1     SLL8      gr26=gr0,3
  240| 001880 ld       EAC50C08   1     L8        gr22=<s227:d3080:l8>(gr5,3080)
    0| 001884 add      7EB2BA14   1     A         gr21=gr18,gr23
  239| 001888 ld       EA3F0200   1     L8        gr17=#SPILL47(gr31,512)
  240| 00188C ld       EA1F00B0   1     L8        gr16=#SPILL5(gr31,176)
  240| 001890 ld       EAFF0190   1     L8        gr23=#SPILL33(gr31,400)
  240| 001894 subf     7F9AE050   1     S         gr28=gr28,gr26
  240| 001898 ld       EB450C20   1     L8        gr26=<s227:d3104:l8>(gr5,3104)
  239| 00189C lfdx     7C4FECAE   1     LFL       fp2=bave[].rns7.(gr15,gr29,0)
  240| 0018A0 ld       E9FF0228   1     L8        gr15=#SPILL52(gr31,552)
  240| 0018A4 addi     3B64FFF0   1     AI        gr27=gr4,-16
  240| 0018A8 add      7F18E214   1     A         gr24=gr24,gr28
  239| 0018AC addi     3B930078   1     AI        gr28=gr19,120
    0| 0018B0 rldicl   7B39F082   1     SRL8      gr25=gr25,2
  240| 0018B4 add      7F7BC214   1     A         gr27=gr27,gr24
  239| 0018B8 add      7F9C2214   1     A         gr28=gr28,gr4
  239| 0018BC addi     3B110078   1     AI        gr24=gr17,120
  240| 0018C0 add      7EF0BA14   1     A         gr23=gr16,gr23
  240| 0018C4 add      7ED6EA14   1     A         gr22=gr22,gr29
    0| 0018C8 andi.    72B50003   1     RN4_R     gr21,cr0=gr21,0,0x3
    0| 0018CC cmpdi    2EB90000   1     C8        cr5=gr25,0
  240| 0018D0 add      7F6FDA14   1     A         gr27=gr15,gr27
  239| 0018D4 add      7C84C214   1     A         gr4=gr4,gr24
  240| 0018D8 add      7FB7EA14   1     A         gr29=gr23,gr29
  240| 0018DC add      7F5AB214   1     A         gr26=gr26,gr22
    0| 0018E0 bc       41820084   1     BT        CL.367,cr0,0x4/eq,taken=50%(0,0)
  239| 0018E4 lfdu     CCDC0008   1     LFDU      fp6,gr28=bave[].rns7.(gr28,8)
  239| 0018E8 lfdu     CC640008   1     LFDU      fp3,gr4=bstar[].rns25.(gr4,8)
  240| 0018EC lfdu     CCFA0008   1     LFDU      fp7,gr26=g2bi(gr26,8)
    0| 0018F0 mtspr    7EA903A6   1     LCTR      ctr=gr21
  240| 0018F4 lfd      C89B0008   1     LFL       fp4=st2[].rns5.(gr27,8)
  240| 0018F8 lfdu     CCBD0008   1     LFDU      fp5,gr29=dx1ai(gr29,8)
  240| 0018FC fadd     FD06102A   1     AFL       fp8=fp6,fp2,fcr
  240| 001900 fsub     FD430828   2     SFL       fp10=fp3,fp1,fcr
  240| 001904 fmr      FC403090   2     LRFL      fp2=fp6
  240| 001908 fmul     FCE801F2   2     MFL       fp7=fp8,fp7,fcr
    0| 00190C bc       42400044   1     BCF       ctr=CL.500,taken=0%(0,100)
    0| 001910 ori      60210000   1     XNOP      
    0| 001914 ori      60210000   1     XNOP      
    0|                              CL.501:
  239| 001918 lfdu     CC3C0008   1     LFDU      fp1,gr28=bave[].rns7.(gr28,8)
  239| 00191C lfdu     CCC40008   1     LFDU      fp6,gr4=bstar[].rns25.(gr4,8)
  240| 001920 fmul     FD2702B2   1     MFL       fp9=fp7,fp10,fcr
  240| 001924 lfdu     CCFA0008   1     LFDU      fp7,gr26=g2bi(gr26,8)
  240| 001928 fadd     FD01102A   1     AFL       fp8=fp1,fp2,fcr
  240| 00192C fmadd    FD29217A   2     FMA       fp9=fp4,fp9,fp5,fcr
  240| 001930 lfd      C89B0010   1     LFL       fp4=st2[].rns5.(gr27,16)
  240| 001934 fsub     FD461828   1     SFL       fp10=fp6,fp3,fcr
  240| 001938 lfdu     CCBD0008   1     LFDU      fp5,gr29=dx1ai(gr29,8)
  240| 00193C fmr      FC400890   1     LRFL      fp2=fp1
  240| 001940 fmul     FCE801F2   2     MFL       fp7=fp8,fp7,fcr
  240| 001944 stfdu    DD3B0008   2     STFDU     gr27,st2[].rns5.(gr27,8)=fp9
    0| 001948 fmr      FC603090   1     LRFL      fp3=fp6
    0| 00194C bc       4200FFCC   1     BCT       ctr=CL.501,taken=100%(100,0)
    0|                              CL.500:
  240| 001950 fmul     FCC702B2   1     MFL       fp6=fp7,fp10,fcr
  240| 001954 fmr      FC201890   2     LRFL      fp1=fp3
  240| 001958 fmadd    FC66217A   2     FMA       fp3=fp4,fp6,fp5,fcr
  240| 00195C stfdu    DC7B0008   2     STFDU     gr27,st2[].rns5.(gr27,8)=fp3
    0| 001960 bc       4196017C   1     BT        CL.72,cr5,0x4/eq,taken=20%(20,80)
    0|                              CL.367:
  239| 001964 lfd      C91C0008   1     LFL       fp8=bave[].rns7.(gr28,8)
    0| 001968 mtspr    7F2903A6   1     LCTR      ctr=gr25
  239| 00196C lfd      C8A40008   1     LFL       fp5=bstar[].rns25.(gr4,8)
  239| 001970 lfd      C89C0010   1     LFL       fp4=bave[].rns7.(gr28,16)
  239| 001974 lfd      C95C0018   1     LFL       fp10=bave[].rns7.(gr28,24)
  240| 001978 fadd     FD88102A   1     AFL       fp12=fp8,fp2,fcr
    0| 00197C bc       424000C4   1     BCF       ctr=CL.601,taken=0%(0,100)
    0| 001980 ori      60210000   1     XNOP      
    0| 001984 ori      60210000   1     XNOP      
    0| 001988 ori      60210000   1     XNOP      
  239|                              CL.73:
  239| 00198C lfdu     CC5C0020   1     LFDU      fp2,gr28=bave[].rns7.(gr28,32)
  240| 001990 fsub     FC650828   1     SFL       fp3=fp5,fp1,fcr
  240| 001994 lfd      C83A0008   1     LFL       fp1=g2bi(gr26,8)
  240| 001998 fadd     FCC4402A   1     AFL       fp6=fp4,fp8,fcr
  239| 00199C lfd      C8E40010   1     LFL       fp7=bstar[].rns25.(gr4,16)
  240| 0019A0 fadd     FD2A202A   1     AFL       fp9=fp10,fp4,fcr
  240| 0019A4 lfd      C91A0010   1     LFL       fp8=g2bi(gr26,16)
  240| 0019A8 fadd     FDA2502A   1     AFL       fp13=fp2,fp10,fcr
  239| 0019AC lfd      C9640018   1     LFL       fp11=bstar[].rns25.(gr4,24)
  240| 0019B0 fmul     FC8C0072   1     MFL       fp4=fp12,fp1,fcr
  240| 0019B4 lfd      C95A0018   1     LFL       fp10=g2bi(gr26,24)
  240| 0019B8 fsub     FCA72828   1     SFL       fp5=fp7,fp5,fcr
  239| 0019BC lfdu     CC240020   1     LFDU      fp1,gr4=bstar[].rns25.(gr4,32)
  240| 0019C0 fmul     FCC60232   1     MFL       fp6=fp6,fp8,fcr
  240| 0019C4 lfdu     CFFA0020   1     LFDU      fp31,gr26=g2bi(gr26,32)
  240| 0019C8 fsub     FCEB3828   1     SFL       fp7=fp11,fp7,fcr
  240| 0019CC lfd      C91B0008   1     LFL       fp8=st2[].rns5.(gr27,8)
  240| 0019D0 fmul     FD2902B2   1     MFL       fp9=fp9,fp10,fcr
  240| 0019D4 lfd      C95D0008   1     LFL       fp10=dx1ai(gr29,8)
  240| 0019D8 fsub     FD615828   1     SFL       fp11=fp1,fp11,fcr
  240| 0019DC lfd      C99B0010   1     LFL       fp12=st2[].rns5.(gr27,16)
  240| 0019E0 fmul     FDAD07F2   1     MFL       fp13=fp13,fp31,fcr
  240| 0019E4 lfd      CBFD0010   1     LFL       fp31=dx1ai(gr29,16)
  240| 0019E8 fmul     FC6400F2   1     MFL       fp3=fp4,fp3,fcr
  240| 0019EC lfd      C89B0018   1     LFL       fp4=st2[].rns5.(gr27,24)
  240| 0019F0 fmul     FCA60172   1     MFL       fp5=fp6,fp5,fcr
  240| 0019F4 lfd      C8DD0018   1     LFL       fp6=dx1ai(gr29,24)
  240| 0019F8 fmul     FCE901F2   1     MFL       fp7=fp9,fp7,fcr
  240| 0019FC lfd      C93B0020   1     LFL       fp9=st2[].rns5.(gr27,32)
  240| 001A00 fmul     FD6D02F2   1     MFL       fp11=fp13,fp11,fcr
  240| 001A04 lfdu     CDBD0020   1     LFDU      fp13,gr29=dx1ai(gr29,32)
  240| 001A08 fmadd    FC6342BA   1     FMA       fp3=fp8,fp3,fp10,fcr
  239| 001A0C lfd      C91C0008   1     LFL       fp8=bave[].rns7.(gr28,8)
  240| 001A10 fmadd    FD4567FA   1     FMA       fp10=fp12,fp5,fp31,fcr
  239| 001A14 lfd      C8A40008   1     LFL       fp5=bstar[].rns25.(gr4,8)
  240| 001A18 fmadd    FCC721BA   1     FMA       fp6=fp4,fp7,fp6,fcr
  239| 001A1C lfd      C89C0010   1     LFL       fp4=bave[].rns7.(gr28,16)
  240| 001A20 fmadd    FCEB4B7A   1     FMA       fp7=fp9,fp11,fp13,fcr
  240| 001A24 stfd     D87B0008   1     STFL      st2[].rns5.(gr27,8)=fp3
  240| 001A28 fadd     FD88102A   1     AFL       fp12=fp8,fp2,fcr
  240| 001A2C stfd     D95B0010   1     STFL      st2[].rns5.(gr27,16)=fp10
  239| 001A30 lfd      C95C0018   1     LFL       fp10=bave[].rns7.(gr28,24)
  240| 001A34 stfd     D8DB0018   1     STFL      st2[].rns5.(gr27,24)=fp6
  240| 001A38 stfdu    DCFB0020   1     STFDU     gr27,st2[].rns5.(gr27,32)=fp7
    0| 001A3C bc       4200FF50   1     BCT       ctr=CL.73,taken=100%(100,0)
    0|                              CL.601:
  239| 001A40 lfdu     CC5C0020   1     LFDU      fp2,gr28=bave[].rns7.(gr28,32)
  240| 001A44 fadd     FC64402A   1     AFL       fp3=fp4,fp8,fcr
  240| 001A48 lfd      C91A0010   1     LFL       fp8=g2bi(gr26,16)
  240| 001A4C fadd     FC8A202A   1     AFL       fp4=fp10,fp4,fcr
  240| 001A50 lfd      C8DA0008   1     LFL       fp6=g2bi(gr26,8)
  240| 001A54 fsub     FC250828   1     SFL       fp1=fp5,fp1,fcr
  239| 001A58 lfd      C8E40010   1     LFL       fp7=bstar[].rns25.(gr4,16)
  240| 001A5C fadd     FC42502A   1     AFL       fp2=fp2,fp10,fcr
  239| 001A60 lfd      C9240018   1     LFL       fp9=bstar[].rns25.(gr4,24)
  240| 001A64 fmul     FC630232   1     MFL       fp3=fp3,fp8,fcr
  240| 001A68 lfd      C95A0018   1     LFL       fp10=g2bi(gr26,24)
  240| 001A6C fmul     FCCC01B2   1     MFL       fp6=fp12,fp6,fcr
  239| 001A70 lfdu     CD640020   1     LFDU      fp11,gr4=bstar[].rns25.(gr4,32)
  240| 001A74 fsub     FCA72828   1     SFL       fp5=fp7,fp5,fcr
  240| 001A78 lfdu     CD1A0020   1     LFDU      fp8,gr26=g2bi(gr26,32)
  240| 001A7C fsub     FCE93828   1     SFL       fp7=fp9,fp7,fcr
  240| 001A80 lfd      C99B0008   1     LFL       fp12=st2[].rns5.(gr27,8)
  240| 001A84 fmul     FC8402B2   1     MFL       fp4=fp4,fp10,fcr
  240| 001A88 lfd      C95D0008   1     LFL       fp10=dx1ai(gr29,8)
  240| 001A8C fsub     FD2B4828   1     SFL       fp9=fp11,fp9,fcr
  240| 001A90 lfd      C97B0010   1     LFL       fp11=st2[].rns5.(gr27,16)
  240| 001A94 fmul     FC420232   1     MFL       fp2=fp2,fp8,fcr
  240| 001A98 lfd      C91D0010   1     LFL       fp8=dx1ai(gr29,16)
  240| 001A9C fmul     FC260072   1     MFL       fp1=fp6,fp1,fcr
  240| 001AA0 lfd      C8DB0018   1     LFL       fp6=st2[].rns5.(gr27,24)
  240| 001AA4 fmul     FC630172   1     MFL       fp3=fp3,fp5,fcr
  240| 001AA8 lfd      C8BD0018   1     LFL       fp5=dx1ai(gr29,24)
  240| 001AAC fmul     FC8401F2   1     MFL       fp4=fp4,fp7,fcr
  240| 001AB0 lfd      C8FB0020   1     LFL       fp7=st2[].rns5.(gr27,32)
  240| 001AB4 fmul     FC420272   1     MFL       fp2=fp2,fp9,fcr
  240| 001AB8 lfdu     CD3D0020   1     LFDU      fp9,gr29=dx1ai(gr29,32)
  240| 001ABC fmadd    FC2162BA   1     FMA       fp1=fp12,fp1,fp10,fcr
  240| 001AC0 fmadd    FC635A3A   2     FMA       fp3=fp11,fp3,fp8,fcr
  240| 001AC4 fmadd    FC84317A   2     FMA       fp4=fp6,fp4,fp5,fcr
  240| 001AC8 fmadd    FC423A7A   2     FMA       fp2=fp7,fp2,fp9,fcr
  240| 001ACC stfd     D83B0008   1     STFL      st2[].rns5.(gr27,8)=fp1
  240| 001AD0 stfd     D87B0010   1     STFL      st2[].rns5.(gr27,16)=fp3
  240| 001AD4 stfd     D89B0018   1     STFL      st2[].rns5.(gr27,24)=fp4
  240| 001AD8 stfdu    DC5B0020   1     STFDU     gr27,st2[].rns5.(gr27,32)=fp2
  243|                              CL.72:
  260| 001ADC bc       40990534   1     BF        CL.74,cr6,0x2/gt,taken=50%(0,0)
  261| 001AE0 ld       E9FF01B0   1     L8        gr15=#SPILL37(gr31,432)
  260| 001AE4 ld       EA3F0158   1     L8        gr17=#SPILL26(gr31,344)
  260| 001AE8 ld       EA1F0150   1     L8        gr16=#SPILL25(gr31,336)
  260| 001AEC ld       EB9F0120   1     L8        gr28=#SPILL19(gr31,288)
  261| 001AF0 ld       EADF01B8   1     L8        gr22=#SPILL38(gr31,440)
  260| 001AF4 mulld    7C8871D2   1     M         gr4=gr8,gr14
  261| 001AF8 mulld    7F2FF1D2   1     M         gr25=gr15,gr30
  260| 001AFC ld       E9FF00F0   1     L8        gr15=#SPILL13(gr31,240)
  260| 001B00 mulld    7FAC89D2   1     M         gr29=gr12,gr17
  260| 001B04 mulld    7F70F1D2   1     M         gr27=gr16,gr30
  261| 001B08 mulld    7F4B71D2   1     M         gr26=gr11,gr14
  261| 001B0C ld       EA9F0088   1     L8        gr20=#SPILL0(gr31,136)
    0| 001B10 ld       EA7F0230   1     L8        gr19=#SPILL53(gr31,560)
  266| 001B14 ld       EA5F0188   1     L8        gr18=#SPILL32(gr31,392)
  260| 001B18 add      7EEFE214   1     A         gr23=gr15,gr28
  260| 001B1C add      7F7B2214   1     A         gr27=gr27,gr4
  260| 001B20 add      7FBDBA14   1     A         gr29=gr29,gr23
  261| 001B24 mulld    7F8CB1D2   1     M         gr28=gr12,gr22
    0| 001B28 ld       EABF0210   1     L8        gr21=#SPILL49(gr31,528)
  260| 001B2C add      7FBDDA14   1     A         gr29=gr29,gr27
  261| 001B30 subf     7F6BA050   1     S         gr27=gr20,gr11
  261| 001B34 add      7F59D214   1     A         gr26=gr25,gr26
    0| 001B38 subf     7F239850   1     S         gr25=gr19,gr3
  266| 001B3C addi     3AD20070   1     AI        gr22=gr18,112
  265| 001B40 ld       EA9F0160   1     L8        gr20=#SPILL27(gr31,352)
  264| 001B44 ld       EA7F0140   1     L8        gr19=#SPILL23(gr31,320)
  263| 001B48 ld       EA5F0118   1     L8        gr18=#SPILL18(gr31,280)
    0| 001B4C subfic   230E0001   1     SFI       gr24=1,gr14,ca"
  260| 001B50 subf     7FA8E850   1     S         gr29=gr29,gr8
    0| 001B54 add      7F15C214   1     A         gr24=gr21,gr24
  265| 001B58 addi     3AB40070   1     AI        gr21=gr20,112
  264| 001B5C addi     3A930070   1     AI        gr20=gr19,112
  263| 001B60 addi     3A720070   1     AI        gr19=gr18,112
  261| 001B64 ld       EA5F00F8   1     L8        gr18=#SPILL14(gr31,248)
  261| 001B68 ld       E9FF0168   1     L8        gr15=#SPILL28(gr31,360)
    0| 001B6C ld       E8820000   1     L8        gr4=.+CONSTANT_AREA(gr2,0)
  260| 001B70 lfd      C91D0000   1     LFL       fp8=srd3(gr29,0)
    0| 001B74 rldicl   7B18F082   1     SRL8      gr24=gr24,2
  266| 001B78 rldicr   79D71F24   1     SLL8      gr23=gr14,3
  261| 001B7C addi     3A520070   1     AI        gr18=gr18,112
  261| 001B80 add      7F6FDA14   1     A         gr27=gr15,gr27
  261| 001B84 add      7F9CD214   1     A         gr28=gr28,gr26
    0| 001B88 andi.    733A0003   1     RN4_R     gr26,cr0=gr25,0,0x3
    0| 001B8C cmpdi    2EB80000   1     C8        cr5=gr24,0
  266| 001B90 add      7F36BA14   1     A         gr25=gr22,gr23
  265| 001B94 add      7ED5BA14   1     A         gr22=gr21,gr23
  264| 001B98 add      7EB4BA14   1     A         gr21=gr20,gr23
  263| 001B9C add      7E93BA14   1     A         gr20=gr19,gr23
  261| 001BA0 add      7EF79214   1     A         gr23=gr23,gr18
  261| 001BA4 add      7F9BE214   1     A         gr28=gr27,gr28
    0| 001BA8 lfs      C0240000   1     LFS       fp1=+CONSTANT_AREA(gr4,0)
    0| 001BAC lfs      C0440018   1     LFS       fp2=+CONSTANT_AREA(gr4,24)
    0| 001BB0 bc       418200F4   1     BT        CL.370,cr0,0x4/eq,taken=50%(0,0)
  264| 001BB4 qvfre    10A04030   1     QVFRE     fp5=fp8
  260| 001BB8 lfdux    7C7D44EE   1     LFDU      fp3,gr29=srd3(gr29,gr8,0)
  261| 001BBC lfdux    7C9C5CEE   1     LFDU      fp4,gr28=b1(gr28,gr11,0)
    0| 001BC0 mtspr    7F4903A6   1     LCTR      ctr=gr26
  264| 001BC4 fmsub    FCC81178   1     FMS       fp6=fp2,fp8,fp5,fcr
  263| 001BC8 qvfre    11201830   1     QVFRE     fp9=fp3
  261| 001BCC fadd     FC84202A   1     AFL       fp4=fp4,fp4,fcr
  264| 001BD0 fnmsub   FCA529BC   2     FNMS      fp5=fp5,fp5,fp6,fcr
  263| 001BD4 fmsub    FCC31278   2     FMS       fp6=fp2,fp3,fp9,fcr
  264| 001BD8 fmsub    FCE81178   2     FMS       fp7=fp2,fp8,fp5,fcr
  263| 001BDC fnmsub   FCC949BC   2     FNMS      fp6=fp9,fp9,fp6,fcr
  264| 001BE0 fnmsub   FCE529FC   2     FNMS      fp7=fp5,fp5,fp7,fcr
  263| 001BE4 fmsub    FCA311B8   2     FMS       fp5=fp2,fp3,fp6,fcr
  264| 001BE8 fmsub    FD2811F8   2     FMS       fp9=fp2,fp8,fp7,fcr
  266| 001BEC fmr      FD001890   2     LRFL      fp8=fp3
  263| 001BF0 fnmsub   FCC6317C   2     FNMS      fp6=fp6,fp6,fp5,fcr
  263| 001BF4 fmsub    FCA311B8   2     FMS       fp5=fp2,fp3,fp6,fcr
    0| 001BF8 bc       42400078   1     BCF       ctr=CL.502,taken=0%(0,100)
    0|                              CL.503:
  260| 001BFC lfdux    7C7D44EE   1     LFDU      fp3,gr29=srd3(gr29,gr8,0)
  261| 001C00 fmul     FC840072   1     MFL       fp4=fp4,fp1,fcr
  263| 001C04 fnmsub   FCA6317C   2     FNMS      fp5=fp6,fp6,fp5,fcr
  264| 001C08 fnmsub   FCC73A7C   2     FNMS      fp6=fp7,fp7,fp9,fcr
  264| 001C0C qvfre    10E04030   1     QVFRE     fp7=fp8
  265| 001C10 fabs     FD202210   1     ABSFL     fp9=fp4
  263| 001C14 qvfre    11401830   1     QVFRE     fp10=fp3
  265| 001C18 fmul     FD650272   1     MFL       fp11=fp5,fp9,fcr
  266| 001C1C fmul     FD260272   2     MFL       fp9=fp6,fp9,fcr
  263| 001C20 stfdu    DCB40008   2     STFDU     gr20,srdpi[].rns9.(gr20,8)=fp5
  264| 001C24 stfdu    DCD50008   1     STFDU     gr21,srdmi[].rns10.(gr21,8)=fp6
  264| 001C28 fmsub    FCA811F8   1     FMS       fp5=fp2,fp8,fp7,fcr
  263| 001C2C fmsub    FCC312B8   2     FMS       fp6=fp2,fp3,fp10,fcr
  265| 001C30 fneg     FD605850   2     COMPFL    fp11=fp11
  261| 001C34 stfdu    DC970008   2     STFDU     gr23,bave[].rns7.(gr23,8)=fp4
  266| 001C38 stfdu    DD390008   1     STFDU     gr25,valm[].rns12.(gr25,8)=fp9
  265| 001C3C stfdu    DD760008   1     STFDU     gr22,valp[].rns11.(gr22,8)=fp11
  263| 001C40 fnmsub   FC8A51BC   1     FNMS      fp4=fp10,fp10,fp6,fcr
  264| 001C44 fnmsub   FCA7397C   2     FNMS      fp5=fp7,fp7,fp5,fcr
  263| 001C48 fmsub    FCC31138   2     FMS       fp6=fp2-fp4,fcr
  264| 001C4C fmsub    FCE81178   2     FMS       fp7=fp2,fp8,fp5,fcr
  261| 001C50 lfdux    7D3C5CEE   1     LFDU      fp9,gr28=b1(gr28,gr11,0)
  263| 001C54 fnmsub   FCC421BC   1     FNMS      fp6=fp4,fp4,fp6,fcr
  264| 001C58 fnmsub   FCE529FC   2     FNMS      fp7=fp5,fp5,fp7,fcr
  261| 001C5C fadd     FC89482A   2     AFL       fp4=fp9,fp9,fcr
  263| 001C60 fmsub    FCA311B8   2     FMS       fp5=fp2,fp3,fp6,fcr
  264| 001C64 fmsub    FD2811F8   2     FMS       fp9=fp2,fp8,fp7,fcr
  266| 001C68 fmr      FD001890   2     LRFL      fp8=fp3
    0| 001C6C bc       4200FF90   1     BCT       ctr=CL.503,taken=100%(100,0)
    0|                              CL.502:
  261| 001C70 fmul     FC640072   1     MFL       fp3=fp4,fp1,fcr
  263| 001C74 fnmsub   FC86317C   2     FNMS      fp4=fp6,fp6,fp5,fcr
  264| 001C78 fnmsub   FCA73A7C   2     FNMS      fp5=fp7,fp7,fp9,fcr
  265| 001C7C fabs     FCC01A10   2     ABSFL     fp6=fp3
  261| 001C80 stfdu    DC770008   2     STFDU     gr23,bave[].rns7.(gr23,8)=fp3
  265| 001C84 fmul     FC6401B2   1     MFL       fp3=fp4,fp6,fcr
  263| 001C88 stfdu    DC940008   2     STFDU     gr20,srdpi[].rns9.(gr20,8)=fp4
  266| 001C8C fmul     FC8501B2   1     MFL       fp4=fp5,fp6,fcr
  264| 001C90 stfdu    DCB50008   2     STFDU     gr21,srdmi[].rns10.(gr21,8)=fp5
  265| 001C94 fneg     FC601850   1     COMPFL    fp3=fp3
  266| 001C98 stfdu    DC990008   2     STFDU     gr25,valm[].rns12.(gr25,8)=fp4
  265| 001C9C stfdu    DC760008   1     STFDU     gr22,valp[].rns11.(gr22,8)=fp3
    0| 001CA0 bc       41960370   1     BT        CL.74,cr5,0x4/eq,taken=20%(20,80)
    0|                              CL.370:
  260| 001CA4 lfdux    7FFD44EE   1     LFDU      fp31,gr29=srd3(gr29,gr8,0)
  264| 001CA8 qvfre    10604030   1     QVFRE     fp3=fp8
  261| 001CAC lfdux    7CBC5CEE   1     LFDU      fp5,gr28=b1(gr28,gr11,0)
    0| 001CB0 mtspr    7F0903A6   1     LCTR      ctr=gr24
  263| 001CB4 qvfre    13C0F830   1     QVFRE     fp30=fp31
  260| 001CB8 lfdux    7DBD44EE   1     LFDU      fp13,gr29=srd3(gr29,gr8,0)
  264| 001CBC fmsub    FC8810F8   1     FMS       fp4=fp2,fp8,fp3,fcr
  261| 001CC0 lfdux    7CDC5CEE   1     LFDU      fp6,gr28=b1(gr28,gr11,0)
  261| 001CC4 fadd     FCA5282A   1     AFL       fp5=fp5,fp5,fcr
  263| 001CC8 fmsub    FD3F17B8   2     FMS       fp9=fp2,fp31,fp30,fcr
  264| 001CCC fmr      FD60F090   2     LRFL      fp11=fp30
  260| 001CD0 lfdux    7D9D44EE   1     LFDU      fp12,gr29=srd3(gr29,gr8,0)
  263| 001CD4 qvfre    13A06830   1     QVFRE     fp29=fp13
  261| 001CD8 lfdux    7CFC5CEE   1     LFDU      fp7,gr28=b1(gr28,gr11,0)
  261| 001CDC fadd     FCC6302A   1     AFL       fp6=fp6,fp6,fcr
  263| 001CE0 fnmsub   FF9EF27C   2     FNMS      fp28=fp30,fp30,fp9,fcr
  264| 001CE4 fnmsub   FFC3193C   2     FNMS      fp30=fp3,fp3,fp4,fcr
  264| 001CE8 fmr      FF404890   2     LRFL      fp26=fp9
  260| 001CEC lfdux    7C7D44EE   1     LFDU      fp3,gr29=srd3(gr29,gr8,0)
  263| 001CF0 fmsub    FECD1778   1     FMS       fp22=fp2,fp13,fp29,fcr
  261| 001CF4 lfdux    7C9C5CEE   1     LFDU      fp4,gr28=b1(gr28,gr11,0)
  264| 001CF8 fnmsub   FD6B5EBC   1     FNMS      fp11=fp11,fp11,fp26,fcr
  263| 001CFC qvfre    13606030   1     QVFRE     fp27=fp12
  264| 001D00 fmr      FD40E890   1     LRFL      fp10=fp29
  261| 001D04 fadd     FCE7382A   2     AFL       fp7=fp7,fp7,fcr
  263| 001D08 qvfre    13401830   1     QVFRE     fp26=fp3
  264| 001D0C fmr      FF20B090   1     LRFL      fp25=fp22
  263| 001D10 fnmsub   FFBDEDBC   2     FNMS      fp29=fp29,fp29,fp22,fcr
  263| 001D14 fmsub    FEEC16F8   2     FMS       fp23=fp2,fp12,fp27,fcr
  264| 001D18 fnmsub   FD4A567C   2     FNMS      fp10=fp10,fp10,fp25,fcr
  263| 001D1C fmsub    FF3F1738   2     FMS       fp25=fp2,fp31,fp28,fcr
  263| 001D20 fmsub    FEC316B8   2     FMS       fp22=fp2,fp3,fp26,fcr
  264| 001D24 fmr      FD20D890   2     LRFL      fp9=fp27
  263| 001D28 fmsub    FE8D1778   2     FMS       fp20=fp2,fp13,fp29,fcr
  264| 001D2C fmr      FF00B890   2     LRFL      fp24=fp23
  263| 001D30 fnmsub   FF7BDDFC   2     FNMS      fp27=fp27,fp27,fp23,fcr
  264| 001D34 fnmsub   FD294E3C   2     FNMS      fp9=fp9,fp9,fp24,fcr
  263| 001D38 fnmsub   FF5AD5BC   2     FNMS      fp26=fp26,fp26,fp22,fcr
  263| 001D3C fnmsub   FF9CE67C   2     FNMS      fp28=fp28,fp28,fp25,fcr
  264| 001D40 fmsub    FEED12B8   2     FMS       fp23=fp2,fp13,fp10,fcr
  264| 001D44 fmsub    FF1F12F8   2     FMS       fp24=fp2,fp31,fp11,fcr
  263| 001D48 fmsub    FEAC16F8   2     FMS       fp21=fp2,fp12,fp27,fcr
  264| 001D4C fmsub    FECC1278   2     FMS       fp22=fp2,fp12,fp9,fcr
  263| 001D50 fmsub    FF2316B8   2     FMS       fp25=fp2,fp3,fp26,fcr
  263| 001D54 fnmsub   FFBDED3C   2     FNMS      fp29=fp29,fp29,fp20,fcr
  261| 001D58 fadd     FC84202A   2     AFL       fp4=fp4,fp4,fcr
  264| 001D5C fnmsub   FD4A55FC   2     FNMS      fp10=fp10,fp10,fp23,fcr
  263| 001D60 fnmsub   FF7BDD7C   2     FNMS      fp27=fp27,fp27,fp21,fcr
  264| 001D64 fnmsub   FD294DBC   2     FNMS      fp9=fp9,fp9,fp22,fcr
  263| 001D68 fnmsub   FF5AD67C   2     FNMS      fp26=fp26,fp26,fp25,fcr
  264| 001D6C fnmsub   FD6B5E3C   2     FNMS      fp11=fp11,fp11,fp24,fcr
  264| 001D70 fmsub    FF2817B8   2     FMS       fp25=fp2,fp8,fp30,fcr
  263| 001D74 fmsub    FF0D1778   2     FMS       fp24=fp2,fp13,fp29,fcr
  263| 001D78 fmsub    FECC16F8   2     FMS       fp22=fp2,fp12,fp27,fcr
  264| 001D7C fmsub    FD8C1278   2     FMS       fp12=fp2,fp12,fp9,fcr
  263| 001D80 fmsub    FEA316B8   2     FMS       fp21=fp2,fp3,fp26,fcr
  263| 001D84 fmsub    FEFF1738   2     FMS       fp23=fp2,fp31,fp28,fcr
  261| 001D88 fmul     FC840072   2     MFL       fp4=fp4,fp1,fcr
  264| 001D8C fmsub    FDAD12B8   2     FMS       fp13=fp2,fp13,fp10,fcr
  264| 001D90 fmsub    FFFF12F8   2     FMS       fp31=fp2,fp31,fp11,fcr
  264| 001D94 fnmsub   FFDEF67C   2     FNMS      fp30=fp30,fp30,fp25,fcr
  263| 001D98 fnmsub   FF5AD57C   2     FNMS      fp26=fp26,fp26,fp21,fcr
  261| 001D9C fmul     FCA50072   2     MFL       fp5=fp5,fp1,fcr
  261| 001DA0 fmul     FCC60072   2     MFL       fp6=fp6,fp1,fcr
  261| 001DA4 fmul     FCE70072   2     MFL       fp7=fp7,fp1,fcr
  263| 001DA8 fnmsub   FF3DEE3C   2     FNMS      fp25=fp29,fp29,fp24,fcr
  263| 001DAC fnmsub   FF7BDDBC   2     FNMS      fp27=fp27,fp27,fp22,fcr
  264| 001DB0 fnmsub   FD294B3C   2     FNMS      fp9=fp9,fp9,fp12,fcr
  263| 001DB4 stfdu    DF540020   2     STFDU     gr20,srdpi[].rns9.(gr20,32)=fp26
  263| 001DB8 fnmsub   FFBCE5FC   1     FNMS      fp29=fp28,fp28,fp23,fcr
  265| 001DBC fabs     FD802210   2     ABSFL     fp12=fp4
  264| 001DC0 fnmsub   FDAA537C   2     FNMS      fp13=fp10,fp10,fp13,fcr
  263| 001DC4 stfd     DB34FFF0   1     STFL      srdpi[].rns9.(gr20,-16)=fp25
  264| 001DC8 fnmsub   FD4B5FFC   1     FNMS      fp10=fp11,fp11,fp31,fcr
  263| 001DCC stfd     DB74FFF8   1     STFL      srdpi[].rns9.(gr20,-8)=fp27
  264| 001DD0 fmsub    FD0817B8   1     FMS       fp8=fp2,fp8,fp30,fcr
  264| 001DD4 stfdu    DD350020   2     STFDU     gr21,srdmi[].rns10.(gr21,32)=fp9
  265| 001DD8 fmul     FF5A0332   1     MFL       fp26=fp26,fp12,fcr
  264| 001DDC stfd     D9B5FFF8   1     STFL      srdmi[].rns10.(gr21,-8)=fp13
  265| 001DE0 fabs     FD602A10   1     ABSFL     fp11=fp5
  265| 001DE4 fabs     FFE03210   2     ABSFL     fp31=fp6
  265| 001DE8 fabs     FF803A10   2     ABSFL     fp28=fp7
  265| 001DEC fmul     FF3907F2   2     MFL       fp25=fp25,fp31,fcr
  265| 001DF0 fmul     FF7B0732   2     MFL       fp27=fp27,fp28,fcr
  265| 001DF4 fmul     FF1D02F2   2     MFL       fp24=fp29,fp11,fcr
  266| 001DF8 fmul     FD290332   2     MFL       fp9=fp9,fp12,fcr
  266| 001DFC fmul     FD8D0732   2     MFL       fp12=fp13,fp28,fcr
  266| 001E00 fmul     FDAA07F2   2     MFL       fp13=fp10,fp31,fcr
  264| 001E04 fnmsub   FFFEF23C   2     FNMS      fp31=fp30,fp30,fp8,fcr
  265| 001E08 fneg     FD00D050   2     COMPFL    fp8=fp26
  265| 001E0C fneg     FFC0D850   2     COMPFL    fp30=fp27
  265| 001E10 fneg     FF80C850   2     COMPFL    fp28=fp25
  265| 001E14 stfdu    DD160020   2     STFDU     gr22,valp[].rns11.(gr22,32)=fp8
  265| 001E18 fneg     FD00C050   1     COMPFL    fp8=fp24
  266| 001E1C stfdu    DD390020   2     STFDU     gr25,valm[].rns12.(gr25,32)=fp9
  266| 001E20 fmul     FD3F02F2   1     MFL       fp9=fp31,fp11,fcr
  265| 001E24 stfd     DBD6FFF8   1     STFL      valp[].rns11.(gr22,-8)=fp30
  265| 001E28 stfd     DB96FFF0   1     STFL      valp[].rns11.(gr22,-16)=fp28
  266| 001E2C stfd     D999FFF8   1     STFL      valm[].rns12.(gr25,-8)=fp12
  265| 001E30 stfd     D916FFE8   1     STFL      valp[].rns11.(gr22,-24)=fp8
  266| 001E34 stfd     D9B9FFF0   1     STFL      valm[].rns12.(gr25,-16)=fp13
    0| 001E38 bc       424001B8   1     BCF       ctr=CL.504,taken=0%(0,100)
    0|                              CL.505:
  261| 001E3C lfdux    7D1C5CEE   1     LFDU      fp8,gr28=b1(gr28,gr11,0)
  263| 001E40 stfd     DBB4FFE8   1     STFL      srdpi[].rns9.(gr20,-24)=fp29
  264| 001E44 stfd     D955FFF0   1     STFL      srdmi[].rns10.(gr21,-16)=fp10
  266| 001E48 stfd     D939FFE8   1     STFL      valm[].rns12.(gr25,-24)=fp9
  264| 001E4C stfd     DBF5FFE8   1     STFL      srdmi[].rns10.(gr21,-24)=fp31
  261| 001E50 stfdu    DC970020   1     STFDU     gr23,bave[].rns7.(gr23,32)=fp4
  261| 001E54 lfdux    7C9C5CEE   1     LFDU      fp4,gr28=b1(gr28,gr11,0)
  261| 001E58 stfd     D8F7FFF8   1     STFL      bave[].rns7.(gr23,-8)=fp7
  261| 001E5C stfd     D8D7FFF0   1     STFL      bave[].rns7.(gr23,-16)=fp6
  261| 001E60 stfd     D8B7FFE8   1     STFL      bave[].rns7.(gr23,-24)=fp5
  261| 001E64 fadd     FCA8402A   1     AFL       fp5=fp8,fp8,fcr
  264| 001E68 qvfre    10C01830   1     QVFRE     fp6=fp3
  261| 001E6C lfdux    7CFC5CEE   1     LFDU      fp7,gr28=b1(gr28,gr11,0)
  261| 001E70 fmul     FCA50072   1     MFL       fp5=fp5,fp1,fcr
  264| 001E74 fmsub    FD4311B8   2     FMS       fp10=fp2,fp3,fp6,fcr
  261| 001E78 fadd     FC84202A   2     AFL       fp4=fp4,fp4,fcr
  261| 001E7C fadd     FCE7382A   2     AFL       fp7=fp7,fp7,fcr
  260| 001E80 lfdux    7D1D44EE   1     LFDU      fp8,gr29=srd3(gr29,gr8,0)
  265| 001E84 fabs     FD202A10   1     ABSFL     fp9=fp5
  264| 001E88 fnmsub   FFE632BC   2     FNMS      fp31=fp6,fp6,fp10,fcr
  261| 001E8C fmul     FCC40072   2     MFL       fp6=fp4,fp1,fcr
  261| 001E90 lfdux    7C9C5CEE   1     LFDU      fp4,gr28=b1(gr28,gr11,0)
  261| 001E94 fmul     FCE70072   1     MFL       fp7=fp7,fp1,fcr
  260| 001E98 lfdux    7D5D44EE   1     LFDU      fp10,gr29=srd3(gr29,gr8,0)
  263| 001E9C qvfre    13A04030   1     QVFRE     fp29=fp8
  264| 001EA0 fmsub    FFC317F8   1     FMS       fp30=fp2,fp3,fp31,fcr
  264| 001EA4 fmr      FF80E890   2     LRFL      fp28=fp29
  265| 001EA8 fabs     FD603210   2     ABSFL     fp11=fp6
  265| 001EAC fabs     FD803A10   2     ABSFL     fp12=fp7
  261| 001EB0 fadd     FC84202A   2     AFL       fp4=fp4,fp4,fcr
  260| 001EB4 lfdux    7DBD44EE   1     LFDU      fp13,gr29=srd3(gr29,gr8,0)
  264| 001EB8 fnmsub   FFFFFFBC   1     FNMS      fp31=fp31,fp31,fp30,fcr
  263| 001EBC qvfre    13605030   1     QVFRE     fp27=fp10
  264| 001EC0 fmr      FF40D890   1     LRFL      fp26=fp27
  263| 001EC4 fmsub    FEA81778   2     FMS       fp21=fp2,fp8,fp29,fcr
  264| 001EC8 fmr      FEC0A890   2     LRFL      fp22=fp21
  261| 001ECC fmul     FC840072   2     MFL       fp4=fp4,fp1,fcr
  264| 001ED0 fmsub    FFC317F8   2     FMS       fp30=fp2,fp3,fp31,fcr
  260| 001ED4 lfdux    7C7D44EE   1     LFDU      fp3,gr29=srd3(gr29,gr8,0)
  263| 001ED8 qvfre    13006830   1     QVFRE     fp24=fp13
  264| 001EDC fmr      FEE0C090   1     LRFL      fp23=fp24
  263| 001EE0 fmsub    FE6A16F8   2     FMS       fp19=fp2,fp10,fp27,fcr
  264| 001EE4 fmr      FF209890   2     LRFL      fp25=fp19
  263| 001EE8 fnmsub   FFBDED7C   2     FNMS      fp29=fp29,fp29,fp21,fcr
  264| 001EEC fnmsub   FF9CE5BC   2     FNMS      fp28=fp28,fp28,fp22,fcr
  263| 001EF0 qvfre    12801830   1     QVFRE     fp20=fp3
  263| 001EF4 fmsub    FEAD1638   1     FMS       fp21=fp2,fp13,fp24,fcr
  264| 001EF8 fmr      FEC0A890   2     LRFL      fp22=fp21
  263| 001EFC fnmsub   FF7BDCFC   2     FNMS      fp27=fp27,fp27,fp19,fcr
  264| 001F00 fnmsub   FF5AD67C   2     FNMS      fp26=fp26,fp26,fp25,fcr
  263| 001F04 fmsub    FF281778   2     FMS       fp25=fp2,fp8,fp29,fcr
  263| 001F08 fmsub    FE631538   2     FMS       fp19=fp2,fp3,fp20,fcr
  263| 001F0C fnmsub   FF18C57C   2     FNMS      fp24=fp24,fp24,fp21,fcr
  264| 001F10 fnmsub   FEF7BDBC   2     FNMS      fp23=fp23,fp23,fp22,fcr
  263| 001F14 fmsub    FECA16F8   2     FMS       fp22=fp2,fp10,fp27,fcr
  264| 001F18 fmsub    FEAA16B8   2     FMS       fp21=fp2,fp10,fp26,fcr
  264| 001F1C fmsub    FE281738   2     FMS       fp17=fp2,fp8,fp28,fcr
  263| 001F20 fnmsub   FE94A4FC   2     FNMS      fp20=fp20,fp20,fp19,fcr
  263| 001F24 fmsub    FE6D1638   2     FMS       fp19=fp2,fp13,fp24,fcr
  264| 001F28 fmsub    FE4D15F8   2     FMS       fp18=fp2,fp13,fp23,fcr
  263| 001F2C fnmsub   FF7BDDBC   2     FNMS      fp27=fp27,fp27,fp22,fcr
  263| 001F30 fnmsub   FFBDEE7C   2     FNMS      fp29=fp29,fp29,fp25,fcr
  264| 001F34 fnmsub   FF5AD57C   2     FNMS      fp26=fp26,fp26,fp21,fcr
  263| 001F38 fmsub    FF231538   2     FMS       fp25=fp2,fp3,fp20,fcr
  263| 001F3C fnmsub   FF18C4FC   2     FNMS      fp24=fp24,fp24,fp19,fcr
  264| 001F40 fnmsub   FEF7BCBC   2     FNMS      fp23=fp23,fp23,fp18,fcr
  264| 001F44 fnmsub   FF9CE47C   2     FNMS      fp28=fp28,fp28,fp17,fcr
  263| 001F48 fmsub    FECA16F8   2     FMS       fp22=fp2,fp10,fp27,fcr
  263| 001F4C fmsub    FEA81778   2     FMS       fp21=fp2,fp8,fp29,fcr
  263| 001F50 fnmsub   FF34A67C   2     FNMS      fp25=fp20,fp20,fp25,fcr
  263| 001F54 fmsub    FE8D1638   2     FMS       fp20=fp2,fp13,fp24,fcr
  264| 001F58 fmsub    FDAD15F8   2     FMS       fp13=fp2,fp13,fp23,fcr
  264| 001F5C fmsub    FD4A16B8   2     FMS       fp10=fp2,fp10,fp26,fcr
  264| 001F60 fmsub    FD081738   2     FMS       fp8=fp2,fp8,fp28,fcr
  263| 001F64 fnmsub   FF7BDDBC   2     FNMS      fp27=fp27,fp27,fp22,fcr
  263| 001F68 fmsub    FEC31678   2     FMS       fp22=fp2,fp3,fp25,fcr
  263| 001F6C fnmsub   FF18C53C   2     FNMS      fp24=fp24,fp24,fp20,fcr
  263| 001F70 fnmsub   FFBDED7C   2     FNMS      fp29=fp29,fp29,fp21,fcr
  264| 001F74 fnmsub   FDB7BB7C   2     FNMS      fp13=fp23,fp23,fp13,fcr
  264| 001F78 fnmsub   FF5AD2BC   2     FNMS      fp26=fp26,fp26,fp10,fcr
  264| 001F7C fnmsub   FD5CE23C   2     FNMS      fp10=fp28,fp28,fp8,fcr
  263| 001F80 fnmsub   FD19CDBC   2     FNMS      fp8=fp25,fp25,fp22,fcr
  264| 001F84 fnmsub   FFFFFFBC   2     FNMS      fp31=fp31,fp31,fp30,fcr
  265| 001F88 fmul     FFD80332   2     MFL       fp30=fp24,fp12,fcr
  265| 001F8C fmul     FF9B02F2   2     MFL       fp28=fp27,fp11,fcr
  265| 001F90 fabs     FF202210   2     ABSFL     fp25=fp4
  265| 001F94 fmul     FEFD0272   2     MFL       fp23=fp29,fp9,fcr
  265| 001F98 fmul     FEC80672   2     MFL       fp22=fp8,fp25,fcr
  266| 001F9C fmul     FF2D0672   2     MFL       fp25=fp13,fp25,fcr
  266| 001FA0 fmul     FD9A0332   2     MFL       fp12=fp26,fp12,fcr
  266| 001FA4 fmul     FD6A02F2   2     MFL       fp11=fp10,fp11,fcr
  266| 001FA8 fmul     FD3F0272   2     MFL       fp9=fp31,fp9,fcr
  265| 001FAC fneg     FFC0F050   2     COMPFL    fp30=fp30
  265| 001FB0 fneg     FEC0B050   2     COMPFL    fp22=fp22
  265| 001FB4 fneg     FF80E050   2     COMPFL    fp28=fp28
  265| 001FB8 fneg     FEE0B850   2     COMPFL    fp23=fp23
  265| 001FBC stfdu    DED60020   2     STFDU     gr22,valp[].rns11.(gr22,32)=fp22
  263| 001FC0 stfdu    DD140020   1     STFDU     gr20,srdpi[].rns9.(gr20,32)=fp8
  265| 001FC4 stfd     DBD6FFF8   1     STFL      valp[].rns11.(gr22,-8)=fp30
  266| 001FC8 stfdu    DF390020   1     STFDU     gr25,valm[].rns12.(gr25,32)=fp25
  265| 001FCC stfd     DB96FFF0   1     STFL      valp[].rns11.(gr22,-16)=fp28
  263| 001FD0 stfd     DB14FFF8   1     STFL      srdpi[].rns9.(gr20,-8)=fp24
  264| 001FD4 stfdu    DDB50020   1     STFDU     gr21,srdmi[].rns10.(gr21,32)=fp13
  266| 001FD8 stfd     D999FFF8   1     STFL      valm[].rns12.(gr25,-8)=fp12
  265| 001FDC stfd     DAF6FFE8   1     STFL      valp[].rns11.(gr22,-24)=fp23
  263| 001FE0 stfd     DB74FFF0   1     STFL      srdpi[].rns9.(gr20,-16)=fp27
  264| 001FE4 stfd     DB55FFF8   1     STFL      srdmi[].rns10.(gr21,-8)=fp26
  266| 001FE8 stfd     D979FFF0   1     STFL      valm[].rns12.(gr25,-16)=fp11
    0| 001FEC bc       4200FE50   1     BCT       ctr=CL.505,taken=100%(100,0)
    0|                              CL.504:
  261| 001FF0 stfdu    DC970020   1     STFDU     gr23,bave[].rns7.(gr23,32)=fp4
  263| 001FF4 stfd     DBB4FFE8   1     STFL      srdpi[].rns9.(gr20,-24)=fp29
  264| 001FF8 stfd     D955FFF0   1     STFL      srdmi[].rns10.(gr21,-16)=fp10
  266| 001FFC stfd     D939FFE8   1     STFL      valm[].rns12.(gr25,-24)=fp9
  264| 002000 stfd     DBF5FFE8   1     STFL      srdmi[].rns10.(gr21,-24)=fp31
  261| 002004 stfd     D8F7FFF8   1     STFL      bave[].rns7.(gr23,-8)=fp7
  261| 002008 stfd     D8D7FFF0   1     STFL      bave[].rns7.(gr23,-16)=fp6
  261| 00200C stfd     D8B7FFE8   1     STFL      bave[].rns7.(gr23,-24)=fp5
  267|                              CL.74:
  272| 002010 bc       409D01CC   1     BF        CL.76,cr7,0x2/gt,taken=50%(0,0)
  273| 002014 ld       EA3F0090   1     L8        gr17=#SPILL1(gr31,144)
  273| 002018 rldicr   7BC41F24   1     SLL8      gr4=gr30,3
  274| 00201C ld       EA020000   1     L8        gr16=.&&N&field(gr2,0)
  273| 002020 rldicr   799C1F24   1     SLL8      gr28=gr12,3
    0| 002024 ld       E9FF0240   1     L8        gr15=#SPILL55(gr31,576)
  273| 002028 mulld    7EE0E1D2   1     M         gr23=gr0,gr28
  273| 00202C mulld    7F6489D2   1     M         gr27=gr4,gr17
  273| 002030 rldicr   7A2B1F24   1     SLL8      gr11=gr17,3
  274| 002034 ld       EB5003D8   1     L8        gr26=<s189:d984:l8>(gr16,984)
  273| 002038 neg      7FAB00D0   1     COMP      gr29=gr11
  274| 00203C ld       EB3003F0   1     L8        gr25=<s189:d1008:l8>(gr16,1008)
  273| 002040 mulld    7F00D9D2   1     M         gr24=gr0,gr27
  273| 002044 mulld    7EC0E9D2   1     M         gr22=gr0,gr29
  274| 002048 ld       E9700408   1     L8        gr11=<s189:d1032:l8>(gr16,1032)
  273| 00204C rldicr   78151F24   1     SLL8      gr21=gr0,3
  274| 002050 ld       EBB003A8   1     L8        gr29=<s189:d936:l8>(gr16,936)
  274| 002054 ld       EB9003C0   1     L8        gr28=<s189:d960:l8>(gr16,960)
    0| 002058 ld       EA1F01F0   1     L8        gr16=#SPILL45(gr31,496)
  274| 00205C mulld    7F5AF1D2   1     M         gr26=gr26,gr30
  274| 002060 mulld    7F2CC9D2   1     M         gr25=gr12,gr25
  273| 002064 subf     7F15C050   1     S         gr24=gr24,gr21
    0| 002068 subfic   22AF0001   1     SFI       gr21=1,gr15,ca"
    0| 00206C ld       E9FF0238   1     L8        gr15=#SPILL54(gr31,568)
  273| 002070 add      7EF7B214   1     A         gr23=gr23,gr22
    0| 002074 ld       EB7F03F0   1     L8        gr27=.u3(gr31,1008)
  273| 002078 add      7F17C214   1     A         gr24=gr23,gr24
    0| 00207C addi     3AF00005   1     AI        gr23=gr16,5
  274| 002080 add      7FBDE214   1     A         gr29=gr29,gr28
    0| 002084 add      7EAFAA14   1     A         gr21=gr15,gr21
  274| 002088 add      7F99D214   1     A         gr28=gr25,gr26
    0| 00208C subf     7F43B850   1     S         gr26=gr23,gr3
  273| 002090 ld       E9FF00C8   1     L8        gr15=#SPILL8(gr31,200)
  273| 002094 ld       EAFF0198   1     L8        gr23=#SPILL34(gr31,408)
  274| 002098 mulld    7E8B71D2   1     M         gr20=gr11,gr14
  273| 00209C add      7F7BC214   1     A         gr27=gr27,gr24
    0| 0020A0 rldicl   7AB8F082   1     SRL8      gr24=gr21,2
  273| 0020A4 add      7F2FBA14   1     A         gr25=gr15,gr23
  274| 0020A8 ld       E9FF01C0   1     L8        gr15=#SPILL39(gr31,448)
  273| 0020AC ld       EABF01A0   1     L8        gr21=#SPILL35(gr31,416)
  274| 0020B0 rldicr   79D61F24   1     SLL8      gr22=gr14,3
  274| 0020B4 rldicr   79731764   1     SLL8      gr19=gr11,2
  274| 0020B8 addi     3A56FFE0   1     AI        gr18=gr22,-32
  274| 0020BC subf     7E735850   1     S         gr19=gr11,gr19
  274| 0020C0 addi     3AEF0060   1     AI        gr23=gr15,96
  273| 0020C4 addi     3AB50060   1     AI        gr21=gr21,96
  274| 0020C8 add      7FB3EA14   1     A         gr29=gr19,gr29
  274| 0020CC add      7F94E214   1     A         gr28=gr20,gr28
  273| 0020D0 add      7F7B9214   1     A         gr27=gr27,gr18
    0| 0020D4 andi.    735A0003   1     RN4_R     gr26,cr0=gr26,0,0x3
    0| 0020D8 cmpdi    2FB80000   1     C8        cr7=gr24,0
  273| 0020DC lfdx     7C3924AE   1     LFL       fp1=vg3(gr25,gr4,0)
  274| 0020E0 add      7C96BA14   1     A         gr4=gr22,gr23
  273| 0020E4 add      7F35B214   1     A         gr25=gr21,gr22
  274| 0020E8 add      7FBDE214   1     A         gr29=gr29,gr28
    0| 0020EC bc       41820040   1     BT        CL.373,cr0,0x4/eq,taken=50%(0,0)
  273| 0020F0 lfdu     CC5B0008   1     LFDU      fp2,gr27=u3[](gr27,8)
    0| 0020F4 mtspr    7F4903A6   1     LCTR      ctr=gr26
  274| 0020F8 lfdux    7C9D5CEE   1     LFDU      fp4,gr29=b3(gr29,gr11,0)
  273| 0020FC fsub     FC420828   1     SFL       fp2=fp2,fp1,fcr
    0| 002100 bc       42400020   1     BCF       ctr=CL.506,taken=0%(0,100)
    0| 002104 ori      60210000   1     XNOP      
    0|                              CL.507:
  273| 002108 lfdu     CC7B0008   1     LFDU      fp3,gr27=u3[](gr27,8)
  274| 00210C stfdu    DC840008   1     STFDU     gr4,btmp[].rns15.(gr4,8)=fp4
  274| 002110 lfdux    7C9D5CEE   1     LFDU      fp4,gr29=b3(gr29,gr11,0)
  273| 002114 stfdu    DC590008   1     STFDU     gr25,vtmp[].rns13.(gr25,8)=fp2
  273| 002118 fsub     FC430828   1     SFL       fp2=fp3,fp1,fcr
    0| 00211C bc       4200FFEC   1     BCT       ctr=CL.507,taken=100%(100,0)
    0|                              CL.506:
  274| 002120 stfdu    DC840008   1     STFDU     gr4,btmp[].rns15.(gr4,8)=fp4
  273| 002124 stfdu    DC590008   1     STFDU     gr25,vtmp[].rns13.(gr25,8)=fp2
    0| 002128 bc       419E00B4   1     BT        CL.76,cr7,0x4/eq,taken=20%(20,80)
    0|                              CL.373:
  274| 00212C lfdux    7C5D5CEE   1     LFDU      fp2,gr29=b3(gr29,gr11,0)
  273| 002130 lfd      C87B0008   1     LFL       fp3=u3[](gr27,8)
  273| 002134 lfd      C8BB0018   1     LFL       fp5=u3[](gr27,24)
  273| 002138 lfd      C89B0010   1     LFL       fp4=u3[](gr27,16)
    0| 00213C mtspr    7F0903A6   1     LCTR      ctr=gr24
  273| 002140 lfdu     CCDB0020   1     LFDU      fp6,gr27=u3[](gr27,32)
  274| 002144 lfdux    7CFD5CEE   1     LFDU      fp7,gr29=b3(gr29,gr11,0)
  273| 002148 fsub     FC630828   1     SFL       fp3=fp3,fp1,fcr
  274| 00214C stfd     D8440008   1     STFL      btmp[].rns15.(gr4,8)=fp2
  273| 002150 fsub     FC450828   1     SFL       fp2=fp5,fp1,fcr
  273| 002154 fsub     FC840828   2     SFL       fp4=fp4,fp1,fcr
  274| 002158 lfdux    7CBD5CEE   1     LFDU      fp5,gr29=b3(gr29,gr11,0)
  273| 00215C stfd     D8790008   1     STFL      vtmp[].rns13.(gr25,8)=fp3
  274| 002160 stfd     D8E40010   1     STFL      btmp[].rns15.(gr4,16)=fp7
  273| 002164 stfd     D8990010   1     STFL      vtmp[].rns13.(gr25,16)=fp4
  274| 002168 lfdux    7C7D5CEE   1     LFDU      fp3,gr29=b3(gr29,gr11,0)
  274| 00216C stfd     D8A40018   1     STFL      btmp[].rns15.(gr4,24)=fp5
  274| 002170 stfdu    DC640020   1     STFDU     gr4,btmp[].rns15.(gr4,32)=fp3
    0| 002174 bc       4240005C   1     BCF       ctr=CL.508,taken=0%(0,100)
    0| 002178 ori      60210000   1     XNOP      
    0|                              CL.509:
  274| 00217C lfdux    7C7D5CEE   1     LFDU      fp3,gr29=b3(gr29,gr11,0)
  273| 002180 lfd      C89B0008   1     LFL       fp4=u3[](gr27,8)
  273| 002184 fsub     FCA60828   1     SFL       fp5=fp6,fp1,fcr
  273| 002188 stfd     D8590018   1     STFL      vtmp[].rns13.(gr25,24)=fp2
  274| 00218C lfdux    7C5D5CEE   1     LFDU      fp2,gr29=b3(gr29,gr11,0)
  274| 002190 stfd     D8640008   1     STFL      btmp[].rns15.(gr4,8)=fp3
  273| 002194 lfd      C87B0010   1     LFL       fp3=u3[](gr27,16)
  273| 002198 fsub     FC840828   1     SFL       fp4=fp4,fp1,fcr
  273| 00219C stfdu    DCB90020   2     STFDU     gr25,vtmp[].rns13.(gr25,32)=fp5
  274| 0021A0 lfdux    7CBD5CEE   1     LFDU      fp5,gr29=b3(gr29,gr11,0)
  274| 0021A4 stfd     D8440010   1     STFL      btmp[].rns15.(gr4,16)=fp2
  273| 0021A8 lfd      C85B0018   1     LFL       fp2=u3[](gr27,24)
  273| 0021AC fsub     FC630828   1     SFL       fp3=fp3,fp1,fcr
  273| 0021B0 stfd     D8990008   1     STFL      vtmp[].rns13.(gr25,8)=fp4
  274| 0021B4 lfdux    7C9D5CEE   1     LFDU      fp4,gr29=b3(gr29,gr11,0)
  274| 0021B8 stfd     D8A40018   1     STFL      btmp[].rns15.(gr4,24)=fp5
  273| 0021BC lfdu     CCDB0020   1     LFDU      fp6,gr27=u3[](gr27,32)
  273| 0021C0 fsub     FC420828   1     SFL       fp2=fp2,fp1,fcr
  273| 0021C4 stfd     D8790010   1     STFL      vtmp[].rns13.(gr25,16)=fp3
  274| 0021C8 stfdu    DC840020   1     STFDU     gr4,btmp[].rns15.(gr4,32)=fp4
    0| 0021CC bc       4200FFB0   1     BCT       ctr=CL.509,taken=100%(100,0)
    0|                              CL.508:
  273| 0021D0 fsub     FC260828   1     SFL       fp1=fp6,fp1,fcr
  273| 0021D4 stfd     D8590018   1     STFL      vtmp[].rns13.(gr25,24)=fp2
  273| 0021D8 stfdu    DC390020   1     STFDU     gr25,vtmp[].rns13.(gr25,32)=fp1
  275|                              CL.76:
  283| 0021DC bc       40850490   1     BF        CL.78,cr1,0x2/gt,taken=50%(0,0)
    0| 0021E0 ld       EA3F01F0   1     L8        gr17=#SPILL45(gr31,496)
    0| 0021E4 ld       EA5F01F8   1     L8        gr18=#SPILL46(gr31,504)
  283| 0021E8 ld       EB1F0178   1     L8        gr24=#SPILL30(gr31,376)
  283| 0021EC ld       EA9F01C8   1     L8        gr20=#SPILL40(gr31,456)
  291| 0021F0 ld       EA7F00D0   1     L8        gr19=#SPILL9(gr31,208)
  283| 0021F4 rldicr   79C41F24   1     SLL8      gr4=gr14,3
    0| 0021F8 addi     3B310003   1     AI        gr25=gr17,3
    0| 0021FC ld       EA1F0210   1     L8        gr16=#SPILL49(gr31,528)
  283| 002200 ld       E9FF01A0   1     L8        gr15=#SPILL35(gr31,416)
    0| 002204 subfic   21720001   1     SFI       gr11=1,gr18,ca"
  283| 002208 addi     3B64FFF8   1     AI        gr27=gr4,-8
  283| 00220C ld       EA5F01C0   1     L8        gr18=#SPILL39(gr31,448)
    0| 002210 subf     7EC3C850   1     S         gr22=gr25,gr3
  283| 002214 add      7F78DA14   1     A         gr27=gr24,gr27
  283| 002218 ld       EAFF01A8   1     L8        gr23=#SPILL36(gr31,424)
  283| 00221C add      7F04A214   1     A         gr24=gr4,gr20
  291| 002220 addi     3A930068   1     AI        gr20=gr19,104
  286| 002224 ld       EA7F00A0   1     L8        gr19=#SPILL3(gr31,160)
    0| 002228 andi.    72D60001   1     RN4_R     gr22,cr0=gr22,0,0x1
    0| 00222C add      7F4B8214   1     A         gr26=gr11,gr16
    0| 002230 ld       E9620000   1     L8        gr11=.+CONSTANT_AREA(gr2,0)
  283| 002234 addi     3BAF0070   1     AI        gr29=gr15,112
  283| 002238 ld       EADF00B8   1     L8        gr22=#SPILL6(gr31,184)
  283| 00223C ld       E9FF00B8   1     L8        gr15=#SPILL6(gr31,184)
  283| 002240 addi     3B920070   1     AI        gr28=gr18,112
    0| 002244 rldicl   7B55F842   1     SRL8      gr21=gr26,1
  283| 002248 add      7F44BA14   1     A         gr26=gr4,gr23
  283| 00224C add      7F24EA14   1     A         gr25=gr4,gr29
  283| 002250 add      7EE4E214   1     A         gr23=gr4,gr28
  286| 002254 addi     3A730068   1     AI        gr19=gr19,104
    0| 002258 cmpdi    2CB50000   1     C8        cr1=gr21,0
  283| 00225C add      7ED6DA14   1     A         gr22=gr22,gr27
  283| 002260 lfdx     7C2FDCAE   1     LFL       fp1=dx1bi(gr15,gr27,0)
  283| 002264 lfd      C91AFFE8   1     LFL       fp8=vtmp[].rns13.(gr26,-24)
  283| 002268 lfdx     7C5D24AE   1     LFL       fp2=vtmp[].rns13.(gr29,gr4,0)
  283| 00226C lfd      CB38FFE8   1     LFL       fp25=btmp[].rns15.(gr24,-24)
  283| 002270 lfdx     7C7C24AE   1     LFL       fp3=btmp[].rns15.(gr28,gr4,0)
  291| 002274 add      7FA4A214   1     A         gr29=gr4,gr20
  286| 002278 add      7C849A14   1     A         gr4=gr4,gr19
    0| 00227C lfs      C08B0014   1     LFS       fp4=+CONSTANT_AREA(gr11,20)
    0| 002280 lfs      C0AB0018   1     LFS       fp5=+CONSTANT_AREA(gr11,24)
    0| 002284 lfd      C8CB0020   1     LFL       fp6=+CONSTANT_AREA(gr11,32)
    0| 002288 mtspr    7EA903A6   1     LCTR      ctr=gr21
    0| 00228C bc       418200D8   1     BT        CL.531,cr0,0x4/eq,taken=50%(0,0)
  284| 002290 fsub     FCE24028   1     SFL       fp7=fp2,fp8,fcr
  283| 002294 lfdu     CD990008   1     LFDU      fp12,gr25=vtmp[].rns13.(gr25,8)
  289| 002298 fsub     FD43C828   1     SFL       fp10=fp3,fp25,fcr
  283| 00229C lfdu     CDB70008   1     LFDU      fp13,gr23=btmp[].rns15.(gr23,8)
  291| 0022A0 fmr      FF201890   1     LRFL      fp25=fp3
  283| 0022A4 lfdu     CD360008   1     LFDU      fp9,gr22=dx1bi(gr22,8)
  284| 0022A8 fmul     FFA70072   1     MFL       fp29=fp7,fp1,fcr
  291| 0022AC fmr      FD001090   2     LRFL      fp8=fp2
  285| 0022B0 fsub     FFEC1028   2     SFL       fp31=fp12,fp2,fcr
  289| 0022B4 fmul     FD6102B2   2     MFL       fp11=fp1,fp10,fcr
  290| 0022B8 fsub     FFCD1828   2     SFL       fp30=fp13,fp3,fcr
  291| 0022BC fmr      FC606890   2     LRFL      fp3=fp13
  291| 0022C0 fmr      FC406090   2     LRFL      fp2=fp12
  285| 0022C4 fmul     FDBF0272   2     MFL       fp13=fp31,fp9,fcr
  290| 0022C8 fmul     FFE907B2   2     MFL       fp31=fp9,fp30,fcr
  285| 0022CC fmadd    FD87687A   2     FMA       fp12=fp13,fp7,fp1,fcr
  286| 0022D0 fmul     FCFD0372   2     MFL       fp7=fp29,fp13,fcr
  290| 0022D4 fmadd    FDA1FABA   2     FMA       fp13=fp31,fp1,fp10,fcr
  291| 0022D8 fmul     FF8B07F2   2     MFL       fp28=fp11,fp31,fcr
  291| 0022DC fmr      FC204890   2     LRFL      fp1=fp9
  285| 0022E0 qvfcpsgn 112C2810   1     CPYSFL    fp9=fp5,fp12
  286| 0022E4 fabs     FD406210   1     ABSFL     fp10=fp12
  290| 0022E8 qvfcpsgn 116D2810   1     CPYSFL    fp11=fp5,fp13
  291| 0022EC fabs     FD806A10   1     ABSFL     fp12=fp13
  286| 0022F0 fsub     FDA65028   2     SFL       fp13=fp6,fp10,fcr
  291| 0022F4 fsub     FFE66028   2     SFL       fp31=fp6,fp12,fcr
  286| 0022F8 fneg     FFC03850   2     COMPFL    fp30=fp7
  291| 0022FC fneg     FFA0E050   2     COMPFL    fp29=fp28
  286| 002300 fsel     FCFE392E   2     FSEL      fp7=fp30,fp7,fp4
  291| 002304 fsel     FFDDE12E   2     FSEL      fp30=fp29,fp28,fp4
  286| 002308 fsel     FD4D51AE   2     FSEL      fp10=fp13,fp10,fp6
  291| 00230C fsel     FD9F61AE   2     FSEL      fp12=fp31,fp12,fp6
  286| 002310 fmul     FCE70272   2     MFL       fp7=fp7,fp9,fcr
  291| 002314 fmul     FD3E02F2   2     MFL       fp9=fp30,fp11,fcr
  286| 002318 qvfre    11605030   1     QVFRE     fp11=fp10
  291| 00231C qvfre    11A06030   1     QVFRE     fp13=fp12
  286| 002320 fmsub    FFEA2AF8   1     FMS       fp31=fp5,fp10,fp11,fcr
  291| 002324 fmsub    FFCC2B78   2     FMS       fp30=fp5,fp12,fp13,fcr
  286| 002328 fnmsub   FD6B5FFC   2     FNMS      fp11=fp11,fp11,fp31,fcr
  291| 00232C fnmsub   FDAD6FBC   2     FNMS      fp13=fp13,fp13,fp30,fcr
  286| 002330 fmsub    FFEA2AF8   2     FMS       fp31=fp5,fp10,fp11,fcr
  291| 002334 fmsub    FFCC2B78   2     FMS       fp30=fp5,fp12,fp13,fcr
  286| 002338 fnmsub   FD6B5FFC   2     FNMS      fp11=fp11,fp11,fp31,fcr
  291| 00233C fnmsub   FDAD6FBC   2     FNMS      fp13=fp13,fp13,fp30,fcr
  286| 002340 fmul     FFE702F2   2     MFL       fp31=fp7,fp11,fcr
  291| 002344 fmul     FFC90372   2     MFL       fp30=fp9,fp13,fcr
  286| 002348 fmsub    FCEA3FF8   2     FMS       fp7=fp7,fp10,fp31,fcr
  291| 00234C fmsub    FD2C4FB8   2     FMS       fp9=fp9,fp12,fp30,fcr
  286| 002350 fnmsub   FCEBF9FC   2     FNMS      fp7=fp31,fp11,fp7,fcr
  291| 002354 fnmsub   FD2DF27C   2     FNMS      fp9=fp30,fp13,fp9,fcr
  286| 002358 stfdu    DCE40008   2     STFDU     gr4,dv[].rns18.(gr4,8)=fp7
  291| 00235C stfdu    DD3D0008   1     STFDU     gr29,db[].rns19.(gr29,8)=fp9
    0| 002360 bc       4186030C   1     BT        CL.78,cr1,0x4/eq,taken=20%(20,80)
    0|                              CL.531:
  283| 002364 lfd      C8F90008   1     LFL       fp7=vtmp[].rns13.(gr25,8)
  284| 002368 fsub     FD024028   1     SFL       fp8=fp2,fp8,fcr
  283| 00236C lfd      C9370008   1     LFL       fp9=btmp[].rns15.(gr23,8)
  283| 002370 lfd      C9560008   1     LFL       fp10=dx1bi(gr22,8)
  285| 002374 fsub     FD671028   1     SFL       fp11=fp7,fp2,fcr
  290| 002378 fsub     FDA91828   2     SFL       fp13=fp9,fp3,fcr
  285| 00237C fmul     FD6B02B2   2     MFL       fp11=fp11,fp10,fcr
    0| 002380 bc       42400190   1     BCF       ctr=CL.602,taken=0%(0,100)
    0| 002384 ori      60210000   1     XNOP      
  283|                              CL.79:
  289| 002388 fsub     FF83C828   1     SFL       fp28=fp3,fp25,fcr
  283| 00238C lfdu     CD990010   1     LFDU      fp12,gr25=vtmp[].rns13.(gr25,16)
  290| 002390 fmul     FDAA0372   1     MFL       fp13=fp10,fp13,fcr
  283| 002394 lfdu     CFF70010   1     LFDU      fp31,gr23=btmp[].rns15.(gr23,16)
  284| 002398 fmul     FFC80072   1     MFL       fp30=fp8,fp1,fcr
  285| 00239C fmadd    FF08587A   2     FMA       fp24=fp11,fp8,fp1,fcr
  289| 0023A0 fmul     FFA10732   2     MFL       fp29=fp1,fp28,fcr
  284| 0023A4 fsub     FEE71028   2     SFL       fp23=fp7,fp2,fcr
  290| 0023A8 fmadd    FD016F3A   2     FMA       fp8=fp13,fp1,fp28,fcr
  283| 0023AC lfdu     CC360010   1     LFDU      fp1,gr22=dx1bi(gr22,16)
  285| 0023B0 fsub     FF4C3828   1     SFL       fp26=fp12,fp7,fcr
  285| 0023B4 qvfcpsgn 13982810   1     CPYSFL    fp28=fp5,fp24
  290| 0023B8 fsub     FF3F4828   1     SFL       fp25=fp31,fp9,fcr
  286| 0023BC fabs     FEC0C210   2     ABSFL     fp22=fp24
  290| 0023C0 qvfcpsgn 13682810   1     CPYSFL    fp27=fp5,fp8
  289| 0023C4 fsub     FC491828   1     SFL       fp2=fp9,fp3,fcr
  285| 0023C8 fmul     FF5A0072   2     MFL       fp26=fp26,fp1,fcr
  291| 0023CC fabs     FD004210   2     ABSFL     fp8=fp8
  290| 0023D0 fmul     FF210672   2     MFL       fp25=fp1,fp25,fcr
  286| 0023D4 fsub     FE86B028   2     SFL       fp20=fp6,fp22,fcr
  291| 0023D8 fsub     FEA64028   2     SFL       fp21=fp6,fp8,fcr
  284| 0023DC fmul     FF1702B2   2     MFL       fp24=fp23,fp10,fcr
  285| 0023E0 fmadd    FC77D2BA   2     FMA       fp3=fp26,fp23,fp10,fcr
  289| 0023E4 fmul     FEEA00B2   2     MFL       fp23=fp10,fp2,fcr
  290| 0023E8 fmadd    FC4AC8BA   2     FMA       fp2=fp25,fp10,fp2,fcr
  283| 0023EC lfd      C9560008   1     LFL       fp10=dx1bi(gr22,8)
  286| 0023F0 fsel     FED4B1AE   1     FSEL      fp22=fp20,fp22,fp6
  291| 0023F4 fsel     FEB541AE   2     FSEL      fp21=fp21,fp8,fp6
  285| 0023F8 qvfcpsgn 12832810   1     CPYSFL    fp20=fp5,fp3
  286| 0023FC fabs     FE601A10   1     ABSFL     fp19=fp3
  290| 002400 qvfcpsgn 12422810   1     CPYSFL    fp18=fp5,fp2
  286| 002404 fsub     FE069828   1     SFL       fp16=fp6,fp19,fcr
  291| 002408 fabs     FE201210   2     ABSFL     fp17=fp2
  284| 00240C fsub     FD0C3828   2     SFL       fp8=fp12,fp7,fcr
  283| 002410 lfd      C8F90008   1     LFL       fp7=vtmp[].rns13.(gr25,8)
  291| 002414 fmr      FC406090   1     LRFL      fp2=fp12
  286| 002418 qvfre    1180B030   1     QVFRE     fp12=fp22
  291| 00241C fmr      FC60F890   1     LRFL      fp3=fp31
  286| 002420 fsel     FFF099AE   2     FSEL      fp31=fp16,fp19,fp6
  291| 002424 qvfre    1260A830   1     QVFRE     fp19=fp21
  291| 002428 fsub     FDE68828   1     SFL       fp15=fp6,fp17,fcr
  286| 00242C fmul     FD7E02F2   2     MFL       fp11=fp30,fp11,fcr
  291| 002430 fmul     FDBD0372   2     MFL       fp13=fp29,fp13,fcr
  286| 002434 fmul     FFB806B2   2     MFL       fp29=fp24,fp26,fcr
  286| 002438 fmsub    FF562B38   2     FMS       fp26=fp5,fp22,fp12,fcr
  291| 00243C fmsub    FE152CF8   2     FMS       fp16=fp5,fp21,fp19,fcr
  291| 002440 fsel     FFCF89AE   2     FSEL      fp30=fp15,fp17,fp6
  286| 002444 qvfre    1300F830   1     QVFRE     fp24=fp31
  291| 002448 fmul     FEF70672   1     MFL       fp23=fp23,fp25,fcr
  291| 00244C fmr      FF204890   2     LRFL      fp25=fp9
  283| 002450 lfd      C9370008   1     LFL       fp9=btmp[].rns15.(gr23,8)
  286| 002454 fnmsub   FD8C66BC   1     FNMS      fp12=fp12,fp12,fp26,fcr
  286| 002458 fneg     FF405850   2     COMPFL    fp26=fp11
  291| 00245C fnmsub   FE739C3C   2     FNMS      fp19=fp19,fp19,fp16,fcr
  286| 002460 fsel     FE1A592E   2     FSEL      fp16=fp26,fp11,fp4
  291| 002464 fneg     FD606850   2     COMPFL    fp11=fp13
  291| 002468 qvfre    1220F030   1     QVFRE     fp17=fp30
  291| 00246C fsel     FD6B692E   1     FSEL      fp11=fp11,fp13,fp4
  286| 002470 fneg     FF40E850   2     COMPFL    fp26=fp29
  290| 002474 fsub     FDA91828   2     SFL       fp13=fp9,fp3,fcr
  286| 002478 fsel     FFBAE92E   2     FSEL      fp29=fp26,fp29,fp4
  286| 00247C fmsub    FF5F2E38   2     FMS       fp26=fp5,fp31,fp24,fcr
  286| 002480 fmul     FF900732   2     MFL       fp28=fp16,fp28,fcr
  291| 002484 fmul     FF6B06F2   2     MFL       fp27=fp11,fp27,fcr
  291| 002488 fmsub    FD7E2C78   2     FMS       fp11=fp5,fp30,fp17,fcr
  291| 00248C fneg     FE00B850   2     COMPFL    fp16=fp23
  286| 002490 fmul     FFBD0532   2     MFL       fp29=fp29,fp20,fcr
  291| 002494 fsel     FEF0B92E   2     FSEL      fp23=fp16,fp23,fp4
  286| 002498 fnmsub   FF58C6BC   2     FNMS      fp26=fp24,fp24,fp26,fcr
  286| 00249C fmsub    FF162B38   2     FMS       fp24=fp5,fp22,fp12,fcr
  291| 0024A0 fmsub    FE952CF8   2     FMS       fp20=fp5,fp21,fp19,fcr
  291| 0024A4 fnmsub   FD718AFC   2     FNMS      fp11=fp17,fp17,fp11,fcr
  291| 0024A8 fmul     FEF704B2   2     MFL       fp23=fp23,fp18,fcr
  286| 0024AC fmsub    FE5F2EB8   2     FMS       fp18=fp5,fp31,fp26,fcr
  286| 0024B0 fnmsub   FD8C663C   2     FNMS      fp12=fp12,fp12,fp24,fcr
  291| 0024B4 fnmsub   FF139D3C   2     FNMS      fp24=fp19,fp19,fp20,fcr
  291| 0024B8 fmsub    FE9E2AF8   2     FMS       fp20=fp5,fp30,fp11,fcr
  285| 0024BC fsub     FE671028   2     SFL       fp19=fp7,fp2,fcr
  286| 0024C0 fnmsub   FF5AD4BC   2     FNMS      fp26=fp26,fp26,fp18,fcr
  286| 0024C4 fmul     FE5C0332   2     MFL       fp18=fp28,fp12,fcr
  291| 0024C8 fmul     FE3B0632   2     MFL       fp17=fp27,fp24,fcr
  291| 0024CC fnmsub   FE8B5D3C   2     FNMS      fp20=fp11,fp11,fp20,fcr
  285| 0024D0 fmul     FD7302B2   2     MFL       fp11=fp19,fp10,fcr
  286| 0024D4 fmul     FE7D06B2   2     MFL       fp19=fp29,fp26,fcr
  286| 0024D8 fmsub    FF96E4B8   2     FMS       fp28=fp28,fp22,fp18,fcr
  291| 0024DC fmsub    FF75DC78   2     FMS       fp27=fp27,fp21,fp17,fcr
  291| 0024E0 fmul     FED70532   2     MFL       fp22=fp23,fp20,fcr
  286| 0024E4 fmsub    FFFFECF8   2     FMS       fp31=fp29,fp31,fp19,fcr
  286| 0024E8 fnmsub   FD8C973C   2     FNMS      fp12=fp18,fp12,fp28,fcr
  291| 0024EC fnmsub   FFB88EFC   2     FNMS      fp29=fp17,fp24,fp27,fcr
  291| 0024F0 fmsub    FFDEBDB8   2     FMS       fp30=fp23,fp30,fp22,fcr
  286| 0024F4 fnmsub   FFFA9FFC   2     FNMS      fp31=fp19,fp26,fp31,fcr
  286| 0024F8 stfd     D9840008   1     STFL      dv[].rns18.(gr4,8)=fp12
  291| 0024FC fnmsub   FD94B7BC   1     FNMS      fp12=fp22,fp20,fp30,fcr
  291| 002500 stfd     DBBD0008   1     STFL      db[].rns19.(gr29,8)=fp29
  286| 002504 stfdu    DFE40010   1     STFDU     gr4,dv[].rns18.(gr4,16)=fp31
  291| 002508 stfdu    DD9D0010   1     STFDU     gr29,db[].rns19.(gr29,16)=fp12
    0| 00250C bc       4200FE7C   1     BCT       ctr=CL.79,taken=100%(100,0)
    0|                              CL.602:
  283| 002510 lfdu     CFF90010   1     LFDU      fp31,gr25=vtmp[].rns13.(gr25,16)
  284| 002514 fsub     FFC71028   1     SFL       fp30=fp7,fp2,fcr
  283| 002518 lfdu     CF970010   1     LFDU      fp28,gr23=btmp[].rns15.(gr23,16)
  290| 00251C fmul     FD8A0372   1     MFL       fp12=fp10,fp13,fcr
  283| 002520 lfdu     CC560010   1     LFDU      fp2,gr22=dx1bi(gr22,16)
  289| 002524 fsub     FFA3C828   1     SFL       fp29=fp3,fp25,fcr
  289| 002528 fsub     FC691828   2     SFL       fp3=fp9,fp3,fcr
  285| 00252C fsub     FDBF3828   2     SFL       fp13=fp31,fp7,fcr
  285| 002530 fmadd    FCE8587A   2     FMA       fp7=fp11,fp8,fp1,fcr
  290| 002534 fsub     FFFC4828   2     SFL       fp31=fp28,fp9,fcr
  284| 002538 fmul     FF480072   2     MFL       fp26=fp8,fp1,fcr
  290| 00253C fmadd    FD21677A   2     FMA       fp9=fp12,fp1,fp29,fcr
  289| 002540 fmul     FF210772   2     MFL       fp25=fp1,fp29,fcr
  285| 002544 fmul     FDAD00B2   2     MFL       fp13=fp13,fp2,fcr
  285| 002548 qvfcpsgn 10272810   1     CPYSFL    fp1=fp5,fp7
  290| 00254C fmul     FFE207F2   1     MFL       fp31=fp2,fp31,fcr
  286| 002550 fabs     FD003A10   2     ABSFL     fp8=fp7
  290| 002554 qvfcpsgn 10492810   1     CPYSFL    fp2=fp5,fp9
  291| 002558 fabs     FD204A10   1     ABSFL     fp9=fp9
  285| 00255C fmadd    FCFE6ABA   2     FMA       fp7=fp13,fp30,fp10,fcr
  289| 002560 fmul     FFAA00F2   2     MFL       fp29=fp10,fp3,fcr
  290| 002564 fmadd    FF8AF8FA   2     FMA       fp28=fp31,fp10,fp3,fcr
  286| 002568 fsub     FEA64028   2     SFL       fp21=fp6,fp8,fcr
  291| 00256C fsub     FEC64828   2     SFL       fp22=fp6,fp9,fcr
  284| 002570 fmul     FFDE02B2   2     MFL       fp30=fp30,fp10,fcr
  285| 002574 qvfcpsgn 10672810   1     CPYSFL    fp3=fp5,fp7
  286| 002578 fabs     FF003A10   1     ABSFL     fp24=fp7
  290| 00257C qvfcpsgn 10FC2810   1     CPYSFL    fp7=fp5,fp28
  291| 002580 fabs     FF80E210   1     ABSFL     fp28=fp28
  286| 002584 fsub     FEE6C028   2     SFL       fp23=fp6,fp24,fcr
  291| 002588 fsub     FF66E028   2     SFL       fp27=fp6,fp28,fcr
  286| 00258C fsel     FD1541AE   2     FSEL      fp8=fp21,fp8,fp6
  291| 002590 fsel     FD3649AE   2     FSEL      fp9=fp22,fp9,fp6
  286| 002594 fmul     FD5A02F2   2     MFL       fp10=fp26,fp11,fcr
  291| 002598 fmul     FD790332   2     MFL       fp11=fp25,fp12,fcr
  286| 00259C fsel     FD97C1AE   2     FSEL      fp12=fp23,fp24,fp6
  291| 0025A0 fsel     FCDBE1AE   2     FSEL      fp6=fp27,fp28,fp6
  286| 0025A4 qvfre    12A04030   1     QVFRE     fp21=fp8
  291| 0025A8 qvfre    13004830   1     QVFRE     fp24=fp9
  286| 0025AC fmul     FDBE0372   1     MFL       fp13=fp30,fp13,fcr
  291| 0025B0 fmul     FFFD07F2   2     MFL       fp31=fp29,fp31,fcr
  286| 0025B4 qvfre    13C06030   1     QVFRE     fp30=fp12
  291| 0025B8 qvfre    13A03030   1     QVFRE     fp29=fp6
  286| 0025BC fmsub    FEC82D78   1     FMS       fp22=fp5,fp8,fp21,fcr
  291| 0025C0 fmsub    FEE92E38   2     FMS       fp23=fp5,fp9,fp24,fcr
  286| 0025C4 fneg     FF805050   2     COMPFL    fp28=fp10
  291| 0025C8 fneg     FF605850   2     COMPFL    fp27=fp11
  286| 0025CC fmsub    FF4C2FB8   2     FMS       fp26=fp5,fp12,fp30,fcr
  291| 0025D0 fmsub    FF262F78   2     FMS       fp25=fp5,fp6,fp29,fcr
  286| 0025D4 fnmsub   FEB5ADBC   2     FNMS      fp21=fp21,fp21,fp22,fcr
  291| 0025D8 fnmsub   FF18C5FC   2     FNMS      fp24=fp24,fp24,fp23,fcr
  286| 0025DC fneg     FEE06850   2     COMPFL    fp23=fp13
  291| 0025E0 fneg     FEC0F850   2     COMPFL    fp22=fp31
  286| 0025E4 fnmsub   FFDEF6BC   2     FNMS      fp30=fp30,fp30,fp26,fcr
  291| 0025E8 fnmsub   FFBDEE7C   2     FNMS      fp29=fp29,fp29,fp25,fcr
  286| 0025EC fsel     FD5C512E   2     FSEL      fp10=fp28,fp10,fp4
  291| 0025F0 fsel     FD7B592E   2     FSEL      fp11=fp27,fp11,fp4
  286| 0025F4 fmsub    FF882D78   2     FMS       fp28=fp5,fp8,fp21,fcr
  286| 0025F8 fsel     FDB7692E   2     FSEL      fp13=fp23,fp13,fp4
  291| 0025FC fsel     FC96F92E   2     FSEL      fp4=fp22,fp31,fp4
  291| 002600 fmsub    FFE92E38   2     FMS       fp31=fp5,fp9,fp24,fcr
  286| 002604 fmsub    FF6C2FB8   2     FMS       fp27=fp5,fp12,fp30,fcr
  291| 002608 fmsub    FCA62F78   2     FMS       fp5=fp5,fp6,fp29,fcr
  286| 00260C fmul     FC2A0072   2     MFL       fp1=fp10,fp1,fcr
  286| 002610 fnmsub   FD55AF3C   2     FNMS      fp10=fp21,fp21,fp28,fcr
  291| 002614 fmul     FC4B00B2   2     MFL       fp2=fp11,fp2,fcr
  291| 002618 fnmsub   FD78C7FC   2     FNMS      fp11=fp24,fp24,fp31,fcr
  286| 00261C fmul     FC6D00F2   2     MFL       fp3=fp13,fp3,fcr
  291| 002620 fmul     FC8401F2   2     MFL       fp4=fp4,fp7,fcr
  286| 002624 fnmsub   FCFEF6FC   2     FNMS      fp7=fp30,fp30,fp27,fcr
  291| 002628 fnmsub   FCBDE97C   2     FNMS      fp5=fp29,fp29,fp5,fcr
  286| 00262C fmul     FDA102B2   2     MFL       fp13=fp1,fp10,fcr
  291| 002630 fmul     FFE202F2   2     MFL       fp31=fp2,fp11,fcr
  286| 002634 fmul     FFC301F2   2     MFL       fp30=fp3,fp7,fcr
  291| 002638 fmul     FFA40172   2     MFL       fp29=fp4,fp5,fcr
  286| 00263C fmsub    FC280B78   2     FMS       fp1=fp1,fp8,fp13,fcr
  291| 002640 fmsub    FC4917F8   2     FMS       fp2=fp2,fp9,fp31,fcr
  286| 002644 fmsub    FC6C1FB8   2     FMS       fp3=fp3,fp12,fp30,fcr
  291| 002648 fmsub    FC862778   2     FMS       fp4=fp4,fp6,fp29,fcr
  286| 00264C fnmsub   FC2A687C   2     FNMS      fp1=fp13,fp10,fp1,fcr
  291| 002650 fnmsub   FC4BF8BC   2     FNMS      fp2=fp31,fp11,fp2,fcr
  286| 002654 fnmsub   FC67F0FC   2     FNMS      fp3=fp30,fp7,fp3,fcr
  291| 002658 fnmsub   FC85E93C   2     FNMS      fp4=fp29,fp5,fp4,fcr
  286| 00265C stfd     D8240008   1     STFL      dv[].rns18.(gr4,8)=fp1
  291| 002660 stfd     D85D0008   1     STFL      db[].rns19.(gr29,8)=fp2
  286| 002664 stfdu    DC640010   1     STFDU     gr4,dv[].rns18.(gr4,16)=fp3
  291| 002668 stfdu    DC9D0010   1     STFDU     gr29,db[].rns19.(gr29,16)=fp4
  294|                              CL.78:
  299| 00266C bc       409904BC   1     BF        CL.82,cr6,0x2/gt,taken=20%(20,80)
  306| 002670 std      F81F0170   1     ST8       #SPILL29(gr31,368)=gr0
  313| 002674 ld       EA5F0188   1     L8        gr18=#SPILL32(gr31,392)
  306| 002678 ld       EA1F0160   1     L8        gr16=#SPILL27(gr31,352)
  299| 00267C ld       E9FF0180   1     L8        gr15=#SPILL31(gr31,384)
  299| 002680 rldicr   79C41F24   1     SLL8      gr4=gr14,3
    0| 002684 ld       EA820000   1     L8        gr20=.+CONSTANT_AREA(gr2,0)
  299| 002688 addi     3A24FFF8   1     AI        gr17=gr4,-8
  313| 00268C addi     39720070   1     AI        gr11=gr18,112
  299| 002690 ld       EA5F01A0   1     L8        gr18=#SPILL35(gr31,416)
  306| 002694 addi     3BB00070   1     AI        gr29=gr16,112
  299| 002698 ld       EA1F01C0   1     L8        gr16=#SPILL39(gr31,448)
  299| 00269C add      7EEF8A14   1     A         gr23=gr15,gr17
  299| 0026A0 ld       E9FF00D0   1     L8        gr15=#SPILL9(gr31,208)
  306| 0026A4 add      7FA4EA14   1     A         gr29=gr4,gr29
  299| 0026A8 addi     3AD20070   1     AI        gr22=gr18,112
  299| 0026AC ld       EA5F00A0   1     L8        gr18=#SPILL3(gr31,160)
  299| 0026B0 addi     3AB00070   1     AI        gr21=gr16,112
  299| 0026B4 ld       EA1F0098   1     L8        gr16=#SPILL2(gr31,152)
  299| 0026B8 addi     3B2F0070   1     AI        gr25=gr15,112
  313| 0026BC add      7D645A14   1     A         gr11=gr4,gr11
  299| 0026C0 add      7F64B214   1     A         gr27=gr4,gr22
  299| 0026C4 addi     3B120070   1     AI        gr24=gr18,112
  299| 0026C8 add      7F44AA14   1     A         gr26=gr4,gr21
  299| 0026CC add      7F90BA14   1     A         gr28=gr16,gr23
  299| 0026D0 add      7F24CA14   1     A         gr25=gr4,gr25
  299| 0026D4 add      7F04C214   1     A         gr24=gr4,gr24
  306| 0026D8 lfdu     CCFD0008   1     LFDU      fp7,gr29=valp[].rns11.(gr29,8)
  313| 0026DC lfdu     CCCB0008   1     LFDU      fp6,gr11=valm[].rns12.(gr11,8)
  299| 0026E0 lfdu     CC380008   1     LFDU      fp1,gr24=dv[].rns18.(gr24,8)
  299| 0026E4 lfdu     CC5C0008   1     LFDU      fp2,gr28=dx1a(gr28,8)
  299| 0026E8 lfdu     CC7B0008   1     LFDU      fp3,gr27=vtmp[].rns13.(gr27,8)
  299| 0026EC lfdu     CC990008   1     LFDU      fp4,gr25=db[].rns19.(gr25,8)
  299| 0026F0 lfdu     CCBA0008   1     LFDU      fp5,gr26=btmp[].rns15.(gr26,8)
  306| 0026F4 fmul     FF2001F2   1     MFL       fp25=fp0,fp7,fcr
  299| 0026F8 ld       E9FF00A8   1     L8        gr15=#SPILL4(gr31,168)
  313| 0026FC fmul     FCC001B2   1     MFL       fp6=fp0,fp6,fcr
  299| 002700 lfdx     7FB0BCAE   2     LFL       fp29=dx1a(gr16,gr23,0)
  307| 002704 fnmsub   FF62187C   1     FNMS      fp27=fp3,fp2,fp1,fcr
  299| 002708 ld       EAFF00D8   1     L8        gr23=#SPILL10(gr31,216)
  309| 00270C fnmsub   FF42293C   1     FNMS      fp26=fp5,fp2,fp4,fcr
  299| 002710 addi     3A64FFF0   1     AI        gr19=gr4,-16
    0| 002714 lfs      C0F40000   1     LFS       fp7=+CONSTANT_AREA(gr20,0)
  299| 002718 lfdx     7D0F9CAE   1     LFL       fp8=dv[].rns18.(gr15,gr19,0)
  307| 00271C fnmsub   FD59D87C   1     FNMS      fp10=fp27,fp25,fp1,fcr
  299| 002720 lfdx     7FD624AE   1     LFL       fp30=vtmp[].rns13.(gr22,gr4,0)
  309| 002724 fnmsub   FD79D13C   1     FNMS      fp11=fp26,fp25,fp4,fcr
  299| 002728 lfdx     7D379CAE   1     LFL       fp9=db[].rns19.(gr23,gr19,0)
  314| 00272C fnmsub   FF61D9BC   1     FNMS      fp27=fp27,fp1,fp6,fcr
  299| 002730 lfdx     7F9524AE   1     LFL       fp28=btmp[].rns15.(gr21,gr4,0)
  316| 002734 fnmsub   FF44D1BC   1     FNMS      fp26=fp26,fp4,fp6,fcr
  306| 002738 qvfcpsgn 11993810   1     CPYSFL    fp12=fp7,fp25
  307| 00273C fsub     FDA76028   1     SFL       fp13=fp7,fp12,fcr
  313| 002740 qvfcpsgn 13E63810   1     CPYSFL    fp31=fp7,fp6
  300| 002744 fmadd    FFDDF23A   1     FMA       fp30=fp30,fp29,fp8,fcr
    0| 002748 ld       EA3F0210   1     L8        gr17=#SPILL49(gr31,528)
  302| 00274C fmadd    FFBDE27A   1     FMA       fp29=fp28,fp29,fp9,fcr
  316| 002750 ld       EABF01E8   1     L8        gr21=#SPILL44(gr31,488)
  314| 002754 fsub     FF87F828   1     SFL       fp28=fp7,fp31,fcr
  314| 002758 ld       EA5F01D8   1     L8        gr18=#SPILL42(gr31,472)
  307| 00275C fnmsub   FF08F67C   1     FNMS      fp24=fp30,fp8,fp25,fcr
  309| 002760 ld       EA1F01E0   1     L8        gr16=#SPILL43(gr31,480)
  309| 002764 fnmsub   FF29EE7C   1     FNMS      fp25=fp29,fp9,fp25,fcr
  307| 002768 ld       EA7F01D0   1     L8        gr19=#SPILL41(gr31,464)
  314| 00276C fnmsub   FD08F1BC   1     FNMS      fp8=fp30,fp8,fp6,fcr
    0| 002770 subfic   22EE0001   1     SFI       gr23=1,gr14,ca"
  316| 002774 fnmsub   FCC9E9BC   1     FNMS      fp6=fp29,fp9,fp6,fcr
    0| 002778 add      7DF1BA14   1     A         gr15=gr17,gr23
  307| 00277C fadd     FD2C382A   1     AFL       fp9=fp12,fp7,fcr
  306| 002780 ld       E8020000   1     L8        gr0=.+CONSTANT_AREA(gr2,0)
  314| 002784 fadd     FD9F382A   1     AFL       fp12=fp31,fp7,fcr
    0| 002788 mtspr    7DE903A6   1     LCTR      ctr=gr15
  307| 00278C fmul     FD4D02B2   1     MFL       fp10=fp13,fp10,fcr
  316| 002790 addi     3AD50070   1     AI        gr22=gr21,112
  309| 002794 fmul     FD6D02F2   1     MFL       fp11=fp13,fp11,fcr
  306| 002798 std      F81F0088   1     ST8       #SPILL0(gr31,136)=gr0
  314| 00279C fmul     FFFC06F2   1     MFL       fp31=fp28,fp27,fcr
  314| 0027A0 addi     3A920070   1     AI        gr20=gr18,112
  316| 0027A4 fmul     FFDC06B2   1     MFL       fp30=fp28,fp26,fcr
  309| 0027A8 addi     3A500070   1     AI        gr18=gr16,112
  307| 0027AC fmadd    FDA9563A   1     FMA       fp13=fp10,fp9,fp24,fcr
  307| 0027B0 addi     3A130070   1     AI        gr16=gr19,112
  309| 0027B4 fmadd    FD495E7A   1     FMA       fp10=fp11,fp9,fp25,fcr
  316| 0027B8 add      7EE4B214   1     A         gr23=gr4,gr22
  314| 0027BC fmadd    FD0CFA3A   1     FMA       fp8=fp31,fp12,fp8,fcr
  314| 0027C0 add      7EA4A214   1     A         gr21=gr4,gr20
  316| 0027C4 fmadd    FD6CF1BA   1     FMA       fp11=fp30,fp12,fp6,fcr
  309| 0027C8 add      7E649214   1     A         gr19=gr4,gr18
  307| 0027CC add      7E248214   1     A         gr17=gr4,gr16
  316| 0027D0 or       7EF6BB78   1     LR        gr22=gr23
  314| 0027D4 or       7EB4AB78   1     LR        gr20=gr21
  309| 0027D8 or       7E729B78   1     LR        gr18=gr19
  307| 0027DC or       7E308B78   1     LR        gr16=gr17
  306| 0027E0 ld       E81F0170   1     L8        gr0=#SPILL29(gr31,368)
  306| 0027E4 bc       424000BC   1     BCF       ctr=CL.512,taken=0%(0,100)
    0| 0027E8 ori      60210000   1     XNOP      
    0| 0027EC ori      60210000   1     XNOP      
  306|                              CL.513:
  299| 0027F0 lfdu     CCD80008   1     LFDU      fp6,gr24=dv[].rns18.(gr24,8)
  300| 0027F4 fmadd    FFC2187A   1     FMA       fp30=fp3,fp2,fp1,fcr
  307| 0027F8 stfdu    DDB00008   2     STFDU     gr16,vpal[].rns21.(gr16,8)=fp13
  309| 0027FC stfdu    DD520008   1     STFDU     gr18,bpal[].rns22.(gr18,8)=fp10
  314| 002800 stfdu    DD140008   1     STFDU     gr20,vmal[].rns23.(gr20,8)=fp8
  316| 002804 stfdu    DD760008   1     STFDU     gr22,bmal[].rns24.(gr22,8)=fp11
  306| 002808 lfdu     CD7D0008   1     LFDU      fp11,gr29=valp[].rns11.(gr29,8)
  299| 00280C lfdu     CD9C0008   1     LFDU      fp12,gr28=dx1a(gr28,8)
  313| 002810 lfdu     CD4B0008   1     LFDU      fp10,gr11=valm[].rns12.(gr11,8)
  299| 002814 lfdu     CC7B0008   1     LFDU      fp3,gr27=vtmp[].rns13.(gr27,8)
  299| 002818 lfdu     CD190008   1     LFDU      fp8,gr25=db[].rns19.(gr25,8)
  299| 00281C lfdu     CD3A0008   1     LFDU      fp9,gr26=btmp[].rns15.(gr26,8)
  302| 002820 fmadd    FFA2293A   1     FMA       fp29=fp5,fp2,fp4,fcr
  306| 002824 fmul     FCA002F2   2     MFL       fp5=fp0,fp11,fcr
  316| 002828 fmr      FC406090   2     LRFL      fp2=fp12
  313| 00282C fmul     FD4002B2   2     MFL       fp10=fp0,fp10,fcr
  307| 002830 fnmsub   FD6C19BC   2     FNMS      fp11=fp3,fp12,fp6,fcr
  309| 002834 fnmsub   FD8C4A3C   2     FNMS      fp12=fp9,fp12,fp8,fcr
  307| 002838 fnmsub   FDA1F17C   2     FNMS      fp13=fp30,fp1,fp5,fcr
  309| 00283C fnmsub   FFE4E97C   2     FNMS      fp31=fp29,fp4,fp5,fcr
  314| 002840 fnmsub   FFC1F2BC   2     FNMS      fp30=fp30,fp1,fp10,fcr
  316| 002844 fnmsub   FFA4EABC   2     FNMS      fp29=fp29,fp4,fp10,fcr
  306| 002848 qvfcpsgn 10253810   1     CPYSFL    fp1=fp7,fp5
  313| 00284C qvfcpsgn 108A3810   1     CPYSFL    fp4=fp7,fp10
  307| 002850 fsub     FF870828   1     SFL       fp28=fp7,fp1,fcr
  314| 002854 fsub     FF672028   2     SFL       fp27=fp7,fp4,fcr
  307| 002858 fnmsub   FF4559BC   2     FNMS      fp26=fp11,fp5,fp6,fcr
  309| 00285C fnmsub   FCA5623C   2     FNMS      fp5=fp12,fp5,fp8,fcr
  314| 002860 fnmsub   FD665ABC   2     FNMS      fp11=fp11,fp6,fp10,fcr
  316| 002864 fnmsub   FD8862BC   2     FNMS      fp12=fp12,fp8,fp10,fcr
  307| 002868 fadd     FD41382A   2     AFL       fp10=fp1,fp7,fcr
  314| 00286C fadd     FF24382A   2     AFL       fp25=fp4,fp7,fcr
  307| 002870 fmul     FF5C06B2   2     MFL       fp26=fp28,fp26,fcr
  309| 002874 fmul     FCBC0172   2     MFL       fp5=fp28,fp5,fcr
  314| 002878 fmul     FD7B02F2   2     MFL       fp11=fp27,fp11,fcr
  316| 00287C fmul     FD9B0332   2     MFL       fp12=fp27,fp12,fcr
  316| 002880 fmr      FC804090   2     LRFL      fp4=fp8
  316| 002884 fmr      FC203090   2     LRFL      fp1=fp6
  307| 002888 fmadd    FDAAD37A   2     FMA       fp13=fp26,fp10,fp13,fcr
  309| 00288C fmadd    FD4A2FFA   2     FMA       fp10=fp5,fp10,fp31,fcr
  314| 002890 fmadd    FD195FBA   2     FMA       fp8=fp11,fp25,fp30,fcr
  316| 002894 fmadd    FD79677A   2     FMA       fp11=fp12,fp25,fp29,fcr
  316| 002898 fmr      FCA04890   2     LRFL      fp5=fp9
    0| 00289C bc       4200FF54   1     BCT       ctr=CL.513,taken=100%(100,0)
  306|                              CL.512:
  307| 0028A0 stfdu    DDB00008   1     STFDU     gr16,vpal[].rns21.(gr16,8)=fp13
  324| 0028A4 ld       EBBF0140   1     L8        gr29=#SPILL23(gr31,320)
    0| 0028A8 ld       EB9F0230   1     L8        gr28=#SPILL53(gr31,560)
  324| 0028AC ld       EB0504D0   1     L8        gr24=<s227:d1232:l8>(gr5,1232)
  324| 0028B0 ld       EB5F0118   1     L8        gr26=#SPILL18(gr31,280)
  324| 0028B4 ld       EB2504E8   1     L8        gr25=<s227:d1256:l8>(gr5,1256)
  324| 0028B8 addi     3A04FFF8   1     AI        gr16=gr4,-8
  324| 0028BC addi     397D0070   1     AI        gr11=gr29,112
    0| 0028C0 rldicl   79FDF842   1     SRL8      gr29=gr15,1
  324| 0028C4 ld       E9FF0200   1     L8        gr15=#SPILL47(gr31,512)
    0| 0028C8 subf     7C63E050   1     S         gr3=gr28,gr3
  309| 0028CC stfdu    DD520008   1     STFDU     gr18,bpal[].rns22.(gr18,8)=fp10
  324| 0028D0 addi     3B7A0070   1     AI        gr27=gr26,112
  323| 0028D4 ld       EB5F00F8   1     L8        gr26=#SPILL14(gr31,248)
  324| 0028D8 add      7F188214   1     A         gr24=gr24,gr16
  324| 0028DC addi     3B8F0070   1     AI        gr28=gr15,112
    0| 0028E0 andi.    70630001   1     RN4_R     gr3,cr0=gr3,0,0x1
  324| 0028E4 add      7C64E214   1     A         gr3=gr4,gr28
  324| 0028E8 add      7F84DA14   1     A         gr28=gr4,gr27
  324| 0028EC add      7F78CA14   1     A         gr27=gr24,gr25
    0| 0028F0 ld       EB3F0088   1     L8        gr25=#SPILL0(gr31,136)
  324| 0028F4 add      7D645A14   1     A         gr11=gr4,gr11
  314| 0028F8 stfdu    DD140008   1     STFDU     gr20,vmal[].rns23.(gr20,8)=fp8
  323| 0028FC addi     3B5A0070   1     AI        gr26=gr26,112
    0| 002900 cmpdi    2CBD0000   1     C8        cr1=gr29,0
  316| 002904 stfdu    DD760008   1     STFDU     gr22,bmal[].rns24.(gr22,8)=fp11
  323| 002908 add      7C84D214   1     A         gr4=gr4,gr26
    0| 00290C lfs      C0390018   1     LFS       fp1=+CONSTANT_AREA(gr25,24)
  324| 002910 lfs      C0590028   1     LFS       fp2=+CONSTANT_AREA(gr25,40)
    0| 002914 mtspr    7FA903A6   1     LCTR      ctr=gr29
    0| 002918 bc       41820068   1     BT        CL.444,cr0,0x4/eq,taken=50%(0,0)
  324| 00291C lfdu     CC770008   1     LFDU      fp3,gr23=bmal[].rns24.(gr23,8)
  324| 002920 lfdu     CC8B0008   1     LFDU      fp4,gr11=srdmi[].rns10.(gr11,8)
  324| 002924 lfdu     CCB30008   1     LFDU      fp5,gr19=bpal[].rns22.(gr19,8)
  324| 002928 lfdu     CCDC0008   1     LFDU      fp6,gr28=srdpi[].rns9.(gr28,8)
  324| 00292C lfdu     CD110008   1     LFDU      fp8,gr17=vpal[].rns21.(gr17,8)
  324| 002930 lfdu     CD350008   1     LFDU      fp9,gr21=vmal[].rns23.(gr21,8)
  323| 002934 lfdu     CD440008   1     LFDU      fp10,gr4=bave[].rns7.(gr4,8)
  324| 002938 lfdu     CD7B0008   1     LFDU      fp11,gr27=g31a(gr27,8)
  324| 00293C fmul     FC630132   1     MFL       fp3=fp3,fp4,fcr
  324| 002940 fadd     FC86202A   2     AFL       fp4=fp6,fp4,fcr
  324| 002944 fsub     FD084828   2     SFL       fp8=fp8,fp9,fcr
  323| 002948 qvfcpsgn 112A0810   1     CPYSFL    fp9=fp1,fp10
  324| 00294C fmadd    FC6519BA   1     FMA       fp3=fp3,fp5,fp6,fcr
  324| 002950 fre      FCA02030   1     FRED      fp5=fp4
  324| 002954 fnmsub   FC84097C   1     FNMS      fp4=fp1,fp4,fp5,fcr
  324| 002958 fmadd    FC691A3A   2     FMA       fp3=fp3,fp9,fp8,fcr
  324| 00295C fmadd    FCC4393A   2     FMA       fp6=fp7,fp4,fp4,fcr
  324| 002960 fmul     FC6302F2   2     MFL       fp3=fp3,fp11,fcr
  324| 002964 fmadd    FC4611BA   2     FMA       fp2=fp2,fp6,fp6,fcr
  324| 002968 fmul     FCA30172   2     MFL       fp5=fp3,fp5,fcr
  324| 00296C fmadd    FC65293A   2     FMA       fp3=fp5,fp5,fp4,fcr
  324| 002970 fmul     FC6400F2   2     MFL       fp3=fp4,fp3,fcr
  324| 002974 fmadd    FC4228FA   2     FMA       fp2=fp5,fp2,fp3,fcr
  324| 002978 stfdu    DC430008   2     STFDU     gr3,bstar[].rns25.(gr3,8)=fp2
    0| 00297C bc       418601AC   1     BT        CL.82,cr1,0x4/eq,taken=20%(20,80)
    0|                              CL.444:
  324| 002980 lfd      C8770008   1     LFL       fp3=bmal[].rns24.(gr23,8)
  324| 002984 lfd      C84B0008   1     LFL       fp2=srdmi[].rns10.(gr11,8)
  324| 002988 lfdu     CCD70010   1     LFDU      fp6,gr23=bmal[].rns24.(gr23,16)
  324| 00298C lfdu     CC8B0010   1     LFDU      fp4,gr11=srdmi[].rns10.(gr11,16)
  324| 002990 lfd      C95C0008   1     LFL       fp10=srdpi[].rns9.(gr28,8)
  324| 002994 lfd      C8B10008   1     LFL       fp5=vpal[].rns21.(gr17,8)
  324| 002998 lfd      C9750008   1     LFL       fp11=vmal[].rns23.(gr21,8)
  324| 00299C lfd      C9330008   1     LFL       fp9=bpal[].rns22.(gr19,8)
  324| 0029A0 fmul     FD8300B2   1     MFL       fp12=fp3,fp2,fcr
  324| 0029A4 lfdu     CC730010   2     LFDU      fp3,gr19=bpal[].rns22.(gr19,16)
  324| 0029A8 fmul     FCE60132   1     MFL       fp7=fp6,fp4,fcr
  324| 0029AC lfdu     CD1C0010   1     LFDU      fp8,gr28=srdpi[].rns9.(gr28,16)
  324| 0029B0 fadd     FCCA102A   1     AFL       fp6=fp10,fp2,fcr
  324| 0029B4 lfdu     CC510010   2     LFDU      fp2,gr17=vpal[].rns21.(gr17,16)
  324| 0029B8 fsub     FCA55828   1     SFL       fp5=fp5,fp11,fcr
  324| 0029BC lfdu     CD750010   1     LFDU      fp11,gr21=vmal[].rns23.(gr21,16)
  324| 0029C0 fmadd    FD2962BA   1     FMA       fp9=fp12,fp9,fp10,fcr
  323| 0029C4 lfd      C9440008   1     LFL       fp10=bave[].rns7.(gr4,8)
  324| 0029C8 fmadd    FC633A3A   1     FMA       fp3=fp7,fp3,fp8,fcr
  323| 0029CC lfdu     CCE40010   1     LFDU      fp7,gr4=bave[].rns7.(gr4,16)
  324| 0029D0 fadd     FD08202A   1     AFL       fp8=fp8,fp4,fcr
  324| 0029D4 lfd      C89B0008   1     LFL       fp4=g31a(gr27,8)
  324| 0029D8 fsub     FD625828   1     SFL       fp11=fp2,fp11,fcr
  324| 0029DC lfdu     CC5B0010   1     LFDU      fp2,gr27=g31a(gr27,16)
  323| 0029E0 qvfcpsgn 114A0810   1     CPYSFL    fp10=fp1,fp10
  324| 0029E4 fmadd    FCAA497A   1     FMA       fp5=fp9,fp10,fp5,fcr
  323| 0029E8 qvfcpsgn 10E70810   1     CPYSFL    fp7=fp1,fp7
  323| 0029EC ld       EBA20000   1     L8        gr29=.+CONSTANT_AREA(gr2,0)
  324| 0029F0 fmadd    FC671AFA   1     FMA       fp3=fp3,fp7,fp11,fcr
  324| 0029F4 fre      FCE03030   1     FRED      fp7=fp6
  324| 0029F8 fnmsub   FD8609FC   1     FNMS      fp12=fp1,fp6,fp7,fcr
  324| 0029FC fre      FCC04030   1     FRED      fp6=fp8
  324| 002A00 fnmsub   FD4809BC   1     FNMS      fp10=fp1,fp8,fp6,fcr
  324| 002A04 lfs      C3DD0028   1     LFS       fp30=+CONSTANT_AREA(gr29,40)
  324| 002A08 fmul     FD650132   1     MFL       fp11=fp5,fp4,fcr
  324| 002A0C lfs      C11D0000   1     LFS       fp8=+CONSTANT_AREA(gr29,0)
  324| 002A10 fmul     FD2300B2   1     MFL       fp9=fp3,fp2,fcr
  323| 002A14 bc       424000DC   1     BCF       ctr=CL.510,taken=0%(0,100)
    0| 002A18 ori      60210000   1     XNOP      
    0| 002A1C ori      60210000   1     XNOP      
    0| 002A20 ori      60210000   1     XNOP      
  323|                              CL.511:
  324| 002A24 lfd      C85B0008   1     LFL       fp2=g31a(gr27,8)
  324| 002A28 lfdu     CC7B0010   1     LFDU      fp3,gr27=g31a(gr27,16)
  323| 002A2C lfd      C8840008   1     LFL       fp4=bave[].rns7.(gr4,8)
  323| 002A30 lfdu     CCA40010   1     LFDU      fp5,gr4=bave[].rns7.(gr4,16)
  324| 002A34 fmul     FF8B01F2   1     MFL       fp28=fp11,fp7,fcr
  324| 002A38 fmul     FFE901B2   2     MFL       fp31=fp9,fp6,fcr
  324| 002A3C lfd      C8D30008   2     LFL       fp6=bpal[].rns22.(gr19,8)
  324| 002A40 lfd      C8FC0008   1     LFL       fp7=srdpi[].rns9.(gr28,8)
  324| 002A44 fmadd    FF6C433A   1     FMA       fp27=fp8,fp12,fp12,fcr
  324| 002A48 fmadd    FFAA42BA   2     FMA       fp29=fp8,fp10,fp10,fcr
  324| 002A4C fmadd    FDBCE33A   2     FMA       fp13=fp28,fp28,fp12,fcr
  324| 002A50 fmadd    FD7FFABA   2     FMA       fp11=fp31,fp31,fp10,fcr
  324| 002A54 lfd      C9110008   2     LFL       fp8=vpal[].rns21.(gr17,8)
  324| 002A58 lfd      C9350008   1     LFL       fp9=vmal[].rns23.(gr21,8)
  324| 002A5C fmadd    FF7BF6FA   1     FMA       fp27=fp30,fp27,fp27,fcr
  324| 002A60 fmadd    FFDDF77A   2     FMA       fp30=fp30,fp29,fp29,fcr
  324| 002A64 fmul     FF4C0372   2     MFL       fp26=fp12,fp13,fcr
  324| 002A68 fmul     FFAA02F2   2     MFL       fp29=fp10,fp11,fcr
  324| 002A6C lfdu     CD530010   2     LFDU      fp10,gr19=bpal[].rns22.(gr19,16)
  324| 002A70 lfdu     CD7C0010   1     LFDU      fp11,gr28=srdpi[].rns9.(gr28,16)
  324| 002A74 lfd      C9970008   1     LFL       fp12=bmal[].rns24.(gr23,8)
  324| 002A78 lfd      C9AB0008   1     LFL       fp13=srdmi[].rns10.(gr11,8)
  324| 002A7C fmadd    FF3BE6BA   1     FMA       fp25=fp28,fp27,fp26,fcr
  324| 002A80 fmadd    FFFEFF7A   2     FMA       fp31=fp31,fp30,fp29,fcr
  324| 002A84 lfdu     CFD70010   1     LFDU      fp30,gr23=bmal[].rns24.(gr23,16)
  324| 002A88 lfdu     CFAB0010   1     LFDU      fp29,gr11=srdmi[].rns10.(gr11,16)
  324| 002A8C lfdu     CF910010   1     LFDU      fp28,gr17=vpal[].rns21.(gr17,16)
  324| 002A90 lfdu     CF750010   1     LFDU      fp27,gr21=vmal[].rns23.(gr21,16)
  324| 002A94 fadd     FF47682A   1     AFL       fp26=fp7,fp13,fcr
  324| 002A98 stfd     DB230008   1     STFL      bstar[].rns25.(gr3,8)=fp25
  324| 002A9C stfdu    DFE30010   1     STFDU     gr3,bstar[].rns25.(gr3,16)=fp31
  324| 002AA0 fmul     FD8C0372   1     MFL       fp12=fp12,fp13,fcr
  324| 002AA4 fmul     FDBE0772   2     MFL       fp13=fp30,fp29,fcr
  324| 002AA8 fadd     FFEBE82A   2     AFL       fp31=fp11,fp29,fcr
  323| 002AAC qvfcpsgn 10840810   1     CPYSFL    fp4=fp1,fp4
  324| 002AB0 fsub     FD084828   1     SFL       fp8=fp8,fp9,fcr
  324| 002AB4 fsub     FD3CD828   2     SFL       fp9=fp28,fp27,fcr
  324| 002AB8 fmadd    FD8661FA   2     FMA       fp12=fp12,fp6,fp7,fcr
  324| 002ABC fmadd    FD6A6AFA   2     FMA       fp11=fp13,fp10,fp11,fcr
  323| 002AC0 qvfcpsgn 10A50810   1     CPYSFL    fp5=fp1,fp5
  324| 002AC4 fre      FCE0D030   1     FRED      fp7=fp26
  324| 002AC8 fre      FCC0F830   1     FRED      fp6=fp31
  324| 002ACC fnmsub   FD5F09BC   1     FNMS      fp10=fp1,fp31,fp6,fcr
  324| 002AD0 fmadd    FC84623A   2     FMA       fp4=fp12,fp4,fp8,fcr
  324| 002AD4 fmadd    FCA55A7A   2     FMA       fp5=fp11,fp5,fp9,fcr
  324| 002AD8 fnmsub   FD9A09FC   2     FNMS      fp12=fp1,fp26,fp7,fcr
  324| 002ADC lfs      C3DD0028   1     LFS       fp30=+CONSTANT_AREA(gr29,40)
  324| 002AE0 lfs      C11D0000   1     LFS       fp8=+CONSTANT_AREA(gr29,0)
  324| 002AE4 fmul     FD6400B2   1     MFL       fp11=fp4,fp2,fcr
  324| 002AE8 fmul     FD2500F2   2     MFL       fp9=fp5,fp3,fcr
    0| 002AEC bc       4200FF38   1     BCT       ctr=CL.511,taken=100%(100,0)
  323|                              CL.510:
  324| 002AF0 fmul     FC2B01F2   1     MFL       fp1=fp11,fp7,fcr
  324| 002AF4 fmul     FC4901B2   2     MFL       fp2=fp9,fp6,fcr
  324| 002AF8 fmadd    FC6C433A   2     FMA       fp3=fp8,fp12,fp12,fcr
  324| 002AFC fmadd    FC8A42BA   2     FMA       fp4=fp8,fp10,fp10,fcr
  324| 002B00 fmadd    FCA10B3A   2     FMA       fp5=fp1,fp1,fp12,fcr
  324| 002B04 fmadd    FCC212BA   2     FMA       fp6=fp2,fp2,fp10,fcr
  324| 002B08 fmadd    FC63F0FA   2     FMA       fp3=fp30,fp3,fp3,fcr
  324| 002B0C fmadd    FC84F13A   2     FMA       fp4=fp30,fp4,fp4,fcr
  324| 002B10 fmul     FCAC0172   2     MFL       fp5=fp12,fp5,fcr
  324| 002B14 fmul     FCCA01B2   2     MFL       fp6=fp10,fp6,fcr
  324| 002B18 fmadd    FC23097A   2     FMA       fp1=fp1,fp3,fp5,fcr
  324| 002B1C fmadd    FC4411BA   2     FMA       fp2=fp2,fp4,fp6,fcr
  324| 002B20 stfd     D8230008   1     STFL      bstar[].rns25.(gr3,8)=fp1
  324| 002B24 stfdu    DC430010   1     STFDU     gr3,bstar[].rns25.(gr3,16)=fp2
  327|                              CL.82:
  332| 002B28 bc       40910784   1     BF        CL.111,cr4,0x2/gt,taken=30%(30,70)
  334| 002B2C ld       E8620000   1     L8        gr3=.&&N&&config(gr2,0)
  332| 002B30 addi     38800000   1     LI        gr4=0
  335| 002B34 ld       E9650000   1     L8        gr11=<s227:d0:l8>(gr5,0)
  340| 002B38 ld       EBA50C40   1     L8        gr29=<s227:d3136:l8>(gr5,3136)
  335| 002B3C ld       EB850018   1     L8        gr28=<s227:d24:l8>(gr5,24)
  340| 002B40 ld       E8A50C58   1     L8        gr5=<s227:d3160:l8>(gr5,3160)
  334| 002B44 lwz      80630000   1     L4Z       gr3=<s392:d0:l4>(gr3,0)
    0| 002B48 cmpwi    2C030003   1     C4        cr0=gr3,3
    0| 002B4C bc       40820808   1     BF        CL.202,cr0,0x4/eq,taken=50%(0,0)
    0| 002B50 ld       EADF0090   1     L8        gr22=#SPILL1(gr31,144)
    0| 002B54 rldicr   7BDB1F24   1     SLL8      gr27=gr30,3
    0| 002B58 rldicr   799A1F24   1     SLL8      gr26=gr12,3
    0| 002B5C ld       EABF0220   1     L8        gr21=#SPILL51(gr31,544)
    0| 002B60 mulld    7F40D1D2   1     M         gr26=gr0,gr26
    0| 002B64 mulld    7F76D9D2   1     M         gr27=gr22,gr27
    0| 002B68 rldicr   7AC31F24   1     SLL8      gr3=gr22,3
    0| 002B6C mulld    7F60D9D2   1     M         gr27=gr0,gr27
    0| 002B70 neg      7C6300D0   1     COMP      gr3=gr3
    0| 002B74 subfic   230E0001   1     SFI       gr24=1,gr14,ca"
    0| 002B78 mulld    7F2019D2   1     M         gr25=gr0,gr3
  335| 002B7C rldicr   79C31F24   1     SLL8      gr3=gr14,3
    0| 002B80 rldicr   78001F24   1     SLL8      gr0=gr0,3
    0| 002B84 ld       EA9F0250   1     L8        gr20=#SPILL57(gr31,592)
    0| 002B88 ld       EA7F00B0   1     L8        gr19=#SPILL5(gr31,176)
    0| 002B8C ld       EA5F0190   1     L8        gr18=#SPILL33(gr31,400)
  335| 002B90 addi     3AE3FFF8   1     AI        gr23=gr3,-8
    0| 002B94 subf     7C00D850   1     S         gr0=gr27,gr0
    0| 002B98 add      7F5ACA14   1     A         gr26=gr26,gr25
    0| 002B9C add      7F75C214   1     A         gr27=gr21,gr24
    0| 002BA0 ld       EB220000   1     L8        gr25=.+CONSTANT_AREA(gr2,0)
    0| 002BA4 ld       EA3F0208   1     L8        gr17=#SPILL48(gr31,520)
    0| 002BA8 ld       EA1F0100   1     L8        gr16=#SPILL15(gr31,256)
  335| 002BAC add      7F17E214   1     A         gr24=gr23,gr28
    0| 002BB0 add      7F80D214   1     A         gr28=gr0,gr26
    0| 002BB4 mtspr    7F6903A6   1     LCTR      ctr=gr27
  335| 002BB8 add      7D6BC214   1     A         gr11=gr11,gr24
    0| 002BBC add      7C14E214   1     A         gr0=gr20,gr28
    0| 002BC0 add      7F529A14   1     A         gr26=gr18,gr19
    0| 002BC4 add      7F05EA14   1     A         gr24=gr5,gr29
    0| 002BC8 add      7CA38A14   1     A         gr5=gr3,gr17
    0| 002BCC add      7FA38214   1     A         gr29=gr3,gr16
    0| 002BD0 add      7EE01A14   1     A         gr23=gr0,gr3
    0| 002BD4 add      7F43D214   1     A         gr26=gr3,gr26
    0| 002BD8 add      7F181A14   1     A         gr24=gr24,gr3
    0| 002BDC lfs      C0390014   1     LFS       fp1=+CONSTANT_AREA(gr25,20)
  335| 002BE0 lfdu     CC4B0008   1     LFDU      fp2,gr11=x1a(gr11,8)
    0| 002BE4 bc       4240006C   1     BCF       ctr=CL.605,taken=0%(0,100)
    0| 002BE8 ori      60210000   1     XNOP      
    0| 002BEC ori      60210000   1     XNOP      
    0| 002BF0 ori      60210000   1     XNOP      
  332|                              CL.85:
  335| 002BF4 fcmpu    FC011000   1     CFL       cr0=fp1,fp2
  335| 002BF8 lfdu     CC4B0008   1     LFDU      fp2,gr11=x1a(gr11,8)
  335| 002BFC bc       41820038   1     BT        CL.863,cr0,0x80/feq,taken=40%(40,60)
  340| 002C00 lfd      C87D0000   1     LFL       fp3=bave[].rns7.(gr29,0)
  340| 002C04 lfd      C89DFFF8   1     LFL       fp4=bave[].rns7.(gr29,-8)
  340| 002C08 lfd      C8B80000   1     LFL       fp5=g31bi(gr24,0)
  340| 002C0C lfd      C8C50000   1     LFL       fp6=bstar[].rns25.(gr5,0)
  340| 002C10 lfd      C8E5FFF8   1     LFL       fp7=bstar[].rns25.(gr5,-8)
  340| 002C14 lfd      C91A0000   1     LFL       fp8=dx1ai(gr26,0)
  340| 002C18 fadd     FC63202A   1     AFL       fp3=fp3,fp4,fcr
  340| 002C1C fsub     FC863828   2     SFL       fp4=fp6,fp7,fcr
  340| 002C20 fmul     FC630172   2     MFL       fp3=fp3,fp5,fcr
  340| 002C24 fmul     FC630132   2     MFL       fp3=fp3,fp4,fcr
  340| 002C28 fmul     FC630232   2     MFL       fp3=fp3,fp8,fcr
  340| 002C2C stfd     D877FFF8   1     STFL      st3[].rns6.(gr23,-8)=fp3
  337| 002C30 b        48000008   1     B         CL.52,-1
    0|                              CL.863:
  336| 002C34 std      F897FFF8   1     ST8       st3[].rns6.(gr23,-8)=gr4
  342|                              CL.52:
    0| 002C38 addi     38A50008   1     AI        gr5=gr5,8
    0| 002C3C addi     3BBD0008   1     AI        gr29=gr29,8
    0| 002C40 addi     3AF70008   1     AI        gr23=gr23,8
    0| 002C44 addi     3B5A0008   1     AI        gr26=gr26,8
    0| 002C48 addi     3B180008   1     AI        gr24=gr24,8
    0| 002C4C bc       4200FFA8   1     BCT       ctr=CL.85,taken=100%(100,0)
    0|                              CL.605:
  335| 002C50 fcmpu    FC011000   1     CFL       cr0=fp1,fp2
  335| 002C54 bc       418206F8   1     BT        CL.864,cr0,0x80/feq,taken=40%(40,60)
  340| 002C58 lfd      C83D0000   1     LFL       fp1=bave[].rns7.(gr29,0)
  340| 002C5C lfd      C85DFFF8   1     LFL       fp2=bave[].rns7.(gr29,-8)
  340| 002C60 lfd      C8780000   1     LFL       fp3=g31bi(gr24,0)
  340| 002C64 lfd      C8850000   1     LFL       fp4=bstar[].rns25.(gr5,0)
  340| 002C68 lfd      C8A5FFF8   1     LFL       fp5=bstar[].rns25.(gr5,-8)
  340| 002C6C lfd      C8DA0000   1     LFL       fp6=dx1ai(gr26,0)
  340| 002C70 fadd     FC21102A   1     AFL       fp1=fp1,fp2,fcr
  340| 002C74 fsub     FC442828   2     SFL       fp2=fp4,fp5,fcr
  340| 002C78 fmul     FC2100F2   2     MFL       fp1=fp1,fp3,fcr
  340| 002C7C fmul     FC2100B2   2     MFL       fp1=fp1,fp2,fcr
  340| 002C80 fmul     FC2101B2   2     MFL       fp1=fp1,fp6,fcr
  340| 002C84 stfd     D837FFF8   1     STFL      st3[].rns6.(gr23,-8)=fp1
    0|                              CL.184:
  355| 002C88 ld       EA9F0158   1     L8        gr20=#SPILL26(gr31,344)
  355| 002C8C ld       EA7F0150   1     L8        gr19=#SPILL25(gr31,336)
  354| 002C90 ld       EA5F0138   1     L8        gr18=#SPILL22(gr31,312)
  354| 002C94 ld       EA3F0148   1     L8        gr17=#SPILL24(gr31,328)
  353| 002C98 ld       EA1F0128   1     L8        gr16=#SPILL20(gr31,296)
  353| 002C9C ld       E9FF0130   1     L8        gr15=#SPILL21(gr31,304)
  355| 002CA0 mulld    7C0CA1D2   1     M         gr0=gr12,gr20
  355| 002CA4 mulld    7C93F1D2   1     M         gr4=gr19,gr30
  354| 002CA8 mulld    7CB2F1D2   1     M         gr5=gr18,gr30
  354| 002CAC mulld    7D6C89D2   1     M         gr11=gr12,gr17
  353| 002CB0 mulld    7FDE81D2   1     M         gr30=gr30,gr16
  355| 002CB4 mulld    7FA871D2   1     M         gr29=gr8,gr14
  354| 002CB8 mulld    7F4771D2   1     M         gr26=gr7,gr14
  353| 002CBC mulld    7F0671D2   1     M         gr24=gr6,gr14
  355| 002CC0 ld       E9DF00F0   1     L8        gr14=#SPILL13(gr31,240)
  355| 002CC4 ld       EA9F0120   1     L8        gr20=#SPILL19(gr31,288)
  354| 002CC8 ld       EA7F00E8   1     L8        gr19=#SPILL12(gr31,232)
  354| 002CCC ld       EA5F0110   1     L8        gr18=#SPILL17(gr31,272)
  353| 002CD0 ld       EA3F00E0   1     L8        gr17=#SPILL11(gr31,224)
  353| 002CD4 ld       EA1F0108   1     L8        gr16=#SPILL16(gr31,264)
  353| 002CD8 mulld    7D8C79D2   1     M         gr12=gr12,gr15
  342| 002CDC ld       EB220000   1     L8        gr25=.+CONSTANT_AREA(gr2,0)
  355| 002CE0 add      7EEEA214   1     A         gr23=gr14,gr20
  354| 002CE4 add      7ED29A14   1     A         gr22=gr18,gr19
  353| 002CE8 add      7EB08A14   1     A         gr21=gr16,gr17
  355| 002CEC add      7C00BA14   1     A         gr0=gr0,gr23
  355| 002CF0 add      7C84EA14   1     A         gr4=gr4,gr29
  354| 002CF4 add      7CA5D214   1     A         gr5=gr5,gr26
  354| 002CF8 add      7D6BB214   1     A         gr11=gr11,gr22
  353| 002CFC add      7FDEC214   1     A         gr30=gr30,gr24
  353| 002D00 add      7D8CAA14   1     A         gr12=gr12,gr21
  342| 002D04 lfs      C0390000   1     LFS       fp1=+CONSTANT_AREA(gr25,0)
    0| 002D08 ld       EBBF03F0   1     L8        gr29=.u3(gr31,1008)
    0| 002D0C ld       EB5F03F8   1     L8        gr26=.w1(gr31,1016)
    0| 002D10 ld       EB1F0400   1     L8        gr24=.w2(gr31,1024)
    0| 002D14 ld       EAFF0408   1     L8        gr23=.w3(gr31,1032)
  353| 002D18 ld       E9FF0218   1     L8        gr15=#SPILL50(gr31,536)
  354| 002D1C ld       EA9F0228   1     L8        gr20=#SPILL52(gr31,552)
  342| 002D20 fmul     FC000072   1     MFL       fp0=fp0,fp1,fcr
  355| 002D24 ld       E9DF0250   1     L8        gr14=#SPILL57(gr31,592)
  355| 002D28 addi     3863FFF0   1     AI        gr3=gr3,-16
  355| 002D2C add      7C002214   1     A         gr0=gr0,gr4
  354| 002D30 add      7C855A14   1     A         gr4=gr5,gr11
  353| 002D34 add      7CACF214   1     A         gr5=gr12,gr30
    0| 002D38 rldicl   7B6BF842   1     SRL8      gr11=gr27,1
  355| 002D3C add      7C63E214   1     A         gr3=gr3,gr28
  355| 002D40 subf     7D880050   1     S         gr12=gr0,gr8
  354| 002D44 subf     7C872050   1     S         gr4=gr4,gr7
  353| 002D48 subf     7CA62850   1     S         gr5=gr5,gr6
    0| 002D4C andi.    73600001   1     RN4_R     gr0,cr0=gr27,0,0x1
    0| 002D50 cmpdi    2CAB0000   1     C8        cr1=gr11,0
  355| 002D54 add      7FC3BA14   1     A         gr30=gr3,gr23
  353| 002D58 add      7F837A14   1     A         gr28=gr3,gr15
  354| 002D5C add      7D4A1A14   1     A         gr10=gr10,gr3
  353| 002D60 add      7D291A14   1     A         gr9=gr9,gr3
  354| 002D64 add      7F63C214   1     A         gr27=gr3,gr24
  355| 002D68 add      7FBD1A14   1     A         gr29=gr29,gr3
  354| 002D6C add      7F03A214   1     A         gr24=gr3,gr20
  355| 002D70 add      7EE37214   1     A         gr23=gr3,gr14
  353| 002D74 add      7C63D214   1     A         gr3=gr3,gr26
    0| 002D78 lfs      C0390018   1     LFS       fp1=+CONSTANT_AREA(gr25,24)
    0| 002D7C mtspr    7D6903A6   1     LCTR      ctr=gr11
    0| 002D80 bc       418200BC   1     BT        CL.484,cr0,0x4/eq,taken=50%(0,0)
  353| 002D84 lfdux    7C6534EE   1     LFDU      fp3,gr5=srd1(gr5,gr6,0)
  354| 002D88 lfdux    7CA43CEE   1     LFDU      fp5,gr4=srd2(gr4,gr7,0)
  355| 002D8C lfdux    7CEC44EE   1     LFDU      fp7,gr12=srd3(gr12,gr8,0)
  353| 002D90 lfdu     CD1C0008   1     LFDU      fp8,gr28=st1[].rns4.(gr28,8)
  354| 002D94 lfdu     CD580008   1     LFDU      fp10,gr24=st2[].rns5.(gr24,8)
  355| 002D98 lfdu     CD970008   1     LFDU      fp12,gr23=st3[].rns6.(gr23,8)
  353| 002D9C lfdu     CC490008   1     LFDU      fp2,gr9=u1[](gr9,8)
  353| 002DA0 fmul     FC6300F2   1     MFL       fp3=fp3,fp3,fcr
  354| 002DA4 lfdu     CC8A0008   1     LFDU      fp4,gr10=u2[](gr10,8)
  354| 002DA8 fmul     FCA50172   1     MFL       fp5=fp5,fp5,fcr
  355| 002DAC lfdu     CCDD0008   1     LFDU      fp6,gr29=u3[](gr29,8)
  355| 002DB0 fmul     FCE701F2   1     MFL       fp7=fp7,fp7,fcr
  353| 002DB4 fmul     FD000232   2     MFL       fp8=fp0,fp8,fcr
  353| 002DB8 qvfre    11201830   1     QVFRE     fp9=fp3
  354| 002DBC fmul     FD4002B2   1     MFL       fp10=fp0,fp10,fcr
  354| 002DC0 qvfre    11602830   1     QVFRE     fp11=fp5
  355| 002DC4 fmul     FD800332   1     MFL       fp12=fp0,fp12,fcr
  355| 002DC8 qvfre    11A03830   1     QVFRE     fp13=fp7
  353| 002DCC fmsub    FFE30A78   1     FMS       fp31=fp1,fp3,fp9,fcr
  354| 002DD0 fmsub    FFC50AF8   2     FMS       fp30=fp1,fp5,fp11,fcr
  355| 002DD4 fmsub    FFA70B78   2     FMS       fp29=fp1,fp7,fp13,fcr
  353| 002DD8 fnmsub   FD294FFC   2     FNMS      fp9=fp9,fp9,fp31,fcr
  354| 002DDC fnmsub   FD6B5FBC   2     FNMS      fp11=fp11,fp11,fp30,fcr
  355| 002DE0 fnmsub   FDAD6F7C   2     FNMS      fp13=fp13,fp13,fp29,fcr
  353| 002DE4 fmsub    FFE30A78   2     FMS       fp31=fp1,fp3,fp9,fcr
  354| 002DE8 fmsub    FFC50AF8   2     FMS       fp30=fp1,fp5,fp11,fcr
  355| 002DEC fmsub    FFA70B78   2     FMS       fp29=fp1,fp7,fp13,fcr
  353| 002DF0 fnmsub   FD294FFC   2     FNMS      fp9=fp9,fp9,fp31,fcr
  354| 002DF4 fnmsub   FD6B5FBC   2     FNMS      fp11=fp11,fp11,fp30,fcr
  355| 002DF8 fnmsub   FDAD6F7C   2     FNMS      fp13=fp13,fp13,fp29,fcr
  353| 002DFC fmul     FFE80272   2     MFL       fp31=fp8,fp9,fcr
  354| 002E00 fmul     FFCA02F2   2     MFL       fp30=fp10,fp11,fcr
  355| 002E04 fmul     FFAC0372   2     MFL       fp29=fp12,fp13,fcr
  353| 002E08 fmsub    FC6347F8   2     FMS       fp3=fp8,fp3,fp31,fcr
  354| 002E0C fmsub    FCA557B8   2     FMS       fp5=fp10,fp5,fp30,fcr
  355| 002E10 fmsub    FCE76778   2     FMS       fp7=fp12,fp7,fp29,fcr
  353| 002E14 fnmsub   FC69F8FC   2     FNMS      fp3=fp31,fp9,fp3,fcr
  354| 002E18 fnmsub   FCABF17C   2     FNMS      fp5=fp30,fp11,fp5,fcr
  355| 002E1C fnmsub   FCEDE9FC   2     FNMS      fp7=fp29,fp13,fp7,fcr
  353| 002E20 fadd     FC42182A   2     AFL       fp2=fp2,fp3,fcr
  354| 002E24 fadd     FC64282A   2     AFL       fp3=fp4,fp5,fcr
  355| 002E28 fadd     FC86382A   2     AFL       fp4=fp6,fp7,fcr
  353| 002E2C stfdu    DC430008   2     STFDU     gr3,w1[](gr3,8)=fp2
  354| 002E30 stfdu    DC7B0008   1     STFDU     gr27,w2[](gr27,8)=fp3
  355| 002E34 stfdu    DC9E0008   1     STFDU     gr30,w3[](gr30,8)=fp4
    0| 002E38 bc       41860474   1     BT        CL.111,cr1,0x4/eq,taken=20%(20,80)
    0|                              CL.484:
  353| 002E3C lfdux    7C4534EE   1     LFDU      fp2,gr5=srd1(gr5,gr6,0)
  354| 002E40 lfdux    7CA43CEE   1     LFDU      fp5,gr4=srd2(gr4,gr7,0)
  355| 002E44 lfdux    7C6C44EE   1     LFDU      fp3,gr12=srd3(gr12,gr8,0)
  353| 002E48 lfd      C89C0008   1     LFL       fp4=st1[].rns4.(gr28,8)
  353| 002E4C lfdu     CD9C0010   1     LFDU      fp12,gr28=st1[].rns4.(gr28,16)
  353| 002E50 fmul     FC4200B2   1     MFL       fp2=fp2,fp2,fcr
  353| 002E54 lfdux    7CC534EE   1     LFDU      fp6,gr5=srd1(gr5,gr6,0)
  354| 002E58 fmul     FF050172   1     MFL       fp24=fp5,fp5,fcr
  354| 002E5C lfdux    7FC43CEE   1     LFDU      fp30,gr4=srd2(gr4,gr7,0)
  355| 002E60 fmul     FC6300F2   1     MFL       fp3=fp3,fp3,fcr
  353| 002E64 fmul     FC800132   2     MFL       fp4=fp0,fp4,fcr
  353| 002E68 qvfre    11601030   1     QVFRE     fp11=fp2
    0| 002E6C fmr      FCA01090   1     LRFL      fp5=fp2
  353| 002E70 fmul     FCC601B2   2     MFL       fp6=fp6,fp6,fcr
  354| 002E74 qvfre    13A0C030   1     QVFRE     fp29=fp24
  355| 002E78 qvfre    10E01830   1     QVFRE     fp7=fp3
    0| 002E7C fmr      FD00C090   1     LRFL      fp8=fp24
  353| 002E80 fmsub    FD420AF8   2     FMS       fp10=fp1,fp2,fp11,fcr
    0| 002E84 fmr      FD201890   2     LRFL      fp9=fp3
  353| 002E88 qvfre    13E03030   1     QVFRE     fp31=fp6
  353| 002E8C fnmsub   FD4B5ABC   1     FNMS      fp10=fp11,fp11,fp10,fcr
  353| 002E90 fmsub    FDA60FF8   2     FMS       fp13=fp1,fp6,fp31,fcr
  353| 002E94 fmsub    FD620AB8   2     FMS       fp11=fp1,fp2,fp10,fcr
  353| 002E98 fnmsub   FE9FFB7C   2     FNMS      fp20=fp31,fp31,fp13,fcr
  353| 002E9C fnmsub   FD4A52FC   2     FNMS      fp10=fp10,fp10,fp11,fcr
  353| 002EA0 fmsub    FE660D38   2     FMS       fp19=fp1,fp6,fp20,fcr
    0| 002EA4 bc       424002F4   1     BCF       ctr=CL.514,taken=0%(0,100)
  354| 002EA8 fmul     FD7E07B2   1     MFL       fp11=fp30,fp30,fcr
  354| 002EAC lfd      C8580008   1     LFL       fp2=st2[].rns5.(gr24,8)
  354| 002EB0 fmsub    FFD80F78   1     FMS       fp30=fp1,fp24,fp29,fcr
  355| 002EB4 lfdux    7F8C44EE   1     LFDU      fp28,gr12=srd3(gr12,gr8,0)
  353| 002EB8 fmul     FE2402B2   1     MFL       fp17=fp4,fp10,fcr
  354| 002EBC lfdu     CDB80010   1     LFDU      fp13,gr24=st2[].rns5.(gr24,16)
  354| 002EC0 qvfre    13E05830   1     QVFRE     fp31=fp11
  353| 002EC4 lfd      CB290008   1     LFL       fp25=u1[](gr9,8)
  354| 002EC8 fnmsub   FFDDEFBC   1     FNMS      fp30=fp29,fp29,fp30,fcr
  354| 002ECC stfd     D85F0230   1     STFL      #SPILL53(gr31,560)=fp2
  353| 002ED0 fmul     FD800332   1     MFL       fp12=fp0,fp12,fcr
  355| 002ED4 lfd      CBB70008   1     LFL       fp29=st3[].rns6.(gr23,8)
  353| 002ED8 fnmsub   FE94A4FC   1     FNMS      fp20=fp20,fp20,fp19,fcr
  355| 002EDC lfdu     CF770010   1     LFDU      fp27,gr23=st3[].rns6.(gr23,16)
  354| 002EE0 fmsub    FF180FB8   1     FMS       fp24=fp1,fp24,fp30,fcr
  353| 002EE4 lfdux    7C4534EE   1     LFDU      fp2,gr5=srd1(gr5,gr6,0)
  354| 002EE8 fmsub    FF4B0FF8   1     FMS       fp26=fp1,fp11,fp31,fcr
  353| 002EEC lfdu     CEA90010   1     LFDU      fp21,gr9=u1[](gr9,16)
  353| 002EF0 fmsub    FC852478   1     FMS       fp4=fp4,fp5,fp17,fcr
  354| 002EF4 lfd      CA6A0008   1     LFL       fp19=u2[](gr10,8)
  354| 002EF8 fnmsub   FCBEF63C   1     FNMS      fp5=fp30,fp30,fp24,fcr
  354| 002EFC lfd      CB1F0230   1     LFL       fp24=#SPILL53(gr31,560)
  353| 002F00 fmul     FDEC0532   1     MFL       fp15=fp12,fp20,fcr
  353| 002F04 lfdux    7EE534EE   1     LFDU      fp23,gr5=srd1(gr5,gr6,0)
  355| 002F08 fmul     FF9C0732   1     MFL       fp28=fp28,fp28,fcr
  354| 002F0C lfdu     CE4A0010   1     LFDU      fp18,gr10=u2[](gr10,16)
  354| 002F10 fnmsub   FFFFFEBC   1     FNMS      fp31=fp31,fp31,fp26,fcr
  354| 002F14 lfdux    7E043CEE   1     LFDU      fp16,gr4=srd2(gr4,gr7,0)
  353| 002F18 fnmsub   FC8A893C   1     FNMS      fp4=fp17,fp10,fp4,fcr
  355| 002F1C lfdux    7DCC44EE   1     LFDU      fp14,gr12=srd3(gr12,gr8,0)
  353| 002F20 fmsub    FCC663F8   1     FMS       fp6=fp12,fp6,fp15,fcr
  355| 002F24 lfd      CB5D0008   1     LFL       fp26=u3[](gr29,8)
  354| 002F28 fmul     FD800372   1     MFL       fp12=fp0,fp13,fcr
  354| 002F2C fmul     FDA00632   2     MFL       fp13=fp0,fp24,fcr
  354| 002F30 lfdux    7FC43CEE   1     LFDU      fp30,gr4=srd2(gr4,gr7,0)
  355| 002F34 qvfre    12C0E030   1     QVFRE     fp22=fp28
  354| 002F38 fmsub    FD4B0FF8   1     FMS       fp10=fp1,fp11,fp31,fcr
  355| 002F3C fmsub    FE2309F8   2     FMS       fp17=fp1,fp3,fp7,fcr
  353| 002F40 fadd     FC99202A   2     AFL       fp4=fp25,fp4,fcr
  353| 002F44 fnmsub   FCD479BC   2     FNMS      fp6=fp15,fp20,fp6,fcr
  354| 002F48 fmul     FE8D0172   2     MFL       fp20=fp13,fp5,fcr
  353| 002F4C fmul     FC4200B2   2     MFL       fp2=fp2,fp2,fcr
  354| 002F50 fnmsub   FD5FFABC   2     FNMS      fp10=fp31,fp31,fp10,fcr
  355| 002F54 fmul     FFE00772   2     MFL       fp31=fp0,fp29,fcr
  355| 002F58 fnmsub   FCE73C7C   2     FNMS      fp7=fp7,fp7,fp17,fcr
  353| 002F5C stfd     D8830008   1     STFL      w1[](gr3,8)=fp4
  355| 002F60 fmul     FFA006F2   1     MFL       fp29=fp0,fp27,fcr
  355| 002F64 fmsub    FF7C0DB8   2     FMS       fp27=fp1,fp28,fp22,fcr
  353| 002F68 fadd     FCD5302A   2     AFL       fp6=fp21,fp6,fcr
  354| 002F6C fmsub    FC886D38   2     FMS       fp4=fp13,fp8,fp20,fcr
  354| 002F70 fmul     FD0C02B2   2     MFL       fp8=fp12,fp10,fcr
  355| 002F74 fmsub    FC6309F8   2     FMS       fp3=fp1,fp3,fp7,fcr
  354| 002F78 fmul     FF100432   2     MFL       fp24=fp16,fp16,fcr
  355| 002F7C fnmsub   FDB6B6FC   2     FNMS      fp13=fp22,fp22,fp27,fcr
  353| 002F80 stfdu    DCC30010   2     STFDU     gr3,w1[](gr3,16)=fp6
  354| 002F84 fnmsub   FC85A13C   1     FNMS      fp4=fp20,fp5,fp4,fcr
  353| 002F88 fmul     FCD705F2   2     MFL       fp6=fp23,fp23,fcr
  354| 002F8C fmsub    FD6B6238   2     FMS       fp11=fp12,fp11,fp8,fcr
  353| 002F90 qvfre    10A01030   1     QVFRE     fp5=fp2
  355| 002F94 fnmsub   FD8738FC   1     FNMS      fp12=fp7,fp7,fp3,fcr
  355| 002F98 fmsub    FC7C0B78   2     FMS       fp3=fp1,fp28,fp13,fcr
  354| 002F9C fadd     FC93202A   2     AFL       fp4=fp19,fp4,fcr
  353| 002FA0 qvfre    10E03030   1     QVFRE     fp7=fp6
  354| 002FA4 fnmsub   FD0A42FC   1     FNMS      fp8=fp8,fp10,fp11,fcr
  353| 002FA8 fmsub    FD420978   2     FMS       fp10=fp1,fp2,fp5,fcr
  355| 002FAC fmul     FD7F0332   2     MFL       fp11=fp31,fp12,fcr
  355| 002FB0 fnmsub   FDAD68FC   2     FNMS      fp13=fp13,fp13,fp3,fcr
  355| 002FB4 fmul     FC6E03B2   2     MFL       fp3=fp14,fp14,fcr
  354| 002FB8 stfd     D89B0008   1     STFL      w2[](gr27,8)=fp4
  353| 002FBC fmsub    FF6609F8   1     FMS       fp27=fp1,fp6,fp7,fcr
  354| 002FC0 fadd     FC92402A   2     AFL       fp4=fp18,fp8,fcr
  355| 002FC4 fmsub    FD09FAF8   2     FMS       fp8=fp31,fp9,fp11,fcr
  355| 002FC8 fmul     FD3D0372   2     MFL       fp9=fp29,fp13,fcr
  353| 002FCC fnmsub   FCA52ABC   2     FNMS      fp5=fp5,fp5,fp10,fcr
  355| 002FD0 fmsub    FD5CEA78   2     FMS       fp10=fp29,fp28,fp9,fcr
  354| 002FD4 stfdu    DC9B0010   2     STFDU     gr27,w2[](gr27,16)=fp4
  355| 002FD8 fnmsub   FD0C5A3C   1     FNMS      fp8=fp11,fp12,fp8,fcr
  353| 002FDC lfd      C89C0008   1     LFL       fp4=st1[].rns4.(gr28,8)
  353| 002FE0 fnmsub   FE873EFC   1     FNMS      fp20=fp7,fp7,fp27,fcr
  355| 002FE4 lfdu     CD7D0010   1     LFDU      fp11,gr29=u3[](gr29,16)
  355| 002FE8 fnmsub   FD2D4ABC   1     FNMS      fp9=fp9,fp13,fp10,fcr
  353| 002FEC lfdu     CD9C0010   1     LFDU      fp12,gr28=st1[].rns4.(gr28,16)
  353| 002FF0 fmsub    FCE20978   1     FMS       fp7=fp1,fp2,fp5,fcr
  355| 002FF4 fadd     FDBA402A   2     AFL       fp13=fp26,fp8,fcr
  353| 002FF8 fmul     FC800132   2     MFL       fp4=fp0,fp4,fcr
  353| 002FFC fmsub    FE660D38   2     FMS       fp19=fp1,fp6,fp20,fcr
  355| 003000 fadd     FD0B482A   2     AFL       fp8=fp11,fp9,fcr
  353| 003004 fnmsub   FD4529FC   2     FNMS      fp10=fp5,fp5,fp7,fcr
    0| 003008 bc       42400188   1     BCF       ctr=CL.515,taken=0%(0,100)
    0| 00300C ori      60210000   1     XNOP      
    0| 003010 ori      60210000   1     XNOP      
    0| 003014 ori      60210000   1     XNOP      
    0|                              CL.516:
  353| 003018 lfdux    7CA534EE   1     LFDU      fp5,gr5=srd1(gr5,gr6,0)
  353| 00301C fmul     FCE00332   1     MFL       fp7=fp0,fp12,fcr
  355| 003020 lfdux    7D2C44EE   1     LFDU      fp9,gr12=srd3(gr12,gr8,0)
    0| 003024 fmr      FD601090   1     LRFL      fp11=fp2
  353| 003028 fnmsub   FD94A4FC   2     FNMS      fp12=fp20,fp20,fp19,fcr
  354| 00302C fmul     FFFE07B2   2     MFL       fp31=fp30,fp30,fcr
  354| 003030 qvfre    13C0C030   1     QVFRE     fp30=fp24
  353| 003034 fmul     FC450172   1     MFL       fp2=fp5,fp5,fcr
  353| 003038 fmul     FCA402B2   2     MFL       fp5=fp4,fp10,fcr
  355| 00303C stfdu    DD1E0010   2     STFDU     gr30,w3[](gr30,16)=fp8
  353| 003040 fmul     FD070332   1     MFL       fp8=fp7,fp12,fcr
  354| 003044 qvfre    13A0F830   1     QVFRE     fp29=fp31
  354| 003048 fmsub    FF980FB8   1     FMS       fp28=fp1,fp24,fp30,fcr
  355| 00304C stfd     D9BEFFF8   1     STFL      w3[](gr30,-8)=fp13
  353| 003050 lfd      C9A90008   1     LFL       fp13=u1[](gr9,8)
  353| 003054 fmsub    FC8B2178   1     FMS       fp4=fp4,fp11,fp5,fcr
  353| 003058 fmsub    FCC63A38   2     FMS       fp6=fp7,fp6,fp8,fcr
  354| 00305C fmsub    FCFF0F78   2     FMS       fp7=fp1,fp31,fp29,fcr
  354| 003060 fnmsub   FD7EF73C   2     FNMS      fp11=fp30,fp30,fp28,fcr
  354| 003064 lfd      CBD80008   1     LFL       fp30=st2[].rns5.(gr24,8)
  353| 003068 lfdu     CF890010   1     LFDU      fp28,gr9=u1[](gr9,16)
  353| 00306C fnmsub   FC8A293C   1     FNMS      fp4=fp5,fp10,fp4,fcr
  353| 003070 fnmsub   FCAC41BC   2     FNMS      fp5=fp8,fp12,fp6,fcr
  354| 003074 fnmsub   FCDDE9FC   2     FNMS      fp6=fp29,fp29,fp7,fcr
  354| 003078 fmsub    FD180AF8   2     FMS       fp8=fp1,fp24,fp11,fcr
  354| 00307C lfdu     CD580010   1     LFDU      fp10,gr24=st2[].rns5.(gr24,16)
  354| 003080 fmul     FCE007B2   1     MFL       fp7=fp0,fp30,fcr
  353| 003084 fadd     FD8D202A   2     AFL       fp12=fp13,fp4,fcr
  353| 003088 fadd     FCBC282A   2     AFL       fp5=fp28,fp5,fcr
  354| 00308C fmsub    FDBF09B8   2     FMS       fp13=fp1,fp31,fp6,fcr
  354| 003090 fnmsub   FD6B5A3C   2     FNMS      fp11=fp11,fp11,fp8,fcr
  354| 003094 lfdux    7FC43CEE   1     LFDU      fp30,gr4=srd2(gr4,gr7,0)
  354| 003098 fmul     FD4002B2   1     MFL       fp10=fp0,fp10,fcr
  353| 00309C lfdux    7C8534EE   1     LFDU      fp4,gr5=srd1(gr5,gr6,0)
    0| 0030A0 fmr      FFA0C090   1     LRFL      fp29=fp24
  354| 0030A4 fnmsub   FCC6337C   2     FNMS      fp6=fp6,fp6,fp13,fcr
  355| 0030A8 fmul     FD090272   2     MFL       fp8=fp9,fp9,fcr
  355| 0030AC qvfre    11201830   1     QVFRE     fp9=fp3
  354| 0030B0 fmul     FF1E07B2   1     MFL       fp24=fp30,fp30,fcr
  354| 0030B4 fmul     FDA702F2   2     MFL       fp13=fp7,fp11,fcr
  353| 0030B8 stfdu    DCA30010   2     STFDU     gr3,w1[](gr3,16)=fp5
  354| 0030BC fmul     FCAA01B2   1     MFL       fp5=fp10,fp6,fcr
  355| 0030C0 qvfre    13C04030   1     QVFRE     fp30=fp8
  355| 0030C4 fmsub    FF830A78   1     FMS       fp28=fp1,fp3,fp9,fcr
  353| 0030C8 stfd     D983FFF8   1     STFL      w1[](gr3,-8)=fp12
  354| 0030CC lfd      C98A0008   1     LFL       fp12=u2[](gr10,8)
  354| 0030D0 fmsub    FCFD3B78   1     FMS       fp7=fp7,fp29,fp13,fcr
  354| 0030D4 fmsub    FD5F5178   2     FMS       fp10=fp10,fp31,fp5,fcr
  355| 0030D8 fmsub    FFE80FB8   2     FMS       fp31=fp1,fp8,fp30,fcr
  355| 0030DC fnmsub   FD294F3C   2     FNMS      fp9=fp9,fp9,fp28,fcr
  355| 0030E0 lfd      CB970008   1     LFL       fp28=st3[].rns6.(gr23,8)
  354| 0030E4 lfdu     CFAA0010   1     LFDU      fp29,gr10=u2[](gr10,16)
  354| 0030E8 fnmsub   FCEB69FC   1     FNMS      fp7=fp13,fp11,fp7,fcr
  354| 0030EC fnmsub   FCA62ABC   2     FNMS      fp5=fp5,fp6,fp10,fcr
  355| 0030F0 fnmsub   FCDEF7FC   2     FNMS      fp6=fp30,fp30,fp31,fcr
  355| 0030F4 fmsub    FD630A78   2     FMS       fp11=fp1,fp3,fp9,fcr
  355| 0030F8 lfdu     CD570010   1     LFDU      fp10,gr23=st3[].rns6.(gr23,16)
  355| 0030FC fmul     FFE00732   1     MFL       fp31=fp0,fp28,fcr
  354| 003100 fadd     FCEC382A   2     AFL       fp7=fp12,fp7,fcr
  354| 003104 fadd     FCBD282A   2     AFL       fp5=fp29,fp5,fcr
  355| 003108 fmsub    FD8809B8   2     FMS       fp12=fp1,fp8,fp6,fcr
  355| 00310C fnmsub   FD294AFC   2     FNMS      fp9=fp9,fp9,fp11,fcr
  355| 003110 lfdux    7D6C44EE   1     LFDU      fp11,gr12=srd3(gr12,gr8,0)
  355| 003114 fmul     FFA002B2   1     MFL       fp29=fp0,fp10,fcr
  354| 003118 lfdux    7FC43CEE   1     LFDU      fp30,gr4=srd2(gr4,gr7,0)
    0| 00311C fmr      FF801890   1     LRFL      fp28=fp3
  355| 003120 fnmsub   FD46333C   2     FNMS      fp10=fp6,fp6,fp12,fcr
  353| 003124 fmul     FCC40132   2     MFL       fp6=fp4,fp4,fcr
  353| 003128 qvfre    10801030   1     QVFRE     fp4=fp2
  355| 00312C fmul     FC6B02F2   1     MFL       fp3=fp11,fp11,fcr
  355| 003130 fmul     FD7F0272   2     MFL       fp11=fp31,fp9,fcr
  354| 003134 stfdu    DCBB0010   2     STFDU     gr27,w2[](gr27,16)=fp5
  355| 003138 fmul     FD9D02B2   1     MFL       fp12=fp29,fp10,fcr
  353| 00313C qvfre    11A03030   1     QVFRE     fp13=fp6
  353| 003140 fmsub    FCA20938   1     FMS       fp5=fp1,fp2,fp4,fcr
  354| 003144 stfd     D8FBFFF8   1     STFL      w2[](gr27,-8)=fp7
  355| 003148 lfd      C8FD0008   1     LFL       fp7=u3[](gr29,8)
  355| 00314C fmsub    FFFCFAF8   1     FMS       fp31=fp31,fp28,fp11,fcr
  355| 003150 fmsub    FFA8EB38   2     FMS       fp29=fp29,fp8,fp12,fcr
  353| 003154 fmsub    FF860B78   2     FMS       fp28=fp1,fp6,fp13,fcr
  353| 003158 fnmsub   FCA4217C   2     FNMS      fp5=fp4,fp4,fp5,fcr
  353| 00315C lfd      C89C0008   1     LFL       fp4=st1[].rns4.(gr28,8)
  355| 003160 lfdu     CD1D0010   1     LFDU      fp8,gr29=u3[](gr29,16)
  355| 003164 fnmsub   FD295FFC   1     FNMS      fp9=fp11,fp9,fp31,fcr
  355| 003168 fnmsub   FD4A677C   2     FNMS      fp10=fp12,fp10,fp29,fcr
  353| 00316C fnmsub   FE8D6F3C   2     FNMS      fp20=fp13,fp13,fp28,fcr
  353| 003170 fmsub    FD620978   2     FMS       fp11=fp1,fp2,fp5,fcr
  353| 003174 lfdu     CD9C0010   1     LFDU      fp12,gr28=st1[].rns4.(gr28,16)
  353| 003178 fmul     FC800132   1     MFL       fp4=fp0,fp4,fcr
  355| 00317C fadd     FDA7482A   2     AFL       fp13=fp7,fp9,fcr
  355| 003180 fadd     FD08502A   2     AFL       fp8=fp8,fp10,fcr
  353| 003184 fmsub    FE660D38   2     FMS       fp19=fp1,fp6,fp20,fcr
  353| 003188 fnmsub   FD452AFC   2     FNMS      fp10=fp5,fp5,fp11,fcr
    0| 00318C bc       4200FE8C   1     BCT       ctr=CL.516,taken=100%(100,0)
    0|                              CL.515:
  355| 003190 stfdu    DD1E0010   1     STFDU     gr30,w3[](gr30,16)=fp8
  355| 003194 stfd     D9BEFFF8   1     STFL      w3[](gr30,-8)=fp13
    0|                              CL.514:
  355| 003198 lfdux    7FEC44EE   1     LFDU      fp31,gr12=srd3(gr12,gr8,0)
  354| 00319C fmul     FCBE07B2   1     MFL       fp5=fp30,fp30,fcr
  354| 0031A0 lfd      C8F80008   1     LFL       fp7=st2[].rns5.(gr24,8)
  355| 0031A4 qvfre    11601830   1     QVFRE     fp11=fp3
  354| 0031A8 lfdu     CD380010   1     LFDU      fp9,gr24=st2[].rns5.(gr24,16)
  354| 0031AC qvfre    1100C030   1     QVFRE     fp8=fp24
  355| 0031B0 lfd      C9B70008   1     LFL       fp13=st3[].rns6.(gr23,8)
  355| 0031B4 fmul     FFFF07F2   1     MFL       fp31=fp31,fp31,fcr
  355| 0031B8 lfdu     CE370010   1     LFDU      fp17,gr23=st3[].rns6.(gr23,16)
  354| 0031BC qvfre    13C02830   1     QVFRE     fp30=fp5
  353| 0031C0 lfd      CBA90008   1     LFL       fp29=u1[](gr9,8)
  355| 0031C4 fmsub    FEA30AF8   1     FMS       fp21=fp1,fp3,fp11,fcr
  354| 0031C8 lfd      CB2A0008   1     LFL       fp25=u2[](gr10,8)
  355| 0031CC qvfre    1340F830   1     QVFRE     fp26=fp31
  354| 0031D0 lfdu     CECA0010   1     LFDU      fp22,gr10=u2[](gr10,16)
  354| 0031D4 fmsub    FEE50FB8   1     FMS       fp23=fp1,fp5,fp30,fcr
  353| 0031D8 lfdu     CF690010   1     LFDU      fp27,gr9=u1[](gr9,16)
  354| 0031DC fmsub    FF980A38   1     FMS       fp28=fp1,fp24,fp8,fcr
  355| 0031E0 lfd      CA5D0008   1     LFL       fp18=u3[](gr29,8)
  355| 0031E4 fnmsub   FD6B5D7C   1     FNMS      fp11=fp11,fp11,fp21,fcr
  355| 0031E8 lfdu     CE1D0010   1     LFDU      fp16,gr29=u3[](gr29,16)
  355| 0031EC fmsub    FEBF0EB8   1     FMS       fp21=fp1,fp31,fp26,fcr
  354| 0031F0 fnmsub   FFDEF5FC   2     FNMS      fp30=fp30,fp30,fp23,fcr
  354| 0031F4 fnmsub   FD08473C   2     FNMS      fp8=fp8,fp8,fp28,fcr
  353| 0031F8 fnmsub   FE94A4FC   2     FNMS      fp20=fp20,fp20,fp19,fcr
  353| 0031FC fmul     FD800332   2     MFL       fp12=fp0,fp12,fcr
  355| 003200 fmul     FE200472   2     MFL       fp17=fp0,fp17,fcr
  355| 003204 fnmsub   FF5AD57C   2     FNMS      fp26=fp26,fp26,fp21,fcr
  354| 003208 fmsub    FEE50FB8   2     FMS       fp23=fp1,fp5,fp30,fcr
  355| 00320C fmul     FDA00372   2     MFL       fp13=fp0,fp13,fcr
  354| 003210 fmul     FD200272   2     MFL       fp9=fp0,fp9,fcr
  355| 003214 fmsub    FF830AF8   2     FMS       fp28=fp1,fp3,fp11,fcr
  354| 003218 fmul     FC0001F2   2     MFL       fp0=fp0,fp7,fcr
  354| 00321C fmsub    FCF80A38   2     FMS       fp7=fp1,fp24,fp8,fcr
  353| 003220 fmul     FEA402B2   2     MFL       fp21=fp4,fp10,fcr
  355| 003224 fmsub    FC3F0EB8   2     FMS       fp1=fp1,fp31,fp26,fcr
  353| 003228 fmul     FE6C0532   2     MFL       fp19=fp12,fp20,fcr
  354| 00322C fnmsub   FFDEF5FC   2     FNMS      fp30=fp30,fp30,fp23,fcr
  355| 003230 fnmsub   FD6B5F3C   2     FNMS      fp11=fp11,fp11,fp28,fcr
  354| 003234 fnmsub   FCE841FC   2     FNMS      fp7=fp8,fp8,fp7,fcr
  353| 003238 fmsub    FC422578   2     FMS       fp2=fp4,fp2,fp21,fcr
  355| 00323C fnmsub   FC3AD07C   2     FNMS      fp1=fp26,fp26,fp1,fcr
  353| 003240 fmsub    FC8664F8   2     FMS       fp4=fp12,fp6,fp19,fcr
  354| 003244 fmul     FCC907B2   2     MFL       fp6=fp9,fp30,fcr
  355| 003248 fmul     FD0D02F2   2     MFL       fp8=fp13,fp11,fcr
  354| 00324C fmul     FD8001F2   2     MFL       fp12=fp0,fp7,fcr
  353| 003250 fnmsub   FC4AA8BC   2     FNMS      fp2=fp21,fp10,fp2,fcr
  355| 003254 fmul     FD510072   2     MFL       fp10=fp17,fp1,fcr
  353| 003258 fnmsub   FC94993C   2     FNMS      fp4=fp19,fp20,fp4,fcr
  354| 00325C fmsub    FCA549B8   2     FMS       fp5=fp9,fp5,fp6,fcr
  355| 003260 fmsub    FC636A38   2     FMS       fp3=fp13,fp3,fp8,fcr
  354| 003264 fmsub    FC180338   2     FMS       fp0=fp0,fp24,fp12,fcr
  353| 003268 fadd     FC5D102A   2     AFL       fp2=fp29,fp2,fcr
  355| 00326C fmsub    FD3F8AB8   2     FMS       fp9=fp17,fp31,fp10,fcr
  353| 003270 fadd     FC9B202A   2     AFL       fp4=fp27,fp4,fcr
  354| 003274 fnmsub   FCBE317C   2     FNMS      fp5=fp6,fp30,fp5,fcr
  355| 003278 fnmsub   FC6B40FC   2     FNMS      fp3=fp8,fp11,fp3,fcr
  354| 00327C fnmsub   FC07603C   2     FNMS      fp0=fp12,fp7,fp0,fcr
  353| 003280 stfd     D8430008   1     STFL      w1[](gr3,8)=fp2
  355| 003284 fnmsub   FC21527C   1     FNMS      fp1=fp10,fp1,fp9,fcr
  353| 003288 stfdu    DC830010   2     STFDU     gr3,w1[](gr3,16)=fp4
  354| 00328C fadd     FC56282A   1     AFL       fp2=fp22,fp5,fcr
  354| 003290 fadd     FC19002A   2     AFL       fp0=fp25,fp0,fcr
  355| 003294 fadd     FC72182A   2     AFL       fp3=fp18,fp3,fcr
  355| 003298 fadd     FC30082A   2     AFL       fp1=fp16,fp1,fcr
  354| 00329C stfdu    DC5B0010   2     STFDU     gr27,w2[](gr27,16)=fp2
  354| 0032A0 stfd     D81BFFF8   1     STFL      w2[](gr27,-8)=fp0
  355| 0032A4 stfd     D87E0008   1     STFL      w3[](gr30,8)=fp3
  355| 0032A8 stfdu    DC3E0010   1     STFDU     gr30,w3[](gr30,16)=fp1
  359|                              CL.111:
  359| 0032AC ld       E8210000   1     L8        gr1=#stack(gr1,0),gr31"
  359| 0032B0 lwa      E981000A   1     L4A       gr12=#stack(gr1,8)
  359| 0032B4 ld       E9C1FEE0   1     L8        gr14=#stack(gr1,-288)
  359| 0032B8 ld       E9E1FEE8   1     L8        gr15=#stack(gr1,-280)
  359| 0032BC ld       EA01FEF0   1     L8        gr16=#stack(gr1,-272)
  359| 0032C0 ld       EA21FEF8   1     L8        gr17=#stack(gr1,-264)
  359| 0032C4 ld       EA41FF00   1     L8        gr18=#stack(gr1,-256)
  359| 0032C8 ld       EA61FF08   1     L8        gr19=#stack(gr1,-248)
  359| 0032CC ld       EA81FF10   1     L8        gr20=#stack(gr1,-240)
  359| 0032D0 ld       EAA1FF18   1     L8        gr21=#stack(gr1,-232)
  359| 0032D4 ld       EAC1FF20   1     L8        gr22=#stack(gr1,-224)
  359| 0032D8 ld       EAE1FF28   1     L8        gr23=#stack(gr1,-216)
  359| 0032DC ld       EB01FF30   1     L8        gr24=#stack(gr1,-208)
  359| 0032E0 ld       EB21FF38   1     L8        gr25=#stack(gr1,-200)
  359| 0032E4 ld       EB41FF40   1     L8        gr26=#stack(gr1,-192)
  359| 0032E8 ld       EB61FF48   1     L8        gr27=#stack(gr1,-184)
  359| 0032EC ld       EB81FF50   1     L8        gr28=#stack(gr1,-176)
  359| 0032F0 ld       EBA1FF58   1     L8        gr29=#stack(gr1,-168)
  359| 0032F4 ld       EBC1FF60   1     L8        gr30=#stack(gr1,-160)
  359| 0032F8 ld       EBE1FF68   1     L8        gr31=#stack(gr1,-152)
  359| 0032FC mtcrf    7D808120   1     MTCRF     cr4=gr12
  359| 003300 lfd      CBE1FFF8   1     LFL       fp31=#stack(gr1,-8)
  359| 003304 lfd      CBC1FFF0   1     LFL       fp30=#stack(gr1,-16)
  359| 003308 lfd      CBA1FFE8   1     LFL       fp29=#stack(gr1,-24)
  359| 00330C lfd      CB81FFE0   1     LFL       fp28=#stack(gr1,-32)
  359| 003310 lfd      CB61FFD8   1     LFL       fp27=#stack(gr1,-40)
  359| 003314 lfd      CB41FFD0   1     LFL       fp26=#stack(gr1,-48)
  359| 003318 lfd      CB21FFC8   1     LFL       fp25=#stack(gr1,-56)
  359| 00331C lfd      CB01FFC0   1     LFL       fp24=#stack(gr1,-64)
  359| 003320 lfd      CAE1FFB8   1     LFL       fp23=#stack(gr1,-72)
  359| 003324 lfd      CAC1FFB0   1     LFL       fp22=#stack(gr1,-80)
  359| 003328 lfd      CAA1FFA8   1     LFL       fp21=#stack(gr1,-88)
  359| 00332C lfd      CA81FFA0   1     LFL       fp20=#stack(gr1,-96)
  359| 003330 lfd      CA61FF98   1     LFL       fp19=#stack(gr1,-104)
  359| 003334 lfd      CA41FF90   1     LFL       fp18=#stack(gr1,-112)
  359| 003338 lfd      CA21FF88   1     LFL       fp17=#stack(gr1,-120)
  359| 00333C lfd      CA01FF80   1     LFL       fp16=#stack(gr1,-128)
  359| 003340 lfd      C9E1FF78   1     LFL       fp15=#stack(gr1,-136)
  359| 003344 lfd      C9C1FF70   1     LFL       fp14=#stack(gr1,-144)
  359| 003348 bclr     4E800020   1     BA        lr
    0|                              CL.864:
  336| 00334C std      F897FFF8   1     ST8       st3[].rns6.(gr23,-8)=gr4
  337| 003350 b        4BFFF938   1     B         CL.184,-1
    0|                              CL.202:
  340| 003354 ld       EADF0090   1     L8        gr22=#SPILL1(gr31,144)
  340| 003358 rldicr   7BC41F24   1     SLL8      gr4=gr30,3
  340| 00335C rldicr   798B1F24   1     SLL8      gr11=gr12,3
    0| 003360 ld       EABF0220   1     L8        gr21=#SPILL51(gr31,544)
  340| 003364 mulld    7D6059D2   1     M         gr11=gr0,gr11
  340| 003368 mulld    7C84B1D2   1     M         gr4=gr4,gr22
  340| 00336C rldicr   7AC31F24   1     SLL8      gr3=gr22,3
  340| 003370 mulld    7C8021D2   1     M         gr4=gr0,gr4
  340| 003374 neg      7C6300D0   1     COMP      gr3=gr3
  340| 003378 ld       EA9F00F8   1     L8        gr20=#SPILL14(gr31,248)
  340| 00337C mulld    7F8019D2   1     M         gr28=gr0,gr3
    0| 003380 ld       EA7F01F0   1     L8        gr19=#SPILL45(gr31,496)
  340| 003384 rldicr   781B1F24   1     SLL8      gr27=gr0,3
    0| 003388 subfic   200E0001   1     SFI       gr0=1,gr14,ca"
  340| 00338C ld       EA5F0200   1     L8        gr18=#SPILL47(gr31,512)
  340| 003390 ld       EA3F00B0   1     L8        gr17=#SPILL5(gr31,176)
  340| 003394 ld       EA1F0190   1     L8        gr16=#SPILL33(gr31,400)
  340| 003398 rldicr   79C31F24   1     SLL8      gr3=gr14,3
  340| 00339C subf     7C9B2050   1     S         gr4=gr4,gr27
  340| 0033A0 add      7D6BE214   1     A         gr11=gr11,gr28
    0| 0033A4 add      7F60AA14   1     A         gr27=gr0,gr21
  340| 0033A8 ld       E9FF0250   1     L8        gr15=#SPILL57(gr31,592)
  340| 0033AC addi     3B540078   1     AI        gr26=gr20,120
  340| 0033B0 addi     3B23FFF0   1     AI        gr25=gr3,-16
  340| 0033B4 add      7F845A14   1     A         gr28=gr4,gr11
    0| 0033B8 add      7C009A14   1     A         gr0=gr0,gr19
    0| 0033BC rldicl   7B64F842   1     SRL8      gr4=gr27,1
  340| 0033C0 addi     3963FFF8   1     AI        gr11=gr3,-8
  340| 0033C4 addi     3B120078   1     AI        gr24=gr18,120
  340| 0033C8 add      7F43D214   1     A         gr26=gr3,gr26
  340| 0033CC add      7F39E214   1     A         gr25=gr25,gr28
  340| 0033D0 add      7EF08A14   1     A         gr23=gr16,gr17
  340| 0033D4 add      7CA5EA14   1     A         gr5=gr5,gr29
    0| 0033D8 andi.    70000001   1     RN4_R     gr0,cr0=gr0,0,0x1
    0| 0033DC cmpdi    2CA40000   1     C8        cr1=gr4,0
  340| 0033E0 add      7FA3C214   1     A         gr29=gr3,gr24
  340| 0033E4 add      7F2FCA14   1     A         gr25=gr15,gr25
  340| 0033E8 add      7F0BBA14   1     A         gr24=gr11,gr23
  340| 0033EC add      7CA55A14   1     A         gr5=gr5,gr11
    0| 0033F0 mtspr    7C8903A6   1     LCTR      ctr=gr4
    0| 0033F4 bc       41820038   1     BT        CL.486,cr0,0x4/eq,taken=50%(0,0)
  340| 0033F8 lfd      C83A0000   1     LFL       fp1=bave[].rns7.(gr26,0)
  340| 0033FC lfdu     CC5A0008   1     LFDU      fp2,gr26=bave[].rns7.(gr26,8)
  340| 003400 lfdu     CC650008   1     LFDU      fp3,gr5=g31bi(gr5,8)
  340| 003404 lfd      C89D0000   1     LFL       fp4=bstar[].rns25.(gr29,0)
  340| 003408 lfdu     CCBD0008   1     LFDU      fp5,gr29=bstar[].rns25.(gr29,8)
  340| 00340C lfdu     CCD80008   1     LFDU      fp6,gr24=dx1ai(gr24,8)
  340| 003410 fadd     FC22082A   1     AFL       fp1=fp2,fp1,fcr
  340| 003414 fsub     FC452028   2     SFL       fp2=fp5,fp4,fcr
  340| 003418 fmul     FC230072   2     MFL       fp1=fp3,fp1,fcr
  340| 00341C fmul     FC2100B2   2     MFL       fp1=fp1,fp2,fcr
  340| 003420 fmul     FC260072   2     MFL       fp1=fp6,fp1,fcr
  340| 003424 stfdu    DC390008   2     STFDU     gr25,st3[].rns6.(gr25,8)=fp1
    0| 003428 bc       4186F860   1     BT        CL.184,cr1,0x4/eq,taken=20%(20,80)
    0|                              CL.486:
  340| 00342C lfd      C8BA0000   1     LFL       fp5=bave[].rns7.(gr26,0)
  340| 003430 lfd      C85A0008   1     LFL       fp2=bave[].rns7.(gr26,8)
  340| 003434 lfdu     CD1A0010   1     LFDU      fp8,gr26=bave[].rns7.(gr26,16)
  340| 003438 lfd      C8650008   1     LFL       fp3=g31bi(gr5,8)
  340| 00343C lfd      C89D0000   1     LFL       fp4=bstar[].rns25.(gr29,0)
  340| 003440 lfd      C8DD0008   1     LFL       fp6=bstar[].rns25.(gr29,8)
  340| 003444 lfdu     CD3D0010   1     LFDU      fp9,gr29=bstar[].rns25.(gr29,16)
  340| 003448 lfdu     CC250010   1     LFDU      fp1,gr5=g31bi(gr5,16)
  340| 00344C fadd     FCA2282A   1     AFL       fp5=fp2,fp5,fcr
  340| 003450 lfd      C8F80008   1     LFL       fp7=dx1ai(gr24,8)
  340| 003454 fadd     FC48102A   1     AFL       fp2=fp8,fp2,fcr
  340| 003458 lfdu     CD180010   1     LFDU      fp8,gr24=dx1ai(gr24,16)
  340| 00345C fsub     FC862028   1     SFL       fp4=fp6,fp4,fcr
  340| 003460 fsub     FCC93028   2     SFL       fp6=fp9,fp6,fcr
  340| 003464 fmul     FC630172   2     MFL       fp3=fp3,fp5,fcr
  340| 003468 fmul     FCA100B2   2     MFL       fp5=fp1,fp2,fcr
    0| 00346C bc       42400064   1     BCF       ctr=CL.517,taken=0%(0,100)
    0| 003470 ori      60210000   1     XNOP      
    0|                              CL.518:
  340| 003474 lfd      C8250008   1     LFL       fp1=g31bi(gr5,8)
  340| 003478 lfd      C85D0000   1     LFL       fp2=bstar[].rns25.(gr29,0)
  340| 00347C fmul     FD430132   1     MFL       fp10=fp3,fp4,fcr
  340| 003480 fmul     FD2501B2   2     MFL       fp9=fp5,fp6,fcr
  340| 003484 lfd      C87A0000   1     LFL       fp3=bave[].rns7.(gr26,0)
  340| 003488 lfd      C89A0008   1     LFL       fp4=bave[].rns7.(gr26,8)
  340| 00348C lfdu     CCBA0010   1     LFDU      fp5,gr26=bave[].rns7.(gr26,16)
  340| 003490 lfd      C8DD0008   1     LFL       fp6=bstar[].rns25.(gr29,8)
  340| 003494 fmul     FCE702B2   1     MFL       fp7=fp7,fp10,fcr
  340| 003498 fmul     FD080272   2     MFL       fp8=fp8,fp9,fcr
  340| 00349C lfdu     CD3D0010   1     LFDU      fp9,gr29=bstar[].rns25.(gr29,16)
  340| 0034A0 lfdu     CD450010   1     LFDU      fp10,gr5=g31bi(gr5,16)
  340| 0034A4 fadd     FC64182A   1     AFL       fp3=fp4,fp3,fcr
  340| 0034A8 fadd     FCA5202A   2     AFL       fp5=fp5,fp4,fcr
  340| 0034AC fsub     FC861028   2     SFL       fp4=fp6,fp2,fcr
  340| 0034B0 stfd     D8F90008   1     STFL      st3[].rns6.(gr25,8)=fp7
  340| 0034B4 stfdu    DD190010   1     STFDU     gr25,st3[].rns6.(gr25,16)=fp8
  340| 0034B8 fsub     FCC93028   1     SFL       fp6=fp9,fp6,fcr
  340| 0034BC fmul     FC6100F2   2     MFL       fp3=fp1,fp3,fcr
  340| 0034C0 fmul     FCAA0172   2     MFL       fp5=fp10,fp5,fcr
  340| 0034C4 lfd      C8F80008   1     LFL       fp7=dx1ai(gr24,8)
  340| 0034C8 lfdu     CD180010   1     LFDU      fp8,gr24=dx1ai(gr24,16)
    0| 0034CC bc       4200FFA8   1     BCT       ctr=CL.518,taken=100%(100,0)
    0|                              CL.517:
  340| 0034D0 fmul     FC230132   1     MFL       fp1=fp3,fp4,fcr
  340| 0034D4 fmul     FC4501B2   2     MFL       fp2=fp5,fp6,fcr
  340| 0034D8 fmul     FC270072   2     MFL       fp1=fp7,fp1,fcr
  340| 0034DC fmul     FC4800B2   2     MFL       fp2=fp8,fp2,fcr
  340| 0034E0 stfd     D8390008   1     STFL      st3[].rns6.(gr25,8)=fp1
  340| 0034E4 stfdu    DC590010   1     STFDU     gr25,st3[].rns6.(gr25,16)=fp2
    0| 0034E8 b        4BFFF7A0   1     B         CL.184,-1
     |               Tag Table
     | 0034EC        00000000 00012222 92120000 000034EC 1F
     |               Instruction count         3387
     |               Straight-line exec time   4503
     |               Constant Area
     | 000000        3F000000 BF800000 BEA00000 3EC00000 BF000000 00000000
     | 000018        3F800000 49424D20 2B617F7D 4ED8C33E 3F400000 49424D20
     | 000030        55555555 55555556

 
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              NODIRECTSTORAG  ESCAPE          I4
         INLGLUE         NOLIBESSL       NOLIBPOSIX      OBJECT
         SWAPOMP         THREADED        UNWIND          ZEROSIZE
  
         ==  Options Of Integer Type ==
         ALIAS_SIZE(65536)     MAXMEM(-1)            OPTIMIZE(3)
         SPILLSIZE(512)        STACKTEMP(0)
  
         ==  Options of Integer and Character Type ==
         CACHE(LEVEL(1),TYPE(I),ASSOC(4),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(I),ASSOC(16),COST(80),LINE(128))
         CACHE(LEVEL(1),TYPE(D),ASSOC(8),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(D),ASSOC(16),COST(80),LINE(128))
         INLINE(NOAUTO,LEVEL(5))
         HOT(FASTMATH,LEVEL(0))
         SIMD(AUTO)
  
         ==  Options Of Character Type  ==
         64()                  ALIAS(STD,NOINTPTR)   ALIGN(BINDC(LINUXPPC),STRUCT(NATURAL))
         ARCH(QP)              AUTODBL(NONE)         DESCRIPTOR(V1)
         DIRECTIVE(IBM*,IBMT)  ENUM()                FLAG(I,I)
         FLOAT(MAF,FOLD,RSQRT,FLTINT)
         FREE(F90)             GNU_VERSION(DOT_TRIPLE)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LIST()                LANGLVL(EXTENDED)     REALSIZE(4)
         REPORT(HOTLIST)       STRICT(NONE,NOPRECISION,NOEXCEPTIONS,NOIEEEFP,NONANS,NOINFINITIES,NOSUBNORMALS,NOZEROSIGNS,NOOPERATIONPRECISION,ORDER,NOLIBRARY,NOCONSTRUCTCOPY,NOVECTORPRECISION)
         TUNE(QP)              UNROLL(AUTO)          XFLAG()
         XLF2003(NOPOLYMORPHIC,NOBOZLITARGS,NOSIGNDZEROINTR,NOSTOPEXCEPT,NOVOLATILE,NOAUTOREALLOC,OLDNANINF)
         XLF2008(NOCHECKPRESENCE)
         XLF77(LEADZERO,BLANKPAD)
         XLF90(SIGNEDZERO,AUTODEALLOC)
  
>>>>> SOURCE SECTION <<<<<
 
>>>>> FILE TABLE SECTION <<<<<
 
 
                                       FILE CREATION        FROM
FILE NO   FILENAME                    DATE       TIME       FILE    LINE
     0    lorentz_1D.f90              07/08/15   15:48:07
 
 
>>>>> COMPILATION EPILOGUE SECTION <<<<<
 
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
 
    Source records read.......................................     366
1501-510  Compilation successful for file lorentz_1D.f90.
1501-543  Object file created.

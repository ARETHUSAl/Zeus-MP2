IBM XL Fortran for Blue Gene, V14.1 (5799-AH1) Version 14.01.0000.0012 --- newgrid.f90 07/08/15 15:48:24
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              NODIRECTSTORAG  ESCAPE          I4
         INLGLUE         NOLIBESSL       NOLIBPOSIX      OBJECT
         SWAPOMP         THREADED        UNWIND          ZEROSIZE
  
         ==  Options Of Integer Type ==
         ALIAS_SIZE(65536)     MAXMEM(-1)            OPTIMIZE(3)
         SPILLSIZE(512)        STACKTEMP(0)
  
         ==  Options of Integer and Character Type ==
         CACHE(LEVEL(1),TYPE(I),ASSOC(4),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(I),ASSOC(16),COST(80),LINE(128))
         CACHE(LEVEL(1),TYPE(D),ASSOC(8),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(D),ASSOC(16),COST(80),LINE(128))
         INLINE(NOAUTO,LEVEL(5))
         HOT(FASTMATH,LEVEL(0))
         SIMD(AUTO)
  
         ==  Options Of Character Type  ==
         64()                  ALIAS(STD,NOINTPTR)   ALIGN(BINDC(LINUXPPC),STRUCT(NATURAL))
         ARCH(QP)              AUTODBL(NONE)         DESCRIPTOR(V1)
         DIRECTIVE(IBM*,IBMT)  ENUM()                FLAG(I,I)
         FLOAT(MAF,FOLD,RSQRT,FLTINT)
         FREE(F90)             GNU_VERSION(DOT_TRIPLE)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LIST()                LANGLVL(EXTENDED)     REALSIZE(4)
         REPORT(HOTLIST)       STRICT(NONE,NOPRECISION,NOEXCEPTIONS,NOIEEEFP,NONANS,NOINFINITIES,NOSUBNORMALS,NOZEROSIGNS,NOOPERATIONPRECISION,ORDER,NOLIBRARY,NOCONSTRUCTCOPY,NOVECTORPRECISION)
         TUNE(QP)              UNROLL(AUTO)          XFLAG()
         XLF2003(NOPOLYMORPHIC,NOBOZLITARGS,NOSIGNDZEROINTR,NOSTOPEXCEPT,NOVOLATILE,NOAUTOREALLOC,OLDNANINF)
         XLF2008(NOCHECKPRESENCE)
         XLF77(LEADZERO,BLANKPAD)
         XLF90(SIGNEDZERO,AUTODEALLOC)
  
>>>>> SOURCE SECTION <<<<<
** newgrid   === End of Compilation 1 ===
 
>>>>> LOOP TRANSFORMATION SECTION <<<<<

1586-534 (I) Loop (loop index 1) at newgrid.f90 <line 45> was not SIMD vectorized because the loop is not the innermost loop.
1586-550 (I) Loop (loop index 2) at newgrid.f90 <line 65> was not SIMD vectorized because it is not profitable to vectorize.
1586-536 (I) Loop (loop index 2) at newgrid.f90 <line 66> was not SIMD vectorized because it contains memory references ((char *)d-x1ai%addr  + d-x1ai%rvo + (8ll)*(($$CIV2 + (long long) is) - 2ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 2) at newgrid.f90 <line 66> was not SIMD vectorized because it contains operation in  1.0000000000000000E+000 / (((double *)((char *)d-x1a%addr  + d-x1a%rvo))->x1a[].rns23.[($$CIV2 + (long long) is) - 2ll] +  1.0000000000000000E-099) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 2) at newgrid.f90 <line 66> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 2) at newgrid.f90 <line 70> was not SIMD vectorized because it contains memory references ((char *)d-g2ai%addr  + d-g2ai%rvo + (8ll)*(($$CIV2 + (long long) is) - 2ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 2) at newgrid.f90 <line 70> was not SIMD vectorized because it contains operation in  1.0000000000000000E+000 / (((double *)((char *)d-g2a%addr  + d-g2a%rvo))->g2a[].rns31.[($$CIV2 + (long long) is) - 2ll] +  1.0000000000000000E-099) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 2) at newgrid.f90 <line 70> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 2) at newgrid.f90 <line 69> was not SIMD vectorized because it contains memory references ((char *)d-dx1bi%addr  + d-dx1bi%rvo + (8ll)*(($$CIV2 + (long long) is) - 2ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 2) at newgrid.f90 <line 69> was not SIMD vectorized because it contains operation in  1.0000000000000000E+000 / (((double *)((char *)d-dx1b%addr  + d-dx1b%rvo))->dx1b[].rns29.[($$CIV2 + (long long) is) - 2ll] +  1.0000000000000000E-099) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 2) at newgrid.f90 <line 69> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 2) at newgrid.f90 <line 74> was not SIMD vectorized because it contains memory references ((char *)d-dvl1ai%addr  + d-dvl1ai%rvo + (8ll)*(($$CIV2 + (long long) is) - 2ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 2) at newgrid.f90 <line 74> was not SIMD vectorized because it contains operation in  1.0000000000000000E+000 / (((double *)((char *)d-dvl1a%addr  + d-dvl1a%rvo))->dvl1a[].rns39.[($$CIV2 + (long long) is) - 2ll] +  1.0000000000000000E-099) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 2) at newgrid.f90 <line 74> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 2) at newgrid.f90 <line 72> was not SIMD vectorized because it contains memory references ((char *)d-g31ai%addr  + d-g31ai%rvo + (8ll)*(($$CIV2 + (long long) is) - 2ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 2) at newgrid.f90 <line 72> was not SIMD vectorized because it contains operation in  1.0000000000000000E+000 / (((double *)((char *)d-g31a%addr  + d-g31a%rvo))->g31a[].rns35.[($$CIV2 + (long long) is) - 2ll] +  1.0000000000000000E-099) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 2) at newgrid.f90 <line 72> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 2) at newgrid.f90 <line 68> was not SIMD vectorized because it contains memory references ((char *)d-dx1ai%addr  + d-dx1ai%rvo + (8ll)*(($$CIV2 + (long long) is) - 2ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 2) at newgrid.f90 <line 68> was not SIMD vectorized because it contains operation in  1.0000000000000000E+000 / (((double *)((char *)d-dx1a%addr  + d-dx1a%rvo))->dx1a[].rns27.[($$CIV2 + (long long) is) - 2ll] +  1.0000000000000000E-099) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 2) at newgrid.f90 <line 68> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 2) at newgrid.f90 <line 73> was not SIMD vectorized because it contains memory references ((char *)d-g31bi%addr  + d-g31bi%rvo + (8ll)*(($$CIV2 + (long long) is) - 2ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 2) at newgrid.f90 <line 73> was not SIMD vectorized because it contains operation in  1.0000000000000000E+000 / (((double *)((char *)d-g31b%addr  + d-g31b%rvo))->g31b[].rns37.[($$CIV2 + (long long) is) - 2ll] +  1.0000000000000000E-099) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 2) at newgrid.f90 <line 73> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 2) at newgrid.f90 <line 71> was not SIMD vectorized because it contains memory references ((char *)d-g2bi%addr  + d-g2bi%rvo + (8ll)*(($$CIV2 + (long long) is) - 2ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 2) at newgrid.f90 <line 71> was not SIMD vectorized because it contains operation in  1.0000000000000000E+000 / (((double *)((char *)d-g2b%addr  + d-g2b%rvo))->g2b[].rns33.[($$CIV2 + (long long) is) - 2ll] +  1.0000000000000000E-099) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 2) at newgrid.f90 <line 71> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 2) at newgrid.f90 <line 67> was not SIMD vectorized because it contains memory references ((char *)d-x1bi%addr  + d-x1bi%rvo + (8ll)*(($$CIV2 + (long long) is) - 2ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 2) at newgrid.f90 <line 67> was not SIMD vectorized because it contains operation in  1.0000000000000000E+000 / (((double *)((char *)d-x1b%addr  + d-x1b%rvo))->x1b[].rns25.[($$CIV2 + (long long) is) - 2ll] +  1.0000000000000000E-099) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 2) at newgrid.f90 <line 67> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 2) at newgrid.f90 <line 75> was not SIMD vectorized because it contains memory references ((char *)d-dvl1bi%addr  + d-dvl1bi%rvo + (8ll)*(($$CIV2 + (long long) is) - 2ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 2) at newgrid.f90 <line 75> was not SIMD vectorized because it contains operation in  1.0000000000000000E+000 / (((double *)((char *)d-dvl1b%addr  + d-dvl1b%rvo))->dvl1b[].rns41.[($$CIV2 + (long long) is) - 2ll] +  1.0000000000000000E-099) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 2) at newgrid.f90 <line 75> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-550 (I) Loop (loop index 3) at newgrid.f90 <line 88> was not SIMD vectorized because it is not profitable to vectorize.
1586-536 (I) Loop (loop index 3) at newgrid.f90 <line 90> was not SIMD vectorized because it contains memory references ((char *)d-dx1bni%addr  + d-dx1bni%rvo + (8ll)*(($$CIV3 + (long long) is) - 2ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 3) at newgrid.f90 <line 90> was not SIMD vectorized because it contains operation in  1.0000000000000000E+000 / ((double *)((char *)d-dx1bn%addr  + d-dx1bn%rvo))->dx1bn[].rns45.[($$CIV3 + (long long) is) - 2ll] which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 3) at newgrid.f90 <line 90> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 3) at newgrid.f90 <line 89> was not SIMD vectorized because it contains memory references ((char *)d-dx1ani%addr  + d-dx1ani%rvo + (8ll)*(($$CIV3 + (long long) is) - 2ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 3) at newgrid.f90 <line 89> was not SIMD vectorized because it contains operation in  1.0000000000000000E+000 / ((double *)((char *)d-dx1an%addr  + d-dx1an%rvo))->dx1an[].rns43.[($$CIV3 + (long long) is) - 2ll] which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 3) at newgrid.f90 <line 89> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-534 (I) Loop (loop index 4) at newgrid.f90 <line 93> was not SIMD vectorized because the loop is not the innermost loop.
1586-540 (I) Loop (loop index 5) at newgrid.f90 <line 94> was not SIMD vectorized because it contains memory references ((double *)((char *)d-v3oib%addr  + d-v3oib%rvo))->v3oib[].rns46.[1ll][3ll + ($$CIV9 * 4ll + (long long) kn % 4ll)][$$CIV4 + 1ll] = ( 3.0000001192092895E-001 * ((double *)((char *)d-x1b%addr  + d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 1)]) * _sin@7(((double *)((char *)d-x2b%addr  + d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]); with non-vectorizable strides.
1586-540 (I) Loop (loop index 5) at newgrid.f90 <line 94> was not SIMD vectorized because it contains memory references ((double *)((char *)d-v3oib%addr  + d-v3oib%rvo))->v3oib[].rns46.[2ll][2ll + ($$CIV9 * 4ll + (long long) kn % 4ll)][$$CIV4 + 1ll] = ( 3.0000001192092895E-001 * ((double *)((char *)d-x1b%addr  + d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 2)]) * _sin@7(((double *)((char *)d-x2b%addr  + d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]); with non-vectorizable strides.
1586-540 (I) Loop (loop index 5) at newgrid.f90 <line 94> was not SIMD vectorized because it contains memory references ((double *)((char *)d-v3oib%addr  + d-v3oib%rvo))->v3oib[].rns46.[1ll][4ll + ($$CIV9 * 4ll + (long long) kn % 4ll)][$$CIV4 + 1ll] = ( 3.0000001192092895E-001 * ((double *)((char *)d-x1b%addr  + d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 1)]) * _sin@7(((double *)((char *)d-x2b%addr  + d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]); with non-vectorizable strides.
1586-540 (I) Loop (loop index 5) at newgrid.f90 <line 94> was not SIMD vectorized because it contains memory references ((double *)((char *)d-v3oib%addr  + d-v3oib%rvo))->v3oib[].rns46.[1ll][2ll + ($$CIV9 * 4ll + (long long) kn % 4ll)][$$CIV4 + 1ll] = ( 3.0000001192092895E-001 * ((double *)((char *)d-x1b%addr  + d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 1)]) * _sin@7(((double *)((char *)d-x2b%addr  + d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]); with non-vectorizable strides.
1586-540 (I) Loop (loop index 5) at newgrid.f90 <line 94> was not SIMD vectorized because it contains memory references ((double *)((char *)d-v3oib%addr  + d-v3oib%rvo))->v3oib[].rns46.[2ll][3ll + ($$CIV9 * 4ll + (long long) kn % 4ll)][$$CIV4 + 1ll] = ( 3.0000001192092895E-001 * ((double *)((char *)d-x1b%addr  + d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 2)]) * _sin@7(((double *)((char *)d-x2b%addr  + d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]); with non-vectorizable strides.
1586-540 (I) Loop (loop index 5) at newgrid.f90 <line 94> was not SIMD vectorized because it contains memory references ((double *)((char *)d-v3oib%addr  + d-v3oib%rvo))->v3oib[].rns46.[2ll][1ll + ($$CIV9 * 4ll + (long long) kn % 4ll)][$$CIV4 + 1ll] = ( 3.0000001192092895E-001 * ((double *)((char *)d-x1b%addr  + d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 2)]) * _sin@7(((double *)((char *)d-x2b%addr  + d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]); with non-vectorizable strides.
1586-540 (I) Loop (loop index 5) at newgrid.f90 <line 94> was not SIMD vectorized because it contains memory references ((double *)((char *)d-v3oib%addr  + d-v3oib%rvo))->v3oib[].rns46.[2ll][4ll + ($$CIV9 * 4ll + (long long) kn % 4ll)][$$CIV4 + 1ll] = ( 3.0000001192092895E-001 * ((double *)((char *)d-x1b%addr  + d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 2)]) * _sin@7(((double *)((char *)d-x2b%addr  + d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]); with non-vectorizable strides.
1586-540 (I) Loop (loop index 5) at newgrid.f90 <line 94> was not SIMD vectorized because it contains memory references ((double *)((char *)d-v3oib%addr  + d-v3oib%rvo))->v3oib[].rns46.[1ll][1ll + ($$CIV9 * 4ll + (long long) kn % 4ll)][$$CIV4 + 1ll] = ( 3.0000001192092895E-001 * ((double *)((char *)d-x1b%addr  + d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 1)]) * _sin@7(((double *)((char *)d-x2b%addr  + d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]); with non-vectorizable strides.
1586-536 (I) Loop (loop index 5) at newgrid.f90 <line 95> was not SIMD vectorized because it contains memory references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + (d-v3oib%bounds%mult[].off5072)*(3ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 5) at newgrid.f90 <line 95> was not SIMD vectorized because it contains operation in ( 3.0000001192092895E-001 * ((double *)((char *)d-x1b%addr  + d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 1)]) * _sin@7(((double *)((char *)d-x2b%addr  + d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 5) at newgrid.f90 <line 95> was not SIMD vectorized because it contains memory references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + (d-v3oib%bounds%mult[].off5072)*(3ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 5) at newgrid.f90 <line 95> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 5) at newgrid.f90 <line 95> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + (d-v3oib%bounds%mult[].off5072)*(3ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)).
1586-536 (I) Loop (loop index 5) at newgrid.f90 <line 96> was not SIMD vectorized because it contains memory references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + (d-v3oib%bounds%mult[].off5072)*(2ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 5) at newgrid.f90 <line 96> was not SIMD vectorized because it contains operation in ( 3.0000001192092895E-001 * ((double *)((char *)d-x1b%addr  + d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 2)]) * _sin@7(((double *)((char *)d-x2b%addr  + d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 5) at newgrid.f90 <line 96> was not SIMD vectorized because it contains memory references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + (d-v3oib%bounds%mult[].off5072)*(2ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 5) at newgrid.f90 <line 96> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 5) at newgrid.f90 <line 96> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + (d-v3oib%bounds%mult[].off5072)*(2ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)).
1586-536 (I) Loop (loop index 5) at newgrid.f90 <line 95> was not SIMD vectorized because it contains memory references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + (d-v3oib%bounds%mult[].off5072)*(4ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 5) at newgrid.f90 <line 95> was not SIMD vectorized because it contains operation in ( 3.0000001192092895E-001 * ((double *)((char *)d-x1b%addr  + d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 1)]) * _sin@7(((double *)((char *)d-x2b%addr  + d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 5) at newgrid.f90 <line 95> was not SIMD vectorized because it contains memory references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + (d-v3oib%bounds%mult[].off5072)*(4ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 5) at newgrid.f90 <line 95> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 5) at newgrid.f90 <line 95> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + (d-v3oib%bounds%mult[].off5072)*(4ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)).
1586-536 (I) Loop (loop index 5) at newgrid.f90 <line 95> was not SIMD vectorized because it contains memory references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + (d-v3oib%bounds%mult[].off5072)*(2ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 5) at newgrid.f90 <line 95> was not SIMD vectorized because it contains operation in ( 3.0000001192092895E-001 * ((double *)((char *)d-x1b%addr  + d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 1)]) * _sin@7(((double *)((char *)d-x2b%addr  + d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 5) at newgrid.f90 <line 95> was not SIMD vectorized because it contains memory references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + (d-v3oib%bounds%mult[].off5072)*(2ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 5) at newgrid.f90 <line 95> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 5) at newgrid.f90 <line 95> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + (d-v3oib%bounds%mult[].off5072)*(2ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)).
1586-536 (I) Loop (loop index 5) at newgrid.f90 <line 96> was not SIMD vectorized because it contains memory references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + (d-v3oib%bounds%mult[].off5072)*(3ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 5) at newgrid.f90 <line 96> was not SIMD vectorized because it contains operation in ( 3.0000001192092895E-001 * ((double *)((char *)d-x1b%addr  + d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 2)]) * _sin@7(((double *)((char *)d-x2b%addr  + d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 5) at newgrid.f90 <line 96> was not SIMD vectorized because it contains memory references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + (d-v3oib%bounds%mult[].off5072)*(3ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 5) at newgrid.f90 <line 96> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 5) at newgrid.f90 <line 96> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + (d-v3oib%bounds%mult[].off5072)*(3ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)).
1586-536 (I) Loop (loop index 5) at newgrid.f90 <line 96> was not SIMD vectorized because it contains memory references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + (d-v3oib%bounds%mult[].off5072)*(1ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 5) at newgrid.f90 <line 96> was not SIMD vectorized because it contains operation in ( 3.0000001192092895E-001 * ((double *)((char *)d-x1b%addr  + d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 2)]) * _sin@7(((double *)((char *)d-x2b%addr  + d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 5) at newgrid.f90 <line 96> was not SIMD vectorized because it contains memory references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + (d-v3oib%bounds%mult[].off5072)*(1ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 5) at newgrid.f90 <line 96> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 5) at newgrid.f90 <line 96> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + (d-v3oib%bounds%mult[].off5072)*(1ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)).
1586-536 (I) Loop (loop index 5) at newgrid.f90 <line 96> was not SIMD vectorized because it contains memory references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + (d-v3oib%bounds%mult[].off5072)*(4ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 5) at newgrid.f90 <line 96> was not SIMD vectorized because it contains operation in ( 3.0000001192092895E-001 * ((double *)((char *)d-x1b%addr  + d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 2)]) * _sin@7(((double *)((char *)d-x2b%addr  + d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 5) at newgrid.f90 <line 96> was not SIMD vectorized because it contains memory references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + (d-v3oib%bounds%mult[].off5072)*(4ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 5) at newgrid.f90 <line 96> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 5) at newgrid.f90 <line 96> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + (d-v3oib%bounds%mult[].off5072)*(4ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)).
1586-536 (I) Loop (loop index 5) at newgrid.f90 <line 95> was not SIMD vectorized because it contains memory references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + (d-v3oib%bounds%mult[].off5072)*(1ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 5) at newgrid.f90 <line 95> was not SIMD vectorized because it contains operation in ( 3.0000001192092895E-001 * ((double *)((char *)d-x1b%addr  + d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 1)]) * _sin@7(((double *)((char *)d-x2b%addr  + d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 5) at newgrid.f90 <line 95> was not SIMD vectorized because it contains memory references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + (d-v3oib%bounds%mult[].off5072)*(1ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 5) at newgrid.f90 <line 95> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 5) at newgrid.f90 <line 95> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + (d-v3oib%bounds%mult[].off5072)*(1ll + ($$CIV9 * 4ll + (long long) kn % 4ll)) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)).
1586-538 (I) Loop (loop index 6) at newgrid.f90 <line 116> was not SIMD vectorized because it contains unsupported loop structure.
1586-552 (I) Loop (loop index 6) at newgrid.f90 <line 116> was not SIMD vectorized because it contains control flow.
1586-550 (I) Loop (loop index 7) at newgrid.f90 <line 136> was not SIMD vectorized because it is not profitable to vectorize.
1586-536 (I) Loop (loop index 7) at newgrid.f90 <line 137> was not SIMD vectorized because it contains memory references ((char *)d-dx3ai%addr  + d-dx3ai%rvo + (8ll)*(($$CIV7 + (long long) ks) - 2ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 7) at newgrid.f90 <line 137> was not SIMD vectorized because it contains operation in  1.0000000000000000E+000 / ((double *)((char *)d-dx3a%addr  + d-dx3a%rvo))->dx3a[].rns98.[($$CIV7 + (long long) ks) - 2ll] which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 7) at newgrid.f90 <line 137> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-536 (I) Loop (loop index 7) at newgrid.f90 <line 138> was not SIMD vectorized because it contains memory references ((char *)d-dx3bi%addr  + d-dx3bi%rvo + (8ll)*(($$CIV7 + (long long) ks) - 2ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 7) at newgrid.f90 <line 138> was not SIMD vectorized because it contains operation in  1.0000000000000000E+000 / ((double *)((char *)d-dx3b%addr  + d-dx3b%rvo))->dx3b[].rns100.[($$CIV7 + (long long) ks) - 2ll] which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 7) at newgrid.f90 <line 138> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-533 (I) Loop (loop index 8) at newgrid.f90 <line 45> was not SIMD vectorized because its number of iterations is too small.
1586-540 (I) Loop (loop index 8) at newgrid.f90 <line 45> was not SIMD vectorized because it contains memory references ((int *)((char *)&&&N&&bndry  + -36ll))->bvstat[][$$CIV8 * 4ll + 3ll][(long long) $$CIV0 * 2ll + 1ll] = 0; with non-vectorizable strides.
1586-540 (I) Loop (loop index 8) at newgrid.f90 <line 45> was not SIMD vectorized because it contains memory references ((int *)((char *)&&&N&&bndry  + -36ll))->bvstat[][$$CIV8 * 4ll + 1ll][(long long) $$CIV0 * 2ll + 1ll] = 0; with non-vectorizable strides.
1586-540 (I) Loop (loop index 8) at newgrid.f90 <line 45> was not SIMD vectorized because it contains memory references ((int *)((char *)&&&N&&bndry  + -36ll))->bvstat[][$$CIV8 * 4ll + 2ll][(long long) $$CIV0 * 2ll + 1ll] = 0; with non-vectorizable strides.
1586-540 (I) Loop (loop index 8) at newgrid.f90 <line 45> was not SIMD vectorized because it contains memory references ((int *)((char *)&&&N&&bndry  + -36ll))->bvstat[][$$CIV8 * 4ll + 4ll][(long long) $$CIV0 * 2ll + 1ll] = 0; with non-vectorizable strides.
1586-540 (I) Loop (loop index 8) at newgrid.f90 <line 46> was not SIMD vectorized because it contains memory references ((char *)&&&N&&bndry  + -36ll + (32ll)*($$CIV8 * 4ll + 3ll) + (4ll)*((long long) $$CIV0 * 2ll + 1ll)) with non-vectorizable strides.
1586-551 (I) Loop (loop index 8) at newgrid.f90 <line 46> was not SIMD vectorized because it contains unsupported vector data types.
1586-556 (I) Loop (loop index 8) at newgrid.f90 <line 46> was not SIMD vectorized because it contains non-stride-one store references ((char *)&&&N&&bndry  + -36ll + (32ll)*($$CIV8 * 4ll + 3ll) + (4ll)*((long long) $$CIV0 * 2ll + 1ll)).
1586-540 (I) Loop (loop index 8) at newgrid.f90 <line 46> was not SIMD vectorized because it contains memory references ((char *)&&&N&&bndry  + -36ll + (32ll)*($$CIV8 * 4ll + 1ll) + (4ll)*((long long) $$CIV0 * 2ll + 1ll)) with non-vectorizable strides.
1586-551 (I) Loop (loop index 8) at newgrid.f90 <line 46> was not SIMD vectorized because it contains unsupported vector data types.
1586-556 (I) Loop (loop index 8) at newgrid.f90 <line 46> was not SIMD vectorized because it contains non-stride-one store references ((char *)&&&N&&bndry  + -36ll + (32ll)*($$CIV8 * 4ll + 1ll) + (4ll)*((long long) $$CIV0 * 2ll + 1ll)).
1586-540 (I) Loop (loop index 8) at newgrid.f90 <line 46> was not SIMD vectorized because it contains memory references ((char *)&&&N&&bndry  + -36ll + (32ll)*($$CIV8 * 4ll + 2ll) + (4ll)*((long long) $$CIV0 * 2ll + 1ll)) with non-vectorizable strides.
1586-551 (I) Loop (loop index 8) at newgrid.f90 <line 46> was not SIMD vectorized because it contains unsupported vector data types.
1586-556 (I) Loop (loop index 8) at newgrid.f90 <line 46> was not SIMD vectorized because it contains non-stride-one store references ((char *)&&&N&&bndry  + -36ll + (32ll)*($$CIV8 * 4ll + 2ll) + (4ll)*((long long) $$CIV0 * 2ll + 1ll)).
1586-540 (I) Loop (loop index 8) at newgrid.f90 <line 46> was not SIMD vectorized because it contains memory references ((char *)&&&N&&bndry  + -36ll + (32ll)*($$CIV8 * 4ll + 4ll) + (4ll)*((long long) $$CIV0 * 2ll + 1ll)) with non-vectorizable strides.
1586-551 (I) Loop (loop index 8) at newgrid.f90 <line 46> was not SIMD vectorized because it contains unsupported vector data types.
1586-556 (I) Loop (loop index 8) at newgrid.f90 <line 46> was not SIMD vectorized because it contains non-stride-one store references ((char *)&&&N&&bndry  + -36ll + (32ll)*($$CIV8 * 4ll + 4ll) + (4ll)*((long long) $$CIV0 * 2ll + 1ll)).
1586-534 (I) Loop (loop index 11) at newgrid.f90 <line 93> was not SIMD vectorized because the loop is not the innermost loop.
1586-540 (I) Loop (loop index 12) at newgrid.f90 <line 94> was not SIMD vectorized because it contains memory references ((double *)((char *)d-v3oib%addr  + d-v3oib%rvo))->v3oib[].rns46.[1ll][$$CIV5 + 1ll][$$CIV4 + 1ll] = ( 3.0000001192092895E-001 * ((double *)((char *)d-x1b%addr  + d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 1)]) * _sin@7(((double *)((char *)d-x2b%addr  + d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]); with non-vectorizable strides.
1586-540 (I) Loop (loop index 12) at newgrid.f90 <line 94> was not SIMD vectorized because it contains memory references ((double *)((char *)d-v3oib%addr  + d-v3oib%rvo))->v3oib[].rns46.[2ll][$$CIV5 + 1ll][$$CIV4 + 1ll] = ( 3.0000001192092895E-001 * ((double *)((char *)d-x1b%addr  + d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 2)]) * _sin@7(((double *)((char *)d-x2b%addr  + d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]); with non-vectorizable strides.
1586-536 (I) Loop (loop index 12) at newgrid.f90 <line 95> was not SIMD vectorized because it contains memory references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + (d-v3oib%bounds%mult[].off5072)*($$CIV5 + 1ll) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 12) at newgrid.f90 <line 95> was not SIMD vectorized because it contains operation in ( 3.0000001192092895E-001 * ((double *)((char *)d-x1b%addr  + d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 1)]) * _sin@7(((double *)((char *)d-x2b%addr  + d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 12) at newgrid.f90 <line 95> was not SIMD vectorized because it contains memory references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + (d-v3oib%bounds%mult[].off5072)*($$CIV5 + 1ll) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 12) at newgrid.f90 <line 95> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 12) at newgrid.f90 <line 95> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + (d-v3oib%bounds%mult[].off5072)*($$CIV5 + 1ll) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)).
1586-536 (I) Loop (loop index 12) at newgrid.f90 <line 96> was not SIMD vectorized because it contains memory references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + (d-v3oib%bounds%mult[].off5072)*($$CIV5 + 1ll) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 12) at newgrid.f90 <line 96> was not SIMD vectorized because it contains operation in ( 3.0000001192092895E-001 * ((double *)((char *)d-x1b%addr  + d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 2)]) * _sin@7(((double *)((char *)d-x2b%addr  + d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]) which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 12) at newgrid.f90 <line 96> was not SIMD vectorized because it contains memory references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + (d-v3oib%bounds%mult[].off5072)*($$CIV5 + 1ll) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 12) at newgrid.f90 <line 96> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 12) at newgrid.f90 <line 96> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-v3oib%addr  + d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + (d-v3oib%bounds%mult[].off5072)*($$CIV5 + 1ll) + (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)).
1586-534 (I) Loop (loop index 15) at newgrid.f90 <line 45> was not SIMD vectorized because the loop is not the innermost loop.
1586-538 (I) Loop (loop index 15) at newgrid.f90 <line 45> was not SIMD vectorized because it contains unsupported loop structure.
1586-533 (I) Loop (loop index 16) at newgrid.f90 <line 45> was not SIMD vectorized because its number of iterations is too small.
1586-540 (I) Loop (loop index 16) at newgrid.f90 <line 45> was not SIMD vectorized because it contains memory references ((int *)((char *)&&&N&&bndry  + -36ll))->bvstat[][$$CIV1 + 1ll][(long long) $$CIV0 * 2ll + 1ll] = 0; with non-vectorizable strides.
1586-540 (I) Loop (loop index 16) at newgrid.f90 <line 46> was not SIMD vectorized because it contains memory references ((char *)&&&N&&bndry  + -36ll + (32ll)*($$CIV1 + 1ll) + (4ll)*((long long) $$CIV0 * 2ll + 1ll)) with non-vectorizable strides.
1586-551 (I) Loop (loop index 16) at newgrid.f90 <line 46> was not SIMD vectorized because it contains unsupported vector data types.
1586-556 (I) Loop (loop index 16) at newgrid.f90 <line 46> was not SIMD vectorized because it contains non-stride-one store references ((char *)&&&N&&bndry  + -36ll + (32ll)*($$CIV1 + 1ll) + (4ll)*((long long) $$CIV0 * 2ll + 1ll)).
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"8">. Total number of the innermost loops SIMD vectorized <"0">.


    10|         SUBROUTINE newgrid ()
    39|           IF ((x1fac ==  0.0000000000000000E+000)) THEN
                    IF (.NOT.(x2fac ==  0.0000000000000000E+000)) GOTO lab_2
                    IF (x3fac ==  0.0000000000000000E+000) GOTO lab_51
    40|             lab_2
    44|             IF ((x1fac <>  0.0000000000000000E+000)) THEN
    45|               IF (.FALSE.) GOTO lab_37
                      $$CIV8 = int(0)
       Id=1           DO $$CIV8 = $$CIV8, 0
    45Id=1                 IF (.FALSE.) GOTO lab_52
                        $$CIV0 = 0
       Id=8             DO $$CIV0 = $$CIV0, 1
    46|                   bvstat(int($$CIV0) * 2 + 1,$$CIV8 * 4 + 1) = 0
                          bvstat(int($$CIV0) * 2 + 1,$$CIV8 * 4 + 2) = 0
                          bvstat(int($$CIV0) * 2 + 1,$$CIV8 * 4 + 3) = 0
                          bvstat(int($$CIV0) * 2 + 1,$$CIV8 * 4 + 4) = 0
    46|                 ENDDO
                        lab_52
    48|               ENDDO
                      lab_37
    45|               IF (.FALSE.) GOTO lab_69
                      $$CIV1 = int((6 - MOD(6, int(4))))
       Id=15          DO $$CIV1 = $$CIV1, 6
    45|                 IF (.FALSE.) GOTO lab_68
                        $$CIV0 = 0
       Id=16            DO $$CIV0 = $$CIV0, 1
    46|                   bvstat(int($$CIV0) * 2 + 1,$$CIV1 + 1) = 0
    46|                 ENDDO
                        lab_68
    48|               ENDDO
                      lab_69
    49|               nreq = 0
    50|               nsub = nsub + 1
    51|               T_2 = 3
                      T_3 = 3
                      T_4 = 0
                      T_5 = 0
                      T_6 = 0
                      T_7 = 0
                      CALL bvald(T_2,T_3,T_4,T_5,T_6,T_7,d-d%addr)
    52|               T_8 = 3
                      T_9 = 3
                      T_10 = 0
                      T_11 = 0
                      T_12 = 0
                      T_13 = 0
                      CALL bvalv1(T_8,T_9,T_10,T_11,T_12,T_13,d-v1%addr)
    54|               T_14 = 1
                      T_15 = 1
                      CALL scopy(in,d-x1an%addr,T_14,d-x1a%addr,T_15)
    55|               T_16 = 1
                      T_17 = 1
                      CALL scopy(in,d-x1bn%addr,T_16,d-x1b%addr,T_17)
    56|               T_18 = 1
                      T_19 = 1
                      CALL scopy(in,d-dx1an%addr,T_18,d-dx1a%addr,T_19)
    57|               T_20 = 1
                      T_21 = 1
                      CALL scopy(in,d-dx1bn%addr,T_20,d-dx1b%addr,T_21)
    58|               T_22 = 1
                      T_23 = 1
                      CALL scopy(in,d-g2an%addr,T_22,d-g2a%addr,T_23)
    59|               T_24 = 1
                      T_25 = 1
                      CALL scopy(in,d-g2bn%addr,T_24,d-g2b%addr,T_25)
    60|               T_26 = 1
                      T_27 = 1
                      CALL scopy(in,d-g31an%addr,T_26,d-g31a%addr,T_27)
    61|               T_28 = 1
                      T_29 = 1
                      CALL scopy(in,d-g31bn%addr,T_28,d-g31b%addr,T_29)
    62|               T_30 = 1
                      T_31 = 1
                      CALL scopy(in,d-dvl1an%addr,T_30,d-dvl1a%addr,T_31)
    63|               T_32 = 1
                      T_33 = 1
                      CALL scopy(in,d-dvl1bn%addr,T_32,d-dvl1b%addr,T_33)
    65|               IF ((1 + (int((ie + 2)) - int((is - 2))) > 0)) THEN
                        $$CIV2 = 0
       Id=2             DO $$CIV2 = $$CIV2, int((1 + (int((ie + 2)) - int((is &
                &           - 2)))))-1
    66|                   d-x1ai%addr%x1ai(($$CIV2 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / (d-x1a%addr%x1a(($$CIV2 + &
                &           int(is)) - 2) +  1.0000000000000000E-099)
    67|                   d-x1bi%addr%x1bi(($$CIV2 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / (d-x1b%addr%x1b(($$CIV2 + &
                &           int(is)) - 2) +  1.0000000000000000E-099)
    68|                   d-dx1ai%addr%dx1ai(($$CIV2 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / (d-dx1a%addr%dx1a(($$CIV2 + &
                &           int(is)) - 2) +  1.0000000000000000E-099)
    69|                   d-dx1bi%addr%dx1bi(($$CIV2 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / (d-dx1b%addr%dx1b(($$CIV2 + &
                &           int(is)) - 2) +  1.0000000000000000E-099)
    70|                   d-g2ai%addr%g2ai(($$CIV2 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / (d-g2a%addr%g2a(($$CIV2 + &
                &           int(is)) - 2) +  1.0000000000000000E-099)
    71|                   d-g2bi%addr%g2bi(($$CIV2 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / (d-g2b%addr%g2b(($$CIV2 + &
                &           int(is)) - 2) +  1.0000000000000000E-099)
    72|                   d-g31ai%addr%g31ai(($$CIV2 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / (d-g31a%addr%g31a(($$CIV2 + &
                &           int(is)) - 2) +  1.0000000000000000E-099)
    73|                   d-g31bi%addr%g31bi(($$CIV2 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / (d-g31b%addr%g31b(($$CIV2 + &
                &           int(is)) - 2) +  1.0000000000000000E-099)
    74|                   d-dvl1ai%addr%dvl1ai(($$CIV2 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / (d-dvl1a%addr%dvl1a(($$CIV2 &
                &           + int(is)) - 2) +  1.0000000000000000E-099)
    75|                   d-dvl1bi%addr%dvl1bi(($$CIV2 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / (d-dvl1b%addr%dvl1b(($$CIV2 &
                &           + int(is)) - 2) +  1.0000000000000000E-099)
    76|                 ENDDO
                      ENDIF
    80|               IF ((nreq <> 0)) THEN
    81|                 CALL mpi_waitall(nreq,req,stat,ierr)
    82|                 nreq = 0
    83|               ENDIF
    84|               CALL newvg()
    86|               CALL newx1()
    88|               IF ((1 + (int((ie + 2)) - int((is - 2))) > 0)) THEN
                        $$CIV3 = 0
       Id=3             DO $$CIV3 = $$CIV3, int((1 + (int((ie + 2)) - int((is &
                &           - 2)))))-1
    89|                   d-dx1ani%addr%dx1ani(($$CIV3 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / d-dx1an%addr%dx1an(($$CIV3 &
                &           + int(is)) - 2)
    90|                   d-dx1bni%addr%dx1bni(($$CIV3 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / d-dx1bn%addr%dx1bn(($$CIV3 &
                &           + int(is)) - 2)
    91|                 ENDDO
                      ENDIF
    93|               IF ((MOD(int(kn), 4) > 0  .AND.  int(kn) > 0)) THEN
                        $$CIV5 = 0
       Id=11            DO $$CIV5 = $$CIV5, MOD(int(kn), int(4))-1
    94|                   IF ((int(jn) > 0)) THEN
                            $$CIV4 = 0
       Id=12                DO $$CIV4 = $$CIV4, int(int(jn))-1
    95|                       d-v3oib%addr%v3oib($$CIV4 + 1,$$CIV5 + 1,1) = ( &
                &               3.0000001192092895E-001 * d-x1b%addr%x1b(int((ie &
                &               + 1)))) * _sin(d-x2b%addr%x2b(%VAL($$CIV4) + 1))
    96|                       d-v3oib%addr%v3oib($$CIV4 + 1,$$CIV5 + 1,2) = ( &
                &               3.0000001192092895E-001 * d-x1b%addr%x1b(int((ie &
                &               + 2)))) * _sin(d-x2b%addr%x2b(%VAL($$CIV4) + 1))
    97|                     ENDDO
                          ENDIF
    98|                 ENDDO
                      ENDIF
    93|               IF (.NOT.(int(kn) > 0  .AND.  int(kn) > MOD(int(kn), 4))) &
                &       GOTO lab_43
                      $$CIV9 = int(0)
       Id=4           DO $$CIV9 = $$CIV9, int((((int(kn) - MOD(int(kn), 4)) - &
                &         1) / 4 + 1))-1
    94|                 IF ((int(jn) > 0)) THEN
                          $$CIV4 = 0
       Id=5               DO $$CIV4 = $$CIV4, int(int(jn))-1
    95|                     d-v3oib%addr%v3oib($$CIV4 + 1,1 + ($$CIV9 * 4 + MOD(&
                &             int(kn), 4)),1) = ( 3.0000001192092895E-001 * &
                &             d-x1b%addr%x1b(int((ie + 1)))) * _sin(&
                &             d-x2b%addr%x2b(%VAL($$CIV4) + 1))
    96|                     d-v3oib%addr%v3oib($$CIV4 + 1,1 + ($$CIV9 * 4 + MOD(&
                &             int(kn), 4)),2) = ( 3.0000001192092895E-001 * &
                &             d-x1b%addr%x1b(int((ie + 2)))) * _sin(&
                &             d-x2b%addr%x2b(%VAL($$CIV4) + 1))
    95|                     d-v3oib%addr%v3oib($$CIV4 + 1,2 + ($$CIV9 * 4 + MOD(&
                &             int(kn), 4)),1) = ( 3.0000001192092895E-001 * &
                &             d-x1b%addr%x1b(int((ie + 1)))) * _sin(&
                &             d-x2b%addr%x2b(%VAL($$CIV4) + 1))
    96|                     d-v3oib%addr%v3oib($$CIV4 + 1,2 + ($$CIV9 * 4 + MOD(&
                &             int(kn), 4)),2) = ( 3.0000001192092895E-001 * &
                &             d-x1b%addr%x1b(int((ie + 2)))) * _sin(&
                &             d-x2b%addr%x2b(%VAL($$CIV4) + 1))
    95|                     d-v3oib%addr%v3oib($$CIV4 + 1,3 + ($$CIV9 * 4 + MOD(&
                &             int(kn), 4)),1) = ( 3.0000001192092895E-001 * &
                &             d-x1b%addr%x1b(int((ie + 1)))) * _sin(&
                &             d-x2b%addr%x2b(%VAL($$CIV4) + 1))
    96|                     d-v3oib%addr%v3oib($$CIV4 + 1,3 + ($$CIV9 * 4 + MOD(&
                &             int(kn), 4)),2) = ( 3.0000001192092895E-001 * &
                &             d-x1b%addr%x1b(int((ie + 2)))) * _sin(&
                &             d-x2b%addr%x2b(%VAL($$CIV4) + 1))
    95|                     d-v3oib%addr%v3oib($$CIV4 + 1,4 + ($$CIV9 * 4 + MOD(&
                &             int(kn), 4)),1) = ( 3.0000001192092895E-001 * &
                &             d-x1b%addr%x1b(int((ie + 1)))) * _sin(&
                &             d-x2b%addr%x2b(%VAL($$CIV4) + 1))
    96|                     d-v3oib%addr%v3oib($$CIV4 + 1,4 + ($$CIV9 * 4 + MOD(&
                &             int(kn), 4)),2) = ( 3.0000001192092895E-001 * &
                &             d-x1b%addr%x1b(int((ie + 2)))) * _sin(&
                &             d-x2b%addr%x2b(%VAL($$CIV4) + 1))
    97|                   ENDDO
                        ENDIF
    98|               ENDDO
                      lab_43
    99|               lab_4
   103|               IF ((x2fac <>  0.0000000000000000E+000)) THEN
   104|                 T_34 = 1
                        T_35 = 1
                        CALL scopy(jn,d-x2an%addr,T_34,d-x2a%addr,T_35)
   105|                 T_36 = 1
                        T_37 = 1
                        CALL scopy(jn,d-x2bn%addr,T_36,d-x2b%addr,T_37)
   106|                 T_38 = 1
                        T_39 = 1
                        CALL scopy(jn,d-dx2an%addr,T_38,d-dx2a%addr,T_39)
   107|                 T_40 = 1
                        T_41 = 1
                        CALL scopy(jn,d-dx2bn%addr,T_40,d-dx2b%addr,T_41)
   108|                 T_42 = 1
                        T_43 = 1
                        CALL scopy(jn,d-g32an%addr,T_42,d-g32a%addr,T_43)
   109|                 T_44 = 1
                        T_45 = 1
                        CALL scopy(jn,d-g32bn%addr,T_44,d-g32b%addr,T_45)
   110|                 T_46 = 1
                        T_47 = 1
                        CALL scopy(jn,d-g4an%addr,T_46,d-g4a%addr,T_47)
   111|                 T_48 = 1
                        T_49 = 1
                        CALL scopy(jn,d-g4bn%addr,T_48,d-g4b%addr,T_49)
   112|                 T_50 = 1
                        T_51 = 1
                        CALL scopy(jn,d-dvl2an%addr,T_50,d-dvl2a%addr,T_51)
   113|                 T_52 = 1
                        T_53 = 1
                        CALL scopy(jn,d-dvl2bn%addr,T_52,d-dvl2b%addr,T_53)
   114|                 T_54 = 1
                        T_55 = 1
                        CALL scopy(jn,d-dvl2ani%addr,T_54,d-dvl2ai%addr,T_55)
   115|                 T_56 = 1
                        T_57 = 1
                        CALL scopy(jn,d-dvl2bni%addr,T_56,d-dvl2bi%addr,T_57)
   116|                 IF ((1 + (int((je + 2)) - int((js - 2))) > 0)) THEN
                          $$CIV6 = 0
       Id=6               DO $$CIV6 = $$CIV6, int((1 + (int((je + 2)) - int((&
                &             js - 2)))))-1
   117|                     d-dx2ai%addr%dx2ai(($$CIV6 + int(js)) - 2) =  &
                &             1.0000000000000000E+000 / d-dx2a%addr%dx2a(($$CIV6 &
                &             + int(js)) - 2)
   118|                     d-dx2bi%addr%dx2bi(($$CIV6 + int(js)) - 2) =  &
                &             1.0000000000000000E+000 / d-dx2b%addr%dx2b(($$CIV6 &
                &             + int(js)) - 2)
   119|                     IF ((lgeom == 3)) THEN
   120|                       d-dg32ad2%addr%dg32ad2(($$CIV6 + int(js)) - 2) = &
                &               _cos(d-x2a%addr%x2a((%VAL($$CIV6) + int(%VAL(js)))&
                &                - 2))
   121|                       d-dg32bd2%addr%dg32bd2(($$CIV6 + int(js)) - 2) = &
                &               _cos(d-x2b%addr%x2b((%VAL($$CIV6) + int(%VAL(js)))&
                &                - 2))
   122|                     ENDIF
   123|                   ENDDO
                        ENDIF
   124|                 CALL newx2()
   125|               ENDIF
   127|               IF (.NOT.(x3fac <>  0.0000000000000000E+000)) GOTO lab_32
   128|               T_58 = 1
                      T_59 = 1
                      CALL scopy(kn,d-x3an%addr,T_58,d-x3a%addr,T_59)
   129|               T_60 = 1
                      T_61 = 1
                      CALL scopy(kn,d-x3bn%addr,T_60,d-x3b%addr,T_61)
   130|               T_62 = 1
                      T_63 = 1
                      CALL scopy(kn,d-dx3an%addr,T_62,d-dx3a%addr,T_63)
   131|               T_64 = 1
                      T_65 = 1
                      CALL scopy(kn,d-dx3bn%addr,T_64,d-dx3b%addr,T_65)
   132|               T_66 = 1
                      T_67 = 1
                      CALL scopy(kn,d-dvl3an%addr,T_66,d-dvl3a%addr,T_67)
   133|               T_68 = 1
                      T_69 = 1
                      CALL scopy(kn,d-dvl3bn%addr,T_68,d-dvl3b%addr,T_69)
   134|               T_70 = 1
                      T_71 = 1
                      CALL scopy(kn,d-dvl3ani%addr,T_70,d-dvl3ai%addr,T_71)
   135|               T_72 = 1
                      T_73 = 1
                      CALL scopy(kn,d-dvl3bni%addr,T_72,d-dvl3bi%addr,T_73)
   136|               IF ((1 + (int((ke + 2)) - int((ks - 2))) > 0)) THEN
                        $$CIV7 = 0
       Id=7             DO $$CIV7 = $$CIV7, int((1 + (int((ke + 2)) - int((ks &
                &           - 2)))))-1
   137|                   d-dx3ai%addr%dx3ai(($$CIV7 + int(ks)) - 2) =  &
                &           1.0000000000000000E+000 / d-dx3a%addr%dx3a(($$CIV7 + &
                &           int(ks)) - 2)
   138|                   d-dx3bi%addr%dx3bi(($$CIV7 + int(ks)) - 2) =  &
                &           1.0000000000000000E+000 / d-dx3b%addr%dx3b(($$CIV7 + &
                &           int(ks)) - 2)
   139|                 ENDDO
                      ENDIF
   140|               CALL newx3()
   141|               lab_32
   144|               lab_51
                      RETURN
                    END SUBROUTINE newgrid


Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
         0            45             1    Outer loop has been unrolled 4 time(s).
         0            45             1    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
                                     8    Loop has been rolled.
                                     8    Loop was not SIMD vectorized because its number of 
                                          iterations is too small.
         0            46                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)&&&N&&bndry  + -36ll + 
                                          (32ll)*($$CIV8 * 4ll + 1ll) + (4ll)*((long long) 
                                          $$CIV0 * 2ll + 1ll)) with  non-vectorizable strides.
         0            46                  Loop was not SIMD vectorized because it contains 
                                          unsupported vector data types.
         0            46                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)&&&N&&bndry 
                                          + -36ll + (32ll)*($$CIV8 * 4ll + 1ll) + (4ll)*((long 
                                          long) $$CIV0 * 2ll + 1ll)).
         0            46                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)&&&N&&bndry  + -36ll + 
                                          (32ll)*($$CIV8 * 4ll + 2ll) + (4ll)*((long long) 
                                          $$CIV0 * 2ll + 1ll)) with  non-vectorizable strides.
         0            46                  Loop was not SIMD vectorized because it contains 
                                          unsupported vector data types.
         0            46                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)&&&N&&bndry 
                                          + -36ll + (32ll)*($$CIV8 * 4ll + 2ll) + (4ll)*((long 
                                          long) $$CIV0 * 2ll + 1ll)).
         0            46                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)&&&N&&bndry  + -36ll + 
                                          (32ll)*($$CIV8 * 4ll + 3ll) + (4ll)*((long long) 
                                          $$CIV0 * 2ll + 1ll)) with  non-vectorizable strides.
         0            46                  Loop was not SIMD vectorized because it contains 
                                          unsupported vector data types.
         0            46                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)&&&N&&bndry 
                                          + -36ll + (32ll)*($$CIV8 * 4ll + 3ll) + (4ll)*((long 
                                          long) $$CIV0 * 2ll + 1ll)).
         0            46                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)&&&N&&bndry  + -36ll + 
                                          (32ll)*($$CIV8 * 4ll + 4ll) + (4ll)*((long long) 
                                          $$CIV0 * 2ll + 1ll)) with  non-vectorizable strides.
         0            46                  Loop was not SIMD vectorized because it contains 
                                          unsupported vector data types.
         0            46                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)&&&N&&bndry 
                                          + -36ll + (32ll)*($$CIV8 * 4ll + 4ll) + (4ll)*((long 
                                          long) $$CIV0 * 2ll + 1ll)).
         0            45            15    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            45            15    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
                                    16    Loop was not SIMD vectorized because its number of 
                                          iterations is too small.
         0            46                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)&&&N&&bndry  + -36ll + 
                                          (32ll)*($$CIV1 + 1ll) + (4ll)*((long long) $$CIV0 * 
                                          2ll + 1ll)) with  non-vectorizable strides.
         0            46                  Loop was not SIMD vectorized because it contains 
                                          unsupported vector data types.
         0            46                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)&&&N&&bndry 
                                          + -36ll + (32ll)*($$CIV1 + 1ll) + (4ll)*((long long) 
                                          $$CIV0 * 2ll + 1ll)).
         0            65             2    Loop was not SIMD vectorized because it is not 
                                          profitable to vectorize.
         0            66                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-x1ai%addr  + d-x1ai%rvo 
                                          + (8ll)*(($$CIV2 + (long long) is) - 2ll))  with 
                                          non-vectorizable alignment.
         0            66                  Loop was not SIMD vectorized because it contains 
                                          operation in  1.0000000000000000E+000 / (((double 
                                          *)((char *)d-x1a%addr  + 
                                          d-x1a%rvo))->x1a[].rns23.[($$CIV2 + (long long) is) - 
                                          2ll] +  1.0000000000000000E-099) which is not  
                                          suitable for SIMD vectorization.
         0            66                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            67                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-x1bi%addr  + d-x1bi%rvo 
                                          + (8ll)*(($$CIV2 + (long long) is) - 2ll))  with 
                                          non-vectorizable alignment.
         0            67                  Loop was not SIMD vectorized because it contains 
                                          operation in  1.0000000000000000E+000 / (((double 
                                          *)((char *)d-x1b%addr  + 
                                          d-x1b%rvo))->x1b[].rns25.[($$CIV2 + (long long) is) - 
                                          2ll] +  1.0000000000000000E-099) which is not  
                                          suitable for SIMD vectorization.
         0            67                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            68                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-dx1ai%addr  + 
                                          d-dx1ai%rvo + (8ll)*(($$CIV2 + (long long) is) - 
                                          2ll))  with non-vectorizable alignment.
         0            68                  Loop was not SIMD vectorized because it contains 
                                          operation in  1.0000000000000000E+000 / (((double 
                                          *)((char *)d-dx1a%addr  + 
                                          d-dx1a%rvo))->dx1a[].rns27.[($$CIV2 + (long long) is) 
                                          - 2ll] +  1.0000000000000000E-099) which is not  
                                          suitable for SIMD vectorization.
         0            68                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            69                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-dx1bi%addr  + 
                                          d-dx1bi%rvo + (8ll)*(($$CIV2 + (long long) is) - 
                                          2ll))  with non-vectorizable alignment.
         0            69                  Loop was not SIMD vectorized because it contains 
                                          operation in  1.0000000000000000E+000 / (((double 
                                          *)((char *)d-dx1b%addr  + 
                                          d-dx1b%rvo))->dx1b[].rns29.[($$CIV2 + (long long) is) 
                                          - 2ll] +  1.0000000000000000E-099) which is not  
                                          suitable for SIMD vectorization.
         0            69                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            70                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-g2ai%addr  + d-g2ai%rvo 
                                          + (8ll)*(($$CIV2 + (long long) is) - 2ll))  with 
                                          non-vectorizable alignment.
         0            70                  Loop was not SIMD vectorized because it contains 
                                          operation in  1.0000000000000000E+000 / (((double 
                                          *)((char *)d-g2a%addr  + 
                                          d-g2a%rvo))->g2a[].rns31.[($$CIV2 + (long long) is) - 
                                          2ll] +  1.0000000000000000E-099) which is not  
                                          suitable for SIMD vectorization.
         0            70                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            71                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-g2bi%addr  + d-g2bi%rvo 
                                          + (8ll)*(($$CIV2 + (long long) is) - 2ll))  with 
                                          non-vectorizable alignment.
         0            71                  Loop was not SIMD vectorized because it contains 
                                          operation in  1.0000000000000000E+000 / (((double 
                                          *)((char *)d-g2b%addr  + 
                                          d-g2b%rvo))->g2b[].rns33.[($$CIV2 + (long long) is) - 
                                          2ll] +  1.0000000000000000E-099) which is not  
                                          suitable for SIMD vectorization.
         0            71                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            72                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-g31ai%addr  + 
                                          d-g31ai%rvo + (8ll)*(($$CIV2 + (long long) is) - 
                                          2ll))  with non-vectorizable alignment.
         0            72                  Loop was not SIMD vectorized because it contains 
                                          operation in  1.0000000000000000E+000 / (((double 
                                          *)((char *)d-g31a%addr  + 
                                          d-g31a%rvo))->g31a[].rns35.[($$CIV2 + (long long) is) 
                                          - 2ll] +  1.0000000000000000E-099) which is not  
                                          suitable for SIMD vectorization.
         0            72                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            73                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-g31bi%addr  + 
                                          d-g31bi%rvo + (8ll)*(($$CIV2 + (long long) is) - 
                                          2ll))  with non-vectorizable alignment.
         0            73                  Loop was not SIMD vectorized because it contains 
                                          operation in  1.0000000000000000E+000 / (((double 
                                          *)((char *)d-g31b%addr  + 
                                          d-g31b%rvo))->g31b[].rns37.[($$CIV2 + (long long) is) 
                                          - 2ll] +  1.0000000000000000E-099) which is not  
                                          suitable for SIMD vectorization.
         0            73                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            74                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-dvl1ai%addr  + 
                                          d-dvl1ai%rvo + (8ll)*(($$CIV2 + (long long) is) - 
                                          2ll))  with non-vectorizable alignment.
         0            74                  Loop was not SIMD vectorized because it contains 
                                          operation in  1.0000000000000000E+000 / (((double 
                                          *)((char *)d-dvl1a%addr  + 
                                          d-dvl1a%rvo))->dvl1a[].rns39.[($$CIV2 + (long long) 
                                          is) - 2ll] +  1.0000000000000000E-099) which is not  
                                          suitable for SIMD vectorization.
         0            74                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            75                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-dvl1bi%addr  + 
                                          d-dvl1bi%rvo + (8ll)*(($$CIV2 + (long long) is) - 
                                          2ll))  with non-vectorizable alignment.
         0            75                  Loop was not SIMD vectorized because it contains 
                                          operation in  1.0000000000000000E+000 / (((double 
                                          *)((char *)d-dvl1b%addr  + 
                                          d-dvl1b%rvo))->dvl1b[].rns41.[($$CIV2 + (long long) 
                                          is) - 2ll] +  1.0000000000000000E-099) which is not  
                                          suitable for SIMD vectorization.
         0            75                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            88             3    Loop was not SIMD vectorized because it is not 
                                          profitable to vectorize.
         0            89                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-dx1ani%addr  + 
                                          d-dx1ani%rvo + (8ll)*(($$CIV3 + (long long) is) - 
                                          2ll))  with non-vectorizable alignment.
         0            89                  Loop was not SIMD vectorized because it contains 
                                          operation in  1.0000000000000000E+000 / ((double 
                                          *)((char *)d-dx1an%addr  + 
                                          d-dx1an%rvo))->dx1an[].rns43.[($$CIV3 + (long long) 
                                          is) - 2ll] which is not  suitable for SIMD 
                                          vectorization.
         0            89                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            90                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-dx1bni%addr  + 
                                          d-dx1bni%rvo + (8ll)*(($$CIV3 + (long long) is) - 
                                          2ll))  with non-vectorizable alignment.
         0            90                  Loop was not SIMD vectorized because it contains 
                                          operation in  1.0000000000000000E+000 / ((double 
                                          *)((char *)d-dx1bn%addr  + 
                                          d-dx1bn%rvo))->dx1bn[].rns45.[($$CIV3 + (long long) 
                                          is) - 2ll] which is not  suitable for SIMD 
                                          vectorization.
         0            90                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            93            11    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            95                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3oib%addr  + 
                                          d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*($$CIV5 + 1ll) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll))  with 
                                          non-vectorizable alignment.
         0            95                  Loop was not SIMD vectorized because it contains 
                                          operation in ( 3.0000001192092895E-001 * ((double 
                                          *)((char *)d-x1b%addr  + 
                                          d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 1)]) * 
                                          _sin@7(((double *)((char *)d-x2b%addr  + 
                                          d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]) which is not 
                                          suitable for SIMD vectorization.
         0            95                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3oib%addr  + 
                                          d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*($$CIV5 + 1ll) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with  
                                          non-vectorizable strides.
         0            95                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            95                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char 
                                          *)d-v3oib%addr  + d-v3oib%rvo + 
                                          (d-v3oib%bounds%mult[].off5048)*(1ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*($$CIV5 + 1ll) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)).
         0            96                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3oib%addr  + 
                                          d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*($$CIV5 + 1ll) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll))  with 
                                          non-vectorizable alignment.
         0            96                  Loop was not SIMD vectorized because it contains 
                                          operation in ( 3.0000001192092895E-001 * ((double 
                                          *)((char *)d-x1b%addr  + 
                                          d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 2)]) * 
                                          _sin@7(((double *)((char *)d-x2b%addr  + 
                                          d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]) which is not 
                                          suitable for SIMD vectorization.
         0            96                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3oib%addr  + 
                                          d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*($$CIV5 + 1ll) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with  
                                          non-vectorizable strides.
         0            96                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            96                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char 
                                          *)d-v3oib%addr  + d-v3oib%rvo + 
                                          (d-v3oib%bounds%mult[].off5048)*(2ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*($$CIV5 + 1ll) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)).
         0            93             4    Outer loop has been unrolled 4 time(s).
         0            93             4    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            95                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3oib%addr  + 
                                          d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(1ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll))  with 
                                          non-vectorizable alignment.
         0            95                  Loop was not SIMD vectorized because it contains 
                                          operation in ( 3.0000001192092895E-001 * ((double 
                                          *)((char *)d-x1b%addr  + 
                                          d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 1)]) * 
                                          _sin@7(((double *)((char *)d-x2b%addr  + 
                                          d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]) which is not 
                                          suitable for SIMD vectorization.
         0            95                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3oib%addr  + 
                                          d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(1ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with  
                                          non-vectorizable strides.
         0            95                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            95                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char 
                                          *)d-v3oib%addr  + d-v3oib%rvo + 
                                          (d-v3oib%bounds%mult[].off5048)*(1ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(1ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)).
         0            96                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3oib%addr  + 
                                          d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(1ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll))  with 
                                          non-vectorizable alignment.
         0            96                  Loop was not SIMD vectorized because it contains 
                                          operation in ( 3.0000001192092895E-001 * ((double 
                                          *)((char *)d-x1b%addr  + 
                                          d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 2)]) * 
                                          _sin@7(((double *)((char *)d-x2b%addr  + 
                                          d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]) which is not 
                                          suitable for SIMD vectorization.
         0            96                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3oib%addr  + 
                                          d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(1ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with  
                                          non-vectorizable strides.
         0            96                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            96                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char 
                                          *)d-v3oib%addr  + d-v3oib%rvo + 
                                          (d-v3oib%bounds%mult[].off5048)*(2ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(1ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)).
         0            95                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3oib%addr  + 
                                          d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(2ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll))  with 
                                          non-vectorizable alignment.
         0            95                  Loop was not SIMD vectorized because it contains 
                                          operation in ( 3.0000001192092895E-001 * ((double 
                                          *)((char *)d-x1b%addr  + 
                                          d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 1)]) * 
                                          _sin@7(((double *)((char *)d-x2b%addr  + 
                                          d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]) which is not 
                                          suitable for SIMD vectorization.
         0            95                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3oib%addr  + 
                                          d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(2ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with  
                                          non-vectorizable strides.
         0            95                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            95                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char 
                                          *)d-v3oib%addr  + d-v3oib%rvo + 
                                          (d-v3oib%bounds%mult[].off5048)*(1ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(2ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)).
         0            96                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3oib%addr  + 
                                          d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(2ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll))  with 
                                          non-vectorizable alignment.
         0            96                  Loop was not SIMD vectorized because it contains 
                                          operation in ( 3.0000001192092895E-001 * ((double 
                                          *)((char *)d-x1b%addr  + 
                                          d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 2)]) * 
                                          _sin@7(((double *)((char *)d-x2b%addr  + 
                                          d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]) which is not 
                                          suitable for SIMD vectorization.
         0            96                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3oib%addr  + 
                                          d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(2ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with  
                                          non-vectorizable strides.
         0            96                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            96                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char 
                                          *)d-v3oib%addr  + d-v3oib%rvo + 
                                          (d-v3oib%bounds%mult[].off5048)*(2ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(2ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)).
         0            95                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3oib%addr  + 
                                          d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(3ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll))  with 
                                          non-vectorizable alignment.
         0            95                  Loop was not SIMD vectorized because it contains 
                                          operation in ( 3.0000001192092895E-001 * ((double 
                                          *)((char *)d-x1b%addr  + 
                                          d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 1)]) * 
                                          _sin@7(((double *)((char *)d-x2b%addr  + 
                                          d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]) which is not 
                                          suitable for SIMD vectorization.
         0            95                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3oib%addr  + 
                                          d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(3ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with  
                                          non-vectorizable strides.
         0            95                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            95                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char 
                                          *)d-v3oib%addr  + d-v3oib%rvo + 
                                          (d-v3oib%bounds%mult[].off5048)*(1ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(3ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)).
         0            96                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3oib%addr  + 
                                          d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(3ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll))  with 
                                          non-vectorizable alignment.
         0            96                  Loop was not SIMD vectorized because it contains 
                                          operation in ( 3.0000001192092895E-001 * ((double 
                                          *)((char *)d-x1b%addr  + 
                                          d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 2)]) * 
                                          _sin@7(((double *)((char *)d-x2b%addr  + 
                                          d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]) which is not 
                                          suitable for SIMD vectorization.
         0            96                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3oib%addr  + 
                                          d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(3ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with  
                                          non-vectorizable strides.
         0            96                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            96                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char 
                                          *)d-v3oib%addr  + d-v3oib%rvo + 
                                          (d-v3oib%bounds%mult[].off5048)*(2ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(3ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)).
         0            95                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3oib%addr  + 
                                          d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(4ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll))  with 
                                          non-vectorizable alignment.
         0            95                  Loop was not SIMD vectorized because it contains 
                                          operation in ( 3.0000001192092895E-001 * ((double 
                                          *)((char *)d-x1b%addr  + 
                                          d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 1)]) * 
                                          _sin@7(((double *)((char *)d-x2b%addr  + 
                                          d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]) which is not 
                                          suitable for SIMD vectorization.
         0            95                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3oib%addr  + 
                                          d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(1ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(4ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with  
                                          non-vectorizable strides.
         0            95                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            95                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char 
                                          *)d-v3oib%addr  + d-v3oib%rvo + 
                                          (d-v3oib%bounds%mult[].off5048)*(1ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(4ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)).
         0            96                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3oib%addr  + 
                                          d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(4ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll))  with 
                                          non-vectorizable alignment.
         0            96                  Loop was not SIMD vectorized because it contains 
                                          operation in ( 3.0000001192092895E-001 * ((double 
                                          *)((char *)d-x1b%addr  + 
                                          d-x1b%rvo))->x1b[].rns48.[(long long) (ie + 2)]) * 
                                          _sin@7(((double *)((char *)d-x2b%addr  + 
                                          d-x2b%rvo))->x2b[].rns47.[$$CIV4 + 1ll]) which is not 
                                          suitable for SIMD vectorization.
         0            96                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3oib%addr  + 
                                          d-v3oib%rvo + (d-v3oib%bounds%mult[].off5048)*(2ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(4ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)) with  
                                          non-vectorizable strides.
         0            96                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            96                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char 
                                          *)d-v3oib%addr  + d-v3oib%rvo + 
                                          (d-v3oib%bounds%mult[].off5048)*(2ll) + 
                                          (d-v3oib%bounds%mult[].off5072)*(4ll + ($$CIV9 * 4ll 
                                          + (long long) kn % 4ll)) + 
                                          (d-v3oib%bounds%mult[].off5096)*($$CIV4 + 1ll)).
         0           116             6    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0           116             6    Loop was not SIMD vectorized because it contains 
                                          control flow.
         0           136             7    Loop was not SIMD vectorized because it is not 
                                          profitable to vectorize.
         0           137                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-dx3ai%addr  + 
                                          d-dx3ai%rvo + (8ll)*(($$CIV7 + (long long) ks) - 
                                          2ll))  with non-vectorizable alignment.
         0           137                  Loop was not SIMD vectorized because it contains 
                                          operation in  1.0000000000000000E+000 / ((double 
                                          *)((char *)d-dx3a%addr  + 
                                          d-dx3a%rvo))->dx3a[].rns98.[($$CIV7 + (long long) ks) 
                                          - 2ll] which is not  suitable for SIMD vectorization.
         0           137                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           138                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-dx3bi%addr  + 
                                          d-dx3bi%rvo + (8ll)*(($$CIV7 + (long long) ks) - 
                                          2ll))  with non-vectorizable alignment.
         0           138                  Loop was not SIMD vectorized because it contains 
                                          operation in  1.0000000000000000E+000 / ((double 
                                          *)((char *)d-dx3b%addr  + 
                                          d-dx3b%rvo))->dx3b[].rns100.[($$CIV7 + (long long) 
                                          ks) - 2ll] which is not  suitable for SIMD 
                                          vectorization.
         0           138                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.


    10|         SUBROUTINE newgrid ()
    39|           IF ((x1fac ==  0.0000000000000000E+000)) THEN
                    IF (.NOT.(x2fac ==  0.0000000000000000E+000)) GOTO lab_2
                    IF (x3fac ==  0.0000000000000000E+000) GOTO lab_51
    40|             lab_2
    44|             IF ((x1fac <>  0.0000000000000000E+000)) THEN
    45|               IF (.FALSE.) GOTO lab_37
                      $$CIV8 = int(0)
       Id=1           DO $$CIV8 = $$CIV8, 0
    45Id=1                 IF (.FALSE.) GOTO lab_52
                        $$CIV0 = 0
       Id=8             DO $$CIV0 = $$CIV0, 1
    46|                   bvstat(int($$CIV0) * 2 + 1,$$CIV8 * 4 + 1) = 0
                          bvstat(int($$CIV0) * 2 + 1,$$CIV8 * 4 + 2) = 0
                          bvstat(int($$CIV0) * 2 + 1,$$CIV8 * 4 + 3) = 0
                          bvstat(int($$CIV0) * 2 + 1,$$CIV8 * 4 + 4) = 0
    46|                 ENDDO
                        lab_52
    48|               ENDDO
                      lab_37
    45|               IF (.FALSE.) GOTO lab_69
                      $$CIV1 = int((6 - MOD(6, int(4))))
       Id=15          DO $$CIV1 = $$CIV1, 6
    45|                 IF (.FALSE.) GOTO lab_68
                        $$CIV0 = 0
       Id=16            DO $$CIV0 = $$CIV0, 1
    46|                   bvstat(int($$CIV0) * 2 + 1,$$CIV1 + 1) = 0
    46|                 ENDDO
                        lab_68
    48|               ENDDO
                      lab_69
    49|               nreq = 0
    50|               nsub = nsub + 1
    51|               T_2 = 3
                      T_3 = 3
                      T_4 = 0
                      T_5 = 0
                      T_6 = 0
                      T_7 = 0
                      CALL bvald(T_2,T_3,T_4,T_5,T_6,T_7,d-d%addr)
    52|               T_8 = 3
                      T_9 = 3
                      T_10 = 0
                      T_11 = 0
                      T_12 = 0
                      T_13 = 0
                      CALL bvalv1(T_8,T_9,T_10,T_11,T_12,T_13,d-v1%addr)
    54|               T_14 = 1
                      T_15 = 1
                      CALL scopy(in,d-x1an%addr,T_14,d-x1a%addr,T_15)
    55|               T_16 = 1
                      T_17 = 1
                      CALL scopy(in,d-x1bn%addr,T_16,d-x1b%addr,T_17)
    56|               T_18 = 1
                      T_19 = 1
                      CALL scopy(in,d-dx1an%addr,T_18,d-dx1a%addr,T_19)
    57|               T_20 = 1
                      T_21 = 1
                      CALL scopy(in,d-dx1bn%addr,T_20,d-dx1b%addr,T_21)
    58|               T_22 = 1
                      T_23 = 1
                      CALL scopy(in,d-g2an%addr,T_22,d-g2a%addr,T_23)
    59|               T_24 = 1
                      T_25 = 1
                      CALL scopy(in,d-g2bn%addr,T_24,d-g2b%addr,T_25)
    60|               T_26 = 1
                      T_27 = 1
                      CALL scopy(in,d-g31an%addr,T_26,d-g31a%addr,T_27)
    61|               T_28 = 1
                      T_29 = 1
                      CALL scopy(in,d-g31bn%addr,T_28,d-g31b%addr,T_29)
    62|               T_30 = 1
                      T_31 = 1
                      CALL scopy(in,d-dvl1an%addr,T_30,d-dvl1a%addr,T_31)
    63|               T_32 = 1
                      T_33 = 1
                      CALL scopy(in,d-dvl1bn%addr,T_32,d-dvl1b%addr,T_33)
    65|               IF ((1 + (int((ie + 2)) - int((is - 2))) > 0)) THEN
                        $$CIV2 = 0
       Id=2             DO $$CIV2 = $$CIV2, int((1 + (int((ie + 2)) - int((is &
                &           - 2)))))-1
    66|                   d-x1ai%addr%x1ai(($$CIV2 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / (d-x1a%addr%x1a(($$CIV2 + &
                &           int(is)) - 2) +  1.0000000000000000E-099)
    67|                   d-x1bi%addr%x1bi(($$CIV2 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / (d-x1b%addr%x1b(($$CIV2 + &
                &           int(is)) - 2) +  1.0000000000000000E-099)
    68|                   d-dx1ai%addr%dx1ai(($$CIV2 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / (d-dx1a%addr%dx1a(($$CIV2 + &
                &           int(is)) - 2) +  1.0000000000000000E-099)
    69|                   d-dx1bi%addr%dx1bi(($$CIV2 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / (d-dx1b%addr%dx1b(($$CIV2 + &
                &           int(is)) - 2) +  1.0000000000000000E-099)
    70|                   d-g2ai%addr%g2ai(($$CIV2 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / (d-g2a%addr%g2a(($$CIV2 + &
                &           int(is)) - 2) +  1.0000000000000000E-099)
    71|                   d-g2bi%addr%g2bi(($$CIV2 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / (d-g2b%addr%g2b(($$CIV2 + &
                &           int(is)) - 2) +  1.0000000000000000E-099)
    72|                   d-g31ai%addr%g31ai(($$CIV2 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / (d-g31a%addr%g31a(($$CIV2 + &
                &           int(is)) - 2) +  1.0000000000000000E-099)
    73|                   d-g31bi%addr%g31bi(($$CIV2 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / (d-g31b%addr%g31b(($$CIV2 + &
                &           int(is)) - 2) +  1.0000000000000000E-099)
    74|                   d-dvl1ai%addr%dvl1ai(($$CIV2 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / (d-dvl1a%addr%dvl1a(($$CIV2 &
                &           + int(is)) - 2) +  1.0000000000000000E-099)
    75|                   d-dvl1bi%addr%dvl1bi(($$CIV2 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / (d-dvl1b%addr%dvl1b(($$CIV2 &
                &           + int(is)) - 2) +  1.0000000000000000E-099)
    76|                 ENDDO
                      ENDIF
    80|               IF ((nreq <> 0)) THEN
    81|                 CALL mpi_waitall(nreq,req,stat,ierr)
    82|                 nreq = 0
    83|               ENDIF
    84|               CALL newvg()
    86|               CALL newx1()
    88|               IF ((1 + (int((ie + 2)) - int((is - 2))) > 0)) THEN
                        $$CIV3 = 0
       Id=3             DO $$CIV3 = $$CIV3, int((1 + (int((ie + 2)) - int((is &
                &           - 2)))))-1
    89|                   d-dx1ani%addr%dx1ani(($$CIV3 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / d-dx1an%addr%dx1an(($$CIV3 &
                &           + int(is)) - 2)
    90|                   d-dx1bni%addr%dx1bni(($$CIV3 + int(is)) - 2) =  &
                &           1.0000000000000000E+000 / d-dx1bn%addr%dx1bn(($$CIV3 &
                &           + int(is)) - 2)
    91|                 ENDDO
                      ENDIF
    93|               IF ((MOD(int(kn), 4) > 0  .AND.  int(kn) > 0)) THEN
                        $$CIV5 = 0
       Id=11            DO $$CIV5 = $$CIV5, MOD(int(kn), int(4))-1
    94|                   IF ((int(jn) > 0)) THEN
                            $$CIV4 = 0
       Id=12                DO $$CIV4 = $$CIV4, int(int(jn))-1
    95|                       $$csx0 = _sin(d-x2b%addr%x2b(%VAL($$CIV4) + 1))
                              d-v3oib%addr%v3oib($$CIV4 + 1,$$CIV5 + 1,1) = ( &
                &               3.0000001192092895E-001 * d-x1b%addr%x1b(int((ie &
                &               + 1)))) * $$csx0
    96|                       d-v3oib%addr%v3oib($$CIV4 + 1,$$CIV5 + 1,2) = ( &
                &               3.0000001192092895E-001 * d-x1b%addr%x1b(int((ie &
                &               + 2)))) * $$csx0
    97|                     ENDDO
                          ENDIF
    98|                 ENDDO
                      ENDIF
    93|               IF (.NOT.(int(kn) > 0  .AND.  int(kn) > MOD(int(kn), 4))) &
                &       GOTO lab_43
                      $$CIV9 = int(0)
       Id=4           DO $$CIV9 = $$CIV9, int((((int(kn) - MOD(int(kn), 4)) - &
                &         1) / 4 + 1))-1
    94|                 IF ((int(jn) > 0)) THEN
                          $$CIV4 = 0
       Id=5               DO $$CIV4 = $$CIV4, int(int(jn))-1
    95|                     $$csx1 = ( 3.0000001192092895E-001 * d-x1b%addr%x1b(&
                &             int((ie + 1)))) * _sin(d-x2b%addr%x2b(%VAL($$CIV4) &
                &             + 1))
                            d-v3oib%addr%v3oib($$CIV4 + 1,1 + ($$CIV9 * 4 + MOD(&
                &             int(kn), 4)),1) = $$csx1
    96|                     $$csx2 = ( 3.0000001192092895E-001 * d-x1b%addr%x1b(&
                &             int((ie + 2)))) * _sin(d-x2b%addr%x2b(%VAL($$CIV4) &
                &             + 1))
                            d-v3oib%addr%v3oib($$CIV4 + 1,1 + ($$CIV9 * 4 + MOD(&
                &             int(kn), 4)),2) = $$csx2
    95|                     d-v3oib%addr%v3oib($$CIV4 + 1,2 + ($$CIV9 * 4 + MOD(&
                &             int(kn), 4)),1) = $$csx1
    96|                     d-v3oib%addr%v3oib($$CIV4 + 1,2 + ($$CIV9 * 4 + MOD(&
                &             int(kn), 4)),2) = $$csx2
    95|                     d-v3oib%addr%v3oib($$CIV4 + 1,3 + ($$CIV9 * 4 + MOD(&
                &             int(kn), 4)),1) = $$csx1
    96|                     d-v3oib%addr%v3oib($$CIV4 + 1,3 + ($$CIV9 * 4 + MOD(&
                &             int(kn), 4)),2) = $$csx2
    95|                     d-v3oib%addr%v3oib($$CIV4 + 1,4 + ($$CIV9 * 4 + MOD(&
                &             int(kn), 4)),1) = $$csx1
    96|                     d-v3oib%addr%v3oib($$CIV4 + 1,4 + ($$CIV9 * 4 + MOD(&
                &             int(kn), 4)),2) = $$csx2
    97|                   ENDDO
                        ENDIF
    98|               ENDDO
                      lab_43
    99|               lab_4
   103|               IF ((x2fac <>  0.0000000000000000E+000)) THEN
   104|                 T_34 = 1
                        T_35 = 1
                        CALL scopy(jn,d-x2an%addr,T_34,d-x2a%addr,T_35)
   105|                 T_36 = 1
                        T_37 = 1
                        CALL scopy(jn,d-x2bn%addr,T_36,d-x2b%addr,T_37)
   106|                 T_38 = 1
                        T_39 = 1
                        CALL scopy(jn,d-dx2an%addr,T_38,d-dx2a%addr,T_39)
   107|                 T_40 = 1
                        T_41 = 1
                        CALL scopy(jn,d-dx2bn%addr,T_40,d-dx2b%addr,T_41)
   108|                 T_42 = 1
                        T_43 = 1
                        CALL scopy(jn,d-g32an%addr,T_42,d-g32a%addr,T_43)
   109|                 T_44 = 1
                        T_45 = 1
                        CALL scopy(jn,d-g32bn%addr,T_44,d-g32b%addr,T_45)
   110|                 T_46 = 1
                        T_47 = 1
                        CALL scopy(jn,d-g4an%addr,T_46,d-g4a%addr,T_47)
   111|                 T_48 = 1
                        T_49 = 1
                        CALL scopy(jn,d-g4bn%addr,T_48,d-g4b%addr,T_49)
   112|                 T_50 = 1
                        T_51 = 1
                        CALL scopy(jn,d-dvl2an%addr,T_50,d-dvl2a%addr,T_51)
   113|                 T_52 = 1
                        T_53 = 1
                        CALL scopy(jn,d-dvl2bn%addr,T_52,d-dvl2b%addr,T_53)
   114|                 T_54 = 1
                        T_55 = 1
                        CALL scopy(jn,d-dvl2ani%addr,T_54,d-dvl2ai%addr,T_55)
   115|                 T_56 = 1
                        T_57 = 1
                        CALL scopy(jn,d-dvl2bni%addr,T_56,d-dvl2bi%addr,T_57)
   116|                 IF ((1 + (int((je + 2)) - int((js - 2))) > 0)) THEN
                          $$CIV6 = 0
       Id=6               DO $$CIV6 = $$CIV6, int((1 + (int((je + 2)) - int((&
                &             js - 2)))))-1
   117|                     d-dx2ai%addr%dx2ai(($$CIV6 + int(js)) - 2) =  &
                &             1.0000000000000000E+000 / d-dx2a%addr%dx2a(($$CIV6 &
                &             + int(js)) - 2)
   118|                     d-dx2bi%addr%dx2bi(($$CIV6 + int(js)) - 2) =  &
                &             1.0000000000000000E+000 / d-dx2b%addr%dx2b(($$CIV6 &
                &             + int(js)) - 2)
   119|                     IF ((lgeom == 3)) THEN
   120|                       d-dg32ad2%addr%dg32ad2(($$CIV6 + int(js)) - 2) = &
                &               _cos(d-x2a%addr%x2a((%VAL($$CIV6) + int(%VAL(js)))&
                &                - 2))
   121|                       d-dg32bd2%addr%dg32bd2(($$CIV6 + int(js)) - 2) = &
                &               _cos(d-x2b%addr%x2b((%VAL($$CIV6) + int(%VAL(js)))&
                &                - 2))
   122|                     ENDIF
   123|                   ENDDO
                        ENDIF
   124|                 CALL newx2()
   125|               ENDIF
   127|               IF (.NOT.(x3fac <>  0.0000000000000000E+000)) GOTO lab_32
   128|               T_58 = 1
                      T_59 = 1
                      CALL scopy(kn,d-x3an%addr,T_58,d-x3a%addr,T_59)
   129|               T_60 = 1
                      T_61 = 1
                      CALL scopy(kn,d-x3bn%addr,T_60,d-x3b%addr,T_61)
   130|               T_62 = 1
                      T_63 = 1
                      CALL scopy(kn,d-dx3an%addr,T_62,d-dx3a%addr,T_63)
   131|               T_64 = 1
                      T_65 = 1
                      CALL scopy(kn,d-dx3bn%addr,T_64,d-dx3b%addr,T_65)
   132|               T_66 = 1
                      T_67 = 1
                      CALL scopy(kn,d-dvl3an%addr,T_66,d-dvl3a%addr,T_67)
   133|               T_68 = 1
                      T_69 = 1
                      CALL scopy(kn,d-dvl3bn%addr,T_68,d-dvl3b%addr,T_69)
   134|               T_70 = 1
                      T_71 = 1
                      CALL scopy(kn,d-dvl3ani%addr,T_70,d-dvl3ai%addr,T_71)
   135|               T_72 = 1
                      T_73 = 1
                      CALL scopy(kn,d-dvl3bni%addr,T_72,d-dvl3bi%addr,T_73)
   136|               IF ((1 + (int((ke + 2)) - int((ks - 2))) > 0)) THEN
                        $$CIV7 = 0
       Id=7             DO $$CIV7 = $$CIV7, int((1 + (int((ke + 2)) - int((ks &
                &           - 2)))))-1
   137|                   d-dx3ai%addr%dx3ai(($$CIV7 + int(ks)) - 2) =  &
                &           1.0000000000000000E+000 / d-dx3a%addr%dx3a(($$CIV7 + &
                &           int(ks)) - 2)
   138|                   d-dx3bi%addr%dx3bi(($$CIV7 + int(ks)) - 2) =  &
                &           1.0000000000000000E+000 / d-dx3b%addr%dx3b(($$CIV7 + &
                &           int(ks)) - 2)
   139|                 ENDDO
                      ENDIF
   140|               CALL newx3()
   141|               lab_32
   144|               lab_51
                      RETURN
                    END SUBROUTINE newgrid

 
 
>>>>> OBJECT SECTION <<<<<
 GPR's set/used:   ssus ssss ssss s-ss  ssss ssss ssss ssss
 FPR's set/used:   ssss ssss ssss ss--  ---- ---- ssss ssss
 CCR's set/used:   ss-- ssss
     | 000000                           PDEF     newgrid
   10|                                  PROC      
    0| 000000 stfd     DBE1FFF8   1     STFL      #stack(gr1,-8)=fp31
    0| 000004 stfd     DBC1FFF0   1     STFL      #stack(gr1,-16)=fp30
    0| 000008 stfd     DBA1FFE8   1     STFL      #stack(gr1,-24)=fp29
    0| 00000C stfd     DB81FFE0   1     STFL      #stack(gr1,-32)=fp28
    0| 000010 stfd     DB61FFD8   1     STFL      #stack(gr1,-40)=fp27
    0| 000014 stfd     DB41FFD0   1     STFL      #stack(gr1,-48)=fp26
    0| 000018 stfd     DB21FFC8   1     STFL      #stack(gr1,-56)=fp25
    0| 00001C stfd     DB01FFC0   1     STFL      #stack(gr1,-64)=fp24
    0| 000020 std      FBE1FFB8   1     ST8       #stack(gr1,-72)=gr31
    0| 000024 std      FBC1FFB0   1     ST8       #stack(gr1,-80)=gr30
    0| 000028 std      FBA1FFA8   1     ST8       #stack(gr1,-88)=gr29
    0| 00002C std      FB81FFA0   1     ST8       #stack(gr1,-96)=gr28
    0| 000030 std      FB61FF98   1     ST8       #stack(gr1,-104)=gr27
    0| 000034 std      FB41FF90   1     ST8       #stack(gr1,-112)=gr26
    0| 000038 std      FB21FF88   1     ST8       #stack(gr1,-120)=gr25
    0| 00003C std      FB01FF80   1     ST8       #stack(gr1,-128)=gr24
    0| 000040 std      FAE1FF78   1     ST8       #stack(gr1,-136)=gr23
    0| 000044 std      FAC1FF70   1     ST8       #stack(gr1,-144)=gr22
    0| 000048 std      FAA1FF68   1     ST8       #stack(gr1,-152)=gr21
    0| 00004C std      FA81FF60   1     ST8       #stack(gr1,-160)=gr20
    0| 000050 std      FA61FF58   1     ST8       #stack(gr1,-168)=gr19
    0| 000054 std      FA41FF50   1     ST8       #stack(gr1,-176)=gr18
    0| 000058 std      FA21FF48   1     ST8       #stack(gr1,-184)=gr17
    0| 00005C std      FA01FF40   1     ST8       #stack(gr1,-192)=gr16
    0| 000060 std      F9E1FF38   1     ST8       #stack(gr1,-200)=gr15
    0| 000064 std      F9C1FF30   1     ST8       #stack(gr1,-208)=gr14
    0| 000068 mfspr    7C0802A6   1     LFLR      gr0=lr
    0| 00006C mfcr     7D800026   1     LFCR      gr12=cr4,4
    0| 000070 stw      91810008   1     ST4A      #stack(gr1,8)=gr12
    0| 000074 std      F8010010   1     ST8       #stack(gr1,16)=gr0
    0| 000078 stdu     F821FD41   1     ST8U      gr1,#stack(gr1,-704)=gr1
   39| 00007C ld       E8620000   1     L8        gr3=.&&N&&grid(gr2,0)
   39| 000080 ld       E8820000   1     L8        gr4=.+CONSTANT_AREA(gr2,0)
   39| 000084 lfd      C8030038   1     LFL       fp0=<s744:d56:l8>(gr3,56)
   39| 000088 lfs      C3E40000   1     LFS       fp31=+CONSTANT_AREA(gr4,0)
   39| 00008C fcmpu    FC1F0000   1     CFL       cr0=fp31,fp0
   39| 000090 bc       41821928   1     BT        CL.423,cr0,0x80/feq,taken=40%(40,60)
   49| 000094 ld       EBE20000   1     L8        gr31=.&&N&&mpipar(gr2,0)
    0| 000098 ld       E8620000   1     L8        gr3=.&&N&&bndry(gr2,0)
   51| 00009C ld       EBC20000   1     L8        gr30=.&&N&field(gr2,0)
   46| 0000A0 addi     38000000   1     LI        gr0=0
   51| 0000A4 addi     3BA00003   1     LI        gr29=3
   51| 0000A8 stw      90010088   1     ST4Z      T_4(gr1,136)=gr0
   49| 0000AC stw      901F0018   1     ST4Z      <s753:d24:l4>(gr31,24)=gr0
   46| 0000B0 stw      900302E8   1     ST4Z      <s749:d744:l4>(gr3,744)=gr0
   46| 0000B4 stw      90030308   1     ST4Z      <s749:d776:l4>(gr3,776)=gr0
   51| 0000B8 stw      93A10080   1     ST4Z      T_2(gr1,128)=gr29
   51| 0000BC stw      93A10084   1     ST4Z      T_3(gr1,132)=gr29
   46| 0000C0 stw      90030328   1     ST4Z      <s749:d808:l4>(gr3,808)=gr0
   46| 0000C4 stw      90030348   1     ST4Z      <s749:d840:l4>(gr3,840)=gr0
   46| 0000C8 stw      900302F0   1     ST4Z      <s749:d752:l4>(gr3,752)=gr0
   46| 0000CC stw      90030310   1     ST4Z      <s749:d784:l4>(gr3,784)=gr0
   46| 0000D0 stw      90030330   1     ST4Z      <s749:d816:l4>(gr3,816)=gr0
   46| 0000D4 stw      90030350   1     ST4Z      <s749:d848:l4>(gr3,848)=gr0
   50| 0000D8 lwz      809F001C   1     L4Z       gr4=<s753:d28:l4>(gr31,28)
   46| 0000DC stw      90030368   1     ST4Z      <s749:d872:l4>(gr3,872)=gr0
   46| 0000E0 stw      90030370   1     ST4Z      <s749:d880:l4>(gr3,880)=gr0
   46| 0000E4 stw      90030388   1     ST4Z      <s749:d904:l4>(gr3,904)=gr0
   46| 0000E8 stw      90030390   1     ST4Z      <s749:d912:l4>(gr3,912)=gr0
   51| 0000EC stw      9001008C   1     ST4Z      T_5(gr1,140)=gr0
   50| 0000F0 addi     38840001   1     AI        gr4=gr4,1
   51| 0000F4 stw      90010090   1     ST4Z      T_6(gr1,144)=gr0
   50| 0000F8 stw      909F001C   1     ST4Z      <s753:d28:l4>(gr31,28)=gr4
   51| 0000FC stw      90010094   1     ST4Z      T_7(gr1,148)=gr0
   51| 000100 ld       E93E0000   1     L8        gr9=<s725:d0:l8>(gr30,0)
   51| 000104 addi     39010094   1     AI        gr8=gr1,148
   51| 000108 addi     38E10090   1     AI        gr7=gr1,144
   51| 00010C addi     38C1008C   1     AI        gr6=gr1,140
   51| 000110 addi     38A10088   1     AI        gr5=gr1,136
   51| 000114 addi     38810084   1     AI        gr4=gr1,132
   51| 000118 addi     38610080   1     AI        gr3=gr1,128
   51| 00011C bl       48000001   1     CALL      bvald,7,T_2",gr3,T_3",gr4,T_4",gr5,T_5",gr6,T_6",gr7,T_7",gr8,d",gr9,#ProcAlias",bvald",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   51| 000120 ori      60000000   1
   52| 000124 addi     38000000   1     LI        gr0=0
   52| 000128 stw      93A10098   1     ST4Z      T_8(gr1,152)=gr29
   52| 00012C stw      93A1009C   1     ST4Z      T_9(gr1,156)=gr29
   52| 000130 stw      900100A0   1     ST4Z      T_10(gr1,160)=gr0
   52| 000134 stw      900100A4   1     ST4Z      T_11(gr1,164)=gr0
   52| 000138 stw      900100A8   1     ST4Z      T_12(gr1,168)=gr0
   52| 00013C stw      900100AC   1     ST4Z      T_13(gr1,172)=gr0
   52| 000140 ld       E93E01A0   1     L8        gr9=<s725:d416:l8>(gr30,416)
   52| 000144 addi     390100AC   1     AI        gr8=gr1,172
   52| 000148 addi     38E100A8   1     AI        gr7=gr1,168
   52| 00014C addi     38C100A4   1     AI        gr6=gr1,164
   52| 000150 addi     38A100A0   1     AI        gr5=gr1,160
   52| 000154 addi     3881009C   1     AI        gr4=gr1,156
   52| 000158 addi     38610098   1     AI        gr3=gr1,152
   52| 00015C bl       48000001   1     CALL      bvalv1,7,T_8",gr3,T_9",gr4,T_10",gr5,T_11",gr6,T_12",gr7,T_13",gr8,v1",gr9,bvalv1",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   52| 000160 ori      60000000   1
   54| 000164 ld       EBC20000   1     L8        gr30=.&&N&grid(gr2,0)
   54| 000168 ld       EB820000   1     L8        gr28=.&&N&&param(gr2,0)
   54| 00016C addi     3BA00001   1     LI        gr29=1
   54| 000170 addi     38E100B4   1     AI        gr7=gr1,180
   54| 000174 stw      93A100B0   1     ST4Z      T_14(gr1,176)=gr29
   54| 000178 stw      93A100B4   1     ST4Z      T_15(gr1,180)=gr29
   54| 00017C ld       E89E0E70   1     L8        gr4=<s10:d3696:l8>(gr30,3696)
   54| 000180 ld       E8DE0000   1     L8        gr6=<s10:d0:l8>(gr30,0)
   54| 000184 addi     38A100B0   1     AI        gr5=gr1,176
   54| 000188 or       7F83E378   1     LR        gr3=gr28
   54| 00018C bl       48000001   1     CALL      scopy,5,in",gr3,x1an",gr4,T_14",gr5,x1a",gr6,T_15",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   54| 000190 ori      60000000   1
   55| 000194 ld       E89E12D0   1     L8        gr4=<s10:d4816:l8>(gr30,4816)
   55| 000198 stw      93A100B8   1     ST4Z      T_16(gr1,184)=gr29
   55| 00019C stw      93A100BC   1     ST4Z      T_17(gr1,188)=gr29
   55| 0001A0 ld       E8DE06C8   1     L8        gr6=<s10:d1736:l8>(gr30,1736)
   55| 0001A4 addi     38E100BC   1     AI        gr7=gr1,188
   55| 0001A8 addi     38A100B8   1     AI        gr5=gr1,184
   55| 0001AC or       7F83E378   1     LR        gr3=gr28
   55| 0001B0 bl       48000001   1     CALL      scopy,5,in",gr3,x1bn",gr4,T_16",gr5,x1b",gr6,T_17",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   55| 0001B4 ori      60000000   1
   56| 0001B8 stw      93A100C0   1     ST4Z      T_18(gr1,192)=gr29
   56| 0001BC stw      93A100C4   1     ST4Z      T_19(gr1,196)=gr29
   56| 0001C0 ld       E89E0EE0   1     L8        gr4=<s10:d3808:l8>(gr30,3808)
   56| 0001C4 ld       E8DE0150   1     L8        gr6=<s10:d336:l8>(gr30,336)
   56| 0001C8 addi     38E100C4   1     AI        gr7=gr1,196
   56| 0001CC addi     38A100C0   1     AI        gr5=gr1,192
   56| 0001D0 or       7F83E378   1     LR        gr3=gr28
   56| 0001D4 bl       48000001   1     CALL      scopy,5,in",gr3,dx1an",gr4,T_18",gr5,dx1a",gr6,T_19",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   56| 0001D8 ori      60000000   1
   57| 0001DC stw      93A100C8   1     ST4Z      T_20(gr1,200)=gr29
   57| 0001E0 stw      93A100CC   1     ST4Z      T_21(gr1,204)=gr29
   57| 0001E4 ld       E89E1340   1     L8        gr4=<s10:d4928:l8>(gr30,4928)
   57| 0001E8 ld       E8DE0818   1     L8        gr6=<s10:d2072:l8>(gr30,2072)
   57| 0001EC addi     38E100CC   1     AI        gr7=gr1,204
   57| 0001F0 addi     38A100C8   1     AI        gr5=gr1,200
   57| 0001F4 or       7F83E378   1     LR        gr3=gr28
   57| 0001F8 bl       48000001   1     CALL      scopy,5,in",gr3,dx1bn",gr4,T_20",gr5,dx1b",gr6,T_21",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   57| 0001FC ori      60000000   1
   58| 000200 stw      93A100D0   1     ST4Z      T_22(gr1,208)=gr29
   58| 000204 stw      93A100D4   1     ST4Z      T_23(gr1,212)=gr29
   58| 000208 ld       E89E0FC0   1     L8        gr4=<s10:d4032:l8>(gr30,4032)
   58| 00020C ld       E8DE0498   1     L8        gr6=<s10:d1176:l8>(gr30,1176)
   58| 000210 addi     38E100D4   1     AI        gr7=gr1,212
   58| 000214 addi     38A100D0   1     AI        gr5=gr1,208
   58| 000218 or       7F83E378   1     LR        gr3=gr28
   58| 00021C bl       48000001   1     CALL      scopy,5,in",gr3,g2an",gr4,T_22",gr5,g2a",gr6,T_23",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   58| 000220 ori      60000000   1
   59| 000224 stw      93A100D8   1     ST4Z      T_24(gr1,216)=gr29
   59| 000228 stw      93A100DC   1     ST4Z      T_25(gr1,220)=gr29
   59| 00022C ld       E89E1420   1     L8        gr4=<s10:d5152:l8>(gr30,5152)
   59| 000230 ld       E8DE0B60   1     L8        gr6=<s10:d2912:l8>(gr30,2912)
   59| 000234 addi     38E100DC   1     AI        gr7=gr1,220
   59| 000238 addi     38A100D8   1     AI        gr5=gr1,216
   59| 00023C or       7F83E378   1     LR        gr3=gr28
   59| 000240 bl       48000001   1     CALL      scopy,5,in",gr3,g2bn",gr4,T_24",gr5,g2b",gr6,T_25",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   59| 000244 ori      60000000   1
   60| 000248 stw      93A100E0   1     ST4Z      T_26(gr1,224)=gr29
   60| 00024C stw      93A100E4   1     ST4Z      T_27(gr1,228)=gr29
   60| 000250 ld       E89E1030   1     L8        gr4=<s10:d4144:l8>(gr30,4144)
   60| 000254 ld       E8DE04D0   1     L8        gr6=<s10:d1232:l8>(gr30,1232)
   60| 000258 addi     38E100E4   1     AI        gr7=gr1,228
   60| 00025C addi     38A100E0   1     AI        gr5=gr1,224
   60| 000260 or       7F83E378   1     LR        gr3=gr28
   60| 000264 bl       48000001   1     CALL      scopy,5,in",gr3,g31an",gr4,T_26",gr5,g31a",gr6,T_27",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   60| 000268 ori      60000000   1
   61| 00026C stw      93A100E8   1     ST4Z      T_28(gr1,232)=gr29
   61| 000270 stw      93A100EC   1     ST4Z      T_29(gr1,236)=gr29
   61| 000274 ld       E89E1490   1     L8        gr4=<s10:d5264:l8>(gr30,5264)
   61| 000278 ld       E8DE0B98   1     L8        gr6=<s10:d2968:l8>(gr30,2968)
   61| 00027C addi     38E100EC   1     AI        gr7=gr1,236
   61| 000280 addi     38A100E8   1     AI        gr5=gr1,232
   61| 000284 or       7F83E378   1     LR        gr3=gr28
   61| 000288 bl       48000001   1     CALL      scopy,5,in",gr3,g31bn",gr4,T_28",gr5,g31b",gr6,T_29",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   61| 00028C ori      60000000   1
   62| 000290 stw      93A100F0   1     ST4Z      T_30(gr1,240)=gr29
   62| 000294 stw      93A100F4   1     ST4Z      T_31(gr1,244)=gr29
   62| 000298 ld       E89E0F50   1     L8        gr4=<s10:d3920:l8>(gr30,3920)
   62| 00029C ld       E8DE0348   1     L8        gr6=<s10:d840:l8>(gr30,840)
   62| 0002A0 addi     38E100F4   1     AI        gr7=gr1,244
   62| 0002A4 addi     38A100F0   1     AI        gr5=gr1,240
   62| 0002A8 or       7F83E378   1     LR        gr3=gr28
   62| 0002AC bl       48000001   1     CALL      scopy,5,in",gr3,dvl1an",gr4,T_30",gr5,dvl1a",gr6,T_31",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   62| 0002B0 ori      60000000   1
   63| 0002B4 stw      93A100F8   1     ST4Z      T_32(gr1,248)=gr29
   63| 0002B8 stw      93A100FC   1     ST4Z      T_33(gr1,252)=gr29
   63| 0002BC ld       E89E13B0   1     L8        gr4=<s10:d5040:l8>(gr30,5040)
   63| 0002C0 ld       E8DE0A10   1     L8        gr6=<s10:d2576:l8>(gr30,2576)
   63| 0002C4 addi     38E100FC   1     AI        gr7=gr1,252
   63| 0002C8 addi     38A100F8   1     AI        gr5=gr1,248
   63| 0002CC or       7F83E378   1     LR        gr3=gr28
   63| 0002D0 bl       48000001   1     CALL      scopy,5,in",gr3,dvl1bn",gr4,T_32",gr5,dvl1b",gr6,T_33",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   63| 0002D4 ori      60000000   1
   65| 0002D8 ld       EB620000   1     L8        gr27=.&&N&&grid(gr2,0)
   65| 0002DC lwz      809B0004   1     L4Z       gr4=<s744:d4:l4>(gr27,4)
   65| 0002E0 lwz      807B0000   1     L4Z       gr3=<s744:d0:l4>(gr27,0)
   65| 0002E4 addi     38040002   1     AI        gr0=gr4,2
   65| 0002E8 addi     3883FFFE   1     AI        gr4=gr3,-2
   65| 0002EC extsw    7C0007B4   1     EXTS4     gr0=gr0
   65| 0002F0 extsw    7C8407B4   1     EXTS4     gr4=gr4
   65| 0002F4 subf     7CA40050   1     S         gr5=gr0,gr4
   65| 0002F8 addic.   34A50001   1     AI_R      gr5,cr0=gr5,1,ca"
   65| 0002FC bc       40810494   1     BF        CL.39,cr0,0x2/gt,taken=20%(20,80)
   66| 000300 ld       E9DE0000   1     L8        gr14=<s10:d0:l8>(gr30,0)
   66| 000304 ld       E95E0018   1     L8        gr10=<s10:d24:l8>(gr30,24)
   67| 000308 ld       E9FE06C8   1     L8        gr15=<s10:d1736:l8>(gr30,1736)
   71| 00030C ld       E8DE0B60   1     L8        gr6=<s10:d2912:l8>(gr30,2912)
   67| 000310 ld       E99E06E0   1     L8        gr12=<s10:d1760:l8>(gr30,1760)
   70| 000314 ld       EB1E04B0   1     L8        gr24=<s10:d1200:l8>(gr30,1200)
   71| 000318 ld       EADE0B78   1     L8        gr22=<s10:d2936:l8>(gr30,2936)
   66| 00031C add      7D4A7214   1     A         gr10=gr10,gr14
   70| 000320 ld       E9DE0498   1     L8        gr14=<s10:d1176:l8>(gr30,1176)
   75| 000324 ld       E8BE0AB8   1     L8        gr5=<s10:d2744:l8>(gr30,2744)
   73| 000328 ld       E8FE0B98   1     L8        gr7=<s10:d2968:l8>(gr30,2968)
   71| 00032C ld       E91E0C08   1     L8        gr8=<s10:d3080:l8>(gr30,3080)
   73| 000330 ld       E93E0C40   1     L8        gr9=<s10:d3136:l8>(gr30,3136)
   66| 000334 ld       E97E00C0   1     L8        gr11=<s10:d192:l8>(gr30,192)
   67| 000338 ld       EBBE0788   1     L8        gr29=<s10:d1928:l8>(gr30,1928)
   68| 00033C ld       EB9E0168   1     L8        gr28=<s10:d360:l8>(gr30,360)
   68| 000340 ld       EB7E0210   1     L8        gr27=<s10:d528:l8>(gr30,528)
   69| 000344 ld       EB5E0830   1     L8        gr26=<s10:d2096:l8>(gr30,2096)
   69| 000348 ld       EB3E08D8   1     L8        gr25=<s10:d2264:l8>(gr30,2264)
   70| 00034C ld       EAFE0558   1     L8        gr23=<s10:d1368:l8>(gr30,1368)
   71| 000350 ld       EABE0C20   1     L8        gr21=<s10:d3104:l8>(gr30,3104)
   72| 000354 ld       EA9E04E8   1     L8        gr20=<s10:d1256:l8>(gr30,1256)
   72| 000358 ld       EA7E0590   1     L8        gr19=<s10:d1424:l8>(gr30,1424)
   73| 00035C ld       EA5E0BB0   1     L8        gr18=<s10:d2992:l8>(gr30,2992)
   73| 000360 ld       EA3E0C58   1     L8        gr17=<s10:d3160:l8>(gr30,3160)
   74| 000364 ld       EA1E0360   1     L8        gr16=<s10:d864:l8>(gr30,864)
   67| 000368 add      7D8C7A14   1     A         gr12=gr12,gr15
   70| 00036C add      7F0EC214   1     A         gr24=gr14,gr24
   71| 000370 add      7CC6B214   1     A         gr6=gr6,gr22
   72| 000374 ld       E9FE04D0   1     L8        gr15=<s10:d1232:l8>(gr30,1232)
    0| 000378 extsw    7C6307B4   1     EXTS4     gr3=gr3
   73| 00037C add      7CE79214   1     A         gr7=gr7,gr18
   75| 000380 rldicr   78631F24   1     SLL8      gr3=gr3,3
    0| 000384 ld       EA420000   1     L8        gr18=.+CONSTANT_AREA(gr2,0)
   75| 000388 addi     3863FFE8   1     AI        gr3=gr3,-24
    0| 00038C subfic   20840001   1     SFI       gr4=1,gr4,ca"
   74| 000390 ld       E9DE0348   1     L8        gr14=<s10:d840:l8>(gr30,840)
   67| 000394 add      7D836214   1     A         gr12=gr3,gr12
    0| 000398 add      7C002214   1     A         gr0=gr0,gr4
   66| 00039C add      7C835214   1     A         gr4=gr3,gr10
    0| 0003A0 lfd      C8120008   1     LFL       fp0=+CONSTANT_AREA(gr18,8)
   66| 0003A4 lfdu     CC440008   1     LFDU      fp2,gr4=x1a(gr4,8)
   67| 0003A8 lfdu     CC6C0008   1     LFDU      fp3,gr12=x1b(gr12,8)
   72| 0003AC add      7ECFA214   1     A         gr22=gr15,gr20
   74| 0003B0 add      7E8E8214   1     A         gr20=gr14,gr16
   68| 0003B4 ld       EA1E0150   1     L8        gr16=<s10:d336:l8>(gr30,336)
    0| 0003B8 mtspr    7C0903A6   1     LCTR      ctr=gr0
   68| 0003BC add      7C03E214   1     A         gr0=gr3,gr28
   66| 0003C0 fadd     FFA2002A   1     AFL       fp29=fp2,fp0,fcr
   69| 0003C4 ld       E9FE0818   1     L8        gr15=<s10:d2072:l8>(gr30,2072)
   67| 0003C8 fadd     FF83002A   1     AFL       fp28=fp3,fp0,fcr
   68| 0003CC add      7F808214   1     A         gr28=gr0,gr16
    0| 0003D0 lfs      C0320010   1     LFS       fp1=+CONSTANT_AREA(gr18,16)
   68| 0003D4 lfdu     CC9C0008   1     LFDU      fp4,gr28=dx1a(gr28,8)
   66| 0003D8 qvfre    1140E830   1     QVFRE     fp10=fp29
   69| 0003DC add      7D43D214   1     A         gr10=gr3,gr26
   67| 0003E0 qvfre    1160E030   1     QVFRE     fp11=fp28
   69| 0003E4 add      7D4A7A14   1     A         gr10=gr10,gr15
   67| 0003E8 ld       E9DE0770   1     L8        gr14=<s10:d1904:l8>(gr30,1904)
   69| 0003EC lfdu     CCCA0008   1     LFDU      fp6,gr10=dx1b(gr10,8)
   68| 0003F0 fadd     FC84002A   1     AFL       fp4=fp4,fp0,fcr
   67| 0003F4 add      7C03EA14   1     A         gr0=gr3,gr29
   66| 0003F8 fmsub    FDBD0AB8   1     FMS       fp13=fp1,fp29,fp10,fcr
   70| 0003FC add      7F43C214   1     A         gr26=gr3,gr24
   67| 000400 fmsub    FD9C0AF8   1     FMS       fp12=fp1,fp28,fp11,fcr
   67| 000404 add      7FA07214   1     A         gr29=gr0,gr14
   68| 000408 qvfre    11002030   1     QVFRE     fp8=fp4
   73| 00040C add      7C034A14   1     A         gr0=gr3,gr9
   69| 000410 fadd     FCC6002A   1     AFL       fp6=fp6,fp0,fcr
   66| 000414 ld       EA1E00A8   1     L8        gr16=<s10:d168:l8>(gr30,168)
   66| 000418 fnmsub   FD4A537C   1     FNMS      fp10=fp10,fp10,fp13,fcr
   73| 00041C add      7D208A14   1     A         gr9=gr0,gr17
   67| 000420 fnmsub   FD6B5B3C   1     FNMS      fp11=fp11,fp11,fp12,fcr
   72| 000424 ld       EA3E0578   1     L8        gr17=<s10:d1400:l8>(gr30,1400)
   68| 000428 fmsub    FFC40A38   1     FMS       fp30=fp1,fp4,fp8,fcr
   70| 00042C lfdu     CCFA0008   1     LFDU      fp7,gr26=g2a(gr26,8)
   66| 000430 fmsub    FDBD0AB8   1     FMS       fp13=fp1,fp29,fp10,fcr
   66| 000434 add      7D6B1A14   1     A         gr11=gr11,gr3
   69| 000438 qvfre    13603030   1     QVFRE     fp27=fp6
   69| 00043C ld       E9FE08C0   1     L8        gr15=<s10:d2240:l8>(gr30,2240)
   67| 000440 fmsub    FD9C0AF8   1     FMS       fp12=fp1,fp28,fp11,fcr
   70| 000444 ld       E9DE0540   1     L8        gr14=<s10:d1344:l8>(gr30,1344)
   70| 000448 fadd     FCE7002A   1     AFL       fp7=fp7,fp0,fcr
   72| 00044C add      7C039A14   1     A         gr0=gr3,gr19
   68| 000450 fnmsub   FD0847BC   1     FNMS      fp8=fp8,fp8,fp30,fcr
   71| 000454 add      7CC33214   1     A         gr6=gr3,gr6
   66| 000458 fnmsub   FD4A537C   1     FNMS      fp10=fp10,fp10,fp13,fcr
   66| 00045C add      7D6B8214   1     A         gr11=gr11,gr16
   69| 000460 fmsub    FF460EF8   1     FMS       fp26=fp1,fp6,fp27,fcr
   68| 000464 ld       EA1E01F8   1     L8        gr16=<s10:d504:l8>(gr30,504)
   67| 000468 fnmsub   FD6B5B3C   1     FNMS      fp11=fp11,fp11,fp12,fcr
   72| 00046C add      7F03B214   1     A         gr24=gr3,gr22
   70| 000470 qvfre    11803830   1     QVFRE     fp12=fp7
   74| 000474 add      7EC3A214   1     A         gr22=gr3,gr20
   68| 000478 fmsub    FDA40A38   1     FMS       fp13=fp1,fp4,fp8,fcr
   71| 00047C add      7EB51A14   1     A         gr21=gr21,gr3
   66| 000480 fmsub    FFBD0AB8   1     FMS       fp29=fp1,fp29,fp10,fcr
   72| 000484 add      7E808A14   1     A         gr20=gr0,gr17
   69| 000488 fnmsub   FF5BDEBC   1     FNMS      fp26=fp27,fp27,fp26,fcr
   70| 00048C add      7C03BA14   1     A         gr0=gr3,gr23
   67| 000490 fmsub    FF9C0AF8   1     FMS       fp28=fp1,fp28,fp11,fcr
   71| 000494 lfdu     CD260008   1     LFDU      fp9,gr6=g2b(gr6,8)
   70| 000498 fmsub    FF670B38   1     FMS       fp27=fp1,fp7,fp12,fcr
   71| 00049C add      7D08AA14   1     A         gr8=gr8,gr21
   68| 0004A0 fnmsub   FD08437C   1     FNMS      fp8=fp8,fp8,fp13,fcr
   69| 0004A4 add      7EE37A14   1     A         gr23=gr3,gr15
   66| 0004A8 fnmsub   FD4A577C   1     FNMS      fp10=fp10,fp10,fp29,fcr
   70| 0004AC add      7EA07214   1     A         gr21=gr0,gr14
   71| 0004B0 fadd     FD29002A   1     AFL       fp9=fp9,fp0,fcr
   68| 0004B4 add      7C03DA14   1     A         gr0=gr3,gr27
   69| 0004B8 fmsub    FDA60EB8   1     FMS       fp13=fp1,fp6,fp26,fcr
   69| 0004BC add      7F39BA14   1     A         gr25=gr25,gr23
   67| 0004C0 fnmsub   FD6B5F3C   1     FNMS      fp11=fp11,fp11,fp28,fcr
   68| 0004C4 add      7F608214   1     A         gr27=gr0,gr16
   71| 0004C8 qvfre    13C04830   1     QVFRE     fp30=fp9
   74| 0004CC ld       E81E0408   1     L8        gr0=<s10:d1032:l8>(gr30,1032)
   75| 0004D0 ld       EAFE0A28   1     L8        gr23=<s10:d2600:l8>(gr30,2600)
   75| 0004D4 ld       EA7E0AD0   1     L8        gr19=<s10:d2768:l8>(gr30,2768)
   75| 0004D8 ld       EA3E0A10   1     L8        gr17=<s10:d2576:l8>(gr30,2576)
   72| 0004DC lfdu     CC580008   1     LFDU      fp2,gr24=g31a(gr24,8)
   74| 0004E0 ld       E9FE03F0   1     L8        gr15=<s10:d1008:l8>(gr30,1008)
   73| 0004E4 add      7CE33A14   1     A         gr7=gr3,gr7
   74| 0004E8 add      7C001A14   1     A         gr0=gr0,gr3
   75| 0004EC add      7E731A14   1     A         gr19=gr19,gr3
   75| 0004F0 add      7EF1BA14   1     A         gr23=gr17,gr23
   73| 0004F4 lfdu     CC670008   1     LFDU      fp3,gr7=g31b(gr7,8)
   72| 0004F8 fadd     FC42002A   1     AFL       fp2=fp2,fp0,fcr
   74| 0004FC lfdu     CCB60008   1     LFDU      fp5,gr22=dvl1a(gr22,8)
   75| 000500 add      7CA59A14   1     A         gr5=gr5,gr19
   75| 000504 add      7C63BA14   1     A         gr3=gr3,gr23
   74| 000508 add      7EE07A14   1     A         gr23=gr0,gr15
   66| 00050C stfdu    DD4B0008   1     STFDU     gr11,x1ai(gr11,8)=fp10
   70| 000510 fnmsub   FD8C66FC   1     FNMS      fp12=fp12,fp12,fp27,fcr
   67| 000514 stfdu    DD7D0008   2     STFDU     gr29,x1bi(gr29,8)=fp11
   69| 000518 fnmsub   FD5AD37C   1     FNMS      fp10=fp26,fp26,fp13,fcr
   68| 00051C fmsub    FFA40A38   2     FMS       fp29=fp1,fp4,fp8,fcr
   71| 000520 fmsub    FC890FB8   2     FMS       fp4=fp1,fp9,fp30,fcr
   73| 000524 fadd     FC63002A   2     AFL       fp3=fp3,fp0,fcr
   70| 000528 fmsub    FD670B38   2     FMS       fp11=fp1,fp7,fp12,fcr
   68| 00052C fnmsub   FD08477C   2     FNMS      fp8=fp8,fp8,fp29,fcr
   71| 000530 fnmsub   FFDEF13C   2     FNMS      fp30=fp30,fp30,fp4,fcr
   74| 000534 fadd     FC85002A   2     AFL       fp4=fp5,fp0,fcr
   70| 000538 fnmsub   FD6C62FC   2     FNMS      fp11=fp12,fp12,fp11,fcr
   69| 00053C fmsub    FD860AB8   2     FMS       fp12=fp1,fp6,fp10,fcr
   72| 000540 qvfre    10C01030   1     QVFRE     fp6=fp2
   68| 000544 stfdu    DD1B0008   1     STFDU     gr27,dx1ai(gr27,8)=fp8
   71| 000548 fmsub    FCA90FB8   1     FMS       fp5=fp1,fp9,fp30,fcr
   75| 00054C lfdu     CD030008   2     LFDU      fp8,gr3=dvl1b(gr3,8)
   69| 000550 fnmsub   FD8A533C   1     FNMS      fp12=fp10,fp10,fp12,fcr
   70| 000554 fmsub    FCE70AF8   2     FMS       fp7=fp1,fp7,fp11,fcr
   72| 000558 fmsub    FDA209B8   2     FMS       fp13=fp1,fp2,fp6,fcr
   73| 00055C qvfre    11401830   1     QVFRE     fp10=fp3
   69| 000560 stfdu    DD990008   1     STFDU     gr25,dx1bi(gr25,8)=fp12
   70| 000564 fnmsub   FF8B59FC   1     FNMS      fp28=fp11,fp11,fp7,fcr
   72| 000568 fnmsub   FD86337C   2     FNMS      fp12=fp6,fp6,fp13,fcr
   73| 00056C fmsub    FDA30AB8   2     FMS       fp13=fp1,fp3,fp10,fcr
   71| 000570 fnmsub   FD7EF17C   2     FNMS      fp11=fp30,fp30,fp5,fcr
    0| 000574 bc       4240019C   1     BCF       ctr=CL.253,taken=0%(0,100)
    0| 000578 ori      60210000   1     XNOP      
    0|                              CL.254:
   66| 00057C lfdu     CCA40008   1     LFDU      fp5,gr4=x1a(gr4,8)
   72| 000580 fmsub    FFA20B38   1     FMS       fp29=fp1,fp2,fp12,fcr
   74| 000584 qvfre    10C02030   1     QVFRE     fp6=fp4
   71| 000588 fmsub    FFC90AF8   1     FMS       fp30=fp1,fp9,fp11,fcr
   75| 00058C fadd     FCE8002A   2     AFL       fp7=fp8,fp0,fcr
   73| 000590 fnmsub   FD0A537C   2     FNMS      fp8=fp10,fp10,fp13,fcr
   70| 000594 stfdu    DF950008   2     STFDU     gr21,g2ai(gr21,8)=fp28
   72| 000598 fnmsub   FD2C677C   1     FNMS      fp9=fp12,fp12,fp29,fcr
   74| 00059C fmsub    FD4409B8   2     FMS       fp10=fp1,fp4,fp6,fcr
   71| 0005A0 fnmsub   FD6B5FBC   2     FNMS      fp11=fp11,fp11,fp30,fcr
   67| 0005A4 lfdu     CD8C0008   1     LFDU      fp12,gr12=x1b(gr12,8)
   73| 0005A8 fmsub    FDA30A38   1     FMS       fp13=fp1,fp3,fp8,fcr
   75| 0005AC qvfre    13C03830   1     QVFRE     fp30=fp7
   72| 0005B0 fmsub    FC420A78   1     FMS       fp2=fp1,fp2,fp9,fcr
   66| 0005B4 fadd     FCA5002A   2     AFL       fp5=fp5,fp0,fcr
   74| 0005B8 fnmsub   FCC632BC   2     FNMS      fp6=fp6,fp6,fp10,fcr
   71| 0005BC stfdu    DD680008   2     STFDU     gr8,g2bi(gr8,8)=fp11
   73| 0005C0 fnmsub   FD08437C   1     FNMS      fp8=fp8,fp8,fp13,fcr
   75| 0005C4 fmsub    FD470FB8   2     FMS       fp10=fp1,fp7,fp30,fcr
   72| 0005C8 fnmsub   FC4948BC   2     FNMS      fp2=fp9,fp9,fp2,fcr
   68| 0005CC lfdu     CD3C0008   1     LFDU      fp9,gr28=dx1a(gr28,8)
   74| 0005D0 fmsub    FD6409B8   1     FMS       fp11=fp1,fp4,fp6,fcr
   66| 0005D4 qvfre    11A02830   1     QVFRE     fp13=fp5
   73| 0005D8 fmsub    FC630A38   1     FMS       fp3=fp1,fp3,fp8,fcr
   67| 0005DC fadd     FD8C002A   2     AFL       fp12=fp12,fp0,fcr
   75| 0005E0 fnmsub   FD5EF2BC   2     FNMS      fp10=fp30,fp30,fp10,fcr
   72| 0005E4 stfdu    DC540008   2     STFDU     gr20,g31ai(gr20,8)=fp2
   74| 0005E8 fnmsub   FC4632FC   1     FNMS      fp2=fp6,fp6,fp11,fcr
   66| 0005EC fmsub    FCC50B78   2     FMS       fp6=fp1,fp5,fp13,fcr
   73| 0005F0 fnmsub   FC6840FC   2     FNMS      fp3=fp8,fp8,fp3,fcr
   69| 0005F4 lfdu     CD0A0008   1     LFDU      fp8,gr10=dx1b(gr10,8)
   75| 0005F8 fmsub    FD670AB8   1     FMS       fp11=fp1,fp7,fp10,fcr
   67| 0005FC qvfre    13C06030   1     QVFRE     fp30=fp12
   74| 000600 fmsub    FC8408B8   1     FMS       fp4=fp1,fp4,fp2,fcr
   68| 000604 fadd     FFA9002A   2     AFL       fp29=fp9,fp0,fcr
   66| 000608 fnmsub   FCCD69BC   2     FNMS      fp6=fp13,fp13,fp6,fcr
   73| 00060C stfdu    DC690008   2     STFDU     gr9,g31bi(gr9,8)=fp3
   75| 000610 fnmsub   FC6A52FC   1     FNMS      fp3=fp10,fp10,fp11,fcr
   67| 000614 fmsub    FD2C0FB8   2     FMS       fp9=fp1,fp12,fp30,fcr
   74| 000618 fnmsub   FC42113C   2     FNMS      fp2=fp2,fp2,fp4,fcr
   70| 00061C lfdu     CC9A0008   1     LFDU      fp4,gr26=g2a(gr26,8)
   66| 000620 fmsub    FD4509B8   1     FMS       fp10=fp1,fp5,fp6,fcr
   68| 000624 qvfre    1160E830   1     QVFRE     fp11=fp29
   75| 000628 fmsub    FDA708F8   1     FMS       fp13=fp1,fp7,fp3,fcr
   69| 00062C fadd     FCE8002A   2     AFL       fp7=fp8,fp0,fcr
   67| 000630 fnmsub   FD1EF27C   2     FNMS      fp8=fp30,fp30,fp9,fcr
   74| 000634 stfdu    DC570008   2     STFDU     gr23,dvl1ai(gr23,8)=fp2
   66| 000638 fnmsub   FC4632BC   1     FNMS      fp2=fp6,fp6,fp10,fcr
   68| 00063C fmsub    FCDD0AF8   2     FMS       fp6=fp1,fp29,fp11,fcr
   75| 000640 fnmsub   FD231B7C   2     FNMS      fp9=fp3,fp3,fp13,fcr
   71| 000644 lfdu     CD460008   1     LFDU      fp10,gr6=g2b(gr6,8)
   67| 000648 fmsub    FDAC0A38   1     FMS       fp13=fp1,fp12,fp8,fcr
   69| 00064C qvfre    10603830   1     QVFRE     fp3=fp7
   66| 000650 fmsub    FCA508B8   1     FMS       fp5=fp1,fp5,fp2,fcr
   70| 000654 fadd     FC84002A   2     AFL       fp4=fp4,fp0,fcr
   68| 000658 fnmsub   FCCB59BC   2     FNMS      fp6=fp11,fp11,fp6,fcr
   75| 00065C stfdu    DD250008   2     STFDU     gr5,dvl1bi(gr5,8)=fp9
   67| 000660 fnmsub   FD08437C   1     FNMS      fp8=fp8,fp8,fp13,fcr
   69| 000664 fmsub    FD6708F8   2     FMS       fp11=fp1,fp7,fp3,fcr
   66| 000668 fnmsub   FC42117C   2     FNMS      fp2=fp2,fp2,fp5,fcr
   72| 00066C lfdu     CDB80008   1     LFDU      fp13,gr24=g31a(gr24,8)
   68| 000670 fmsub    FFDD09B8   1     FMS       fp30=fp1,fp29,fp6,fcr
   70| 000674 qvfre    10A02030   1     QVFRE     fp5=fp4
   67| 000678 fmsub    FD8C0A38   1     FMS       fp12=fp1,fp12,fp8,fcr
   71| 00067C fadd     FD2A002A   2     AFL       fp9=fp10,fp0,fcr
   69| 000680 fnmsub   FC631AFC   2     FNMS      fp3=fp3,fp3,fp11,fcr
   66| 000684 stfdu    DC4B0008   2     STFDU     gr11,x1ai(gr11,8)=fp2
   68| 000688 fnmsub   FCC637BC   1     FNMS      fp6=fp6,fp6,fp30,fcr
   70| 00068C fmsub    FD440978   2     FMS       fp10=fp1,fp4,fp5,fcr
   67| 000690 fnmsub   FD68433C   2     FNMS      fp11=fp8,fp8,fp12,fcr
   73| 000694 lfdu     CD870008   1     LFDU      fp12,gr7=g31b(gr7,8)
   69| 000698 fmsub    FFC708F8   1     FMS       fp30=fp1,fp7,fp3,fcr
   71| 00069C qvfre    11004830   1     QVFRE     fp8=fp9
   68| 0006A0 fmsub    FFBD09B8   1     FMS       fp29=fp1,fp29,fp6,fcr
   72| 0006A4 fadd     FC4D002A   2     AFL       fp2=fp13,fp0,fcr
   70| 0006A8 fnmsub   FCA52ABC   2     FNMS      fp5=fp5,fp5,fp10,fcr
   67| 0006AC stfdu    DD7D0008   2     STFDU     gr29,x1bi(gr29,8)=fp11
   69| 0006B0 fnmsub   FD431FBC   1     FNMS      fp10=fp3,fp3,fp30,fcr
   71| 0006B4 fmsub    FD690A38   2     FMS       fp11=fp1,fp9,fp8,fcr
   68| 0006B8 fnmsub   FFC6377C   2     FNMS      fp30=fp6,fp6,fp29,fcr
   74| 0006BC lfdu     CDB60008   1     LFDU      fp13,gr22=dvl1a(gr22,8)
   70| 0006C0 fmsub    FFA40978   1     FMS       fp29=fp1,fp4,fp5,fcr
   72| 0006C4 qvfre    10C01030   1     QVFRE     fp6=fp2
   69| 0006C8 fmsub    FCE70AB8   1     FMS       fp7=fp1,fp7,fp10,fcr
   73| 0006CC fadd     FC6C002A   2     AFL       fp3=fp12,fp0,fcr
   71| 0006D0 fnmsub   FD6842FC   2     FNMS      fp11=fp8,fp8,fp11,fcr
   68| 0006D4 stfdu    DFDB0008   2     STFDU     gr27,dx1ai(gr27,8)=fp30
   70| 0006D8 fnmsub   FCA52F7C   1     FNMS      fp5=fp5,fp5,fp29,fcr
   72| 0006DC fmsub    FD8209B8   2     FMS       fp12=fp1,fp2,fp6,fcr
   69| 0006E0 fnmsub   FCEA51FC   2     FNMS      fp7=fp10,fp10,fp7,fcr
   75| 0006E4 lfdu     CD030008   2     LFDU      fp8,gr3=dvl1b(gr3,8)
   71| 0006E8 fmsub    FFC90AF8   1     FMS       fp30=fp1,fp9,fp11,fcr
   73| 0006EC qvfre    11401830   1     QVFRE     fp10=fp3
   70| 0006F0 fmsub    FFA40978   1     FMS       fp29=fp1,fp4,fp5,fcr
   74| 0006F4 fadd     FC8D002A   2     AFL       fp4=fp13,fp0,fcr
   72| 0006F8 fnmsub   FD86333C   2     FNMS      fp12=fp6,fp6,fp12,fcr
   69| 0006FC stfdu    DCF90008   2     STFDU     gr25,dx1bi(gr25,8)=fp7
   71| 000700 fnmsub   FD6B5FBC   1     FNMS      fp11=fp11,fp11,fp30,fcr
   73| 000704 fmsub    FDA30AB8   2     FMS       fp13=fp1,fp3,fp10,fcr
   70| 000708 fnmsub   FF852F7C   2     FNMS      fp28=fp5,fp5,fp29,fcr
    0| 00070C bc       4200FE70   1     BCT       ctr=CL.254,taken=100%(100,0)
    0|                              CL.253:
   75| 000710 fadd     FC08002A   1     AFL       fp0=fp8,fp0,fcr
   70| 000714 stfdu    DF950008   2     STFDU     gr21,g2ai(gr21,8)=fp28
   72| 000718 fmsub    FCE20B38   1     FMS       fp7=fp1,fp2,fp12,fcr
   71| 00071C fmsub    FD090AF8   2     FMS       fp8=fp1,fp9,fp11,fcr
   74| 000720 qvfre    10A02030   1     QVFRE     fp5=fp4
   73| 000724 fnmsub   FCCA537C   1     FNMS      fp6=fp10,fp10,fp13,fcr
   75| 000728 qvfre    11200030   1     QVFRE     fp9=fp0
   72| 00072C fnmsub   FCEC61FC   1     FNMS      fp7=fp12,fp12,fp7,fcr
   71| 000730 fnmsub   FD0B5A3C   2     FNMS      fp8=fp11,fp11,fp8,fcr
   74| 000734 fmsub    FD440978   2     FMS       fp10=fp1,fp4,fp5,fcr
   73| 000738 fmsub    FDA309B8   2     FMS       fp13=fp1,fp3,fp6,fcr
   75| 00073C fmsub    FD600A78   2     FMS       fp11=fp1,fp0,fp9,fcr
   72| 000740 fmsub    FC4209F8   2     FMS       fp2=fp1,fp2,fp7,fcr
   71| 000744 stfdu    DD080008   2     STFDU     gr8,g2bi(gr8,8)=fp8
   74| 000748 fnmsub   FCA52ABC   1     FNMS      fp5=fp5,fp5,fp10,fcr
   75| 00074C fnmsub   FD094AFC   2     FNMS      fp8=fp9,fp9,fp11,fcr
   73| 000750 fnmsub   FCC6337C   2     FNMS      fp6=fp6,fp6,fp13,fcr
   72| 000754 fnmsub   FC4738BC   2     FNMS      fp2=fp7,fp7,fp2,fcr
   74| 000758 fmsub    FD240978   2     FMS       fp9=fp1,fp4,fp5,fcr
   75| 00075C fmsub    FCE00A38   2     FMS       fp7=fp1,fp0,fp8,fcr
   73| 000760 fmsub    FC6309B8   2     FMS       fp3=fp1,fp3,fp6,fcr
   72| 000764 stfdu    DC540008   2     STFDU     gr20,g31ai(gr20,8)=fp2
   74| 000768 fnmsub   FCA52A7C   1     FNMS      fp5=fp5,fp5,fp9,fcr
   75| 00076C fnmsub   FC4841FC   2     FNMS      fp2=fp8,fp8,fp7,fcr
   73| 000770 fnmsub   FC6630FC   2     FNMS      fp3=fp6,fp6,fp3,fcr
   74| 000774 fmsub    FC840978   2     FMS       fp4=fp1,fp4,fp5,fcr
   75| 000778 fmsub    FC0008B8   2     FMS       fp0=fp1,fp0,fp2,fcr
   73| 00077C stfdu    DC690008   2     STFDU     gr9,g31bi(gr9,8)=fp3
   74| 000780 fnmsub   FC25293C   1     FNMS      fp1=fp5,fp5,fp4,fcr
   75| 000784 fnmsub   FC02103C   2     FNMS      fp0=fp2,fp2,fp0,fcr
   74| 000788 stfdu    DC370008   2     STFDU     gr23,dvl1ai(gr23,8)=fp1
   75| 00078C stfdu    DC050008   1     STFDU     gr5,dvl1bi(gr5,8)=fp0
   76|                              CL.39:
   80| 000790 lwz      801F0018   1     L4Z       gr0=<s753:d24:l4>(gr31,24)
   80| 000794 cmpdi    2C200000   1     C8        cr0=gr0,0
   80| 000798 bc       41820024   1     BT        CL.13,cr0,0x4/eq,taken=60%(60,40)
   81| 00079C ld       E8A20000   1     L8        gr5=.&&N&&mpiyes(gr2,0)
   81| 0007A0 addi     38DF0014   1     AI        gr6=gr31,20
   81| 0007A4 addi     387F0018   1     AI        gr3=gr31,24
   81| 0007A8 addi     38851770   1     AI        gr4=gr5,6000
   81| 0007AC bl       48000001   1     CALL      mpi_waitall,4,nreq",gr3,req[]",gr4,stat[]",gr5,ierr",gr6,mpi_waitall",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   81| 0007B0 ori      60000000   1
   82| 0007B4 addi     38000000   1     LI        gr0=0
   82| 0007B8 stw      901F0018   1     ST4Z      <s753:d24:l4>(gr31,24)=gr0
   83|                              CL.13:
   84| 0007BC bl       48000001   1     CALL      newvg,0,newvg",fcr",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   84| 0007C0 ori      60000000   1
   86| 0007C4 bl       48000001   1     CALL      newx1,0,newx1",fcr",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   86| 0007C8 ori      60000000   1
   88| 0007CC ld       EBE20000   1     L8        gr31=.&&N&&grid(gr2,0)
   88| 0007D0 lwz      83BF0004   1     L4Z       gr29=<s744:d4:l4>(gr31,4)
   88| 0007D4 lwz      807F0000   1     L4Z       gr3=<s744:d0:l4>(gr31,0)
   88| 0007D8 addi     389D0002   1     AI        gr4=gr29,2
   88| 0007DC addi     3803FFFE   1     AI        gr0=gr3,-2
   88| 0007E0 extsw    7C9C07B4   1     EXTS4     gr28=gr4
   88| 0007E4 extsw    7C0607B4   1     EXTS4     gr6=gr0
   88| 0007E8 subf     7C86E050   1     S         gr4=gr28,gr6
   88| 0007EC addic.   34040001   1     AI_R      gr0,cr0=gr4,1,ca"
   88| 0007F0 bc       40810374   1     BF        CL.41,cr0,0x2/gt,taken=50%(0,0)
   89| 0007F4 ld       E81E0EE0   1     L8        gr0=<s10:d3808:l8>(gr30,3808)
   89| 0007F8 ld       E8BE0EF8   1     L8        gr5=<s10:d3832:l8>(gr30,3832)
    0| 0007FC extsw    7C6407B4   1     EXTS4     gr4=gr3
    0| 000800 subfic   21460001   1     SFI       gr10=1,gr6,ca"
   90| 000804 ld       E8DE1340   1     L8        gr6=<s10:d4928:l8>(gr30,4928)
   89| 000808 ld       E8FE1128   1     L8        gr7=<s10:d4392:l8>(gr30,4392)
   90| 00080C ld       E91E1588   1     L8        gr8=<s10:d5512:l8>(gr30,5512)
   90| 000810 rldicr   78841F24   1     SLL8      gr4=gr4,3
    0| 000814 addi     393D0005   1     AI        gr9=gr29,5
    0| 000818 add      7D4AE214   1     A         gr10=gr10,gr28
   89| 00081C ld       E97E1110   1     L8        gr11=<s10:d4368:l8>(gr30,4368)
   90| 000820 ld       E99E1570   1     L8        gr12=<s10:d5488:l8>(gr30,5488)
   90| 000824 ld       EBFE1358   1     L8        gr31=<s10:d4952:l8>(gr30,4952)
    0| 000828 ld       EB620000   1     L8        gr27=.+CONSTANT_AREA(gr2,0)
   90| 00082C addi     3884FFE8   1     AI        gr4=gr4,-24
   89| 000830 add      7C002A14   1     A         gr0=gr0,gr5
    0| 000834 subf     7C634850   1     S         gr3=gr9,gr3
    0| 000838 rldicl   7945F082   1     SRL8      gr5=gr10,2
   90| 00083C add      7D082214   1     A         gr8=gr8,gr4
   90| 000840 add      7CC62214   1     A         gr6=gr6,gr4
   89| 000844 add      7CE72214   1     A         gr7=gr7,gr4
   89| 000848 add      7C802214   1     A         gr4=gr0,gr4
    0| 00084C andi.    70600003   1     RN4_R     gr0,cr0=gr3,0,0x3
    0| 000850 cmpdi    2CA50000   1     C8        cr1=gr5,0
   90| 000854 add      7C686214   1     A         gr3=gr8,gr12
   90| 000858 add      7CC6FA14   1     A         gr6=gr6,gr31
   89| 00085C add      7CE75A14   1     A         gr7=gr7,gr11
    0| 000860 lfs      C01B0010   1     LFS       fp0=+CONSTANT_AREA(gr27,16)
    0| 000864 bc       418200B4   1     BT        CL.221,cr0,0x4/eq,taken=50%(0,0)
   89| 000868 lfdu     CC240008   1     LFDU      fp1,gr4=dx1an(gr4,8)
   90| 00086C lfdu     CC460008   1     LFDU      fp2,gr6=dx1bn(gr6,8)
    0| 000870 mtspr    7C0903A6   1     LCTR      ctr=gr0
   89| 000874 qvfre    10A00830   1     QVFRE     fp5=fp1
   90| 000878 qvfre    10601030   1     QVFRE     fp3=fp2
   89| 00087C fmsub    FCC10178   1     FMS       fp6=fp0,fp1,fp5,fcr
   90| 000880 fmsub    FC8200F8   2     FMS       fp4=fp0,fp2,fp3,fcr
   89| 000884 fnmsub   FCA529BC   2     FNMS      fp5=fp5,fp5,fp6,fcr
   89| 000888 fmsub    FCC10178   2     FMS       fp6=fp0,fp1,fp5,fcr
   89| 00088C fnmsub   FCC529BC   2     FNMS      fp6=fp5,fp5,fp6,fcr
    0| 000890 bc       42400060   1     BCF       ctr=CL.255,taken=0%(0,100)
    0| 000894 ori      60210000   1     XNOP      
    0| 000898 ori      60210000   1     XNOP      
    0|                              CL.256:
   89| 00089C lfdu     CCA40008   1     LFDU      fp5,gr4=dx1an(gr4,8)
   90| 0008A0 fnmsub   FC63193C   1     FNMS      fp3=fp3,fp3,fp4,fcr
   89| 0008A4 fmsub    FCE101B8   2     FMS       fp7=fp0,fp1,fp6,fcr
   89| 0008A8 qvfre    10802830   1     QVFRE     fp4=fp5
   90| 0008AC fmsub    FC2200F8   1     FMS       fp1=fp0,fp2,fp3,fcr
   89| 0008B0 fnmsub   FCC631FC   2     FNMS      fp6=fp6,fp6,fp7,fcr
    0| 0008B4 fmr      FCE01090   2     LRFL      fp7=fp2
   90| 0008B8 lfdu     CC460008   1     LFDU      fp2,gr6=dx1bn(gr6,8)
   89| 0008BC fmsub    FD050138   1     FMS       fp8=fp0,fp5,fp4,fcr
   90| 0008C0 fnmsub   FC23187C   2     FNMS      fp1=fp3,fp3,fp1,fcr
   89| 0008C4 stfdu    DCC70008   2     STFDU     gr7,dx1ani(gr7,8)=fp6
   89| 0008C8 fnmsub   FCC4223C   1     FNMS      fp6=fp4,fp4,fp8,fcr
   90| 0008CC fmsub    FC870078   2     FMS       fp4=fp0,fp7,fp1,fcr
   90| 0008D0 qvfre    10601030   1     QVFRE     fp3=fp2
   89| 0008D4 fmsub    FCE501B8   1     FMS       fp7=fp0,fp5,fp6,fcr
   90| 0008D8 fnmsub   FD01093C   2     FNMS      fp8=fp1,fp1,fp4,fcr
    0| 0008DC fmr      FC202890   2     LRFL      fp1=fp5
   90| 0008E0 fmsub    FC8200F8   2     FMS       fp4=fp0,fp2,fp3,fcr
   89| 0008E4 fnmsub   FCC631FC   2     FNMS      fp6=fp6,fp6,fp7,fcr
   90| 0008E8 stfdu    DD030008   2     STFDU     gr3,dx1bni(gr3,8)=fp8
    0| 0008EC bc       4200FFB0   1     BCT       ctr=CL.256,taken=100%(100,0)
    0|                              CL.255:
   90| 0008F0 fnmsub   FC63193C   1     FNMS      fp3=fp3,fp3,fp4,fcr
   89| 0008F4 fmsub    FC2101B8   2     FMS       fp1=fp0,fp1,fp6,fcr
   90| 0008F8 fmsub    FC8200F8   2     FMS       fp4=fp0,fp2,fp3,fcr
   89| 0008FC fnmsub   FC26307C   2     FNMS      fp1=fp6,fp6,fp1,fcr
   90| 000900 fnmsub   FC63193C   2     FNMS      fp3=fp3,fp3,fp4,fcr
   89| 000904 stfdu    DC270008   2     STFDU     gr7,dx1ani(gr7,8)=fp1
   90| 000908 fmsub    FC2200F8   1     FMS       fp1=fp0,fp2,fp3,fcr
   90| 00090C fnmsub   FC23187C   2     FNMS      fp1=fp3,fp3,fp1,fcr
   90| 000910 stfdu    DC230008   2     STFDU     gr3,dx1bni(gr3,8)=fp1
    0| 000914 bc       41860250   1     BT        CL.41,cr1,0x4/eq,taken=20%(20,80)
    0|                              CL.221:
   89| 000918 lfd      C8240008   1     LFL       fp1=dx1an(gr4,8)
   90| 00091C lfd      C8460008   1     LFL       fp2=dx1bn(gr6,8)
   90| 000920 lfd      C8860010   1     LFL       fp4=dx1bn(gr6,16)
   89| 000924 lfd      C8A40018   1     LFL       fp5=dx1an(gr4,24)
   89| 000928 lfd      C8640010   1     LFL       fp3=dx1an(gr4,16)
   90| 00092C lfd      C8C60018   1     LFL       fp6=dx1bn(gr6,24)
   89| 000930 lfdu     CCE40020   1     LFDU      fp7,gr4=dx1an(gr4,32)
   89| 000934 qvfre    11400830   1     QVFRE     fp10=fp1
    0| 000938 mtspr    7CA903A6   1     LCTR      ctr=gr5
   90| 00093C qvfre    11601030   1     QVFRE     fp11=fp2
   90| 000940 lfdu     CD060020   1     LFDU      fp8,gr6=dx1bn(gr6,32)
   90| 000944 qvfre    13C02030   1     QVFRE     fp30=fp4
   89| 000948 qvfre    13802830   1     QVFRE     fp28=fp5
   89| 00094C fmsub    FF6102B8   1     FMS       fp27=fp0,fp1,fp10,fcr
   89| 000950 qvfre    11A01830   1     QVFRE     fp13=fp3
   90| 000954 fmsub    FD8202F8   1     FMS       fp12=fp0,fp2,fp11,fcr
   90| 000958 qvfre    11203030   1     QVFRE     fp9=fp6
   90| 00095C fmsub    FFA407B8   1     FMS       fp29=fp0,fp4,fp30,fcr
   89| 000960 fnmsub   FD4A56FC   2     FNMS      fp10=fp10,fp10,fp27,fcr
   89| 000964 fmsub    FF650738   2     FMS       fp27=fp0,fp5,fp28,fcr
   90| 000968 fnmsub   FD6B5B3C   2     FNMS      fp11=fp11,fp11,fp12,fcr
   89| 00096C fmsub    FF430378   2     FMS       fp26=fp0,fp3,fp13,fcr
   90| 000970 fnmsub   FFDEF77C   2     FNMS      fp30=fp30,fp30,fp29,fcr
   89| 000974 qvfre    11803830   1     QVFRE     fp12=fp7
   89| 000978 fmsub    FFA102B8   1     FMS       fp29=fp0,fp1,fp10,fcr
   89| 00097C fnmsub   FF9CE6FC   2     FNMS      fp28=fp28,fp28,fp27,fcr
   90| 000980 fmsub    FF6202F8   2     FMS       fp27=fp0,fp2,fp11,fcr
   89| 000984 fnmsub   FDAD6EBC   2     FNMS      fp13=fp13,fp13,fp26,fcr
   90| 000988 fmsub    FF0407B8   2     FMS       fp24=fp0,fp4,fp30,fcr
   90| 00098C fmsub    FF460278   2     FMS       fp26=fp0,fp6,fp9,fcr
   89| 000990 fnmsub   FD4A577C   2     FNMS      fp10=fp10,fp10,fp29,fcr
   89| 000994 fmsub    FFA50738   2     FMS       fp29=fp0,fp5,fp28,fcr
   90| 000998 fnmsub   FD6B5EFC   2     FNMS      fp11=fp11,fp11,fp27,fcr
   89| 00099C fmsub    FF230378   2     FMS       fp25=fp0,fp3,fp13,fcr
   90| 0009A0 fnmsub   FFDEF63C   2     FNMS      fp30=fp30,fp30,fp24,fcr
   89| 0009A4 fmsub    FC2102B8   2     FMS       fp1=fp0,fp1,fp10,fcr
   90| 0009A8 fmsub    FC4202F8   2     FMS       fp2=fp0,fp2,fp11,fcr
   89| 0009AC fnmsub   FDAD6E7C   2     FNMS      fp13=fp13,fp13,fp25,fcr
   89| 0009B0 fnmsub   FC2A507C   2     FNMS      fp1=fp10,fp10,fp1,fcr
   90| 0009B4 fnmsub   FC4B58BC   2     FNMS      fp2=fp11,fp11,fp2,fcr
   89| 0009B8 fmsub    FC630378   2     FMS       fp3=fp0,fp3,fp13,fcr
   89| 0009BC stfd     D8270008   1     STFL      dx1ani(gr7,8)=fp1
   89| 0009C0 fnmsub   FD4D68FC   1     FNMS      fp10=fp13,fp13,fp3,fcr
   90| 0009C4 stfd     D8430008   1     STFL      dx1bni(gr3,8)=fp2
    0| 0009C8 bc       42400128   1     BCF       ctr=CL.257,taken=0%(0,100)
    0|                              CL.258:
   89| 0009CC lfd      C8240008   1     LFL       fp1=dx1an(gr4,8)
   90| 0009D0 fnmsub   FC494EBC   1     FNMS      fp2=fp9,fp9,fp26,fcr
   90| 0009D4 fmsub    FD2407B8   2     FMS       fp9=fp0,fp4,fp30,fcr
   90| 0009D8 qvfre    10804030   1     QVFRE     fp4=fp8
   89| 0009DC fmsub    FC670338   1     FMS       fp3=fp0,fp7,fp12,fcr
   89| 0009E0 fnmsub   FD7CE77C   2     FNMS      fp11=fp28,fp28,fp29,fcr
   89| 0009E4 stfd     D9470010   1     STFL      dx1ani(gr7,16)=fp10
   90| 0009E8 fmsub    FFA600B8   1     FMS       fp29=fp0,fp6,fp2,fcr
   90| 0009EC fnmsub   FFDEF27C   2     FNMS      fp30=fp30,fp30,fp9,fcr
   90| 0009F0 lfd      C9260008   1     LFL       fp9=dx1bn(gr6,8)
   89| 0009F4 fnmsub   FD4C60FC   1     FNMS      fp10=fp12,fp12,fp3,fcr
   89| 0009F8 fmsub    FF8502F8   2     FMS       fp28=fp0,fp5,fp11,fcr
   89| 0009FC qvfre    10600830   1     QVFRE     fp3=fp1
   90| 000A00 fmsub    FDA80138   1     FMS       fp13=fp0,fp8,fp4,fcr
   90| 000A04 fnmsub   FD82177C   2     FNMS      fp12=fp2,fp2,fp29,fcr
   90| 000A08 stfd     DBC30010   1     STFL      dx1bni(gr3,16)=fp30
   89| 000A0C fmsub    FCA702B8   1     FMS       fp5=fp0,fp7,fp10,fcr
   89| 000A10 fnmsub   FFCB5F3C   2     FNMS      fp30=fp11,fp11,fp28,fcr
   89| 000A14 lfd      C9640010   1     LFL       fp11=dx1an(gr4,16)
   90| 000A18 fnmsub   FDA4237C   1     FNMS      fp13=fp4,fp4,fp13,fcr
   90| 000A1C fmsub    FC860338   2     FMS       fp4=fp0,fp6,fp12,fcr
   90| 000A20 qvfre    10404830   1     QVFRE     fp2=fp9
   89| 000A24 fmsub    FFA100F8   1     FMS       fp29=fp0,fp1,fp3,fcr
   89| 000A28 fnmsub   FCAA517C   2     FNMS      fp5=fp10,fp10,fp5,fcr
   89| 000A2C stfd     DBC70018   1     STFL      dx1ani(gr7,24)=fp30
   90| 000A30 fmsub    FCC80378   1     FMS       fp6=fp0,fp8,fp13,fcr
   90| 000A34 fnmsub   FFCC613C   2     FNMS      fp30=fp12,fp12,fp4,fcr
   90| 000A38 lfd      C8860010   1     LFL       fp4=dx1bn(gr6,16)
   89| 000A3C fnmsub   FD431F7C   1     FNMS      fp10=fp3,fp3,fp29,fcr
   89| 000A40 fmsub    FFA70178   2     FMS       fp29=fp0,fp7,fp5,fcr
   89| 000A44 qvfre    11805830   1     QVFRE     fp12=fp11
   90| 000A48 fmsub    FC6900B8   1     FMS       fp3=fp0,fp9,fp2,fcr
   90| 000A4C fnmsub   FCCD69BC   2     FNMS      fp6=fp13,fp13,fp6,fcr
   90| 000A50 stfd     DBC30018   1     STFL      dx1bni(gr3,24)=fp30
   89| 000A54 fmsub    FCE102B8   1     FMS       fp7=fp0,fp1,fp10,fcr
   89| 000A58 fnmsub   FDA52F7C   2     FNMS      fp13=fp5,fp5,fp29,fcr
   89| 000A5C lfd      C8A40018   1     LFL       fp5=dx1an(gr4,24)
   90| 000A60 fnmsub   FC4210FC   1     FNMS      fp2=fp2,fp2,fp3,fcr
   90| 000A64 fmsub    FFA801B8   2     FMS       fp29=fp0,fp8,fp6,fcr
   90| 000A68 qvfre    10602030   1     QVFRE     fp3=fp4
   89| 000A6C fmsub    FD0B0338   1     FMS       fp8=fp0,fp11,fp12,fcr
   89| 000A70 fnmsub   FCEA51FC   2     FNMS      fp7=fp10,fp10,fp7,fcr
   89| 000A74 stfdu    DDA70020   2     STFDU     gr7,dx1ani(gr7,32)=fp13
   90| 000A78 fmsub    FFC900B8   1     FMS       fp30=fp0,fp9,fp2,fcr
   90| 000A7C fnmsub   FD46377C   2     FNMS      fp10=fp6,fp6,fp29,fcr
   90| 000A80 lfd      C8C60018   1     LFL       fp6=dx1bn(gr6,24)
   89| 000A84 fnmsub   FD0C623C   1     FNMS      fp8=fp12,fp12,fp8,fcr
   89| 000A88 fmsub    FFA101F8   2     FMS       fp29=fp0,fp1,fp7,fcr
   89| 000A8C qvfre    11802830   1     QVFRE     fp12=fp5
   90| 000A90 fmsub    FDA400F8   1     FMS       fp13=fp0,fp4,fp3,fcr
   90| 000A94 fnmsub   FC4217BC   2     FNMS      fp2=fp2,fp2,fp30,fcr
   90| 000A98 stfdu    DD430020   2     STFDU     gr3,dx1bni(gr3,32)=fp10
   89| 000A9C fmsub    FC2B0238   1     FMS       fp1=fp0,fp11,fp8,fcr
   89| 000AA0 fnmsub   FD473F7C   2     FNMS      fp10=fp7,fp7,fp29,fcr
   89| 000AA4 lfdu     CCE40020   1     LFDU      fp7,gr4=dx1an(gr4,32)
   90| 000AA8 fnmsub   FC631B7C   1     FNMS      fp3=fp3,fp3,fp13,fcr
   90| 000AAC fmsub    FFC900B8   2     FMS       fp30=fp0,fp9,fp2,fcr
   90| 000AB0 qvfre    11203030   1     QVFRE     fp9=fp6
   89| 000AB4 fmsub    FDA50338   1     FMS       fp13=fp0,fp5,fp12,fcr
   89| 000AB8 fnmsub   FC28407C   2     FNMS      fp1=fp8,fp8,fp1,fcr
   89| 000ABC stfd     D9470008   1     STFL      dx1ani(gr7,8)=fp10
   90| 000AC0 fmsub    FD4400F8   1     FMS       fp10=fp0,fp4,fp3,fcr
   90| 000AC4 fnmsub   FC4217BC   2     FNMS      fp2=fp2,fp2,fp30,fcr
   90| 000AC8 lfdu     CD060020   1     LFDU      fp8,gr6=dx1bn(gr6,32)
   89| 000ACC fnmsub   FF8C637C   1     FNMS      fp28=fp12,fp12,fp13,fcr
   89| 000AD0 fmsub    FD6B0078   2     FMS       fp11=fp0,fp11,fp1,fcr
   89| 000AD4 qvfre    11803830   1     QVFRE     fp12=fp7
   90| 000AD8 fmsub    FF460278   1     FMS       fp26=fp0,fp6,fp9,fcr
   90| 000ADC fnmsub   FFC31ABC   2     FNMS      fp30=fp3,fp3,fp10,fcr
   90| 000AE0 stfd     D8430008   1     STFL      dx1bni(gr3,8)=fp2
   89| 000AE4 fmsub    FFA50738   1     FMS       fp29=fp0,fp5,fp28,fcr
   89| 000AE8 fnmsub   FD410AFC   2     FNMS      fp10=fp1,fp1,fp11,fcr
    0| 000AEC bc       4200FEE0   1     BCT       ctr=CL.258,taken=100%(100,0)
    0|                              CL.257:
   90| 000AF0 qvfre    10204030   1     QVFRE     fp1=fp8
   89| 000AF4 stfd     D9470010   1     STFL      dx1ani(gr7,16)=fp10
   90| 000AF8 fmsub    FC8407B8   1     FMS       fp4=fp0,fp4,fp30,fcr
   89| 000AFC fmsub    FC470338   2     FMS       fp2=fp0,fp7,fp12,fcr
   90| 000B00 fnmsub   FC694EBC   2     FNMS      fp3=fp9,fp9,fp26,fcr
   89| 000B04 fnmsub   FD3CE77C   2     FNMS      fp9=fp28,fp28,fp29,fcr
   90| 000B08 fmsub    FD480078   2     FMS       fp10=fp0,fp8,fp1,fcr
   90| 000B0C fnmsub   FC9EF13C   2     FNMS      fp4=fp30,fp30,fp4,fcr
   89| 000B10 fnmsub   FC4C60BC   2     FNMS      fp2=fp12,fp12,fp2,fcr
   90| 000B14 fmsub    FD6600F8   2     FMS       fp11=fp0,fp6,fp3,fcr
   89| 000B18 fmsub    FCA50278   2     FMS       fp5=fp0,fp5,fp9,fcr
   90| 000B1C fnmsub   FC210ABC   2     FNMS      fp1=fp1,fp1,fp10,fcr
   90| 000B20 stfd     D8830010   1     STFL      dx1bni(gr3,16)=fp4
   89| 000B24 fmsub    FD4700B8   1     FMS       fp10=fp0,fp7,fp2,fcr
   90| 000B28 fnmsub   FC631AFC   2     FNMS      fp3=fp3,fp3,fp11,fcr
   90| 000B2C fmsub    FC880078   2     FMS       fp4=fp0,fp8,fp1,fcr
   89| 000B30 fnmsub   FCA9497C   2     FNMS      fp5=fp9,fp9,fp5,fcr
   89| 000B34 fnmsub   FC4212BC   2     FNMS      fp2=fp2,fp2,fp10,fcr
   90| 000B38 fmsub    FCC600F8   2     FMS       fp6=fp0,fp6,fp3,fcr
   90| 000B3C fnmsub   FC21093C   2     FNMS      fp1=fp1,fp1,fp4,fcr
   89| 000B40 stfd     D8A70018   1     STFL      dx1ani(gr7,24)=fp5
   89| 000B44 fmsub    FC8700B8   1     FMS       fp4=fp0,fp7,fp2,fcr
   90| 000B48 fnmsub   FC6319BC   2     FNMS      fp3=fp3,fp3,fp6,fcr
   90| 000B4C fmsub    FC080078   2     FMS       fp0=fp0,fp8,fp1,fcr
   89| 000B50 fnmsub   FC42113C   2     FNMS      fp2=fp2,fp2,fp4,fcr
   90| 000B54 stfd     D8630018   1     STFL      dx1bni(gr3,24)=fp3
   90| 000B58 fnmsub   FC01083C   1     FNMS      fp0=fp1,fp1,fp0,fcr
   89| 000B5C stfdu    DC470020   2     STFDU     gr7,dx1ani(gr7,32)=fp2
   90| 000B60 stfdu    DC030020   1     STFDU     gr3,dx1bni(gr3,32)=fp0
   91|                              CL.41:
   93| 000B64 ld       E8620000   1     L8        gr3=.&&N&&param(gr2,0)
   93| 000B68 lwa      EBE3000A   1     L4A       gr31=<s775:d8:l4>(gr3,8)
   93| 000B6C sradi    7FE01674   1     SRA8CA    gr0,ca=gr31,2
   93| 000B70 cmpwi    2E1F0000   1     C4        cr4=gr31,0
   93| 000B74 addze    7C000194   1     ADDE      gr0,ca=gr0,0,ca
   93| 000B78 rldicr   780F1764   1     SLL8      gr15=gr0,2
   93| 000B7C subf     7F6FF851   1     S_R       gr27,cr0=gr31,gr15
   93| 000B80 crand    4C310A02   1     CR_N      cr0=cr[40],0x2/gt,0x2/gt,0x2/gt,cr0
   93| 000B84 bc       408100CC   1     BF        CL.61,cr0,0x2/gt,taken=50%(0,0)
   94| 000B88 lwa      EB430006   1     L4A       gr26=<s775:d4:l4>(gr3,4)
   95| 000B8C ld       E8820000   1     L8        gr4=.&&N&bndry(gr2,0)
   95| 000B90 ld       E87E06C8   1     L8        gr3=<s10:d1736:l8>(gr30,1736)
   95| 000B94 ld       E8BE06E0   1     L8        gr5=<s10:d1760:l8>(gr30,1760)
   93| 000B98 addi     3B200000   1     LI        gr25=0
   95| 000B9C ld       E8DE0700   1     L8        gr6=<s10:d1792:l8>(gr30,1792)
    0| 000BA0 cmpwi    2C9A0000   1     C4        cr1=gr26,0
   95| 000BA4 ld       E8E41388   1     L8        gr7=<s714:d5000:l8>(gr4,5000)
   95| 000BA8 ld       E91E0718   1     L8        gr8=<s10:d1816:l8>(gr30,1816)
   95| 000BAC ld       E92413A0   1     L8        gr9=<s714:d5024:l8>(gr4,5024)
   95| 000BB0 ld       E80413B8   1     L8        gr0=<s714:d5048:l8>(gr4,5048)
   95| 000BB4 ld       EB0413D0   1     L8        gr24=<s714:d5072:l8>(gr4,5072)
   95| 000BB8 ld       EAE413E8   1     L8        gr23=<s714:d5096:l8>(gr4,5096)
    0| 000BBC bc       40850094   1     BF        CL.61,cr1,0x2/gt,taken=40%(40,60)
    0| 000BC0 extsw    7FA407B4   1     EXTS4     gr4=gr29
    0| 000BC4 ld       E9420000   1     L8        gr10=.+CONSTANT_AREA(gr2,0)
   95| 000BC8 add      7C632A14   1     A         gr3=gr3,gr5
   95| 000BCC rldicr   78851F24   1     SLL8      gr5=gr4,3
    0| 000BD0 rldicr   7B841F24   1     SLL8      gr4=gr28,3
   95| 000BD4 add      7CA32A14   1     A         gr5=gr3,gr5
    0| 000BD8 lfdx     7C2324AE   1     LFL       fp1=x1b(gr3,gr4,0)
    0| 000BDC lfs      C00A0014   1     LFS       fp0=+CONSTANT_AREA(gr10,20)
    0| 000BE0 lfd      C8450008   1     LFL       fp2=x1b(gr5,8)
    0| 000BE4 add      7C674A14   1     A         gr3=gr7,gr9
    0| 000BE8 rldicr   78040FA4   1     SLL8      gr4=gr0,1
    0| 000BEC add      7C63C214   1     A         gr3=gr3,gr24
   95| 000BF0 add      7EC64214   1     A         gr22=gr6,gr8
    0| 000BF4 add      7EA01A14   1     A         gr21=gr0,gr3
    0| 000BF8 fmul     FFA10032   1     MFL       fp29=fp1,fp0,fcr
    0| 000BFC add      7E832214   1     A         gr20=gr3,gr4
    0| 000C00 fmul     FFC20032   1     MFL       fp30=fp2,fp0,fcr
   93|                              CL.58:
    0| 000C04 addi     3B390001   1     AI        gr25=gr25,1
   96| 000C08 or       7E93A378   1     LR        gr19=gr20
   95| 000C0C or       7EB2AB78   1     LR        gr18=gr21
   94| 000C10 addi     3A200000   1     LI        gr17=0
   95| 000C14 or       7ED0B378   1     LR        gr16=gr22
   94|                              CL.59:
   95| 000C18 lfdu     CC300008   1     LFDU      fp1,gr16=x2b(gr16,8)
   95| 000C1C addi     3A310001   1     AI        gr17=gr17,1
   95| 000C20 bl       48000001   1     CALLN     fp1=__xl_sin,1,fp1,__xl_sin,#MX_TEMP1",__xl_sin",gr1,cr[01567]",gr0",gr3"-gr12",fp0",fp2"-fp13",mq",lr",xer",fsr",ca",ctr"
   95| 000C24 ori      60000000   1
   97| 000C28 cmpld    7CB1D040   1     CL8       cr1=gr17,gr26
   95| 000C2C fmul     FC1E0072   1     MFL       fp0=fp30,fp1,fcr
   96| 000C30 fmul     FC210772   2     MFL       fp1=fp1,fp29,fcr
   95| 000C34 stfdux   7C12BDEE   2     STFDU     gr18,v3oib(gr18,gr23,0)=fp0
   96| 000C38 stfdux   7C33BDEE   1     STFDU     gr19,v3oib(gr19,gr23,0)=fp1
   97| 000C3C bc       4184FFDC   1     BT        CL.59,cr1,0x8/llt,taken=80%(80,20)
   98| 000C40 cmpd     7CBBC800   1     C8        cr1=gr27,gr25
    0| 000C44 add      7E94C214   1     A         gr20=gr20,gr24
    0| 000C48 add      7EB5C214   1     A         gr21=gr21,gr24
   98| 000C4C bc       4185FFB8   1     BT        CL.58,cr1,0x2/gt,taken=80%(80,20)
   98|                              CL.61:
   93| 000C50 cmpd     7CBFD800   1     C8        cr1=gr31,gr27
   93| 000C54 crand    4C312A02   1     CR_N      cr0=cr[41],0x2/gt,0x2/gt,0x2/gt,cr0
   93| 000C58 bc       40810198   1     BF        CL.2,cr0,0x2/gt,taken=50%(0,0)
   95| 000C5C ld       E8620000   1     L8        gr3=.&&N&bndry(gr2,0)
   94| 000C60 ld       EB420000   1     L8        gr26=.&&N&&param(gr2,0)
   95| 000C64 ld       E89E06C8   1     L8        gr4=<s10:d1736:l8>(gr30,1736)
   95| 000C68 ld       E8BE06E0   1     L8        gr5=<s10:d1760:l8>(gr30,1760)
    0| 000C6C extsw    7FA707B4   1     EXTS4     gr7=gr29
   98| 000C70 addi     394FFFFF   1     AI        gr10=gr15,-1
   95| 000C74 ld       E80313D0   1     L8        gr0=<s714:d5072:l8>(gr3,5072)
   94| 000C78 lwa      EBFA0006   1     L4A       gr31=<s775:d4:l4>(gr26,4)
   95| 000C7C ld       E8C31388   1     L8        gr6=<s714:d5000:l8>(gr3,5000)
   95| 000C80 ld       E92313A0   1     L8        gr9=<s714:d5024:l8>(gr3,5024)
   95| 000C84 rldicr   78E81F24   1     SLL8      gr8=gr7,3
   95| 000C88 add      7C842A14   1     A         gr4=gr4,gr5
   98| 000C8C sradi    7D4C1674   1     SRA8CA    gr12,ca=gr10,2
    0| 000C90 cmpwi    2C1F0000   1     C4        cr0=gr31,0
   93| 000C94 addi     3BA00000   1     LI        gr29=0
   95| 000C98 ld       E8A313B8   1     L8        gr5=<s714:d5048:l8>(gr3,5048)
   93| 000C9C std      FBA101A8   1     ST8       #SPILL0(gr1,424)=gr29
    0| 000CA0 mulld    7CE0D9D2   1     M         gr7=gr0,gr27
   95| 000CA4 add      7D082214   1     A         gr8=gr8,gr4
    0| 000CA8 rldicr   7B8A1F24   1     SLL8      gr10=gr28,3
    0| 000CAC add      7D664A14   1     A         gr11=gr6,gr9
   95| 000CB0 ld       E8DE0700   1     L8        gr6=<s10:d1792:l8>(gr30,1792)
   95| 000CB4 ld       E93E0718   1     L8        gr9=<s10:d1816:l8>(gr30,1816)
   95| 000CB8 ld       EBC313E8   1     L8        gr30=<s714:d5096:l8>(gr3,5096)
   98| 000CBC addze    7C6C0194   1     ADDE      gr3,ca=gr12,0,ca
    0| 000CC0 bc       40810130   1     BF        CL.2,cr0,0x2/gt,taken=20%(20,80)
    0| 000CC4 ld       E9820000   1     L8        gr12=.+CONSTANT_AREA(gr2,0)
    0| 000CC8 lfdx     7C2454AE   1     LFL       fp1=x1b(gr4,gr10,0)
    0| 000CCC rldicr   781D1764   1     SLL8      gr29=gr0,2
    0| 000CD0 add      7C875A14   1     A         gr4=gr7,gr11
    0| 000CD4 rldicr   78AA0FA4   1     SLL8      gr10=gr5,1
    0| 000CD8 lfd      C8480008   1     LFL       fp2=x1b(gr8,8)
    0| 000CDC lfs      C00C0014   1     LFS       fp0=+CONSTANT_AREA(gr12,20)
    0| 000CE0 add      7CE42A14   1     A         gr7=gr4,gr5
    0| 000CE4 subf     7D00E850   1     S         gr8=gr29,gr0
    0| 000CE8 add      7C845214   1     A         gr4=gr4,gr10
    0| 000CEC rldicr   78050FA4   1     SLL8      gr5=gr0,1
   95| 000CF0 add      7D664A14   1     A         gr11=gr6,gr9
    0| 000CF4 add      7CC03A14   1     A         gr6=gr0,gr7
    0| 000CF8 fmul     FFC20032   1     MFL       fp30=fp2,fp0,fcr
   95| 000CFC std      F96101B0   1     ST8       #SPILL1(gr1,432)=gr11
    0| 000D00 fmul     FFA10032   1     MFL       fp29=fp1,fp0,fcr
    0| 000D04 std      F8C101B8   1     ST8       #SPILL2(gr1,440)=gr6
    0| 000D08 add      7D244214   1     A         gr9=gr4,gr8
    0| 000D0C add      7EE74214   1     A         gr23=gr7,gr8
    0| 000D10 std      F92101C0   1     ST8       #SPILL3(gr1,448)=gr9
    0| 000D14 std      FAE101C8   1     ST8       #SPILL4(gr1,456)=gr23
    0| 000D18 add      7F002214   1     A         gr24=gr0,gr4
    0| 000D1C addi     38030001   1     AI        gr0=gr3,1
    0| 000D20 add      7F87EA14   1     A         gr28=gr7,gr29
    0| 000D24 std      F80101D0   1     ST8       #SPILL5(gr1,464)=gr0
    0| 000D28 add      7F653A14   1     A         gr27=gr5,gr7
    0| 000D2C add      7F44EA14   1     A         gr26=gr4,gr29
    0| 000D30 add      7F242A14   1     A         gr25=gr4,gr5
   93|                              CL.44:
   96| 000D34 or       7F57D378   1     LR        gr23=gr26
   95| 000D38 ld       EAC101B8   1     L8        gr22=#SPILL2(gr1,440)
   96| 000D3C ld       EAA101C0   1     L8        gr21=#SPILL3(gr1,448)
   96| 000D40 or       7F14C378   1     LR        gr20=gr24
   96| 000D44 or       7F33CB78   1     LR        gr19=gr25
   95| 000D48 or       7F92E378   1     LR        gr18=gr28
   95| 000D4C or       7F71DB78   1     LR        gr17=gr27
   95| 000D50 ld       EA0101C8   1     L8        gr16=#SPILL4(gr1,456)
   95| 000D54 ld       E9E101B0   1     L8        gr15=#SPILL1(gr1,432)
   95| 000D58 addi     39C00001   1     LI        gr14=1
    0| 000D5C ori      60210000   1     XNOP      
   94|                              CL.46:
   95| 000D60 lfdu     CC2F0008   1     LFDU      fp1,gr15=x2b(gr15,8)
   95| 000D64 bl       48000001   1     CALLN     fp1=__xl_sin,1,fp1,__xl_sin,#MX_TEMP1",__xl_sin",gr1,cr[01567]",gr0",gr3"-gr12",fp0",fp2"-fp13",mq",lr",xer",fsr",ca",ctr"
   95| 000D68 ori      60000000   1
   97| 000D6C cmpld    7C2EF840   1     CL8       cr0=gr14,gr31
   95| 000D70 addi     39CE0001   1     AI        gr14=gr14,1
   95| 000D74 fmul     FC0107B2   1     MFL       fp0=fp1,fp30,fcr
   96| 000D78 fmul     FC210772   2     MFL       fp1=fp1,fp29,fcr
   95| 000D7C stfdux   7C16F5EE   2     STFDU     gr22,v3oib(gr22,gr30,0)=fp0
   96| 000D80 stfdux   7C34F5EE   1     STFDU     gr20,v3oib(gr20,gr30,0)=fp1
   95| 000D84 stfdux   7C11F5EE   1     STFDU     gr17,v3oib(gr17,gr30,0)=fp0
   96| 000D88 stfdux   7C33F5EE   1     STFDU     gr19,v3oib(gr19,gr30,0)=fp1
   95| 000D8C stfdux   7C10F5EE   1     STFDU     gr16,v3oib(gr16,gr30,0)=fp0
   96| 000D90 stfdux   7C35F5EE   1     STFDU     gr21,v3oib(gr21,gr30,0)=fp1
   95| 000D94 stfdux   7C12F5EE   1     STFDU     gr18,v3oib(gr18,gr30,0)=fp0
   96| 000D98 stfdux   7C37F5EE   1     STFDU     gr23,v3oib(gr23,gr30,0)=fp1
   97| 000D9C bc       4180FFC4   1     BT        CL.46,cr0,0x8/llt,taken=80%(80,20)
   98| 000DA0 ld       E86101A8   1     L8        gr3=#SPILL0(gr1,424)
    0| 000DA4 ld       E80101B8   1     L8        gr0=#SPILL2(gr1,440)
   98| 000DA8 ld       E88101D0   1     L8        gr4=#SPILL5(gr1,464)
    0| 000DAC ld       E8A101C0   1     L8        gr5=#SPILL3(gr1,448)
    0| 000DB0 ld       E8C101C8   1     L8        gr6=#SPILL4(gr1,456)
    0| 000DB4 add      7F9CEA14   1     A         gr28=gr28,gr29
   98| 000DB8 addi     38630001   1     AI        gr3=gr3,1
    0| 000DBC add      7C00EA14   1     A         gr0=gr0,gr29
   98| 000DC0 std      F86101A8   1     ST8       #SPILL0(gr1,424)=gr3
   98| 000DC4 cmpld    7C232040   1     CL8       cr0=gr3,gr4
    0| 000DC8 std      F80101B8   1     ST8       #SPILL2(gr1,440)=gr0
    0| 000DCC add      7CA5EA14   1     A         gr5=gr5,gr29
    0| 000DD0 add      7CC6EA14   1     A         gr6=gr6,gr29
    0| 000DD4 std      F8A101C0   1     ST8       #SPILL3(gr1,448)=gr5
    0| 000DD8 std      F8C101C8   1     ST8       #SPILL4(gr1,456)=gr6
    0| 000DDC add      7F7BEA14   1     A         gr27=gr27,gr29
    0| 000DE0 add      7F5AEA14   1     A         gr26=gr26,gr29
    0| 000DE4 add      7F39EA14   1     A         gr25=gr25,gr29
    0| 000DE8 add      7F18EA14   1     A         gr24=gr24,gr29
   98| 000DEC bc       4180FF48   1     BT        CL.44,cr0,0x8/llt,taken=80%(80,20)
   40|                              CL.2:
  103| 000DF0 ld       E8620000   1     L8        gr3=.&&N&&grid(gr2,0)
  103| 000DF4 lfd      C8030040   1     LFL       fp0=<s744:d64:l8>(gr3,64)
  103| 000DF8 fcmpu    FC1F0000   1     CFL       cr0=fp31,fp0
  103| 000DFC bc       41820314   1     BT        CL.26,cr0,0x80/feq,taken=40%(40,60)
  104| 000E00 ld       EBC20000   1     L8        gr30=.&&N&&param(gr2,0)
  104| 000E04 ld       EBE20000   1     L8        gr31=.&&N&grid(gr2,0)
  104| 000E08 addi     3BA00001   1     LI        gr29=1
  104| 000E0C addi     38E10104   1     AI        gr7=gr1,260
  104| 000E10 stw      93A10100   1     ST4Z      T_34(gr1,256)=gr29
  104| 000E14 stw      93A10104   1     ST4Z      T_35(gr1,260)=gr29
  104| 000E18 addi     38A10100   1     AI        gr5=gr1,256
  104| 000E1C ld       E89F1730   1     L8        gr4=<s10:d5936:l8>(gr31,5936)
  104| 000E20 ld       E8DF0038   1     L8        gr6=<s10:d56:l8>(gr31,56)
  104| 000E24 addi     387E0004   1     AI        gr3=gr30,4
  104| 000E28 bl       48000001   1     CALL      scopy,5,jn",gr3,x2an",gr4,T_34",gr5,x2a",gr6,T_35",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  104| 000E2C ori      60000000   1
  105| 000E30 stw      93A10108   1     ST4Z      T_36(gr1,264)=gr29
  105| 000E34 stw      93A1010C   1     ST4Z      T_37(gr1,268)=gr29
  105| 000E38 ld       E89F1B20   1     L8        gr4=<s10:d6944:l8>(gr31,6944)
  105| 000E3C ld       E8DF0700   1     L8        gr6=<s10:d1792:l8>(gr31,1792)
  105| 000E40 addi     38E1010C   1     AI        gr7=gr1,268
  105| 000E44 addi     38A10108   1     AI        gr5=gr1,264
  105| 000E48 addi     387E0004   1     AI        gr3=gr30,4
  105| 000E4C bl       48000001   1     CALL      scopy,5,jn",gr3,x2bn",gr4,T_36",gr5,x2b",gr6,T_37",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  105| 000E50 ori      60000000   1
  106| 000E54 stw      93A10110   1     ST4Z      T_38(gr1,272)=gr29
  106| 000E58 stw      93A10114   1     ST4Z      T_39(gr1,276)=gr29
  106| 000E5C ld       E89F17A0   1     L8        gr4=<s10:d6048:l8>(gr31,6048)
  106| 000E60 ld       E8DF0188   1     L8        gr6=<s10:d392:l8>(gr31,392)
  106| 000E64 addi     38E10114   1     AI        gr7=gr1,276
  106| 000E68 addi     38A10110   1     AI        gr5=gr1,272
  106| 000E6C addi     387E0004   1     AI        gr3=gr30,4
  106| 000E70 bl       48000001   1     CALL      scopy,5,jn",gr3,dx2an",gr4,T_38",gr5,dx2a",gr6,T_39",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  106| 000E74 ori      60000000   1
  107| 000E78 stw      93A10118   1     ST4Z      T_40(gr1,280)=gr29
  107| 000E7C stw      93A1011C   1     ST4Z      T_41(gr1,284)=gr29
  107| 000E80 ld       E89F1B90   1     L8        gr4=<s10:d7056:l8>(gr31,7056)
  107| 000E84 ld       E8DF0850   1     L8        gr6=<s10:d2128:l8>(gr31,2128)
  107| 000E88 addi     38E1011C   1     AI        gr7=gr1,284
  107| 000E8C addi     38A10118   1     AI        gr5=gr1,280
  107| 000E90 addi     387E0004   1     AI        gr3=gr30,4
  107| 000E94 bl       48000001   1     CALL      scopy,5,jn",gr3,dx2bn",gr4,T_40",gr5,dx2b",gr6,T_41",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  107| 000E98 ori      60000000   1
  108| 000E9C stw      93A10120   1     ST4Z      T_42(gr1,288)=gr29
  108| 000EA0 stw      93A10124   1     ST4Z      T_43(gr1,292)=gr29
  108| 000EA4 ld       E89F1880   1     L8        gr4=<s10:d6272:l8>(gr31,6272)
  108| 000EA8 ld       E8DF05E8   1     L8        gr6=<s10:d1512:l8>(gr31,1512)
  108| 000EAC addi     387E0004   1     AI        gr3=gr30,4
  108| 000EB0 addi     38E10124   1     AI        gr7=gr1,292
  108| 000EB4 addi     38A10120   1     AI        gr5=gr1,288
  108| 000EB8 bl       48000001   1     CALL      scopy,5,jn",gr3,g32an",gr4,T_42",gr5,g32a",gr6,T_43",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  108| 000EBC ori      60000000   1
  109| 000EC0 stw      93A10128   1     ST4Z      T_44(gr1,296)=gr29
  109| 000EC4 stw      93A1012C   1     ST4Z      T_45(gr1,300)=gr29
  109| 000EC8 ld       E89F1C70   1     L8        gr4=<s10:d7280:l8>(gr31,7280)
  109| 000ECC ld       E8DF0CB0   1     L8        gr6=<s10:d3248:l8>(gr31,3248)
  109| 000ED0 addi     387E0004   1     AI        gr3=gr30,4
  109| 000ED4 addi     38E1012C   1     AI        gr7=gr1,300
  109| 000ED8 addi     38A10128   1     AI        gr5=gr1,296
  109| 000EDC bl       48000001   1     CALL      scopy,5,jn",gr3,g32bn",gr4,T_44",gr5,g32b",gr6,T_45",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  109| 000EE0 ori      60000000   1
  110| 000EE4 stw      93A10130   1     ST4Z      T_46(gr1,304)=gr29
  110| 000EE8 stw      93A10134   1     ST4Z      T_47(gr1,308)=gr29
  110| 000EEC ld       E89F18F0   1     L8        gr4=<s10:d6384:l8>(gr31,6384)
  110| 000EF0 ld       E8DF0690   1     L8        gr6=<s10:d1680:l8>(gr31,1680)
  110| 000EF4 addi     387E0004   1     AI        gr3=gr30,4
  110| 000EF8 addi     38E10134   1     AI        gr7=gr1,308
  110| 000EFC addi     38A10130   1     AI        gr5=gr1,304
  110| 000F00 bl       48000001   1     CALL      scopy,5,jn",gr3,g4an",gr4,T_46",gr5,g4a",gr6,T_47",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  110| 000F04 ori      60000000   1
  111| 000F08 stw      93A10138   1     ST4Z      T_48(gr1,312)=gr29
  111| 000F0C stw      93A1013C   1     ST4Z      T_49(gr1,316)=gr29
  111| 000F10 ld       E89F1CE0   1     L8        gr4=<s10:d7392:l8>(gr31,7392)
  111| 000F14 ld       E8DF0D58   1     L8        gr6=<s10:d3416:l8>(gr31,3416)
  111| 000F18 addi     387E0004   1     AI        gr3=gr30,4
  111| 000F1C addi     38E1013C   1     AI        gr7=gr1,316
  111| 000F20 addi     38A10138   1     AI        gr5=gr1,312
  111| 000F24 bl       48000001   1     CALL      scopy,5,jn",gr3,g4bn",gr4,T_48",gr5,g4b",gr6,T_49",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  111| 000F28 ori      60000000   1
  112| 000F2C stw      93A10140   1     ST4Z      T_50(gr1,320)=gr29
  112| 000F30 stw      93A10144   1     ST4Z      T_51(gr1,324)=gr29
  112| 000F34 ld       E89F1810   1     L8        gr4=<s10:d6160:l8>(gr31,6160)
  112| 000F38 ld       E8DF0380   1     L8        gr6=<s10:d896:l8>(gr31,896)
  112| 000F3C addi     387E0004   1     AI        gr3=gr30,4
  112| 000F40 addi     38E10144   1     AI        gr7=gr1,324
  112| 000F44 addi     38A10140   1     AI        gr5=gr1,320
  112| 000F48 bl       48000001   1     CALL      scopy,5,jn",gr3,dvl2an",gr4,T_50",gr5,dvl2a",gr6,T_51",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  112| 000F4C ori      60000000   1
  113| 000F50 stw      93A10148   1     ST4Z      T_52(gr1,328)=gr29
  113| 000F54 stw      93A1014C   1     ST4Z      T_53(gr1,332)=gr29
  113| 000F58 ld       E89F1C00   1     L8        gr4=<s10:d7168:l8>(gr31,7168)
  113| 000F5C ld       E8DF0A48   1     L8        gr6=<s10:d2632:l8>(gr31,2632)
  113| 000F60 addi     387E0004   1     AI        gr3=gr30,4
  113| 000F64 addi     38E1014C   1     AI        gr7=gr1,332
  113| 000F68 addi     38A10148   1     AI        gr5=gr1,328
  113| 000F6C bl       48000001   1     CALL      scopy,5,jn",gr3,dvl2bn",gr4,T_52",gr5,dvl2b",gr6,T_53",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  113| 000F70 ori      60000000   1
  114| 000F74 stw      93A10150   1     ST4Z      T_54(gr1,336)=gr29
  114| 000F78 ld       E89F1A40   1     L8        gr4=<s10:d6720:l8>(gr31,6720)
  114| 000F7C ld       E8DF0428   1     L8        gr6=<s10:d1064:l8>(gr31,1064)
  114| 000F80 addi     387E0004   1     AI        gr3=gr30,4
  114| 000F84 stw      93A10154   1     ST4Z      T_55(gr1,340)=gr29
  114| 000F88 addi     38E10154   1     AI        gr7=gr1,340
  114| 000F8C addi     38A10150   1     AI        gr5=gr1,336
  114| 000F90 bl       48000001   1     CALL      scopy,5,jn",gr3,dvl2ani",gr4,T_54",gr5,dvl2ai",gr6,T_55",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  114| 000F94 ori      60000000   1
  115| 000F98 stw      93A10158   1     ST4Z      T_56(gr1,344)=gr29
  115| 000F9C stw      93A1015C   1     ST4Z      T_57(gr1,348)=gr29
  115| 000FA0 addi     387E0004   1     AI        gr3=gr30,4
  115| 000FA4 ld       E89F1E30   1     L8        gr4=<s10:d7728:l8>(gr31,7728)
  115| 000FA8 ld       E8DF0AF0   1     L8        gr6=<s10:d2800:l8>(gr31,2800)
  115| 000FAC addi     38E1015C   1     AI        gr7=gr1,348
  115| 000FB0 addi     38A10158   1     AI        gr5=gr1,344
  115| 000FB4 bl       48000001   1     CALL      scopy,5,jn",gr3,dvl2bni",gr4,T_56",gr5,dvl2bi",gr6,T_57",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  115| 000FB8 ori      60000000   1
  116| 000FBC ld       EB220000   1     L8        gr25=.&&N&&grid(gr2,0)
  116| 000FC0 lwz      8199000C   1     L4Z       gr12=<s744:d12:l4>(gr25,12)
  116| 000FC4 lwz      83D90008   1     L4Z       gr30=<s744:d8:l4>(gr25,8)
  116| 000FC8 addi     386C0002   1     AI        gr3=gr12,2
  116| 000FCC addi     381EFFFE   1     AI        gr0=gr30,-2
  116| 000FD0 extsw    7C7B07B4   1     EXTS4     gr27=gr3
  116| 000FD4 extsw    7C1A07B4   1     EXTS4     gr26=gr0
  116| 000FD8 subf     7C7AD850   1     S         gr3=gr27,gr26
  116| 000FDC addic.   37830001   1     AI_R      gr28,cr0=gr3,1,ca"
  116| 000FE0 bc       40810128   1     BF        CL.47,cr0,0x2/gt,taken=50%(0,0)
  119| 000FE4 ld       EAA20000   1     L8        gr21=.&&N&&config(gr2,0)
  121| 000FE8 ld       EB3F0700   1     L8        gr25=<s10:d1792:l8>(gr31,1792)
  121| 000FEC ld       EAFF0718   1     L8        gr23=<s10:d1816:l8>(gr31,1816)
  120| 000FF0 ld       E81F0038   1     L8        gr0=<s10:d56:l8>(gr31,56)
  117| 000FF4 ld       E87F0188   1     L8        gr3=<s10:d392:l8>(gr31,392)
  117| 000FF8 ld       E89F0230   1     L8        gr4=<s10:d560:l8>(gr31,560)
  119| 000FFC lwz      82B50000   1     L4Z       gr21=<s871:d0:l4>(gr21,0)
  120| 001000 ld       EBBF0658   1     L8        gr29=<s10:d1624:l8>(gr31,1624)
  118| 001004 ld       E8BF0850   1     L8        gr5=<s10:d2128:l8>(gr31,2128)
  118| 001008 ld       E8DF08F8   1     L8        gr6=<s10:d2296:l8>(gr31,2296)
  121| 00100C ld       EB1F0D20   1     L8        gr24=<s10:d3360:l8>(gr31,3360)
  117| 001010 ld       E8FF01A0   1     L8        gr7=<s10:d416:l8>(gr31,416)
    0| 001014 cmpwi    2C150003   1     C4        cr0=gr21,3
  117| 001018 ld       E91F0248   1     L8        gr8=<s10:d584:l8>(gr31,584)
  118| 00101C ld       E93F0868   1     L8        gr9=<s10:d2152:l8>(gr31,2152)
  118| 001020 ld       E95F0910   1     L8        gr10=<s10:d2320:l8>(gr31,2320)
  120| 001024 ld       E97F0050   1     L8        gr11=<s10:d80:l8>(gr31,80)
  120| 001028 ld       EADF0670   1     L8        gr22=<s10:d1648:l8>(gr31,1648)
  121| 00102C ld       EA9F0D38   1     L8        gr20=<s10:d3384:l8>(gr31,3384)
  116| 001030 addi     3BE00000   1     LI        gr31=0
    0| 001034 bc       40820630   1     BF        CL.167,cr0,0x4/eq,taken=50%(0,0)
    0| 001038 extsw    7FDE07B4   1     EXTS4     gr30=gr30
  121| 00103C add      7D97CA14   1     A         gr12=gr23,gr25
  121| 001040 rldicr   7BDE1F24   1     SLL8      gr30=gr30,3
    0| 001044 ld       EAA20000   1     L8        gr21=.+CONSTANT_AREA(gr2,0)
  121| 001048 addi     3B3EFFE8   1     AI        gr25=gr30,-24
  120| 00104C add      7F76CA14   1     A         gr27=gr22,gr25
  120| 001050 add      7C00CA14   1     A         gr0=gr0,gr25
  118| 001054 add      7CC6CA14   1     A         gr6=gr6,gr25
  121| 001058 add      7FD4CA14   1     A         gr30=gr20,gr25
  120| 00105C add      7FBDDA14   1     A         gr29=gr29,gr27
  120| 001060 add      7F605A14   1     A         gr27=gr0,gr11
  118| 001064 add      7F465214   1     A         gr26=gr6,gr10
  118| 001068 add      7C05CA14   1     A         gr0=gr5,gr25
  117| 00106C add      7CA8CA14   1     A         gr5=gr8,gr25
  117| 001070 add      7CC7CA14   1     A         gr6=gr7,gr25
    0| 001074 lfs      C3D50010   1     LFS       fp30=+CONSTANT_AREA(gr21,16)
  121| 001078 add      7FD8F214   1     A         gr30=gr24,gr30
  121| 00107C add      7F396214   1     A         gr25=gr25,gr12
  118| 001080 add      7F004A14   1     A         gr24=gr0,gr9
  117| 001084 add      7EE42A14   1     A         gr23=gr4,gr5
  117| 001088 add      7EC33214   1     A         gr22=gr3,gr6
  116|                              CL.48:
  117| 00108C lfdu     CC160008   1     LFDU      fp0,gr22=dx2a(gr22,8)
  118| 001090 lfdu     CC580008   1     LFDU      fp2,gr24=dx2b(gr24,8)
  120| 001094 lfdu     CC3B0008   1     LFDU      fp1,gr27=x2a(gr27,8)
  117| 001098 qvfre    10600030   1     QVFRE     fp3=fp0
  118| 00109C qvfre    10801030   1     QVFRE     fp4=fp2
  117| 0010A0 fmsub    FCA0F0F8   1     FMS       fp5=fp30,fp0,fp3,fcr
  118| 0010A4 fmsub    FCC2F138   2     FMS       fp6=fp30,fp2,fp4,fcr
  117| 0010A8 fnmsub   FC63197C   2     FNMS      fp3=fp3,fp3,fp5,fcr
  118| 0010AC fnmsub   FC8421BC   2     FNMS      fp4=fp4,fp4,fp6,fcr
  117| 0010B0 fmsub    FCA0F0F8   2     FMS       fp5=fp30,fp0,fp3,fcr
  118| 0010B4 fmsub    FCC2F138   2     FMS       fp6=fp30,fp2,fp4,fcr
  117| 0010B8 fnmsub   FC63197C   2     FNMS      fp3=fp3,fp3,fp5,fcr
  118| 0010BC fnmsub   FC8421BC   2     FNMS      fp4=fp4,fp4,fp6,fcr
  117| 0010C0 fmsub    FC00F0F8   2     FMS       fp0=fp30,fp0,fp3,fcr
  118| 0010C4 fmsub    FC42F138   2     FMS       fp2=fp30,fp2,fp4,fcr
  117| 0010C8 fnmsub   FC03183C   2     FNMS      fp0=fp3,fp3,fp0,fcr
  118| 0010CC fnmsub   FC4420BC   2     FNMS      fp2=fp4,fp4,fp2,fcr
  117| 0010D0 stfdu    DC170008   2     STFDU     gr23,dx2ai(gr23,8)=fp0
  118| 0010D4 stfdu    DC5A0008   1     STFDU     gr26,dx2bi(gr26,8)=fp2
  120| 0010D8 bl       48000001   1     CALLN     fp1=__xl_cos,1,fp1,__xl_cos,#MX_TEMP1",__xl_cos",gr1,cr[01567]",gr0",gr3"-gr12",fp0",fp2"-fp13",mq",lr",xer",fsr",ca",ctr"
  120| 0010DC ori      60000000   1
  120| 0010E0 stfdu    DC3D0008   1     STFDU     gr29,dg32ad2(gr29,8)=fp1
  121| 0010E4 lfdu     CC390008   1     LFDU      fp1,gr25=x2b(gr25,8)
  121| 0010E8 bl       48000001   1     CALLN     fp1=__xl_cos,1,fp1,__xl_cos,#MX_TEMP1",__xl_cos",gr1,cr[01567]",gr0",gr3"-gr12",fp0",fp2"-fp13",mq",lr",xer",fsr",ca",ctr"
  121| 0010EC ori      60000000   1
  123| 0010F0 addi     3BFF0001   1     AI        gr31=gr31,1
  123| 0010F4 cmpld    7C3FE040   1     CL8       cr0=gr31,gr28
  121| 0010F8 stfdu    DC3E0008   1     STFDU     gr30,dg32bd2(gr30,8)=fp1
  123| 0010FC bc       4180FF90   1     BT        CL.48,cr0,0x8/llt,taken=80%(80,20)
    0| 001100 ori      60210000   1     XNOP      
    0| 001104 ori      60210000   1     XNOP      
  123|                              CL.47:
  124| 001108 bl       48000001   1     CALL      newx2,0,newx2",fcr",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  124| 00110C ori      60000000   1
  125|                              CL.26:
  127| 001110 ld       E8620000   1     L8        gr3=.&&N&&grid(gr2,0)
  127| 001114 lfd      C8030048   1     LFL       fp0=<s744:d72:l8>(gr3,72)
  127| 001118 fcmpu    FC1F0000   1     CFL       cr0=fp31,fp0
  127| 00111C bc       418204C8   1     BT        CL.70,cr0,0x80/feq,taken=30%(30,70)
  128| 001120 ld       EBE20000   1     L8        gr31=.&&N&&param(gr2,0)
  128| 001124 ld       EBA20000   1     L8        gr29=.&&N&grid(gr2,0)
  128| 001128 addi     3BC00001   1     LI        gr30=1
  128| 00112C addi     38E10164   1     AI        gr7=gr1,356
  128| 001130 stw      93C10160   1     ST4Z      T_58(gr1,352)=gr30
  128| 001134 stw      93C10164   1     ST4Z      T_59(gr1,356)=gr30
  128| 001138 addi     38A10160   1     AI        gr5=gr1,352
  128| 00113C ld       E89D1F10   1     L8        gr4=<s10:d7952:l8>(gr29,7952)
  128| 001140 ld       E8DD0070   1     L8        gr6=<s10:d112:l8>(gr29,112)
  128| 001144 addi     387F0008   1     AI        gr3=gr31,8
  128| 001148 bl       48000001   1     CALL      scopy,5,kn",gr3,x3an",gr4,T_58",gr5,x3a",gr6,T_59",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  128| 00114C ori      60000000   1
  129| 001150 stw      93C10168   1     ST4Z      T_60(gr1,360)=gr30
  129| 001154 stw      93C1016C   1     ST4Z      T_61(gr1,364)=gr30
  129| 001158 ld       E89D21B0   1     L8        gr4=<s10:d8624:l8>(gr29,8624)
  129| 00115C ld       E8DD0738   1     L8        gr6=<s10:d1848:l8>(gr29,1848)
  129| 001160 addi     38E1016C   1     AI        gr7=gr1,364
  129| 001164 addi     38A10168   1     AI        gr5=gr1,360
  129| 001168 addi     387F0008   1     AI        gr3=gr31,8
  129| 00116C bl       48000001   1     CALL      scopy,5,kn",gr3,x3bn",gr4,T_60",gr5,x3b",gr6,T_61",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  129| 001170 ori      60000000   1
  130| 001174 stw      93C10170   1     ST4Z      T_62(gr1,368)=gr30
  130| 001178 stw      93C10174   1     ST4Z      T_63(gr1,372)=gr30
  130| 00117C ld       E89D1F80   1     L8        gr4=<s10:d8064:l8>(gr29,8064)
  130| 001180 ld       E8DD01C0   1     L8        gr6=<s10:d448:l8>(gr29,448)
  130| 001184 addi     38E10174   1     AI        gr7=gr1,372
  130| 001188 addi     38A10170   1     AI        gr5=gr1,368
  130| 00118C addi     387F0008   1     AI        gr3=gr31,8
  130| 001190 bl       48000001   1     CALL      scopy,5,kn",gr3,dx3an",gr4,T_62",gr5,dx3a",gr6,T_63",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  130| 001194 ori      60000000   1
  131| 001198 stw      93C10178   1     ST4Z      T_64(gr1,376)=gr30
  131| 00119C stw      93C1017C   1     ST4Z      T_65(gr1,380)=gr30
  131| 0011A0 ld       E89D2220   1     L8        gr4=<s10:d8736:l8>(gr29,8736)
  131| 0011A4 ld       E8DD0888   1     L8        gr6=<s10:d2184:l8>(gr29,2184)
  131| 0011A8 addi     38E1017C   1     AI        gr7=gr1,380
  131| 0011AC addi     38A10178   1     AI        gr5=gr1,376
  131| 0011B0 addi     387F0008   1     AI        gr3=gr31,8
  131| 0011B4 bl       48000001   1     CALL      scopy,5,kn",gr3,dx3bn",gr4,T_64",gr5,dx3b",gr6,T_65",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  131| 0011B8 ori      60000000   1
  132| 0011BC stw      93C10180   1     ST4Z      T_66(gr1,384)=gr30
  132| 0011C0 stw      93C10184   1     ST4Z      T_67(gr1,388)=gr30
  132| 0011C4 ld       E89D1FF0   1     L8        gr4=<s10:d8176:l8>(gr29,8176)
  132| 0011C8 ld       E8DD03B8   1     L8        gr6=<s10:d952:l8>(gr29,952)
  132| 0011CC addi     387F0008   1     AI        gr3=gr31,8
  132| 0011D0 addi     38E10184   1     AI        gr7=gr1,388
  132| 0011D4 addi     38A10180   1     AI        gr5=gr1,384
  132| 0011D8 bl       48000001   1     CALL      scopy,5,kn",gr3,dvl3an",gr4,T_66",gr5,dvl3a",gr6,T_67",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  132| 0011DC ori      60000000   1
  133| 0011E0 stw      93C10188   1     ST4Z      T_68(gr1,392)=gr30
  133| 0011E4 stw      93C1018C   1     ST4Z      T_69(gr1,396)=gr30
  133| 0011E8 ld       E89D2290   1     L8        gr4=<s10:d8848:l8>(gr29,8848)
  133| 0011EC ld       E8DD0A80   1     L8        gr6=<s10:d2688:l8>(gr29,2688)
  133| 0011F0 addi     387F0008   1     AI        gr3=gr31,8
  133| 0011F4 addi     38E1018C   1     AI        gr7=gr1,396
  133| 0011F8 addi     38A10188   1     AI        gr5=gr1,392
  133| 0011FC bl       48000001   1     CALL      scopy,5,kn",gr3,dvl3bn",gr4,T_68",gr5,dvl3b",gr6,T_69",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  133| 001200 ori      60000000   1
  134| 001204 stw      93C10190   1     ST4Z      T_70(gr1,400)=gr30
  134| 001208 stw      93C10194   1     ST4Z      T_71(gr1,404)=gr30
  134| 00120C ld       E89D2140   1     L8        gr4=<s10:d8512:l8>(gr29,8512)
  134| 001210 ld       E8DD0460   1     L8        gr6=<s10:d1120:l8>(gr29,1120)
  134| 001214 addi     387F0008   1     AI        gr3=gr31,8
  134| 001218 addi     38E10194   1     AI        gr7=gr1,404
  134| 00121C addi     38A10190   1     AI        gr5=gr1,400
  134| 001220 bl       48000001   1     CALL      scopy,5,kn",gr3,dvl3ani",gr4,T_70",gr5,dvl3ai",gr6,T_71",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  134| 001224 ori      60000000   1
  135| 001228 stw      93C10198   1     ST4Z      T_72(gr1,408)=gr30
  135| 00122C stw      93C1019C   1     ST4Z      T_73(gr1,412)=gr30
  135| 001230 addi     387F0008   1     AI        gr3=gr31,8
  135| 001234 ld       E89D23E0   1     L8        gr4=<s10:d9184:l8>(gr29,9184)
  135| 001238 ld       E8DD0B28   1     L8        gr6=<s10:d2856:l8>(gr29,2856)
  135| 00123C addi     38E1019C   1     AI        gr7=gr1,412
  135| 001240 addi     38A10198   1     AI        gr5=gr1,408
  135| 001244 bl       48000001   1     CALL      scopy,5,kn",gr3,dvl3bni",gr4,T_72",gr5,dvl3bi",gr6,T_73",gr7,scopy",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  135| 001248 ori      60000000   1
  136| 00124C ld       EB820000   1     L8        gr28=.&&N&&grid(gr2,0)
  136| 001250 lwz      807C0014   1     L4Z       gr3=<s744:d20:l4>(gr28,20)
  136| 001254 lwz      809C0010   1     L4Z       gr4=<s744:d16:l4>(gr28,16)
  136| 001258 addi     38030002   1     AI        gr0=gr3,2
  136| 00125C addi     38A4FFFE   1     AI        gr5=gr4,-2
  136| 001260 extsw    7C0007B4   1     EXTS4     gr0=gr0
  136| 001264 extsw    7CA607B4   1     EXTS4     gr6=gr5
  136| 001268 subf     7CA60050   1     S         gr5=gr0,gr6
  136| 00126C addic.   34A50001   1     AI_R      gr5,cr0=gr5,1,ca"
  136| 001270 bc       4081036C   1     BF        CL.49,cr0,0x2/gt,taken=50%(0,0)
    0| 001274 extsw    7C8507B4   1     EXTS4     gr5=gr4
    0| 001278 subfic   20C60001   1     SFI       gr6=1,gr6,ca"
  138| 00127C rldicr   78A51F24   1     SLL8      gr5=gr5,3
    0| 001280 add      7CC03214   1     A         gr6=gr0,gr6
  138| 001284 addi     3805FFE8   1     AI        gr0=gr5,-24
    0| 001288 rldicl   78C5F082   1     SRL8      gr5=gr6,2
  137| 00128C ld       E8DD01C0   1     L8        gr6=<s10:d448:l8>(gr29,448)
  138| 001290 ld       E8FD0888   1     L8        gr7=<s10:d2184:l8>(gr29,2184)
  137| 001294 ld       E91D01D8   1     L8        gr8=<s10:d472:l8>(gr29,472)
  137| 001298 ld       E93D0280   1     L8        gr9=<s10:d640:l8>(gr29,640)
  138| 00129C ld       E95D08A0   1     L8        gr10=<s10:d2208:l8>(gr29,2208)
  138| 0012A0 ld       E97D0948   1     L8        gr11=<s10:d2376:l8>(gr29,2376)
  138| 0012A4 ld       EBFD0930   1     L8        gr31=<s10:d2352:l8>(gr29,2352)
  137| 0012A8 ld       E99D0268   1     L8        gr12=<s10:d616:l8>(gr29,616)
  137| 0012AC add      7CC64214   1     A         gr6=gr6,gr8
  137| 0012B0 add      7D004A14   1     A         gr8=gr0,gr9
  138| 0012B4 add      7CE75214   1     A         gr7=gr7,gr10
  138| 0012B8 add      7D205A14   1     A         gr9=gr0,gr11
  138| 0012BC add      7CE03A14   1     A         gr7=gr0,gr7
  138| 0012C0 add      7D29FA14   1     A         gr9=gr9,gr31
  137| 0012C4 add      7CC03214   1     A         gr6=gr0,gr6
    0| 0012C8 addi     38030005   1     AI        gr0=gr3,5
    0| 0012CC ld       EBC20000   1     L8        gr30=.+CONSTANT_AREA(gr2,0)
    0| 0012D0 subf     7C040050   1     S         gr0=gr0,gr4
    0| 0012D4 cmpdi    2CA50000   1     C8        cr1=gr5,0
    0| 0012D8 andi.    70000003   1     RN4_R     gr0,cr0=gr0,0,0x3
  137| 0012DC add      7D086214   1     A         gr8=gr8,gr12
    0| 0012E0 lfs      C01E0010   1     LFS       fp0=+CONSTANT_AREA(gr30,16)
    0| 0012E4 bc       418200AC   1     BT        CL.227,cr0,0x4/eq,taken=50%(0,0)
  137| 0012E8 lfdu     CC260008   1     LFDU      fp1,gr6=dx3a(gr6,8)
  138| 0012EC lfdu     CC470008   1     LFDU      fp2,gr7=dx3b(gr7,8)
    0| 0012F0 mtspr    7C0903A6   1     LCTR      ctr=gr0
  137| 0012F4 qvfre    10A00830   1     QVFRE     fp5=fp1
  138| 0012F8 qvfre    10601030   1     QVFRE     fp3=fp2
  137| 0012FC fmsub    FCC10178   1     FMS       fp6=fp0,fp1,fp5,fcr
  138| 001300 fmsub    FC8200F8   2     FMS       fp4=fp0,fp2,fp3,fcr
  137| 001304 fnmsub   FCA529BC   2     FNMS      fp5=fp5,fp5,fp6,fcr
  137| 001308 fmsub    FCC10178   2     FMS       fp6=fp0,fp1,fp5,fcr
  137| 00130C fnmsub   FCC529BC   2     FNMS      fp6=fp5,fp5,fp6,fcr
    0| 001310 bc       42400058   1     BCF       ctr=CL.263,taken=0%(0,100)
    0|                              CL.264:
  137| 001314 lfdu     CCA60008   1     LFDU      fp5,gr6=dx3a(gr6,8)
  138| 001318 fnmsub   FC63193C   1     FNMS      fp3=fp3,fp3,fp4,fcr
  137| 00131C fmsub    FCE101B8   2     FMS       fp7=fp0,fp1,fp6,fcr
  137| 001320 qvfre    10802830   1     QVFRE     fp4=fp5
  138| 001324 fmsub    FC2200F8   1     FMS       fp1=fp0,fp2,fp3,fcr
  137| 001328 fnmsub   FCC631FC   2     FNMS      fp6=fp6,fp6,fp7,fcr
    0| 00132C fmr      FCE01090   2     LRFL      fp7=fp2
  138| 001330 lfdu     CC470008   1     LFDU      fp2,gr7=dx3b(gr7,8)
  137| 001334 fmsub    FD050138   1     FMS       fp8=fp0,fp5,fp4,fcr
  138| 001338 fnmsub   FC23187C   2     FNMS      fp1=fp3,fp3,fp1,fcr
  137| 00133C stfdu    DCC80008   2     STFDU     gr8,dx3ai(gr8,8)=fp6
  137| 001340 fnmsub   FCC4223C   1     FNMS      fp6=fp4,fp4,fp8,fcr
  138| 001344 fmsub    FC870078   2     FMS       fp4=fp0,fp7,fp1,fcr
  138| 001348 qvfre    10601030   1     QVFRE     fp3=fp2
  137| 00134C fmsub    FCE501B8   1     FMS       fp7=fp0,fp5,fp6,fcr
  138| 001350 fnmsub   FD01093C   2     FNMS      fp8=fp1,fp1,fp4,fcr
    0| 001354 fmr      FC202890   2     LRFL      fp1=fp5
  138| 001358 fmsub    FC8200F8   2     FMS       fp4=fp0,fp2,fp3,fcr
  137| 00135C fnmsub   FCC631FC   2     FNMS      fp6=fp6,fp6,fp7,fcr
  138| 001360 stfdu    DD090008   2     STFDU     gr9,dx3bi(gr9,8)=fp8
    0| 001364 bc       4200FFB0   1     BCT       ctr=CL.264,taken=100%(100,0)
    0|                              CL.263:
  138| 001368 fnmsub   FC63193C   1     FNMS      fp3=fp3,fp3,fp4,fcr
  137| 00136C fmsub    FC2101B8   2     FMS       fp1=fp0,fp1,fp6,fcr
  138| 001370 fmsub    FC8200F8   2     FMS       fp4=fp0,fp2,fp3,fcr
  137| 001374 fnmsub   FC26307C   2     FNMS      fp1=fp6,fp6,fp1,fcr
  138| 001378 fnmsub   FC63193C   2     FNMS      fp3=fp3,fp3,fp4,fcr
  137| 00137C stfdu    DC280008   2     STFDU     gr8,dx3ai(gr8,8)=fp1
  138| 001380 fmsub    FC2200F8   1     FMS       fp1=fp0,fp2,fp3,fcr
  138| 001384 fnmsub   FC23187C   2     FNMS      fp1=fp3,fp3,fp1,fcr
  138| 001388 stfdu    DC290008   2     STFDU     gr9,dx3bi(gr9,8)=fp1
    0| 00138C bc       41860250   1     BT        CL.49,cr1,0x4/eq,taken=20%(20,80)
    0|                              CL.227:
  137| 001390 lfd      C8260008   1     LFL       fp1=dx3a(gr6,8)
  138| 001394 lfd      C8470008   1     LFL       fp2=dx3b(gr7,8)
  138| 001398 lfd      C8870010   1     LFL       fp4=dx3b(gr7,16)
  137| 00139C lfd      C8A60018   1     LFL       fp5=dx3a(gr6,24)
  137| 0013A0 lfd      C8660010   1     LFL       fp3=dx3a(gr6,16)
  138| 0013A4 lfd      C8C70018   1     LFL       fp6=dx3b(gr7,24)
  137| 0013A8 lfdu     CCE60020   1     LFDU      fp7,gr6=dx3a(gr6,32)
  137| 0013AC qvfre    11400830   1     QVFRE     fp10=fp1
    0| 0013B0 mtspr    7CA903A6   1     LCTR      ctr=gr5
  138| 0013B4 qvfre    11601030   1     QVFRE     fp11=fp2
  138| 0013B8 lfdu     CD070020   1     LFDU      fp8,gr7=dx3b(gr7,32)
  138| 0013BC qvfre    13E02030   1     QVFRE     fp31=fp4
  137| 0013C0 qvfre    13A02830   1     QVFRE     fp29=fp5
  137| 0013C4 fmsub    FF8102B8   1     FMS       fp28=fp0,fp1,fp10,fcr
  137| 0013C8 qvfre    11A01830   1     QVFRE     fp13=fp3
  138| 0013CC fmsub    FD8202F8   1     FMS       fp12=fp0,fp2,fp11,fcr
  138| 0013D0 qvfre    11203030   1     QVFRE     fp9=fp6
  138| 0013D4 fmsub    FFC407F8   1     FMS       fp30=fp0,fp4,fp31,fcr
  137| 0013D8 fnmsub   FD4A573C   2     FNMS      fp10=fp10,fp10,fp28,fcr
  137| 0013DC fmsub    FF850778   2     FMS       fp28=fp0,fp5,fp29,fcr
  138| 0013E0 fnmsub   FD6B5B3C   2     FNMS      fp11=fp11,fp11,fp12,fcr
  137| 0013E4 fmsub    FF630378   2     FMS       fp27=fp0,fp3,fp13,fcr
  138| 0013E8 fnmsub   FFFFFFBC   2     FNMS      fp31=fp31,fp31,fp30,fcr
  137| 0013EC qvfre    11803830   1     QVFRE     fp12=fp7
  137| 0013F0 fmsub    FFC102B8   1     FMS       fp30=fp0,fp1,fp10,fcr
  137| 0013F4 fnmsub   FFBDEF3C   2     FNMS      fp29=fp29,fp29,fp28,fcr
  138| 0013F8 fmsub    FF8202F8   2     FMS       fp28=fp0,fp2,fp11,fcr
  137| 0013FC fnmsub   FDAD6EFC   2     FNMS      fp13=fp13,fp13,fp27,fcr
  138| 001400 fmsub    FF2407F8   2     FMS       fp25=fp0,fp4,fp31,fcr
  138| 001404 fmsub    FF660278   2     FMS       fp27=fp0,fp6,fp9,fcr
  137| 001408 fnmsub   FD4A57BC   2     FNMS      fp10=fp10,fp10,fp30,fcr
  137| 00140C fmsub    FFC50778   2     FMS       fp30=fp0,fp5,fp29,fcr
  138| 001410 fnmsub   FD6B5F3C   2     FNMS      fp11=fp11,fp11,fp28,fcr
  137| 001414 fmsub    FF430378   2     FMS       fp26=fp0,fp3,fp13,fcr
  138| 001418 fnmsub   FFFFFE7C   2     FNMS      fp31=fp31,fp31,fp25,fcr
  137| 00141C fmsub    FC2102B8   2     FMS       fp1=fp0,fp1,fp10,fcr
  138| 001420 fmsub    FC4202F8   2     FMS       fp2=fp0,fp2,fp11,fcr
  137| 001424 fnmsub   FDAD6EBC   2     FNMS      fp13=fp13,fp13,fp26,fcr
  137| 001428 fnmsub   FC2A507C   2     FNMS      fp1=fp10,fp10,fp1,fcr
  138| 00142C fnmsub   FC4B58BC   2     FNMS      fp2=fp11,fp11,fp2,fcr
  137| 001430 fmsub    FC630378   2     FMS       fp3=fp0,fp3,fp13,fcr
  137| 001434 stfd     D8280008   1     STFL      dx3ai(gr8,8)=fp1
  137| 001438 fnmsub   FD4D68FC   1     FNMS      fp10=fp13,fp13,fp3,fcr
  138| 00143C stfd     D8490008   1     STFL      dx3bi(gr9,8)=fp2
    0| 001440 bc       42400128   1     BCF       ctr=CL.265,taken=0%(0,100)
    0|                              CL.266:
  137| 001444 lfd      C8260008   1     LFL       fp1=dx3a(gr6,8)
  138| 001448 fnmsub   FC494EFC   1     FNMS      fp2=fp9,fp9,fp27,fcr
  138| 00144C fmsub    FD2407F8   2     FMS       fp9=fp0,fp4,fp31,fcr
  138| 001450 qvfre    10804030   1     QVFRE     fp4=fp8
  137| 001454 fmsub    FC670338   1     FMS       fp3=fp0,fp7,fp12,fcr
  137| 001458 fnmsub   FD7DEFBC   2     FNMS      fp11=fp29,fp29,fp30,fcr
  137| 00145C stfd     D9480010   1     STFL      dx3ai(gr8,16)=fp10
  138| 001460 fmsub    FFC600B8   1     FMS       fp30=fp0,fp6,fp2,fcr
  138| 001464 fnmsub   FFFFFA7C   2     FNMS      fp31=fp31,fp31,fp9,fcr
  138| 001468 lfd      C9270008   1     LFL       fp9=dx3b(gr7,8)
  137| 00146C fnmsub   FD4C60FC   1     FNMS      fp10=fp12,fp12,fp3,fcr
  137| 001470 fmsub    FFA502F8   2     FMS       fp29=fp0,fp5,fp11,fcr
  137| 001474 qvfre    10600830   1     QVFRE     fp3=fp1
  138| 001478 fmsub    FDA80138   1     FMS       fp13=fp0,fp8,fp4,fcr
  138| 00147C fnmsub   FD8217BC   2     FNMS      fp12=fp2,fp2,fp30,fcr
  138| 001480 stfd     DBE90010   1     STFL      dx3bi(gr9,16)=fp31
  137| 001484 fmsub    FCA702B8   1     FMS       fp5=fp0,fp7,fp10,fcr
  137| 001488 fnmsub   FFEB5F7C   2     FNMS      fp31=fp11,fp11,fp29,fcr
  137| 00148C lfd      C9660010   1     LFL       fp11=dx3a(gr6,16)
  138| 001490 fnmsub   FDA4237C   1     FNMS      fp13=fp4,fp4,fp13,fcr
  138| 001494 fmsub    FC860338   2     FMS       fp4=fp0,fp6,fp12,fcr
  138| 001498 qvfre    10404830   1     QVFRE     fp2=fp9
  137| 00149C fmsub    FFC100F8   1     FMS       fp30=fp0,fp1,fp3,fcr
  137| 0014A0 fnmsub   FCAA517C   2     FNMS      fp5=fp10,fp10,fp5,fcr
  137| 0014A4 stfd     DBE80018   1     STFL      dx3ai(gr8,24)=fp31
  138| 0014A8 fmsub    FCC80378   1     FMS       fp6=fp0,fp8,fp13,fcr
  138| 0014AC fnmsub   FFEC613C   2     FNMS      fp31=fp12,fp12,fp4,fcr
  138| 0014B0 lfd      C8870010   1     LFL       fp4=dx3b(gr7,16)
  137| 0014B4 fnmsub   FD431FBC   1     FNMS      fp10=fp3,fp3,fp30,fcr
  137| 0014B8 fmsub    FFC70178   2     FMS       fp30=fp0,fp7,fp5,fcr
  137| 0014BC qvfre    11805830   1     QVFRE     fp12=fp11
  138| 0014C0 fmsub    FC6900B8   1     FMS       fp3=fp0,fp9,fp2,fcr
  138| 0014C4 fnmsub   FCCD69BC   2     FNMS      fp6=fp13,fp13,fp6,fcr
  138| 0014C8 stfd     DBE90018   1     STFL      dx3bi(gr9,24)=fp31
  137| 0014CC fmsub    FCE102B8   1     FMS       fp7=fp0,fp1,fp10,fcr
  137| 0014D0 fnmsub   FDA52FBC   2     FNMS      fp13=fp5,fp5,fp30,fcr
  137| 0014D4 lfd      C8A60018   1     LFL       fp5=dx3a(gr6,24)
  138| 0014D8 fnmsub   FC4210FC   1     FNMS      fp2=fp2,fp2,fp3,fcr
  138| 0014DC fmsub    FFC801B8   2     FMS       fp30=fp0,fp8,fp6,fcr
  138| 0014E0 qvfre    10602030   1     QVFRE     fp3=fp4
  137| 0014E4 fmsub    FD0B0338   1     FMS       fp8=fp0,fp11,fp12,fcr
  137| 0014E8 fnmsub   FCEA51FC   2     FNMS      fp7=fp10,fp10,fp7,fcr
  137| 0014EC stfdu    DDA80020   2     STFDU     gr8,dx3ai(gr8,32)=fp13
  138| 0014F0 fmsub    FFE900B8   1     FMS       fp31=fp0,fp9,fp2,fcr
  138| 0014F4 fnmsub   FD4637BC   2     FNMS      fp10=fp6,fp6,fp30,fcr
  138| 0014F8 lfd      C8C70018   1     LFL       fp6=dx3b(gr7,24)
  137| 0014FC fnmsub   FD0C623C   1     FNMS      fp8=fp12,fp12,fp8,fcr
  137| 001500 fmsub    FFC101F8   2     FMS       fp30=fp0,fp1,fp7,fcr
  137| 001504 qvfre    11802830   1     QVFRE     fp12=fp5
  138| 001508 fmsub    FDA400F8   1     FMS       fp13=fp0,fp4,fp3,fcr
  138| 00150C fnmsub   FC4217FC   2     FNMS      fp2=fp2,fp2,fp31,fcr
  138| 001510 stfdu    DD490020   2     STFDU     gr9,dx3bi(gr9,32)=fp10
  137| 001514 fmsub    FC2B0238   1     FMS       fp1=fp0,fp11,fp8,fcr
  137| 001518 fnmsub   FD473FBC   2     FNMS      fp10=fp7,fp7,fp30,fcr
  137| 00151C lfdu     CCE60020   1     LFDU      fp7,gr6=dx3a(gr6,32)
  138| 001520 fnmsub   FC631B7C   1     FNMS      fp3=fp3,fp3,fp13,fcr
  138| 001524 fmsub    FFE900B8   2     FMS       fp31=fp0,fp9,fp2,fcr
  138| 001528 qvfre    11203030   1     QVFRE     fp9=fp6
  137| 00152C fmsub    FDA50338   1     FMS       fp13=fp0,fp5,fp12,fcr
  137| 001530 fnmsub   FC28407C   2     FNMS      fp1=fp8,fp8,fp1,fcr
  137| 001534 stfd     D9480008   1     STFL      dx3ai(gr8,8)=fp10
  138| 001538 fmsub    FD4400F8   1     FMS       fp10=fp0,fp4,fp3,fcr
  138| 00153C fnmsub   FC4217FC   2     FNMS      fp2=fp2,fp2,fp31,fcr
  138| 001540 lfdu     CD070020   1     LFDU      fp8,gr7=dx3b(gr7,32)
  137| 001544 fnmsub   FFAC637C   1     FNMS      fp29=fp12,fp12,fp13,fcr
  137| 001548 fmsub    FD6B0078   2     FMS       fp11=fp0,fp11,fp1,fcr
  137| 00154C qvfre    11803830   1     QVFRE     fp12=fp7
  138| 001550 fmsub    FF660278   1     FMS       fp27=fp0,fp6,fp9,fcr
  138| 001554 fnmsub   FFE31ABC   2     FNMS      fp31=fp3,fp3,fp10,fcr
  138| 001558 stfd     D8490008   1     STFL      dx3bi(gr9,8)=fp2
  137| 00155C fmsub    FFC50778   1     FMS       fp30=fp0,fp5,fp29,fcr
  137| 001560 fnmsub   FD410AFC   2     FNMS      fp10=fp1,fp1,fp11,fcr
    0| 001564 bc       4200FEE0   1     BCT       ctr=CL.266,taken=100%(100,0)
    0|                              CL.265:
  138| 001568 qvfre    10204030   1     QVFRE     fp1=fp8
  137| 00156C stfd     D9480010   1     STFL      dx3ai(gr8,16)=fp10
  138| 001570 fmsub    FC8407F8   1     FMS       fp4=fp0,fp4,fp31,fcr
  137| 001574 fmsub    FC470338   2     FMS       fp2=fp0,fp7,fp12,fcr
  138| 001578 fnmsub   FC694EFC   2     FNMS      fp3=fp9,fp9,fp27,fcr
  137| 00157C fnmsub   FD3DEFBC   2     FNMS      fp9=fp29,fp29,fp30,fcr
  138| 001580 fmsub    FD480078   2     FMS       fp10=fp0,fp8,fp1,fcr
  138| 001584 fnmsub   FC9FF93C   2     FNMS      fp4=fp31,fp31,fp4,fcr
  137| 001588 fnmsub   FC4C60BC   2     FNMS      fp2=fp12,fp12,fp2,fcr
  138| 00158C fmsub    FD6600F8   2     FMS       fp11=fp0,fp6,fp3,fcr
  137| 001590 fmsub    FCA50278   2     FMS       fp5=fp0,fp5,fp9,fcr
  138| 001594 fnmsub   FC210ABC   2     FNMS      fp1=fp1,fp1,fp10,fcr
  138| 001598 stfd     D8890010   1     STFL      dx3bi(gr9,16)=fp4
  137| 00159C fmsub    FD4700B8   1     FMS       fp10=fp0,fp7,fp2,fcr
  138| 0015A0 fnmsub   FC631AFC   2     FNMS      fp3=fp3,fp3,fp11,fcr
  138| 0015A4 fmsub    FC880078   2     FMS       fp4=fp0,fp8,fp1,fcr
  137| 0015A8 fnmsub   FCA9497C   2     FNMS      fp5=fp9,fp9,fp5,fcr
  137| 0015AC fnmsub   FC4212BC   2     FNMS      fp2=fp2,fp2,fp10,fcr
  138| 0015B0 fmsub    FCC600F8   2     FMS       fp6=fp0,fp6,fp3,fcr
  138| 0015B4 fnmsub   FC21093C   2     FNMS      fp1=fp1,fp1,fp4,fcr
  137| 0015B8 stfd     D8A80018   1     STFL      dx3ai(gr8,24)=fp5
  137| 0015BC fmsub    FC8700B8   1     FMS       fp4=fp0,fp7,fp2,fcr
  138| 0015C0 fnmsub   FC6319BC   2     FNMS      fp3=fp3,fp3,fp6,fcr
  138| 0015C4 fmsub    FC080078   2     FMS       fp0=fp0,fp8,fp1,fcr
  137| 0015C8 fnmsub   FC42113C   2     FNMS      fp2=fp2,fp2,fp4,fcr
  138| 0015CC stfd     D8690018   1     STFL      dx3bi(gr9,24)=fp3
  138| 0015D0 fnmsub   FC01083C   1     FNMS      fp0=fp1,fp1,fp0,fcr
  137| 0015D4 stfdu    DC480020   2     STFDU     gr8,dx3ai(gr8,32)=fp2
  138| 0015D8 stfdu    DC090020   1     STFDU     gr9,dx3bi(gr9,32)=fp0
  139|                              CL.49:
  140| 0015DC bl       48000001   1     CALL      newx3,0,newx3",fcr",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  140| 0015E0 ori      60000000   1
  144|                              CL.70:
  144| 0015E4 ld       E80102D0   1     L8        gr0=#stack(gr1,720)
  144| 0015E8 lwa      E98102CA   1     L4A       gr12=#stack(gr1,712)
  144| 0015EC lfd      CBE102B8   1     LFL       fp31=#stack(gr1,696)
  144| 0015F0 lfd      CBC102B0   1     LFL       fp30=#stack(gr1,688)
  144| 0015F4 lfd      CBA102A8   1     LFL       fp29=#stack(gr1,680)
  144| 0015F8 lfd      CB8102A0   1     LFL       fp28=#stack(gr1,672)
  144| 0015FC lfd      CB610298   1     LFL       fp27=#stack(gr1,664)
  144| 001600 lfd      CB410290   1     LFL       fp26=#stack(gr1,656)
  144| 001604 lfd      CB210288   1     LFL       fp25=#stack(gr1,648)
  144| 001608 lfd      CB010280   1     LFL       fp24=#stack(gr1,640)
  144| 00160C addi     382102C0   1     AI        gr1=gr1,704
  144| 001610 mtspr    7C0803A6   1     LLR       lr=gr0
  144| 001614 mtcrf    7D808120   1     MTCRF     cr4=gr12
  144| 001618 ld       E9C1FF30   1     L8        gr14=#stack(gr1,-208)
  144| 00161C ld       E9E1FF38   1     L8        gr15=#stack(gr1,-200)
  144| 001620 ld       EA01FF40   1     L8        gr16=#stack(gr1,-192)
  144| 001624 ld       EA21FF48   1     L8        gr17=#stack(gr1,-184)
  144| 001628 ld       EA41FF50   1     L8        gr18=#stack(gr1,-176)
  144| 00162C ld       EA61FF58   1     L8        gr19=#stack(gr1,-168)
  144| 001630 ld       EA81FF60   1     L8        gr20=#stack(gr1,-160)
  144| 001634 ld       EAA1FF68   1     L8        gr21=#stack(gr1,-152)
  144| 001638 ld       EAC1FF70   1     L8        gr22=#stack(gr1,-144)
  144| 00163C ld       EAE1FF78   1     L8        gr23=#stack(gr1,-136)
  144| 001640 ld       EB01FF80   1     L8        gr24=#stack(gr1,-128)
  144| 001644 ld       EB21FF88   1     L8        gr25=#stack(gr1,-120)
  144| 001648 ld       EB41FF90   1     L8        gr26=#stack(gr1,-112)
  144| 00164C ld       EB61FF98   1     L8        gr27=#stack(gr1,-104)
  144| 001650 ld       EB81FFA0   1     L8        gr28=#stack(gr1,-96)
  144| 001654 ld       EBA1FFA8   1     L8        gr29=#stack(gr1,-88)
  144| 001658 ld       EBC1FFB0   1     L8        gr30=#stack(gr1,-80)
  144| 00165C ld       EBE1FFB8   1     L8        gr31=#stack(gr1,-72)
  144| 001660 bclr     4E800020   1     BA        lr
    0|                              CL.167:
    0| 001664 extsw    7FC007B4   1     EXTS4     gr0=gr30
    0| 001668 subfic   217A0001   1     SFI       gr11=1,gr26,ca"
  118| 00166C rldicr   781F1F24   1     SLL8      gr31=gr0,3
    0| 001670 addi     380C0005   1     AI        gr0=gr12,5
  118| 001674 addi     399FFFE8   1     AI        gr12=gr31,-24
    0| 001678 add      7D6BDA14   1     A         gr11=gr11,gr27
  118| 00167C add      7CA56214   1     A         gr5=gr5,gr12
  117| 001680 add      7CE76214   1     A         gr7=gr7,gr12
  118| 001684 add      7CA54A14   1     A         gr5=gr5,gr9
    0| 001688 ld       E9220000   1     L8        gr9=.+CONSTANT_AREA(gr2,0)
    0| 00168C subf     7C1E0050   1     S         gr0=gr0,gr30
    0| 001690 rldicl   796BF082   1     SRL8      gr11=gr11,2
  118| 001694 add      7CC66214   1     A         gr6=gr6,gr12
  117| 001698 add      7D086214   1     A         gr8=gr8,gr12
  117| 00169C add      7C633A14   1     A         gr3=gr3,gr7
    0| 0016A0 andi.    70000003   1     RN4_R     gr0,cr0=gr0,0,0x3
    0| 0016A4 cmpdi    2CAB0000   1     C8        cr1=gr11,0
  118| 0016A8 add      7CC65214   1     A         gr6=gr6,gr10
  117| 0016AC add      7C844214   1     A         gr4=gr4,gr8
    0| 0016B0 lfs      C0090010   1     LFS       fp0=+CONSTANT_AREA(gr9,16)
    0| 0016B4 bc       418200AC   1     BT        CL.224,cr0,0x4/eq,taken=50%(0,0)
  117| 0016B8 lfdu     CC230008   1     LFDU      fp1,gr3=dx2a(gr3,8)
  118| 0016BC lfdu     CC450008   1     LFDU      fp2,gr5=dx2b(gr5,8)
    0| 0016C0 mtspr    7C0903A6   1     LCTR      ctr=gr0
  117| 0016C4 qvfre    10A00830   1     QVFRE     fp5=fp1
  118| 0016C8 qvfre    10601030   1     QVFRE     fp3=fp2
  117| 0016CC fmsub    FCC10178   1     FMS       fp6=fp0,fp1,fp5,fcr
  118| 0016D0 fmsub    FC8200F8   2     FMS       fp4=fp0,fp2,fp3,fcr
  117| 0016D4 fnmsub   FCA529BC   2     FNMS      fp5=fp5,fp5,fp6,fcr
  117| 0016D8 fmsub    FCC10178   2     FMS       fp6=fp0,fp1,fp5,fcr
  117| 0016DC fnmsub   FCC529BC   2     FNMS      fp6=fp5,fp5,fp6,fcr
    0| 0016E0 bc       42400058   1     BCF       ctr=CL.259,taken=0%(0,100)
    0|                              CL.260:
  117| 0016E4 lfdu     CCA30008   1     LFDU      fp5,gr3=dx2a(gr3,8)
  118| 0016E8 fnmsub   FC63193C   1     FNMS      fp3=fp3,fp3,fp4,fcr
  117| 0016EC fmsub    FCE101B8   2     FMS       fp7=fp0,fp1,fp6,fcr
  117| 0016F0 qvfre    10802830   1     QVFRE     fp4=fp5
  118| 0016F4 fmsub    FC2200F8   1     FMS       fp1=fp0,fp2,fp3,fcr
  117| 0016F8 fnmsub   FCC631FC   2     FNMS      fp6=fp6,fp6,fp7,fcr
    0| 0016FC fmr      FCE01090   2     LRFL      fp7=fp2
  118| 001700 lfdu     CC450008   1     LFDU      fp2,gr5=dx2b(gr5,8)
  117| 001704 fmsub    FD050138   1     FMS       fp8=fp0,fp5,fp4,fcr
  118| 001708 fnmsub   FC23187C   2     FNMS      fp1=fp3,fp3,fp1,fcr
  117| 00170C stfdu    DCC40008   2     STFDU     gr4,dx2ai(gr4,8)=fp6
  117| 001710 fnmsub   FCC4223C   1     FNMS      fp6=fp4,fp4,fp8,fcr
  118| 001714 fmsub    FC870078   2     FMS       fp4=fp0,fp7,fp1,fcr
  118| 001718 qvfre    10601030   1     QVFRE     fp3=fp2
  117| 00171C fmsub    FCE501B8   1     FMS       fp7=fp0,fp5,fp6,fcr
  118| 001720 fnmsub   FD01093C   2     FNMS      fp8=fp1,fp1,fp4,fcr
    0| 001724 fmr      FC202890   2     LRFL      fp1=fp5
  118| 001728 fmsub    FC8200F8   2     FMS       fp4=fp0,fp2,fp3,fcr
  117| 00172C fnmsub   FCC631FC   2     FNMS      fp6=fp6,fp6,fp7,fcr
  118| 001730 stfdu    DD060008   2     STFDU     gr6,dx2bi(gr6,8)=fp8
    0| 001734 bc       4200FFB0   1     BCT       ctr=CL.260,taken=100%(100,0)
    0|                              CL.259:
  118| 001738 fnmsub   FC63193C   1     FNMS      fp3=fp3,fp3,fp4,fcr
  117| 00173C fmsub    FC2101B8   2     FMS       fp1=fp0,fp1,fp6,fcr
  118| 001740 fmsub    FC8200F8   2     FMS       fp4=fp0,fp2,fp3,fcr
  117| 001744 fnmsub   FC26307C   2     FNMS      fp1=fp6,fp6,fp1,fcr
  118| 001748 fnmsub   FC63193C   2     FNMS      fp3=fp3,fp3,fp4,fcr
  117| 00174C stfdu    DC240008   2     STFDU     gr4,dx2ai(gr4,8)=fp1
  118| 001750 fmsub    FC2200F8   1     FMS       fp1=fp0,fp2,fp3,fcr
  118| 001754 fnmsub   FC23187C   2     FNMS      fp1=fp3,fp3,fp1,fcr
  118| 001758 stfdu    DC260008   2     STFDU     gr6,dx2bi(gr6,8)=fp1
    0| 00175C bc       4186F9AC   1     BT        CL.47,cr1,0x4/eq,taken=20%(20,80)
    0|                              CL.224:
  117| 001760 lfd      C8230008   1     LFL       fp1=dx2a(gr3,8)
  118| 001764 lfd      C8450008   1     LFL       fp2=dx2b(gr5,8)
  118| 001768 lfd      C8850010   1     LFL       fp4=dx2b(gr5,16)
  117| 00176C lfd      C8A30018   1     LFL       fp5=dx2a(gr3,24)
  117| 001770 lfd      C8630010   1     LFL       fp3=dx2a(gr3,16)
  118| 001774 lfd      C8C50018   1     LFL       fp6=dx2b(gr5,24)
  117| 001778 lfdu     CCE30020   1     LFDU      fp7,gr3=dx2a(gr3,32)
  117| 00177C qvfre    11400830   1     QVFRE     fp10=fp1
    0| 001780 mtspr    7D6903A6   1     LCTR      ctr=gr11
  118| 001784 qvfre    11601030   1     QVFRE     fp11=fp2
  118| 001788 lfdu     CD050020   1     LFDU      fp8,gr5=dx2b(gr5,32)
  118| 00178C qvfre    13C02030   1     QVFRE     fp30=fp4
  117| 001790 qvfre    13802830   1     QVFRE     fp28=fp5
  117| 001794 fmsub    FF6102B8   1     FMS       fp27=fp0,fp1,fp10,fcr
  117| 001798 qvfre    11A01830   1     QVFRE     fp13=fp3
  118| 00179C fmsub    FD8202F8   1     FMS       fp12=fp0,fp2,fp11,fcr
  118| 0017A0 qvfre    11203030   1     QVFRE     fp9=fp6
  118| 0017A4 fmsub    FFA407B8   1     FMS       fp29=fp0,fp4,fp30,fcr
  117| 0017A8 fnmsub   FD4A56FC   2     FNMS      fp10=fp10,fp10,fp27,fcr
  117| 0017AC fmsub    FF650738   2     FMS       fp27=fp0,fp5,fp28,fcr
  118| 0017B0 fnmsub   FD6B5B3C   2     FNMS      fp11=fp11,fp11,fp12,fcr
  117| 0017B4 fmsub    FF430378   2     FMS       fp26=fp0,fp3,fp13,fcr
  118| 0017B8 fnmsub   FFDEF77C   2     FNMS      fp30=fp30,fp30,fp29,fcr
  117| 0017BC qvfre    11803830   1     QVFRE     fp12=fp7
  117| 0017C0 fmsub    FFA102B8   1     FMS       fp29=fp0,fp1,fp10,fcr
  117| 0017C4 fnmsub   FF9CE6FC   2     FNMS      fp28=fp28,fp28,fp27,fcr
  118| 0017C8 fmsub    FF6202F8   2     FMS       fp27=fp0,fp2,fp11,fcr
  117| 0017CC fnmsub   FDAD6EBC   2     FNMS      fp13=fp13,fp13,fp26,fcr
  118| 0017D0 fmsub    FF0407B8   2     FMS       fp24=fp0,fp4,fp30,fcr
  118| 0017D4 fmsub    FF460278   2     FMS       fp26=fp0,fp6,fp9,fcr
  117| 0017D8 fnmsub   FD4A577C   2     FNMS      fp10=fp10,fp10,fp29,fcr
  117| 0017DC fmsub    FFA50738   2     FMS       fp29=fp0,fp5,fp28,fcr
  118| 0017E0 fnmsub   FD6B5EFC   2     FNMS      fp11=fp11,fp11,fp27,fcr
  117| 0017E4 fmsub    FF230378   2     FMS       fp25=fp0,fp3,fp13,fcr
  118| 0017E8 fnmsub   FFDEF63C   2     FNMS      fp30=fp30,fp30,fp24,fcr
  117| 0017EC fmsub    FC2102B8   2     FMS       fp1=fp0,fp1,fp10,fcr
  118| 0017F0 fmsub    FC4202F8   2     FMS       fp2=fp0,fp2,fp11,fcr
  117| 0017F4 fnmsub   FDAD6E7C   2     FNMS      fp13=fp13,fp13,fp25,fcr
  117| 0017F8 fnmsub   FC2A507C   2     FNMS      fp1=fp10,fp10,fp1,fcr
  118| 0017FC fnmsub   FC4B58BC   2     FNMS      fp2=fp11,fp11,fp2,fcr
  117| 001800 fmsub    FC630378   2     FMS       fp3=fp0,fp3,fp13,fcr
  117| 001804 stfd     D8240008   1     STFL      dx2ai(gr4,8)=fp1
  117| 001808 fnmsub   FD4D68FC   1     FNMS      fp10=fp13,fp13,fp3,fcr
  118| 00180C stfd     D8460008   1     STFL      dx2bi(gr6,8)=fp2
    0| 001810 bc       42400130   1     BCF       ctr=CL.261,taken=0%(0,100)
    0| 001814 ori      60210000   1     XNOP      
    0| 001818 ori      60210000   1     XNOP      
    0|                              CL.262:
  117| 00181C lfd      C8230008   1     LFL       fp1=dx2a(gr3,8)
  118| 001820 fnmsub   FC494EBC   1     FNMS      fp2=fp9,fp9,fp26,fcr
  118| 001824 fmsub    FD2407B8   2     FMS       fp9=fp0,fp4,fp30,fcr
  118| 001828 qvfre    10804030   1     QVFRE     fp4=fp8
  117| 00182C fmsub    FC670338   1     FMS       fp3=fp0,fp7,fp12,fcr
  117| 001830 fnmsub   FD7CE77C   2     FNMS      fp11=fp28,fp28,fp29,fcr
  117| 001834 stfd     D9440010   1     STFL      dx2ai(gr4,16)=fp10
  118| 001838 fmsub    FFA600B8   1     FMS       fp29=fp0,fp6,fp2,fcr
  118| 00183C fnmsub   FFDEF27C   2     FNMS      fp30=fp30,fp30,fp9,fcr
  118| 001840 lfd      C9250008   1     LFL       fp9=dx2b(gr5,8)
  117| 001844 fnmsub   FD4C60FC   1     FNMS      fp10=fp12,fp12,fp3,fcr
  117| 001848 fmsub    FF8502F8   2     FMS       fp28=fp0,fp5,fp11,fcr
  117| 00184C qvfre    10600830   1     QVFRE     fp3=fp1
  118| 001850 fmsub    FDA80138   1     FMS       fp13=fp0,fp8,fp4,fcr
  118| 001854 fnmsub   FD82177C   2     FNMS      fp12=fp2,fp2,fp29,fcr
  118| 001858 stfd     DBC60010   1     STFL      dx2bi(gr6,16)=fp30
  117| 00185C fmsub    FCA702B8   1     FMS       fp5=fp0,fp7,fp10,fcr
  117| 001860 fnmsub   FFCB5F3C   2     FNMS      fp30=fp11,fp11,fp28,fcr
  117| 001864 lfd      C9630010   2     LFL       fp11=dx2a(gr3,16)
  118| 001868 fnmsub   FDA4237C   1     FNMS      fp13=fp4,fp4,fp13,fcr
  118| 00186C fmsub    FC860338   2     FMS       fp4=fp0,fp6,fp12,fcr
  118| 001870 qvfre    10404830   1     QVFRE     fp2=fp9
  117| 001874 fmsub    FFA100F8   1     FMS       fp29=fp0,fp1,fp3,fcr
  117| 001878 fnmsub   FCAA517C   2     FNMS      fp5=fp10,fp10,fp5,fcr
  117| 00187C stfd     DBC40018   1     STFL      dx2ai(gr4,24)=fp30
  118| 001880 fmsub    FCC80378   1     FMS       fp6=fp0,fp8,fp13,fcr
  118| 001884 fnmsub   FFCC613C   2     FNMS      fp30=fp12,fp12,fp4,fcr
  118| 001888 lfd      C8850010   1     LFL       fp4=dx2b(gr5,16)
  117| 00188C fnmsub   FD431F7C   1     FNMS      fp10=fp3,fp3,fp29,fcr
  117| 001890 fmsub    FFA70178   2     FMS       fp29=fp0,fp7,fp5,fcr
  117| 001894 qvfre    11805830   1     QVFRE     fp12=fp11
  118| 001898 fmsub    FC6900B8   1     FMS       fp3=fp0,fp9,fp2,fcr
  118| 00189C fnmsub   FCCD69BC   2     FNMS      fp6=fp13,fp13,fp6,fcr
  118| 0018A0 stfd     DBC60018   1     STFL      dx2bi(gr6,24)=fp30
  117| 0018A4 fmsub    FCE102B8   1     FMS       fp7=fp0,fp1,fp10,fcr
  117| 0018A8 fnmsub   FDA52F7C   2     FNMS      fp13=fp5,fp5,fp29,fcr
  117| 0018AC lfd      C8A30018   2     LFL       fp5=dx2a(gr3,24)
  118| 0018B0 fnmsub   FC4210FC   1     FNMS      fp2=fp2,fp2,fp3,fcr
  118| 0018B4 fmsub    FFA801B8   2     FMS       fp29=fp0,fp8,fp6,fcr
  118| 0018B8 qvfre    10602030   1     QVFRE     fp3=fp4
  117| 0018BC fmsub    FD0B0338   1     FMS       fp8=fp0,fp11,fp12,fcr
  117| 0018C0 fnmsub   FCEA51FC   2     FNMS      fp7=fp10,fp10,fp7,fcr
  117| 0018C4 stfdu    DDA40020   2     STFDU     gr4,dx2ai(gr4,32)=fp13
  118| 0018C8 fmsub    FFC900B8   1     FMS       fp30=fp0,fp9,fp2,fcr
  118| 0018CC fnmsub   FD46377C   2     FNMS      fp10=fp6,fp6,fp29,fcr
  118| 0018D0 lfd      C8C50018   1     LFL       fp6=dx2b(gr5,24)
  117| 0018D4 fnmsub   FD0C623C   1     FNMS      fp8=fp12,fp12,fp8,fcr
  117| 0018D8 fmsub    FFA101F8   2     FMS       fp29=fp0,fp1,fp7,fcr
  117| 0018DC qvfre    11802830   1     QVFRE     fp12=fp5
  118| 0018E0 fmsub    FDA400F8   1     FMS       fp13=fp0,fp4,fp3,fcr
  118| 0018E4 fnmsub   FC4217BC   2     FNMS      fp2=fp2,fp2,fp30,fcr
  118| 0018E8 stfdu    DD460020   2     STFDU     gr6,dx2bi(gr6,32)=fp10
  117| 0018EC fmsub    FC2B0238   1     FMS       fp1=fp0,fp11,fp8,fcr
  117| 0018F0 fnmsub   FD473F7C   2     FNMS      fp10=fp7,fp7,fp29,fcr
  117| 0018F4 lfdu     CCE30020   2     LFDU      fp7,gr3=dx2a(gr3,32)
  118| 0018F8 fnmsub   FC631B7C   1     FNMS      fp3=fp3,fp3,fp13,fcr
  118| 0018FC fmsub    FFC900B8   2     FMS       fp30=fp0,fp9,fp2,fcr
  118| 001900 qvfre    11203030   1     QVFRE     fp9=fp6
  117| 001904 fmsub    FDA50338   1     FMS       fp13=fp0,fp5,fp12,fcr
  117| 001908 fnmsub   FC28407C   2     FNMS      fp1=fp8,fp8,fp1,fcr
  117| 00190C stfd     D9440008   1     STFL      dx2ai(gr4,8)=fp10
  118| 001910 fmsub    FD4400F8   1     FMS       fp10=fp0,fp4,fp3,fcr
  118| 001914 fnmsub   FC4217BC   2     FNMS      fp2=fp2,fp2,fp30,fcr
  118| 001918 lfdu     CD050020   1     LFDU      fp8,gr5=dx2b(gr5,32)
  117| 00191C fnmsub   FF8C637C   1     FNMS      fp28=fp12,fp12,fp13,fcr
  117| 001920 fmsub    FD6B0078   2     FMS       fp11=fp0,fp11,fp1,fcr
  117| 001924 qvfre    11803830   1     QVFRE     fp12=fp7
  118| 001928 fmsub    FF460278   1     FMS       fp26=fp0,fp6,fp9,fcr
  118| 00192C fnmsub   FFC31ABC   2     FNMS      fp30=fp3,fp3,fp10,fcr
  118| 001930 stfd     D8460008   1     STFL      dx2bi(gr6,8)=fp2
  117| 001934 fmsub    FFA50738   1     FMS       fp29=fp0,fp5,fp28,fcr
  117| 001938 fnmsub   FD410AFC   2     FNMS      fp10=fp1,fp1,fp11,fcr
    0| 00193C bc       4200FEE0   1     BCT       ctr=CL.262,taken=100%(100,0)
    0|                              CL.261:
  118| 001940 qvfre    10204030   1     QVFRE     fp1=fp8
  117| 001944 stfd     D9440010   1     STFL      dx2ai(gr4,16)=fp10
  118| 001948 fmsub    FC8407B8   1     FMS       fp4=fp0,fp4,fp30,fcr
  117| 00194C fmsub    FC470338   2     FMS       fp2=fp0,fp7,fp12,fcr
  118| 001950 fnmsub   FC694EBC   2     FNMS      fp3=fp9,fp9,fp26,fcr
  117| 001954 fnmsub   FD3CE77C   2     FNMS      fp9=fp28,fp28,fp29,fcr
  118| 001958 fmsub    FD480078   2     FMS       fp10=fp0,fp8,fp1,fcr
  118| 00195C fnmsub   FC9EF13C   2     FNMS      fp4=fp30,fp30,fp4,fcr
  117| 001960 fnmsub   FC4C60BC   2     FNMS      fp2=fp12,fp12,fp2,fcr
  118| 001964 fmsub    FD6600F8   2     FMS       fp11=fp0,fp6,fp3,fcr
  117| 001968 fmsub    FCA50278   2     FMS       fp5=fp0,fp5,fp9,fcr
  118| 00196C fnmsub   FC210ABC   2     FNMS      fp1=fp1,fp1,fp10,fcr
  118| 001970 stfd     D8860010   1     STFL      dx2bi(gr6,16)=fp4
  117| 001974 fmsub    FD4700B8   1     FMS       fp10=fp0,fp7,fp2,fcr
  118| 001978 fnmsub   FC631AFC   2     FNMS      fp3=fp3,fp3,fp11,fcr
  118| 00197C fmsub    FC880078   2     FMS       fp4=fp0,fp8,fp1,fcr
  117| 001980 fnmsub   FCA9497C   2     FNMS      fp5=fp9,fp9,fp5,fcr
  117| 001984 fnmsub   FC4212BC   2     FNMS      fp2=fp2,fp2,fp10,fcr
  118| 001988 fmsub    FCC600F8   2     FMS       fp6=fp0,fp6,fp3,fcr
  118| 00198C fnmsub   FC21093C   2     FNMS      fp1=fp1,fp1,fp4,fcr
  117| 001990 stfd     D8A40018   1     STFL      dx2ai(gr4,24)=fp5
  117| 001994 fmsub    FC8700B8   1     FMS       fp4=fp0,fp7,fp2,fcr
  118| 001998 fnmsub   FC6319BC   2     FNMS      fp3=fp3,fp3,fp6,fcr
  118| 00199C fmsub    FC080078   2     FMS       fp0=fp0,fp8,fp1,fcr
  117| 0019A0 fnmsub   FC42113C   2     FNMS      fp2=fp2,fp2,fp4,fcr
  118| 0019A4 stfd     D8660018   1     STFL      dx2bi(gr6,24)=fp3
  118| 0019A8 fnmsub   FC01083C   1     FNMS      fp0=fp1,fp1,fp0,fcr
  117| 0019AC stfdu    DC440020   2     STFDU     gr4,dx2ai(gr4,32)=fp2
  118| 0019B0 stfdu    DC060020   1     STFDU     gr6,dx2bi(gr6,32)=fp0
    0| 0019B4 b        4BFFF754   1     B         CL.47,-1
    0|                              CL.423:
   39| 0019B8 lfd      C8030040   1     LFL       fp0=<s744:d64:l8>(gr3,64)
   39| 0019BC fcmpu    FC1F0000   1     CFL       cr0=fp31,fp0
   39| 0019C0 bc       4082F430   1     BF        CL.2,cr0,0x80/feq,taken=60%(60,40)
   39| 0019C4 lfd      C8030048   1     LFL       fp0=<s744:d72:l8>(gr3,72)
   39| 0019C8 fcmpu    FC1F0000   1     CFL       cr0=fp31,fp0
   39| 0019CC bc       4082F424   1     BF        CL.2,cr0,0x80/feq,taken=70%(70,30)
  144| 0019D0 lfd      CBE102B8   1     LFL       fp31=#stack(gr1,696)
  144| 0019D4 addi     382102C0   1     AI        gr1=gr1,704
  144| 0019D8 bclr     4E800020   1     BA        lr
     |               Tag Table
     | 0019DC        00000000 00012203 88120000 000019DC
     |               Instruction count         1655
     |               Straight-line exec time   2027
     |               Constant Area
     | 000000        00000000 49424D20 2B617F7D 4ED8C33E 3F800000 3E99999A

 
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              NODIRECTSTORAG  ESCAPE          I4
         INLGLUE         NOLIBESSL       NOLIBPOSIX      OBJECT
         SWAPOMP         THREADED        UNWIND          ZEROSIZE
  
         ==  Options Of Integer Type ==
         ALIAS_SIZE(65536)     MAXMEM(-1)            OPTIMIZE(3)
         SPILLSIZE(512)        STACKTEMP(0)
  
         ==  Options of Integer and Character Type ==
         CACHE(LEVEL(1),TYPE(I),ASSOC(4),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(I),ASSOC(16),COST(80),LINE(128))
         CACHE(LEVEL(1),TYPE(D),ASSOC(8),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(D),ASSOC(16),COST(80),LINE(128))
         INLINE(NOAUTO,LEVEL(5))
         HOT(FASTMATH,LEVEL(0))
         SIMD(AUTO)
  
         ==  Options Of Character Type  ==
         64()                  ALIAS(STD,NOINTPTR)   ALIGN(BINDC(LINUXPPC),STRUCT(NATURAL))
         ARCH(QP)              AUTODBL(NONE)         DESCRIPTOR(V1)
         DIRECTIVE(IBM*,IBMT)  ENUM()                FLAG(I,I)
         FLOAT(MAF,FOLD,RSQRT,FLTINT)
         FREE(F90)             GNU_VERSION(DOT_TRIPLE)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LIST()                LANGLVL(EXTENDED)     REALSIZE(4)
         REPORT(HOTLIST)       STRICT(NONE,NOPRECISION,NOEXCEPTIONS,NOIEEEFP,NONANS,NOINFINITIES,NOSUBNORMALS,NOZEROSIGNS,NOOPERATIONPRECISION,ORDER,NOLIBRARY,NOCONSTRUCTCOPY,NOVECTORPRECISION)
         TUNE(QP)              UNROLL(AUTO)          XFLAG()
         XLF2003(NOPOLYMORPHIC,NOBOZLITARGS,NOSIGNDZEROINTR,NOSTOPEXCEPT,NOVOLATILE,NOAUTOREALLOC,OLDNANINF)
         XLF2008(NOCHECKPRESENCE)
         XLF77(LEADZERO,BLANKPAD)
         XLF90(SIGNEDZERO,AUTODEALLOC)
  
>>>>> SOURCE SECTION <<<<<
** scopy   === End of Compilation 2 ===
 
>>>>> LOOP TRANSFORMATION SECTION <<<<<


1586-540 (I) Loop (loop index 1) at newgrid.f90 <line 170> was not SIMD vectorized because it contains memory references ((double *)((char *).sy  + -8ll))->sy[][(long long) iy + (long long) .incy->incy * $$CIV2] = ((double *)((char *).sx  + -8ll))->sx[][(long long) ix + (long long) .incx->incx * $$CIV2]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 1) at newgrid.f90 <line 171> was not SIMD vectorized because it contains memory references ((char *).sy  + -8ll + (8ll)*((long long) iy + (long long) .incy->incy * $$CIV2)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 1) at newgrid.f90 <line 171> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 1) at newgrid.f90 <line 171> was not SIMD vectorized because it contains non-stride-one store references ((char *).sy  + -8ll + (8ll)*((long long) iy + (long long) .incy->incy * $$CIV2)).
1586-550 (I) Loop (loop index 2) at newgrid.f90 <line 184> was not SIMD vectorized because it is not profitable to vectorize.
1586-554 (I) Loop (loop index 2) at newgrid.f90 <line 185> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-535 (I) Loop (loop index 3) at newgrid.f90 <line 189> was not SIMD vectorized because the aliasing-induced dependence prevents SIMD vectorization.
1586-540 (I) Loop (loop index 3) at newgrid.f90 <line 189> was not SIMD vectorized because it contains memory references ((double *)((char *).sy  + -8ll))->sy[][(long long) (7 + ((int) $$CIV1 * 7 + .n->n % 7))] = ((double *)((char *).sx  + -8ll))->sx[][(long long) (7 + ((int) $$CIV1 * 7 + .n->n % 7))]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 3) at newgrid.f90 <line 189> was not SIMD vectorized because it contains memory references ((double *)((char *).sy  + -8ll))->sy[][(long long) (6 + ((int) $$CIV1 * 7 + .n->n % 7))] = ((double *)((char *).sx  + -8ll))->sx[][(long long) (6 + ((int) $$CIV1 * 7 + .n->n % 7))]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 3) at newgrid.f90 <line 189> was not SIMD vectorized because it contains memory references ((double *)((char *).sy  + -8ll))->sy[][(long long) (4 + ((int) $$CIV1 * 7 + .n->n % 7))] = ((double *)((char *).sx  + -8ll))->sx[][(long long) (4 + ((int) $$CIV1 * 7 + .n->n % 7))]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 3) at newgrid.f90 <line 189> was not SIMD vectorized because it contains memory references ((double *)((char *).sy  + -8ll))->sy[][(long long) (5 + ((int) $$CIV1 * 7 + .n->n % 7))] = ((double *)((char *).sx  + -8ll))->sx[][(long long) (5 + ((int) $$CIV1 * 7 + .n->n % 7))]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 3) at newgrid.f90 <line 189> was not SIMD vectorized because it contains memory references ((double *)((char *).sy  + -8ll))->sy[][(long long) (2 + ((int) $$CIV1 * 7 + .n->n % 7))] = ((double *)((char *).sx  + -8ll))->sx[][(long long) (2 + ((int) $$CIV1 * 7 + .n->n % 7))]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 3) at newgrid.f90 <line 189> was not SIMD vectorized because it contains memory references ((double *)((char *).sy  + -8ll))->sy[][(long long) (1 + ((int) $$CIV1 * 7 + .n->n % 7))] = ((double *)((char *).sx  + -8ll))->sx[][(long long) (1 + ((int) $$CIV1 * 7 + .n->n % 7))]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 3) at newgrid.f90 <line 189> was not SIMD vectorized because it contains memory references ((double *)((char *).sy  + -8ll))->sy[][(long long) (3 + ((int) $$CIV1 * 7 + .n->n % 7))] = ((double *)((char *).sx  + -8ll))->sx[][(long long) (3 + ((int) $$CIV1 * 7 + .n->n % 7))]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 3) at newgrid.f90 <line 196> was not SIMD vectorized because it contains memory references ((char *).sy  + -8ll + (8ll)*((long long) (7 + ((int) $$CIV1 * 7 + .n->n % 7)))) with non-vectorizable strides.
1586-554 (I) Loop (loop index 3) at newgrid.f90 <line 196> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 3) at newgrid.f90 <line 196> was not SIMD vectorized because it contains non-stride-one store references ((char *).sy  + -8ll + (8ll)*((long long) (7 + ((int) $$CIV1 * 7 + .n->n % 7)))).
1586-540 (I) Loop (loop index 3) at newgrid.f90 <line 195> was not SIMD vectorized because it contains memory references ((char *).sy  + -8ll + (8ll)*((long long) (6 + ((int) $$CIV1 * 7 + .n->n % 7)))) with non-vectorizable strides.
1586-554 (I) Loop (loop index 3) at newgrid.f90 <line 195> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 3) at newgrid.f90 <line 195> was not SIMD vectorized because it contains non-stride-one store references ((char *).sy  + -8ll + (8ll)*((long long) (6 + ((int) $$CIV1 * 7 + .n->n % 7)))).
1586-540 (I) Loop (loop index 3) at newgrid.f90 <line 193> was not SIMD vectorized because it contains memory references ((char *).sy  + -8ll + (8ll)*((long long) (4 + ((int) $$CIV1 * 7 + .n->n % 7)))) with non-vectorizable strides.
1586-554 (I) Loop (loop index 3) at newgrid.f90 <line 193> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 3) at newgrid.f90 <line 193> was not SIMD vectorized because it contains non-stride-one store references ((char *).sy  + -8ll + (8ll)*((long long) (4 + ((int) $$CIV1 * 7 + .n->n % 7)))).
1586-540 (I) Loop (loop index 3) at newgrid.f90 <line 194> was not SIMD vectorized because it contains memory references ((char *).sy  + -8ll + (8ll)*((long long) (5 + ((int) $$CIV1 * 7 + .n->n % 7)))) with non-vectorizable strides.
1586-554 (I) Loop (loop index 3) at newgrid.f90 <line 194> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 3) at newgrid.f90 <line 194> was not SIMD vectorized because it contains non-stride-one store references ((char *).sy  + -8ll + (8ll)*((long long) (5 + ((int) $$CIV1 * 7 + .n->n % 7)))).
1586-540 (I) Loop (loop index 3) at newgrid.f90 <line 191> was not SIMD vectorized because it contains memory references ((char *).sy  + -8ll + (8ll)*((long long) (2 + ((int) $$CIV1 * 7 + .n->n % 7)))) with non-vectorizable strides.
1586-554 (I) Loop (loop index 3) at newgrid.f90 <line 191> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 3) at newgrid.f90 <line 191> was not SIMD vectorized because it contains non-stride-one store references ((char *).sy  + -8ll + (8ll)*((long long) (2 + ((int) $$CIV1 * 7 + .n->n % 7)))).
1586-540 (I) Loop (loop index 3) at newgrid.f90 <line 190> was not SIMD vectorized because it contains memory references ((char *).sy  + -8ll + (8ll)*((long long) (1 + ((int) $$CIV1 * 7 + .n->n % 7)))) with non-vectorizable strides.
1586-554 (I) Loop (loop index 3) at newgrid.f90 <line 190> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 3) at newgrid.f90 <line 190> was not SIMD vectorized because it contains non-stride-one store references ((char *).sy  + -8ll + (8ll)*((long long) (1 + ((int) $$CIV1 * 7 + .n->n % 7)))).
1586-540 (I) Loop (loop index 3) at newgrid.f90 <line 192> was not SIMD vectorized because it contains memory references ((char *).sy  + -8ll + (8ll)*((long long) (3 + ((int) $$CIV1 * 7 + .n->n % 7)))) with non-vectorizable strides.
1586-554 (I) Loop (loop index 3) at newgrid.f90 <line 192> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 3) at newgrid.f90 <line 192> was not SIMD vectorized because it contains non-stride-one store references ((char *).sy  + -8ll + (8ll)*((long long) (3 + ((int) $$CIV1 * 7 + .n->n % 7)))).
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"3">. Total number of the innermost loops SIMD vectorized <"0">.


   146|         SUBROUTINE scopy (n, sx, incx, sy, incy)
   160|           IF (.NOT.n <= 0) THEN
   161|             IF ((incx == 1)) THEN
                      IF (incy == 1) GOTO lab_5
   182|               lab_5
   183|               IF (0 == MOD(n, 7)) GOTO lab_13
   184|               IF (.NOT.(int(MOD(n, 7)) > 0)) GOTO lab_25
                      $$CIV0 = 0
       Id=2           DO $$CIV0 = $$CIV0, int(int(MOD(n, 7)))-1
   185|                 sy($$CIV0 + 1) = sx($$CIV0 + 1)
   186|               ENDDO
                    ENDIF
   187|             IF (n < 7) GOTO lab_29
   188|           ENDIF
   189|           IF (.NOT.((7 + (int(n) - int((MOD(n, 7) + 1)))) / 7 > 0)) &
                &   GOTO lab_27
                  $$CIV1 = 0
       Id=3       DO $$CIV1 = $$CIV1, int(((7 + (int(n) - int((MOD(n, 7) + 1))&
                &     )) / 7))-1
   190|             sy(int((1 + (int($$CIV1) * 7 + MOD(n, 7))))) = sx(int((1 + (&
                &     int($$CIV1) * 7 + MOD(n, 7)))))
   191|             sy(int((2 + (int($$CIV1) * 7 + MOD(n, 7))))) = sx(int((2 + (&
                &     int($$CIV1) * 7 + MOD(n, 7)))))
   192|             sy(int((3 + (int($$CIV1) * 7 + MOD(n, 7))))) = sx(int((3 + (&
                &     int($$CIV1) * 7 + MOD(n, 7)))))
   193|             sy(int((4 + (int($$CIV1) * 7 + MOD(n, 7))))) = sx(int((4 + (&
                &     int($$CIV1) * 7 + MOD(n, 7)))))
   194|             sy(int((5 + (int($$CIV1) * 7 + MOD(n, 7))))) = sx(int((5 + (&
                &     int($$CIV1) * 7 + MOD(n, 7)))))
   195|             sy(int((6 + (int($$CIV1) * 7 + MOD(n, 7))))) = sx(int((6 + (&
                &     int($$CIV1) * 7 + MOD(n, 7)))))
   196|             sy(int((7 + (int($$CIV1) * 7 + MOD(n, 7))))) = sx(int((7 + (&
                &     int($$CIV1) * 7 + MOD(n, 7)))))
   197|           ENDDO
   161|         ENDIF
   166|         ix = 1
   167|         iy = 1
   168|         IF ((incx < 0)) THEN
                  ix = (1 - n) * incx + 1
                ENDIF
   169|         IF ((incy < 0)) THEN
                  iy = (1 - n) * incy + 1
                ENDIF
   170|         IF ((int(n) > 0)) THEN
                  $$CIV2 = 0
       Id=1       DO $$CIV2 = $$CIV2, int(int(n))-1
   171|             sy(int(iy) + int(incy) * $$CIV2) = sx(int(ix) + int(incx) * &
                &     $$CIV2)
   174|           ENDDO
                ENDIF
   175|         GOTO lab_29
   197|         lab_27
   199|         lab_29
                RETURN
              END SUBROUTINE scopy


Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
         0           171                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).sy  + -8ll + (8ll)*((long 
                                          long) iy + (long long) .incy->incy * $$CIV2)) with  
                                          non-vectorizable strides.
         0           171                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           171                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *).sy  + -8ll 
                                          + (8ll)*((long long) iy + (long long) .incy->incy * 
                                          $$CIV2)).
         0           184             2    Loop was not SIMD vectorized because it is not 
                                          profitable to vectorize.
         0           185                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           189             3    Loop was not SIMD vectorized because the 
                                          aliasing-induced dependence  prevents SIMD 
                                          vectorization.
         0           190                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).sy  + -8ll + (8ll)*((long 
                                          long) (1 + ((int) $$CIV1 * 7 + .n->n % 7)))) with  
                                          non-vectorizable strides.
         0           190                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           190                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *).sy  + -8ll 
                                          + (8ll)*((long long) (1 + ((int) $$CIV1 * 7 + .n->n % 
                                          7)))).
         0           191                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).sy  + -8ll + (8ll)*((long 
                                          long) (2 + ((int) $$CIV1 * 7 + .n->n % 7)))) with  
                                          non-vectorizable strides.
         0           191                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           191                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *).sy  + -8ll 
                                          + (8ll)*((long long) (2 + ((int) $$CIV1 * 7 + .n->n % 
                                          7)))).
         0           192                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).sy  + -8ll + (8ll)*((long 
                                          long) (3 + ((int) $$CIV1 * 7 + .n->n % 7)))) with  
                                          non-vectorizable strides.
         0           192                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           192                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *).sy  + -8ll 
                                          + (8ll)*((long long) (3 + ((int) $$CIV1 * 7 + .n->n % 
                                          7)))).
         0           193                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).sy  + -8ll + (8ll)*((long 
                                          long) (4 + ((int) $$CIV1 * 7 + .n->n % 7)))) with  
                                          non-vectorizable strides.
         0           193                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           193                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *).sy  + -8ll 
                                          + (8ll)*((long long) (4 + ((int) $$CIV1 * 7 + .n->n % 
                                          7)))).
         0           194                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).sy  + -8ll + (8ll)*((long 
                                          long) (5 + ((int) $$CIV1 * 7 + .n->n % 7)))) with  
                                          non-vectorizable strides.
         0           194                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           194                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *).sy  + -8ll 
                                          + (8ll)*((long long) (5 + ((int) $$CIV1 * 7 + .n->n % 
                                          7)))).
         0           195                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).sy  + -8ll + (8ll)*((long 
                                          long) (6 + ((int) $$CIV1 * 7 + .n->n % 7)))) with  
                                          non-vectorizable strides.
         0           195                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           195                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *).sy  + -8ll 
                                          + (8ll)*((long long) (6 + ((int) $$CIV1 * 7 + .n->n % 
                                          7)))).
         0           196                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).sy  + -8ll + (8ll)*((long 
                                          long) (7 + ((int) $$CIV1 * 7 + .n->n % 7)))) with  
                                          non-vectorizable strides.
         0           196                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           196                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *).sy  + -8ll 
                                          + (8ll)*((long long) (7 + ((int) $$CIV1 * 7 + .n->n % 
                                          7)))).


   146|         SUBROUTINE scopy (n, sx, incx, sy, incy)
   160|           IF (.NOT.n <= 0) THEN
   161|             IF ((incx == 1)) THEN
                      IF (incy == 1) GOTO lab_5
   182|               lab_5
   183|               IF (0 == MOD(n, 7)) GOTO lab_13
   184|               IF (.NOT.(int(MOD(n, 7)) > 0)) GOTO lab_25
                      $$CIV0 = 0
       Id=2           DO $$CIV0 = $$CIV0, int(int(MOD(n, 7)))-1
   185|                 sy($$CIV0 + 1) = sx($$CIV0 + 1)
   186|               ENDDO
                    ENDIF
   187|             IF (n < 7) GOTO lab_29
   188|           ENDIF
   189|           IF (.NOT.((7 + (int(n) - int((MOD(n, 7) + 1)))) / 7 > 0)) &
                &   GOTO lab_27
                  $$CIV1 = 0
       Id=3       DO $$CIV1 = $$CIV1, int(((7 + (int(n) - int((MOD(n, 7) + 1))&
                &     )) / 7))-1
   190|             sy(int((1 + (int($$CIV1) * 7 + MOD(n, 7))))) = sx(int((1 + (&
                &     int($$CIV1) * 7 + MOD(n, 7)))))
   191|             sy(int((2 + (int($$CIV1) * 7 + MOD(n, 7))))) = sx(int((2 + (&
                &     int($$CIV1) * 7 + MOD(n, 7)))))
   192|             sy(int((3 + (int($$CIV1) * 7 + MOD(n, 7))))) = sx(int((3 + (&
                &     int($$CIV1) * 7 + MOD(n, 7)))))
   193|             sy(int((4 + (int($$CIV1) * 7 + MOD(n, 7))))) = sx(int((4 + (&
                &     int($$CIV1) * 7 + MOD(n, 7)))))
   194|             sy(int((5 + (int($$CIV1) * 7 + MOD(n, 7))))) = sx(int((5 + (&
                &     int($$CIV1) * 7 + MOD(n, 7)))))
   195|             sy(int((6 + (int($$CIV1) * 7 + MOD(n, 7))))) = sx(int((6 + (&
                &     int($$CIV1) * 7 + MOD(n, 7)))))
   196|             sy(int((7 + (int($$CIV1) * 7 + MOD(n, 7))))) = sx(int((7 + (&
                &     int($$CIV1) * 7 + MOD(n, 7)))))
   197|           ENDDO
   161|         ENDIF
   166|         ix = 1
   167|         iy = 1
   168|         IF ((incx < 0)) THEN
                  ix = (1 - n) * incx + 1
                ENDIF
   169|         IF ((incy < 0)) THEN
                  iy = (1 - n) * incy + 1
                ENDIF
   170|         IF ((int(n) > 0)) THEN
                  $$CIV2 = 0
       Id=1       DO $$CIV2 = $$CIV2, int(int(n))-1
   171|             sy(int(iy) + int(incy) * $$CIV2) = sx(int(ix) + int(incx) * &
                &     $$CIV2)
   174|           ENDDO
                ENDIF
   175|         GOTO lab_29
   197|         lab_27
   199|         lab_29
                RETURN
              END SUBROUTINE scopy

 
 
>>>>> OBJECT SECTION <<<<<
 GPR's set/used:   s-us ssss ssss ----  ---- ---- ---- ----
 FPR's set/used:   ssss sss- ---- ----  ---- ---- ---- ----
 CCR's set/used:   ss-- ----
     | 000000                           PDEF     scopy
  146|                                  PROC      .n,.sx,.incx,.sy,.incy,gr3-gr7
  160| 000000 lwz      80030000   1     L4Z       gr0=n(gr3,0)
  166| 000004 addi     39000001   1     LI        gr8=1
  167| 000008 addi     39200001   1     LI        gr9=1
  160| 00000C cmpwi    2C000000   1     C4        cr0=gr0,0
  160| 000010 extsw    7C0307B4   1     EXTS4     gr3=gr0
  160| 000014 bclr     4C810020   1     BF        CL.30,cr0,0x2/gt,taken=30%(30,70)
  161| 000018 lwz      80A50000   1     L4Z       gr5=incx(gr5,0)
    0| 00001C lwz      80E70000   1     L4Z       gr7=incy(gr7,0)
    0| 000020 rldicl   786AE8C2   1     SRL8      gr10=gr3,3
    0| 000024 cmpdi    2CAA0000   1     C8        cr1=gr10,0
  161| 000028 cmpwi    2C050001   1     C4        cr0=gr5,1
  161| 00002C bc       4082000C   1     BF        CL.3,cr0,0x4/eq,taken=50%(0,0)
  161| 000030 cmpwi    2C070001   1     C4        cr0=gr7,1
  161| 000034 bc       418200E0   1     BT        CL.5,cr0,0x4/eq,taken=50%(0,0)
  161|                              CL.3:
    0| 000038 extsw    7CA307B4   1     EXTS4     gr3=gr5
  168| 00003C cmpwi    2C050000   1     C4        cr0=gr5,0
  171| 000040 rldicr   78631F24   1     SLL8      gr3=gr3,3
  168| 000044 bc       40800010   1     BF        CL.6,cr0,0x1/lt,taken=60%(60,40)
  168| 000048 subfic   21000001   1     SFI       gr8=1,gr0,ca"
  168| 00004C mulld    7CA541D2   1     M         gr5=gr5,gr8
  168| 000050 addi     39050001   1     AI        gr8=gr5,1
  168|                              CL.6:
  171| 000054 subfic   20A3FFF8   1     SFI       gr5=-8,gr3,ca"
    0| 000058 extsw    7D0807B4   1     EXTS4     gr8=gr8
  171| 00005C add      7C842A14   1     A         gr4=gr4,gr5
  171| 000060 rldicr   79051F24   1     SLL8      gr5=gr8,3
  169| 000064 cmpwi    2C070000   1     C4        cr0=gr7,0
  171| 000068 add      7C842A14   1     A         gr4=gr4,gr5
  169| 00006C bc       41800098   1     BT        CL.179,cr0,0x1/lt,taken=40%(40,60)
  169|                              CL.7:
    0| 000070 extsw    7CE507B4   1     EXTS4     gr5=gr7
    0| 000074 extsw    7D2707B4   1     EXTS4     gr7=gr9
  171| 000078 rldicr   78A51F24   1     SLL8      gr5=gr5,3
    0| 00007C andi.    70000007   1     RN4_R     gr0,cr0=gr0,0,0x7
  171| 000080 subfic   2105FFF8   1     SFI       gr8=-8,gr5,ca"
  171| 000084 rldicr   78E71F24   1     SLL8      gr7=gr7,3
  171| 000088 add      7CC64214   1     A         gr6=gr6,gr8
  171| 00008C add      7CC63A14   1     A         gr6=gr6,gr7
    0| 000090 bc       41820028   1     BT        CL.80,cr0,0x4/eq,taken=50%(0,0)
    0| 000094 mtspr    7C0903A6   1     LCTR      ctr=gr0
  171| 000098 lfdux    7C041CEE   1     LFDU      fp0,gr4=sx[](gr4,gr3,0)
    0| 00009C bc       42400014   1     BCF       ctr=CL.98,taken=0%(0,100)
    0|                              CL.99:
  171| 0000A0 lfdux    7C241CEE   1     LFDU      fp1,gr4=sx[](gr4,gr3,0)
  171| 0000A4 stfdux   7C062DEE   1     STFDU     gr6,sy[](gr6,gr5,0)=fp0
    0| 0000A8 fmr      FC000890   1     LRFL      fp0=fp1
    0| 0000AC bc       4200FFF4   1     BCT       ctr=CL.99,taken=100%(100,0)
    0|                              CL.98:
  171| 0000B0 stfdux   7C062DEE   1     STFDU     gr6,sy[](gr6,gr5,0)=fp0
    0| 0000B4 bclr     4D860020   1     BT        CL.30,cr1,0x4/eq,taken=20%(20,80)
    0|                              CL.80:
    0| 0000B8 mtspr    7D4903A6   1     LCTR      ctr=gr10
    0|                              CL.100:
  171| 0000BC lfdux    7C041CEE   1     LFDU      fp0,gr4=sx[](gr4,gr3,0)
  171| 0000C0 lfdux    7C241CEE   1     LFDU      fp1,gr4=sx[](gr4,gr3,0)
  171| 0000C4 lfdux    7C441CEE   1     LFDU      fp2,gr4=sx[](gr4,gr3,0)
  171| 0000C8 lfdux    7C641CEE   1     LFDU      fp3,gr4=sx[](gr4,gr3,0)
  171| 0000CC stfdux   7C062DEE   1     STFDU     gr6,sy[](gr6,gr5,0)=fp0
  171| 0000D0 stfdux   7C262DEE   1     STFDU     gr6,sy[](gr6,gr5,0)=fp1
  171| 0000D4 lfdux    7C041CEE   1     LFDU      fp0,gr4=sx[](gr4,gr3,0)
  171| 0000D8 stfdux   7C462DEE   1     STFDU     gr6,sy[](gr6,gr5,0)=fp2
  171| 0000DC lfdux    7C241CEE   1     LFDU      fp1,gr4=sx[](gr4,gr3,0)
  171| 0000E0 stfdux   7C662DEE   1     STFDU     gr6,sy[](gr6,gr5,0)=fp3
  171| 0000E4 stfdux   7C062DEE   1     STFDU     gr6,sy[](gr6,gr5,0)=fp0
  171| 0000E8 lfdux    7C041CEE   1     LFDU      fp0,gr4=sx[](gr4,gr3,0)
  171| 0000EC stfdux   7C262DEE   1     STFDU     gr6,sy[](gr6,gr5,0)=fp1
  171| 0000F0 lfdux    7C241CEE   1     LFDU      fp1,gr4=sx[](gr4,gr3,0)
  171| 0000F4 stfdux   7C062DEE   1     STFDU     gr6,sy[](gr6,gr5,0)=fp0
  171| 0000F8 stfdux   7C262DEE   1     STFDU     gr6,sy[](gr6,gr5,0)=fp1
    0| 0000FC bc       4200FFC0   1     BCT       ctr=CL.100,taken=100%(100,0)
  199|                              CL.30:
  175| 000100 bclr     4E800020   1     BA        lr
    0|                              CL.179:
  169| 000104 subfic   20A00001   1     SFI       gr5=1,gr0,ca"
  169| 000108 mulld    7CA539D2   1     M         gr5=gr5,gr7
  169| 00010C addi     39250001   1     AI        gr9=gr5,1
    0| 000110 b        4BFFFF60   1     B         CL.7,-1
  182|                              CL.5:
  183| 000114 addis    3CA09249   1     LIU       gr5=37449
  183| 000118 rlwinm   54070FFE   1     SRL4      gr7=gr0,31
  183| 00011C addi     38A52493   1     AI        gr5=gr5,9363
  183| 000120 mulhw    7CA02896   0     MULHW     gr5=gr0,gr5
  183| 000124 add      7CA02A14   2     A         gr5=gr0,gr5
  183| 000128 srawi    7CA51670   1     SRA4      gr5=gr5,2,ca"
  183| 00012C add      7CA53A14   1     A         gr5=gr5,gr7
  183| 000130 rldicr   78A71F24   1     SLL8      gr7=gr5,3
  183| 000134 subf     7CA53850   1     S         gr5=gr7,gr5
  183| 000138 subf     7CA50050   1     S         gr5=gr0,gr5
  183| 00013C cmpwi    2C050000   1     C4        cr0=gr5,0
  183| 000140 extsw    7CAB07B4   1     EXTS4     gr11=gr5
  183| 000144 bc       418200DC   1     BT        CL.13,cr0,0x4/eq,taken=50%(0,0)
  184| 000148 bc       408100D0   1     BF        CL.25,cr0,0x2/gt,taken=50%(0,0)
    0| 00014C rldicl   7969E8C2   1     SRL8      gr9=gr11,3
    0| 000150 andi.    70AA0007   1     RN4_R     gr10,cr0=gr5,0,0x7
    0| 000154 cmpdi    2CA90000   1     C8        cr1=gr9,0
  185| 000158 addi     38E4FFF8   1     AI        gr7=gr4,-8
  185| 00015C addi     3906FFF8   1     AI        gr8=gr6,-8
    0| 000160 bc       41820028   1     BT        CL.77,cr0,0x4/eq,taken=50%(0,0)
    0| 000164 mtspr    7D4903A6   1     LCTR      ctr=gr10
  185| 000168 lfdu     CC070008   1     LFDU      fp0,gr7=sx[](gr7,8)
    0| 00016C bc       42400014   1     BCF       ctr=CL.92,taken=0%(0,100)
    0|                              CL.93:
  185| 000170 lfdu     CC270008   1     LFDU      fp1,gr7=sx[](gr7,8)
  185| 000174 stfdu    DC080008   1     STFDU     gr8,sy[](gr8,8)=fp0
    0| 000178 fmr      FC000890   1     LRFL      fp0=fp1
    0| 00017C bc       4200FFF4   1     BCT       ctr=CL.93,taken=100%(100,0)
    0|                              CL.92:
  185| 000180 stfdu    DC080008   1     STFDU     gr8,sy[](gr8,8)=fp0
    0| 000184 bc       41860094   1     BT        CL.25,cr1,0x4/eq,taken=20%(20,80)
    0|                              CL.77:
  185| 000188 lfd      C8070008   1     LFL       fp0=sx[](gr7,8)
  185| 00018C lfd      C8270010   1     LFL       fp1=sx[](gr7,16)
  185| 000190 lfd      C8470018   1     LFL       fp2=sx[](gr7,24)
  185| 000194 lfd      C8670020   1     LFL       fp3=sx[](gr7,32)
  185| 000198 lfd      C8870028   1     LFL       fp4=sx[](gr7,40)
  185| 00019C lfd      C8A70030   1     LFL       fp5=sx[](gr7,48)
    0| 0001A0 mtspr    7D2903A6   1     LCTR      ctr=gr9
  185| 0001A4 lfd      C8C70038   1     LFL       fp6=sx[](gr7,56)
  185| 0001A8 stfd     D8080008   1     STFL      sy[](gr8,8)=fp0
  185| 0001AC stfd     D8280010   1     STFL      sy[](gr8,16)=fp1
  185| 0001B0 stfd     D8480018   1     STFL      sy[](gr8,24)=fp2
  185| 0001B4 stfd     D8680020   1     STFL      sy[](gr8,32)=fp3
  185| 0001B8 stfd     D8880028   1     STFL      sy[](gr8,40)=fp4
  185| 0001BC stfd     D8A80030   1     STFL      sy[](gr8,48)=fp5
  185| 0001C0 lfdu     CC070040   1     LFDU      fp0,gr7=sx[](gr7,64)
    0| 0001C4 bc       4240004C   1     BCF       ctr=CL.94,taken=0%(0,100)
    0| 0001C8 ori      60210000   1     XNOP      
    0|                              CL.95:
  185| 0001CC lfd      C8270008   1     LFL       fp1=sx[](gr7,8)
  185| 0001D0 stfd     D8C80038   1     STFL      sy[](gr8,56)=fp6
  185| 0001D4 lfd      C8470010   1     LFL       fp2=sx[](gr7,16)
  185| 0001D8 stfdu    DC080040   1     STFDU     gr8,sy[](gr8,64)=fp0
  185| 0001DC lfd      C8070018   1     LFL       fp0=sx[](gr7,24)
  185| 0001E0 stfd     D8280008   1     STFL      sy[](gr8,8)=fp1
  185| 0001E4 lfd      C8270020   1     LFL       fp1=sx[](gr7,32)
  185| 0001E8 stfd     D8480010   1     STFL      sy[](gr8,16)=fp2
  185| 0001EC lfd      C8470028   1     LFL       fp2=sx[](gr7,40)
  185| 0001F0 stfd     D8080018   1     STFL      sy[](gr8,24)=fp0
  185| 0001F4 lfd      C8670030   1     LFL       fp3=sx[](gr7,48)
  185| 0001F8 stfd     D8280020   1     STFL      sy[](gr8,32)=fp1
  185| 0001FC lfd      C8C70038   1     LFL       fp6=sx[](gr7,56)
  185| 000200 stfd     D8480028   1     STFL      sy[](gr8,40)=fp2
  185| 000204 lfdu     CC070040   1     LFDU      fp0,gr7=sx[](gr7,64)
  185| 000208 stfd     D8680030   1     STFL      sy[](gr8,48)=fp3
    0| 00020C bc       4200FFC0   1     BCT       ctr=CL.95,taken=100%(100,0)
    0|                              CL.94:
  185| 000210 stfd     D8C80038   1     STFL      sy[](gr8,56)=fp6
  185| 000214 stfdu    DC080040   1     STFDU     gr8,sy[](gr8,64)=fp0
  186|                              CL.25:
  187| 000218 cmpwi    2C000007   1     C4        cr0=gr0,7
  187| 00021C bclr     4D800020   1     BT        CL.30,cr0,0x1/lt,taken=30%(30,70)
  188|                              CL.13:
  188| 000220 ld       E8E20000   1     L8        gr7=.+CONSTANT_AREA(gr2,0)
  188| 000224 addi     38050001   1     AI        gr0=gr5,1
  196| 000228 rldicr   79651F24   1     SLL8      gr5=gr11,3
  188| 00022C extsw    7C0007B4   1     EXTS4     gr0=gr0
  196| 000230 addi     3884FFF8   1     AI        gr4=gr4,-8
  188| 000234 subf     7C601850   1     S         gr3=gr3,gr0
  188| 000238 ld       E8070000   1     L8        gr0=+CONSTANT_AREA(gr7,0)
  188| 00023C addi     38630007   1     AI        gr3=gr3,7
  196| 000240 add      7C842A14   1     A         gr4=gr4,gr5
  188| 000244 rldicl   78670FE0   1     SRL8      gr7=gr3,63
  196| 000248 addi     38C6FFF8   1     AI        gr6=gr6,-8
  188| 00024C mulhd    7C001892   0     MULHD     gr0=gr0,gr3
  196| 000250 add      7C653214   2     A         gr3=gr5,gr6
  188| 000254 sradi    7C000E74   1     SRA8      gr0=gr0,1,ca"
  188| 000258 add      7C003A15   1     A_R       gr0,cr0=gr0,gr7
  189| 00025C bclr     4C810020   1     BF        CL.30,cr0,0x2/gt,taken=20%(20,80)
  190| 000260 lfd      C8040008   1     LFL       fp0=sx[](gr4,8)
  191| 000264 lfd      C8240010   1     LFL       fp1=sx[](gr4,16)
  192| 000268 lfd      C8440018   1     LFL       fp2=sx[](gr4,24)
  193| 00026C lfd      C8640020   1     LFL       fp3=sx[](gr4,32)
  194| 000270 lfd      C8840028   1     LFL       fp4=sx[](gr4,40)
    0| 000274 mtspr    7C0903A6   1     LCTR      ctr=gr0
  195| 000278 lfd      C8A40030   1     LFL       fp5=sx[](gr4,48)
  196| 00027C lfdu     CCC40038   1     LFDU      fp6,gr4=sx[](gr4,56)
  190| 000280 stfd     D8030008   1     STFL      sy[](gr3,8)=fp0
  191| 000284 stfd     D8230010   1     STFL      sy[](gr3,16)=fp1
  192| 000288 stfd     D8430018   1     STFL      sy[](gr3,24)=fp2
  193| 00028C stfd     D8630020   1     STFL      sy[](gr3,32)=fp3
  194| 000290 stfd     D8830028   1     STFL      sy[](gr3,40)=fp4
    0| 000294 bc       4240004C   1     BCF       ctr=CL.96,taken=0%(0,100)
    0| 000298 ori      60210000   1     XNOP      
    0| 00029C ori      60210000   1     XNOP      
    0| 0002A0 ori      60210000   1     XNOP      
    0|                              CL.97:
  190| 0002A4 lfd      C8040008   1     LFL       fp0=sx[](gr4,8)
  195| 0002A8 stfd     D8A30030   1     STFL      sy[](gr3,48)=fp5
  191| 0002AC lfd      C8240010   1     LFL       fp1=sx[](gr4,16)
  196| 0002B0 stfdu    DCC30038   1     STFDU     gr3,sy[](gr3,56)=fp6
  192| 0002B4 lfd      C8440018   1     LFL       fp2=sx[](gr4,24)
  190| 0002B8 stfd     D8030008   1     STFL      sy[](gr3,8)=fp0
  193| 0002BC lfd      C8040020   1     LFL       fp0=sx[](gr4,32)
  191| 0002C0 stfd     D8230010   1     STFL      sy[](gr3,16)=fp1
  194| 0002C4 lfd      C8240028   1     LFL       fp1=sx[](gr4,40)
  192| 0002C8 stfd     D8430018   1     STFL      sy[](gr3,24)=fp2
  195| 0002CC lfd      C8A40030   1     LFL       fp5=sx[](gr4,48)
  193| 0002D0 stfd     D8030020   1     STFL      sy[](gr3,32)=fp0
  196| 0002D4 lfdu     CCC40038   1     LFDU      fp6,gr4=sx[](gr4,56)
  194| 0002D8 stfd     D8230028   1     STFL      sy[](gr3,40)=fp1
    0| 0002DC bc       4200FFC8   1     BCT       ctr=CL.97,taken=100%(100,0)
    0|                              CL.96:
  195| 0002E0 stfd     D8A30030   1     STFL      sy[](gr3,48)=fp5
  196| 0002E4 stfdu    DCC30038   1     STFDU     gr3,sy[](gr3,56)=fp6
    0| 0002E8 b        4BFFFE18   1     B         CL.30,-1
     |               Tag Table
     | 0002EC        00000000 00012200 00000000 000002EC
     |               Instruction count          187
     |               Straight-line exec time    187
     |               Constant Area
     | 000000        49249249 24924925

 
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> FILE TABLE SECTION <<<<<
 
 
                                       FILE CREATION        FROM
FILE NO   FILENAME                    DATE       TIME       FILE    LINE
     0    newgrid.f90                 07/08/15   15:48:24
 
 
>>>>> COMPILATION EPILOGUE SECTION <<<<<
 
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
 
    Source records read.......................................     199
1501-510  Compilation successful for file newgrid.f90.
1501-543  Object file created.

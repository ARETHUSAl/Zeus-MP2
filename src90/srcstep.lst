IBM XL Fortran for Blue Gene, V14.1 (5799-AH1) Version 14.01.0000.0012 --- srcstep.f90 07/08/15 15:48:36
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              NODIRECTSTORAG  ESCAPE          I4
         INLGLUE         NOLIBESSL       NOLIBPOSIX      OBJECT
         SWAPOMP         THREADED        UNWIND          ZEROSIZE
  
         ==  Options Of Integer Type ==
         ALIAS_SIZE(65536)     MAXMEM(-1)            OPTIMIZE(3)
         SPILLSIZE(512)        STACKTEMP(0)
  
         ==  Options of Integer and Character Type ==
         CACHE(LEVEL(1),TYPE(I),ASSOC(4),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(I),ASSOC(16),COST(80),LINE(128))
         CACHE(LEVEL(1),TYPE(D),ASSOC(8),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(D),ASSOC(16),COST(80),LINE(128))
         INLINE(NOAUTO,LEVEL(5))
         HOT(FASTMATH,LEVEL(0))
         SIMD(AUTO)
  
         ==  Options Of Character Type  ==
         64()                  ALIAS(STD,NOINTPTR)   ALIGN(BINDC(LINUXPPC),STRUCT(NATURAL))
         ARCH(QP)              AUTODBL(NONE)         DESCRIPTOR(V1)
         DIRECTIVE(IBM*,IBMT)  ENUM()                FLAG(I,I)
         FLOAT(MAF,FOLD,RSQRT,FLTINT)
         FREE(F90)             GNU_VERSION(DOT_TRIPLE)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LIST()                LANGLVL(EXTENDED)     REALSIZE(4)
         REPORT(HOTLIST)       STRICT(NONE,NOPRECISION,NOEXCEPTIONS,NOIEEEFP,NONANS,NOINFINITIES,NOSUBNORMALS,NOZEROSIGNS,NOOPERATIONPRECISION,ORDER,NOLIBRARY,NOCONSTRUCTCOPY,NOVECTORPRECISION)
         TUNE(QP)              UNROLL(AUTO)          XFLAG()
         XLF2003(NOPOLYMORPHIC,NOBOZLITARGS,NOSIGNDZEROINTR,NOSTOPEXCEPT,NOVOLATILE,NOAUTOREALLOC,OLDNANINF)
         XLF2008(NOCHECKPRESENCE)
         XLF77(LEADZERO,BLANKPAD)
         XLF90(SIGNEDZERO,AUTODEALLOC)
  
>>>>> SOURCE SECTION <<<<<
** srcstep   === End of Compilation 1 ===
 
>>>>> LOOP TRANSFORMATION SECTION <<<<<

1586-534 (I) Loop (loop index 1) at srcstep.f90 <line 154> was not SIMD vectorized because the loop is not the innermost loop.
1586-534 (I) Loop (loop index 2) at srcstep.f90 <line 155> was not SIMD vectorized because the loop is not the innermost loop.
1586-540 (I) Loop (loop index 3) at srcstep.f90 <line 156> was not SIMD vectorized because it contains memory references ((double *)((char *)d-v1%addr  + d-v1%rvo))->v1[].rns15.[(long long) ks + $$CIV2][(long long) js + $$CIV1][(long long) is + $$CIV0] = ((double *)((char *)d-w3dd%addr  + d-w3dd%rvo))->w3dd[].rns16.[(long long) ks + $$CIV2][(long long) js + $$CIV1][(long long) is + $$CIV0]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 3) at srcstep.f90 <line 156> was not SIMD vectorized because it contains memory references ((double *)((char *)d-v3%addr  + d-v3%rvo))->v3[].rns19.[(long long) ks + $$CIV2][(long long) js + $$CIV1][(long long) is + $$CIV0] = ((double *)((char *)d-w3df%addr  + d-w3df%rvo))->w3df[].rns20.[(long long) ks + $$CIV2][(long long) js + $$CIV1][(long long) is + $$CIV0]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 3) at srcstep.f90 <line 156> was not SIMD vectorized because it contains memory references ((double *)((char *)d-v2%addr  + d-v2%rvo))->v2[].rns17.[(long long) ks + $$CIV2][(long long) js + $$CIV1][(long long) is + $$CIV0] = ((double *)((char *)d-w3de%addr  + d-w3de%rvo))->w3de[].rns18.[(long long) ks + $$CIV2][(long long) js + $$CIV1][(long long) is + $$CIV0]; with non-vectorizable strides.
1586-536 (I) Loop (loop index 3) at srcstep.f90 <line 157> was not SIMD vectorized because it contains memory references ((char *)d-v1%addr  + d-v1%rvo + (d-v1%bounds%mult[].off464)*((long long) ks + $$CIV2) + (d-v1%bounds%mult[].off488)*((long long) js + $$CIV1) + (d-v1%bounds%mult[].off512)*((long long) is + $$CIV0)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 3) at srcstep.f90 <line 157> was not SIMD vectorized because it contains memory references ((char *)d-v1%addr  + d-v1%rvo + (d-v1%bounds%mult[].off464)*((long long) ks + $$CIV2) + (d-v1%bounds%mult[].off488)*((long long) js + $$CIV1) + (d-v1%bounds%mult[].off512)*((long long) is + $$CIV0)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 3) at srcstep.f90 <line 157> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 3) at srcstep.f90 <line 157> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-v1%addr  + d-v1%rvo + (d-v1%bounds%mult[].off464)*((long long) ks + $$CIV2) + (d-v1%bounds%mult[].off488)*((long long) js + $$CIV1) + (d-v1%bounds%mult[].off512)*((long long) is + $$CIV0)).
1586-536 (I) Loop (loop index 3) at srcstep.f90 <line 159> was not SIMD vectorized because it contains memory references ((char *)d-v3%addr  + d-v3%rvo + (d-v3%bounds%mult[].off672)*((long long) ks + $$CIV2) + (d-v3%bounds%mult[].off696)*((long long) js + $$CIV1) + (d-v3%bounds%mult[].off720)*((long long) is + $$CIV0)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 3) at srcstep.f90 <line 159> was not SIMD vectorized because it contains memory references ((char *)d-v3%addr  + d-v3%rvo + (d-v3%bounds%mult[].off672)*((long long) ks + $$CIV2) + (d-v3%bounds%mult[].off696)*((long long) js + $$CIV1) + (d-v3%bounds%mult[].off720)*((long long) is + $$CIV0)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 3) at srcstep.f90 <line 159> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 3) at srcstep.f90 <line 159> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-v3%addr  + d-v3%rvo + (d-v3%bounds%mult[].off672)*((long long) ks + $$CIV2) + (d-v3%bounds%mult[].off696)*((long long) js + $$CIV1) + (d-v3%bounds%mult[].off720)*((long long) is + $$CIV0)).
1586-536 (I) Loop (loop index 3) at srcstep.f90 <line 158> was not SIMD vectorized because it contains memory references ((char *)d-v2%addr  + d-v2%rvo + (d-v2%bounds%mult[].off568)*((long long) ks + $$CIV2) + (d-v2%bounds%mult[].off592)*((long long) js + $$CIV1) + (d-v2%bounds%mult[].off616)*((long long) is + $$CIV0)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 3) at srcstep.f90 <line 158> was not SIMD vectorized because it contains memory references ((char *)d-v2%addr  + d-v2%rvo + (d-v2%bounds%mult[].off568)*((long long) ks + $$CIV2) + (d-v2%bounds%mult[].off592)*((long long) js + $$CIV1) + (d-v2%bounds%mult[].off616)*((long long) is + $$CIV0)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 3) at srcstep.f90 <line 158> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 3) at srcstep.f90 <line 158> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-v2%addr  + d-v2%rvo + (d-v2%bounds%mult[].off568)*((long long) ks + $$CIV2) + (d-v2%bounds%mult[].off592)*((long long) js + $$CIV1) + (d-v2%bounds%mult[].off616)*((long long) is + $$CIV0)).
1586-538 (I) Loop (loop index 4) at srcstep.f90 <line 130> was not SIMD vectorized because it contains unsupported loop structure.
1586-552 (I) Loop (loop index 4) at srcstep.f90 <line 130> was not SIMD vectorized because it contains control flow.
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"2">. Total number of the innermost loops SIMD vectorized <"0">.


    11|         SUBROUTINE srcstep ()
    82|           CALL eos_d()
    94|           IF ((lrad > 0)) THEN
                    CALL opac_d()
                  ENDIF
    96|           CALL forces_d(d-v1%addr,d-v2%addr,d-v3%addr,d-w3dd%addr,&
                &   d-w3de%addr,d-w3df%addr)
   120|           IF ((0 <> (xsubav  .AND.  1))) THEN
   121|             index = 0
   122|             subdt = dt
   123|             avisc_dt = courno / (_sqrt(%VAL(dtqqi2)) +  &
                &     1.0000000000000000E-099)
   124|             IF ((dtqqi2 ==  0.0000000000000000E+000)) THEN
                      avisc_dt = dt
                    ENDIF
   125|             buf_in[].off1744 = avisc_dt
   126|             T_2 = 1
                    T_3 = 1275072547
                    T_4 = 1476395019
                    CALL mpi_allreduce((buf_in + (-8) + (8)*(1)),(buf_out + (-8)&
                &      + (8)*(1)),T_2,T_3,T_4,comm3d,ierr)
   129|             avisc_dt = buf_out[].off3344
   130|             IF ((subdt >  0.0000000000000000E+000)) THEN
       lab_5 /* loopid=4 */
   131|               IF ((subdt > avisc_dt)) THEN
   132|                 subdt = subdt - avisc_dt
   133|               ELSE
   134|                 avisc_dt = subdt
   135|                 subdt = -1.0000000000000000E+000
   136|               ENDIF
   137|               index = index + 1
   138|               IF ((MOD(index, 2) > 0)) THEN
   139|                 CALL avisc_d(d-w3dd%addr,d-w3de%addr,d-w3df%addr,&
                &         d-v1%addr,d-v2%addr,d-v3%addr,d-w3da%addr,d-w3db%addr,&
                &         d-w3dc%addr)
   140|               ELSE
   141|                 CALL avisc_d(d-v1%addr,d-v2%addr,d-v3%addr,d-w3dd%addr,&
                &         d-w3de%addr,d-w3df%addr,d-w3da%addr,d-w3db%addr,&
                &         d-w3dc%addr)
   142|               ENDIF
   143|               avisc_dt = courno / (_sqrt(%VAL(dtqqi2)) +  &
                &       1.0000000000000000E-099)
   144|               buf_in[].off1744 = courno / (_sqrt(%VAL(dtqqi2)) +  &
                &       1.0000000000000000E-099)
   145|               T_5 = 1
                      T_6 = 1275072547
                      T_7 = 1476395019
                      CALL mpi_allreduce((buf_in + (-8) + (8)*(1)),(buf_out + (&
                &       -8) + (8)*(1)),T_5,T_6,T_7,comm3d,ierr)
   148|               avisc_dt = buf_out[].off3344
   149|               IF (subdt >  0.0000000000000000E+000) GOTO lab_5
                    ENDIF
   153|             IF (.NOT.(0 == MOD(index, 2))) GOTO lab_23
   154|             IF ((1 + (int(ke) - int(ks)) > 0)) THEN
                      $$CIV2 = 0
       Id=1           DO $$CIV2 = $$CIV2, int((1 + (int(ke) - int(ks))))-1
   155|                 IF ((1 + (int(je) - int(js)) > 0)) THEN
                          $$CIV1 = 0
       Id=2               DO $$CIV1 = $$CIV1, int((1 + (int(je) - int(js))))&
                &             -1
   156|                     IF ((1 + (int(ie) - int(is)) > 0)) THEN
                              $$CIV0 = 0
       Id=3                   DO $$CIV0 = $$CIV0, int((1 + (int(ie) - int(is))&
                &                 ))-1
   157|                         d-v1%addr%v1(int(is) + $$CIV0,int(js) + $$CIV1,&
                &                 int(ks) + $$CIV2) = d-w3dd%addr%w3dd(int(is) + &
                &                 $$CIV0,int(js) + $$CIV1,int(ks) + $$CIV2)
   158|                         d-v2%addr%v2(int(is) + $$CIV0,int(js) + $$CIV1,&
                &                 int(ks) + $$CIV2) = d-w3de%addr%w3de(int(is) + &
                &                 $$CIV0,int(js) + $$CIV1,int(ks) + $$CIV2)
   159|                         d-v3%addr%v3(int(is) + $$CIV0,int(js) + $$CIV1,&
                &                 int(ks) + $$CIV2) = d-w3df%addr%w3df(int(is) + &
                &                 $$CIV0,int(js) + $$CIV1,int(ks) + $$CIV2)
   160|                       ENDDO
                            ENDIF
   161|                   ENDDO
                        ENDIF
   162|               ENDDO
                    ENDIF
   164|           ELSE
                    lab_2
   165|             CALL avisc_d(d-w3dd%addr,d-w3de%addr,d-w3df%addr,d-v1%addr,&
                &     d-v2%addr,d-v3%addr,d-w3da%addr,d-w3db%addr,d-w3dc%addr)
   166|             lab_23
   176|             IF ((lrad <> 0)) THEN
                      CALL rad_solve()
                    ENDIF
   200|             IF ((0 <> ((xiso  .XOR.  1)  .AND.  lrad == 0))) THEN
   202|               CALL pdv_d(d-w3dd%addr,d-w3de%addr)
   203|             ENDIF
   206|             RETURN
                  END SUBROUTINE srcstep


Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
         0           130             4    Loop cannot be normalized and no loop optimizations 
                                          applied.
         0           130             4    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0           130             4    Loop was not SIMD vectorized because it contains 
                                          control flow.
         0           154             1    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0           155             2    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0           157                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v1%addr  + d-v1%rvo + 
                                          (d-v1%bounds%mult[].off464)*((long long) ks + $$CIV2) 
                                          + (d-v1%bounds%mult[].off488)*((long long) js + 
                                          $$CIV1) + (d-v1%bounds%mult[].off512)*((long long) is 
                                          + $$CIV0))  with non-vectorizable alignment.
         0           157                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v1%addr  + d-v1%rvo + 
                                          (d-v1%bounds%mult[].off464)*((long long) ks + $$CIV2) 
                                          + (d-v1%bounds%mult[].off488)*((long long) js + 
                                          $$CIV1) + (d-v1%bounds%mult[].off512)*((long long) is 
                                          + $$CIV0)) with  non-vectorizable strides.
         0           157                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           157                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)d-v1%addr  
                                          + d-v1%rvo + (d-v1%bounds%mult[].off464)*((long long) 
                                          ks + $$CIV2) + (d-v1%bounds%mult[].off488)*((long 
                                          long) js + $$CIV1) + 
                                          (d-v1%bounds%mult[].off512)*((long long) is + 
                                          $$CIV0)).
         0           158                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v2%addr  + d-v2%rvo + 
                                          (d-v2%bounds%mult[].off568)*((long long) ks + $$CIV2) 
                                          + (d-v2%bounds%mult[].off592)*((long long) js + 
                                          $$CIV1) + (d-v2%bounds%mult[].off616)*((long long) is 
                                          + $$CIV0))  with non-vectorizable alignment.
         0           158                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v2%addr  + d-v2%rvo + 
                                          (d-v2%bounds%mult[].off568)*((long long) ks + $$CIV2) 
                                          + (d-v2%bounds%mult[].off592)*((long long) js + 
                                          $$CIV1) + (d-v2%bounds%mult[].off616)*((long long) is 
                                          + $$CIV0)) with  non-vectorizable strides.
         0           158                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           158                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)d-v2%addr  
                                          + d-v2%rvo + (d-v2%bounds%mult[].off568)*((long long) 
                                          ks + $$CIV2) + (d-v2%bounds%mult[].off592)*((long 
                                          long) js + $$CIV1) + 
                                          (d-v2%bounds%mult[].off616)*((long long) is + 
                                          $$CIV0)).
         0           159                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3%addr  + d-v3%rvo + 
                                          (d-v3%bounds%mult[].off672)*((long long) ks + $$CIV2) 
                                          + (d-v3%bounds%mult[].off696)*((long long) js + 
                                          $$CIV1) + (d-v3%bounds%mult[].off720)*((long long) is 
                                          + $$CIV0))  with non-vectorizable alignment.
         0           159                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-v3%addr  + d-v3%rvo + 
                                          (d-v3%bounds%mult[].off672)*((long long) ks + $$CIV2) 
                                          + (d-v3%bounds%mult[].off696)*((long long) js + 
                                          $$CIV1) + (d-v3%bounds%mult[].off720)*((long long) is 
                                          + $$CIV0)) with  non-vectorizable strides.
         0           159                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           159                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)d-v3%addr  
                                          + d-v3%rvo + (d-v3%bounds%mult[].off672)*((long long) 
                                          ks + $$CIV2) + (d-v3%bounds%mult[].off696)*((long 
                                          long) js + $$CIV1) + 
                                          (d-v3%bounds%mult[].off720)*((long long) is + 
                                          $$CIV0)).


    11|         SUBROUTINE srcstep ()
    82|           CALL eos_d()
    94|           IF ((lrad > 0)) THEN
                    CALL opac_d()
                  ENDIF
    96|           CALL forces_d(d-v1%addr,d-v2%addr,d-v3%addr,d-w3dd%addr,&
                &   d-w3de%addr,d-w3df%addr)
   120|           IF ((0 <> (xsubav  .AND.  1))) THEN
   121|             index = 0
   122|             subdt = dt
   123|             avisc_dt = courno / (_sqrt(%VAL(dtqqi2)) +  &
                &     1.0000000000000000E-099)
   124|             IF ((dtqqi2 ==  0.0000000000000000E+000)) THEN
                      avisc_dt = dt
                    ENDIF
   125|             buf_in[].off1744 = avisc_dt
   126|             T_2 = 1
                    T_3 = 1275072547
                    T_4 = 1476395019
                    CALL mpi_allreduce((buf_in + (-8) + (8)*(1)),(buf_out + (-8)&
                &      + (8)*(1)),T_2,T_3,T_4,comm3d,ierr)
   129|             avisc_dt = buf_out[].off3344
   130|             IF ((subdt >  0.0000000000000000E+000)) THEN
       lab_5 /* loopid=4 */
   131|               IF ((subdt > avisc_dt)) THEN
   132|                 subdt = subdt - avisc_dt
   133|               ELSE
   134|                 avisc_dt = subdt
   135|                 subdt = -1.0000000000000000E+000
   136|               ENDIF
   137|               index = index + 1
   138|               IF ((MOD(index, 2) > 0)) THEN
   139|                 CALL avisc_d(d-w3dd%addr,d-w3de%addr,d-w3df%addr,&
                &         d-v1%addr,d-v2%addr,d-v3%addr,d-w3da%addr,d-w3db%addr,&
                &         d-w3dc%addr)
   140|               ELSE
   141|                 CALL avisc_d(d-v1%addr,d-v2%addr,d-v3%addr,d-w3dd%addr,&
                &         d-w3de%addr,d-w3df%addr,d-w3da%addr,d-w3db%addr,&
                &         d-w3dc%addr)
   142|               ENDIF
   143|               $$csx0 = courno / (_sqrt(%VAL(dtqqi2)) +  &
                &       1.0000000000000000E-099)
                      avisc_dt = $$csx0
   144|               buf_in[].off1744 = $$csx0
   145|               T_5 = 1
                      T_6 = 1275072547
                      T_7 = 1476395019
                      CALL mpi_allreduce((buf_in + (-8) + (8)*(1)),(buf_out + (&
                &       -8) + (8)*(1)),T_5,T_6,T_7,comm3d,ierr)
   148|               avisc_dt = buf_out[].off3344
   149|               IF (subdt >  0.0000000000000000E+000) GOTO lab_5
                    ENDIF
   153|             IF (.NOT.(0 == MOD(index, 2))) GOTO lab_23
   154|             IF ((1 + (int(ke) - int(ks)) > 0)) THEN
                      $$CIV2 = 0
       Id=1           DO $$CIV2 = $$CIV2, int((1 + (int(ke) - int(ks))))-1
   155|                 IF ((1 + (int(je) - int(js)) > 0)) THEN
                          $$CIV1 = 0
       Id=2               DO $$CIV1 = $$CIV1, int((1 + (int(je) - int(js))))&
                &             -1
   156|                     IF ((1 + (int(ie) - int(is)) > 0)) THEN
                              $$CIV0 = 0
       Id=3                   DO $$CIV0 = $$CIV0, int((1 + (int(ie) - int(is))&
                &                 ))-1
   157|                         d-v1%addr%v1(int(is) + $$CIV0,int(js) + $$CIV1,&
                &                 int(ks) + $$CIV2) = d-w3dd%addr%w3dd(int(is) + &
                &                 $$CIV0,int(js) + $$CIV1,int(ks) + $$CIV2)
   158|                         d-v2%addr%v2(int(is) + $$CIV0,int(js) + $$CIV1,&
                &                 int(ks) + $$CIV2) = d-w3de%addr%w3de(int(is) + &
                &                 $$CIV0,int(js) + $$CIV1,int(ks) + $$CIV2)
   159|                         d-v3%addr%v3(int(is) + $$CIV0,int(js) + $$CIV1,&
                &                 int(ks) + $$CIV2) = d-w3df%addr%w3df(int(is) + &
                &                 $$CIV0,int(js) + $$CIV1,int(ks) + $$CIV2)
   160|                       ENDDO
                            ENDIF
   161|                   ENDDO
                        ENDIF
   162|               ENDDO
                    ENDIF
   164|           ELSE
                    lab_2
   165|             CALL avisc_d(d-w3dd%addr,d-w3de%addr,d-w3df%addr,d-v1%addr,&
                &     d-v2%addr,d-v3%addr,d-w3da%addr,d-w3db%addr,d-w3dc%addr)
   166|             lab_23
   176|             IF ((lrad <> 0)) THEN
                      CALL rad_solve()
                    ENDIF
   200|             IF ((0 <> ((xiso  .XOR.  1)  .AND.  lrad == 0))) THEN
   202|               CALL pdv_d(d-w3dd%addr,d-w3de%addr)
   203|             ENDIF
   206|             RETURN
                  END SUBROUTINE srcstep

 
 
>>>>> OBJECT SECTION <<<<<
 GPR's set/used:   ssus ssss ssss s-ss  ssss ssss ssss ssss
 FPR's set/used:   ssss ssss ssss ss--  ---- ---- ---- -sss
 CCR's set/used:   ss-- ssss
     | 000000                           PDEF     srcstep
   11|                                  PROC      
    0| 000000 stfd     DBE1FFF8   1     STFL      #stack(gr1,-8)=fp31
    0| 000004 stfd     DBC1FFF0   1     STFL      #stack(gr1,-16)=fp30
    0| 000008 stfd     DBA1FFE8   1     STFL      #stack(gr1,-24)=fp29
    0| 00000C std      FBE1FFE0   1     ST8       #stack(gr1,-32)=gr31
    0| 000010 std      FBC1FFD8   1     ST8       #stack(gr1,-40)=gr30
    0| 000014 std      FBA1FFD0   1     ST8       #stack(gr1,-48)=gr29
    0| 000018 std      FB81FFC8   1     ST8       #stack(gr1,-56)=gr28
    0| 00001C std      FB61FFC0   1     ST8       #stack(gr1,-64)=gr27
    0| 000020 std      FB41FFB8   1     ST8       #stack(gr1,-72)=gr26
    0| 000024 std      FB21FFB0   1     ST8       #stack(gr1,-80)=gr25
    0| 000028 std      FB01FFA8   1     ST8       #stack(gr1,-88)=gr24
    0| 00002C std      FAE1FFA0   1     ST8       #stack(gr1,-96)=gr23
    0| 000030 std      FAC1FF98   1     ST8       #stack(gr1,-104)=gr22
    0| 000034 std      FAA1FF90   1     ST8       #stack(gr1,-112)=gr21
    0| 000038 std      FA81FF88   1     ST8       #stack(gr1,-120)=gr20
    0| 00003C std      FA61FF80   1     ST8       #stack(gr1,-128)=gr19
    0| 000040 std      FA41FF78   1     ST8       #stack(gr1,-136)=gr18
    0| 000044 std      FA21FF70   1     ST8       #stack(gr1,-144)=gr17
    0| 000048 std      FA01FF68   1     ST8       #stack(gr1,-152)=gr16
    0| 00004C std      F9E1FF60   1     ST8       #stack(gr1,-160)=gr15
    0| 000050 std      F9C1FF58   1     ST8       #stack(gr1,-168)=gr14
    0| 000054 mfspr    7C0802A6   1     LFLR      gr0=lr
    0| 000058 mfcr     7D800026   1     LFCR      gr12=cr4,4
    0| 00005C stw      91810008   1     ST4A      #stack(gr1,8)=gr12
    0| 000060 std      F8010010   1     ST8       #stack(gr1,16)=gr0
    0| 000064 stdu     F821FE01   1     ST8U      gr1,#stack(gr1,-512)=gr1
   82| 000068 bl       48000001   1     CALL      eos_d,0,#ProcAlias",eos_d",fcr",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   82| 00006C ori      60000000   1
   94| 000070 ld       EBE20000   1     L8        gr31=.&&N&&config(gr2,0)
   94| 000074 lwz      801F0018   1     L4Z       gr0=<s96:d24:l4>(gr31,24)
   94| 000078 cmpwi    2C000000   1     C4        cr0=gr0,0
   94| 00007C bc       4081000C   1     BF        CL.1,cr0,0x2/gt,taken=40%(40,60)
   94| 000080 bl       48000001   1     CALL      opac_d,0,opac_d",fcr",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   94| 000084 ori      60000000   1
   94|                              CL.1:
   96| 000088 ld       EBC20000   1     L8        gr30=.&&N&field(gr2,0)
   96| 00008C ld       EBE20000   1     L8        gr31=.&&N&scratch(gr2,0)
   96| 000090 ld       E87E01A0   1     L8        gr3=<s10:d416:l8>(gr30,416)
   96| 000094 ld       E89E0208   1     L8        gr4=<s10:d520:l8>(gr30,520)
   96| 000098 ld       E8BE0270   1     L8        gr5=<s10:d624:l8>(gr30,624)
   96| 00009C ld       E8DF05D0   1     L8        gr6=<s39:d1488:l8>(gr31,1488)
   96| 0000A0 ld       E8FF0638   1     L8        gr7=<s39:d1592:l8>(gr31,1592)
   96| 0000A4 ld       E91F06A0   1     L8        gr8=<s39:d1696:l8>(gr31,1696)
   96| 0000A8 bl       48000001   1     CALL      forces_d,6,v1",gr3,v2",gr4,v3",gr5,w3dd",gr6,w3de",gr7,w3df",gr8,forces_d",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   96| 0000AC ori      60000000   1
  120| 0000B0 ld       EBA20000   1     L8        gr29=.&&N&&config(gr2,0)
  120| 0000B4 lwz      801D004C   1     L4Z       gr0=<s96:d76:l4>(gr29,76)
  120| 0000B8 andi.    70000001   1     RN4_R     gr0,cr0=gr0,0,0x1
  120| 0000BC bc       41820548   1     BT        CL.2,cr0,0x4/eq,taken=40%(40,60)
  122| 0000C0 ld       EBA20000   1     L8        gr29=.&&N&&root(gr2,0)
  123| 0000C4 ld       EB820000   1     L8        gr28=.+CONSTANT_AREA(gr2,0)
  123| 0000C8 lfd      C81D00A8   1     LFL       fp0=<s105:d168:l8>(gr29,168)
  123| 0000CC lfd      CBFC0000   1     LFL       fp31=+CONSTANT_AREA(gr28,0)
  124| 0000D0 lfs      C3DC0008   1     LFS       fp30=+CONSTANT_AREA(gr28,8)
  123| 0000D4 lfd      C85D0020   1     LFL       fp2=<s105:d32:l8>(gr29,32)
  122| 0000D8 lfd      CBBD0078   1     LFL       fp29=<s105:d120:l8>(gr29,120)
  123| 0000DC fsqrt    FC20002C   1     SQRT      fp1=fp0,fcr
  124| 0000E0 fcmpu    FC1E0000   2     CFL       cr0=fp30,fp0
  123| 0000E4 fadd     FC01F82A   2     AFL       fp0=fp1,fp31,fcr
  123| 0000E8 fdiv     FC020024   2     DFL       fp0=fp2,fp0,fcr
  123| 0000EC stfd     D81D0068   1     STFL      <s105:d104:l8>(gr29,104)=fp0
  124| 0000F0 bc       4082000C   1     BF        CL.3,cr0,0x80/feq,taken=60%(60,40)
  124| 0000F4 fmr      FC00E890   1     LRFL      fp0=fp29
  124| 0000F8 stfd     DBBD0068   1     STFL      <s105:d104:l8>(gr29,104)=fp29
  124|                              CL.3:
  125| 0000FC ld       EB620000   1     L8        gr27=.&&N&&mpipar(gr2,0)
  126| 000100 addis    3C804C00   1     LIU       gr4=19456
  126| 000104 addis    3C605800   1     LIU       gr3=22528
  126| 000108 addi     3B400001   1     LI        gr26=1
  126| 00010C addi     3B241023   1     AI        gr25=gr4,4131
  126| 000110 stw      93410080   1     ST4Z      T_2(gr1,128)=gr26
  125| 000114 stfd     D81B06D0   1     STFL      <s112:d1744:l8>(gr27,1744)=fp0
  126| 000118 addi     3B03000B   1     AI        gr24=gr3,11
  126| 00011C stw      93210084   1     ST4Z      T_3(gr1,132)=gr25
  126| 000120 stw      93010088   1     ST4Z      T_4(gr1,136)=gr24
  126| 000124 addi     38E10088   1     AI        gr7=gr1,136
  126| 000128 addi     38C10084   1     AI        gr6=gr1,132
  126| 00012C addi     38A10080   1     AI        gr5=gr1,128
  126| 000130 addi     387B06D0   1     AI        gr3=gr27,1744
  126| 000134 addi     389B0D10   1     AI        gr4=gr27,3344
  126| 000138 addi     391B0020   1     AI        gr8=gr27,32
  126| 00013C addi     393B0014   1     AI        gr9=gr27,20
  126| 000140 bl       48000001   1     CALL      mpi_allreduce,7,buf_in[]",gr3,buf_out[]",gr4,T_2",gr5,T_3",gr6,T_4",gr7,comm3d",gr8,ierr",gr9,mpi_allreduce",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  126| 000144 ori      60000000   1
  130| 000148 fcmpu    FC1EE800   1     CFL       cr0=fp30,fp29
  129| 00014C lfd      C81B0D10   1     LFL       fp0=<s112:d3344:l8>(gr27,3344)
  129| 000150 stfd     D81D0068   1     STFL      <s105:d104:l8>(gr29,104)=fp0
  130| 000154 bc       40800140   1     BF        CL.48,cr0,0x20/flt,taken=50%(0,0)
  131| 000158 fcmpu    FC1D0000   1     CFL       cr0=fp29,fp0
  137| 00015C addi     3AE00001   1     LI        gr23=1
    0| 000160 addi     38600001   1     LI        gr3=1
  137| 000164 srawi    7EE00E70   1     SRA4CA    gr0,ca=gr23,1
    0| 000168 ori      60210000   1     XNOP      
    0| 00016C ori      60210000   1     XNOP      
    0| 000170 ori      60210000   1     XNOP      
  130|                              CL.5:
  131| 000174 bc       40810024   1     BF        CL.6,cr0,0x40/fgt,taken=50%(0,0)
  132| 000178 fsub     FFBD0028   1     SFL       fp29=fp29,fp0,fcr
  137| 00017C addze    7C000194   1     ADDE      gr0,ca=gr0,0,ca
  138| 000180 rlwinm   5400083C   1     SLL4      gr0=gr0,1
  138| 000184 subf     7C001850   1     S         gr0=gr3,gr0
  138| 000188 cmpwi    2C000000   1     C4        cr0=gr0,0
  138| 00018C cmpwi    2E000000   1     C4        cr4=gr0,0
  138| 000190 bc       40810064   1     BF        CL.8,cr0,0x2/gt,taken=40%(40,60)
    0| 000194 b        4800002C   1     B         CL.43,-1
  133|                              CL.6:
  137| 000198 rlwinm   5477003E   1     RN4       gr23=gr3,0,0xFFFFFFFF
  134| 00019C stfd     DBBD0068   1     STFL      <s105:d104:l8>(gr29,104)=fp29
  137| 0001A0 srawi    7EE00E70   1     SRA4CA    gr0,ca=gr23,1
  135| 0001A4 lfs      C3BC000C   1     LFS       fp29=+CONSTANT_AREA(gr28,12)
  137| 0001A8 addze    7C000194   1     ADDE      gr0,ca=gr0,0,ca
  138| 0001AC rlwinm   5400083C   1     SLL4      gr0=gr0,1
  138| 0001B0 subf     7C001850   1     S         gr0=gr3,gr0
  138| 0001B4 cmpwi    2C000000   1     C4        cr0=gr0,0
  138| 0001B8 cmpwi    2E000000   1     C4        cr4=gr0,0
  138| 0001BC bc       40810038   1     BF        CL.8,cr0,0x2/gt,taken=40%(40,60)
    0|                              CL.43:
  139| 0001C0 ld       E81F0568   1     L8        gr0=<s39:d1384:l8>(gr31,1384)
  139| 0001C4 ld       E87F05D0   1     L8        gr3=<s39:d1488:l8>(gr31,1488)
  139| 0001C8 ld       E89F0638   1     L8        gr4=<s39:d1592:l8>(gr31,1592)
  139| 0001CC ld       E8BF06A0   1     L8        gr5=<s39:d1696:l8>(gr31,1696)
  139| 0001D0 ld       E8DE01A0   1     L8        gr6=<s10:d416:l8>(gr30,416)
  139| 0001D4 ld       E8FE0208   1     L8        gr7=<s10:d520:l8>(gr30,520)
  139| 0001D8 std      F8010070   1     ST8       #MX_TEMP1(gr1,112)=gr0
  139| 0001DC ld       E91E0270   1     L8        gr8=<s10:d624:l8>(gr30,624)
  139| 0001E0 ld       E93F0498   1     L8        gr9=<s39:d1176:l8>(gr31,1176)
  139| 0001E4 ld       E95F0500   1     L8        gr10=<s39:d1280:l8>(gr31,1280)
  139| 0001E8 bl       48000001   1     CALL      avisc_d,9,w3dd",gr3,w3de",gr4,w3df",gr5,v1",gr6,v2",gr7,v3",gr8,w3da",gr9,w3db",gr10,w3dc",avisc_d",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  139| 0001EC ori      60000000   1
    0| 0001F0 b        48000034   1     B         CL.9,-1
  140|                              CL.8:
  141| 0001F4 ld       E81F0568   1     L8        gr0=<s39:d1384:l8>(gr31,1384)
  141| 0001F8 ld       E87E01A0   1     L8        gr3=<s10:d416:l8>(gr30,416)
  141| 0001FC ld       E89E0208   1     L8        gr4=<s10:d520:l8>(gr30,520)
  141| 000200 ld       E8BE0270   1     L8        gr5=<s10:d624:l8>(gr30,624)
  141| 000204 ld       E8DF05D0   1     L8        gr6=<s39:d1488:l8>(gr31,1488)
  141| 000208 ld       E8FF0638   1     L8        gr7=<s39:d1592:l8>(gr31,1592)
  141| 00020C std      F8010070   1     ST8       #MX_TEMP1(gr1,112)=gr0
  141| 000210 ld       E91F06A0   1     L8        gr8=<s39:d1696:l8>(gr31,1696)
  141| 000214 ld       E93F0498   1     L8        gr9=<s39:d1176:l8>(gr31,1176)
  141| 000218 ld       E95F0500   1     L8        gr10=<s39:d1280:l8>(gr31,1280)
  141| 00021C bl       48000001   1     CALL      avisc_d,9,v1",gr3,v2",gr4,v3",gr5,w3dd",gr6,w3de",gr7,w3df",gr8,w3da",gr9,w3db",gr10,w3dc",avisc_d",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  141| 000220 ori      60000000   1
  142|                              CL.9:
  145| 000224 stw      93210090   1     ST4Z      T_6(gr1,144)=gr25
  143| 000228 lfd      C81D00A8   1     LFL       fp0=<s105:d168:l8>(gr29,168)
  143| 00022C lfd      C83D0020   1     LFL       fp1=<s105:d32:l8>(gr29,32)
  145| 000230 stw      93410094   1     ST4Z      T_5(gr1,148)=gr26
  145| 000234 stw      9301008C   1     ST4Z      T_7(gr1,140)=gr24
  145| 000238 addi     387B06D0   1     AI        gr3=gr27,1744
  145| 00023C addi     389B0D10   1     AI        gr4=gr27,3344
  145| 000240 addi     38A10094   1     AI        gr5=gr1,148
  143| 000244 fsqrt    FC00002C   1     SQRT      fp0=fp0,fcr
  145| 000248 addi     38C10090   1     AI        gr6=gr1,144
  145| 00024C addi     38E1008C   1     AI        gr7=gr1,140
  145| 000250 addi     391B0020   1     AI        gr8=gr27,32
  145| 000254 addi     393B0014   1     AI        gr9=gr27,20
  143| 000258 fadd     FC00F82A   1     AFL       fp0=fp0,fp31,fcr
  143| 00025C fdiv     FC010024   2     DFL       fp0=fp1,fp0,fcr
  143| 000260 stfd     D81D0068   1     STFL      <s105:d104:l8>(gr29,104)=fp0
  144| 000264 stfd     D81B06D0   1     STFL      <s112:d1744:l8>(gr27,1744)=fp0
  145| 000268 bl       48000001   1     CALL      mpi_allreduce,7,buf_in[]",gr3,buf_out[]",gr4,T_5",gr5,T_6",gr6,T_7",gr7,comm3d",gr8,ierr",gr9,mpi_allreduce",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  145| 00026C ori      60000000   1
  149| 000270 fcmpu    FC9EE800   1     CFL       cr1=fp30,fp29
  148| 000274 lfd      C81B0D10   1     LFL       fp0=<s112:d3344:l8>(gr27,3344)
    0| 000278 addi     38770001   1     AI        gr3=gr23,1
  137| 00027C rlwinm   5477003E   1     RN4       gr23=gr3,0,0xFFFFFFFF
  137| 000280 srawi    7EE00E70   1     SRA4CA    gr0,ca=gr23,1
  131| 000284 fcmpu    FC1D0000   1     CFL       cr0=fp29,fp0
  148| 000288 stfd     D81D0068   1     STFL      <s105:d104:l8>(gr29,104)=fp0
  149| 00028C bc       4184FEE8   1     BT        CL.5,cr1,0x20/flt,taken=80%(80,20)
  153| 000290 bc       409203A4   1     BF        CL.23,cr4,0x4/eq,taken=50%(0,0)
    0|                              CL.48:
  154| 000294 ld       EB820000   1     L8        gr28=.&&N&&grid(gr2,0)
  154| 000298 lwa      E81C0016   1     L4A       gr0=<s130:d20:l4>(gr28,20)
  154| 00029C lwa      E93C0012   1     L4A       gr9=<s130:d16:l4>(gr28,16)
  154| 0002A0 subf     7C690050   1     S         gr3=gr0,gr9
  154| 0002A4 addic.   34830001   1     AI_R      gr4,cr0=gr3,1,ca"
  154| 0002A8 std      F88100A0   1     ST8       #SPILL0(gr1,160)=gr4
  154| 0002AC bc       40810388   1     BF        CL.23,cr0,0x2/gt,taken=50%(0,0)
  158| 0002B0 ld       E99E0238   1     L8        gr12=<s10:d568:l8>(gr30,568)
  155| 0002B4 lwa      E95C000A   1     L4A       gr10=<s130:d8:l4>(gr28,8)
  156| 0002B8 lwa      E97C0002   1     L4A       gr11=<s130:d0:l4>(gr28,0)
  158| 0002BC ld       EBBF0668   1     L8        gr29=<s39:d1640:l8>(gr31,1640)
  159| 0002C0 ld       EADF06D0   1     L8        gr22=<s39:d1744:l8>(gr31,1744)
  157| 0002C4 ld       E81E01E8   1     L8        gr0=<s10:d488:l8>(gr30,488)
  158| 0002C8 std      F98100C0   1     ST8       #SPILL4(gr1,192)=gr12
  155| 0002CC lwa      E99C000E   1     L4A       gr12=<s130:d12:l4>(gr28,12)
  156| 0002D0 lwa      EB9C0006   1     L4A       gr28=<s130:d4:l4>(gr28,4)
  158| 0002D4 std      FBA100C8   1     ST8       #SPILL5(gr1,200)=gr29
  159| 0002D8 std      FAC100D0   1     ST8       #SPILL6(gr1,208)=gr22
  158| 0002DC ld       EBBE0208   1     L8        gr29=<s10:d520:l8>(gr30,520)
  158| 0002E0 ld       EADE0220   1     L8        gr22=<s10:d544:l8>(gr30,544)
  158| 0002E4 ld       EB7E0250   1     L8        gr27=<s10:d592:l8>(gr30,592)
  156| 0002E8 std      FB8100D8   1     ST8       #SPILL7(gr1,216)=gr28
  159| 0002EC ld       E87E02D0   1     L8        gr3=<s10:d720:l8>(gr30,720)
  157| 0002F0 ld       E9FF0600   1     L8        gr15=<s39:d1536:l8>(gr31,1536)
  157| 0002F4 ld       E89E0200   1     L8        gr4=<s10:d512:l8>(gr30,512)
  158| 0002F8 ld       E8BE0268   1     L8        gr5=<s10:d616:l8>(gr30,616)
  159| 0002FC ld       E9DE02A0   1     L8        gr14=<s10:d672:l8>(gr30,672)
  157| 000300 ld       E91E01D0   1     L8        gr8=<s10:d464:l8>(gr30,464)
  159| 000304 ld       EAFE02B8   1     L8        gr23=<s10:d696:l8>(gr30,696)
  157| 000308 ld       EABE01A0   1     L8        gr21=<s10:d416:l8>(gr30,416)
  159| 00030C ld       EA9E0270   1     L8        gr20=<s10:d624:l8>(gr30,624)
  157| 000310 ld       EB9E01B8   1     L8        gr28=<s10:d440:l8>(gr30,440)
  159| 000314 ld       EBDE0288   1     L8        gr30=<s10:d648:l8>(gr30,648)
    0| 000318 add      7E76EA14   1     A         gr19=gr22,gr29
    0| 00031C ld       EBA100D8   1     L8        gr29=#SPILL7(gr1,216)
  155| 000320 subf     7D8A6050   1     S         gr12=gr12,gr10
  157| 000324 ld       EA3F05D0   1     L8        gr17=<s39:d1488:l8>(gr31,1488)
  158| 000328 ld       EA5F0638   1     L8        gr18=<s39:d1592:l8>(gr31,1592)
    0| 00032C add      7E15E214   1     A         gr16=gr21,gr28
    0| 000330 add      7E94F214   1     A         gr20=gr20,gr30
    0| 000334 subf     7EABE850   1     S         gr21=gr29,gr11
  157| 000338 ld       EBDF05E8   1     L8        gr30=<s39:d1512:l8>(gr31,1512)
  157| 00033C std      F9E100A8   1     ST8       #SPILL1(gr1,168)=gr15
  158| 000340 ld       EBBF0650   1     L8        gr29=<s39:d1616:l8>(gr31,1616)
  155| 000344 addic.   36CC0001   1     AI_R      gr22,cr0=gr12,1,ca"
  159| 000348 ld       E99F06A0   1     L8        gr12=<s39:d1696:l8>(gr31,1696)
  159| 00034C ld       EB9F06B8   1     L8        gr28=<s39:d1720:l8>(gr31,1720)
  154| 000350 addi     39E00000   1     LI        gr15=0
  159| 000354 std      F9C100B0   1     ST8       #SPILL2(gr1,176)=gr14
  157| 000358 std      F90100B8   1     ST8       #SPILL3(gr1,184)=gr8
  159| 00035C ld       EB3F06E8   1     L8        gr25=<s39:d1768:l8>(gr31,1768)
  158| 000360 ld       EB5F0680   1     L8        gr26=<s39:d1664:l8>(gr31,1664)
  157| 000364 ld       EB1F0618   1     L8        gr24=<s39:d1560:l8>(gr31,1560)
  158| 000368 ld       E8DF0698   1     L8        gr6=<s39:d1688:l8>(gr31,1688)
  159| 00036C ld       E8FF0700   1     L8        gr7=<s39:d1792:l8>(gr31,1792)
  157| 000370 ld       E91F0630   1     L8        gr8=<s39:d1584:l8>(gr31,1584)
  154| 000374 std      F9E100E0   1     ST8       #SPILL8(gr1,224)=gr15
    0| 000378 bc       408102BC   1     BF        CL.23,cr0,0x2/gt,taken=20%(20,80)
    0| 00037C addic.   36B50001   1     AI_R      gr21,cr0=gr21,1,ca"
    0| 000380 add      7E31F214   1     A         gr17=gr17,gr30
    0| 000384 add      7EB2EA14   1     A         gr21=gr18,gr29
    0| 000388 mulld    7FC359D2   1     M         gr30=gr3,gr11
    0| 00038C mulld    7FAAC9D2   1     M         gr29=gr10,gr25
    0| 000390 add      7D8CE214   1     A         gr12=gr12,gr28
    0| 000394 ld       E9E100A8   1     L8        gr15=#SPILL1(gr1,168)
    0| 000398 add      7F94F214   1     A         gr28=gr20,gr30
    0| 00039C add      7E8CEA14   1     A         gr20=gr12,gr29
    0| 0003A0 mulld    7D8AD9D2   1     M         gr12=gr10,gr27
    0| 0003A4 mulld    7FCAD1D2   1     M         gr30=gr10,gr26
    0| 0003A8 mulld    7FA051D2   1     M         gr29=gr0,gr10
    0| 0003AC std      FB8100E8   1     ST8       #SPILL9(gr1,232)=gr28
    0| 0003B0 add      7E6C9A14   1     A         gr19=gr12,gr19
    0| 0003B4 add      7E55F214   1     A         gr18=gr21,gr30
    0| 0003B8 mulld    7D8AC1D2   1     M         gr12=gr10,gr24
    0| 0003BC mulld    7F8979D2   1     M         gr28=gr9,gr15
    0| 0003C0 add      7DD0EA14   1     A         gr14=gr16,gr29
    0| 0003C4 ld       EA0100B0   1     L8        gr16=#SPILL2(gr1,176)
    0| 0003C8 std      FA6100F8   1     ST8       #SPILL11(gr1,248)=gr19
    0| 0003CC mulld    7EAAB9D2   1     M         gr21=gr10,gr23
    0| 0003D0 ld       E94100D0   1     L8        gr10=#SPILL6(gr1,208)
    0| 0003D4 mulld    7FC859D2   1     M         gr30=gr8,gr11
    0| 0003D8 add      7F9C8A14   1     A         gr28=gr28,gr17
    0| 0003DC std      FA410100   1     ST8       #SPILL12(gr1,256)=gr18
    0| 0003E0 add      7F8CE214   1     A         gr28=gr12,gr28
    0| 0003E4 mulld    7FA981D2   1     M         gr29=gr9,gr16
    0| 0003E8 mulld    7E4951D2   1     M         gr18=gr9,gr10
    0| 0003EC ld       EA6100C0   1     L8        gr19=#SPILL4(gr1,192)
    0| 0003F0 ld       EA0100C8   1     L8        gr16=#SPILL5(gr1,200)
    0| 0003F4 ld       E94100B8   1     L8        gr10=#SPILL3(gr1,184)
    0| 0003F8 add      7F9CF214   1     A         gr28=gr28,gr30
    0| 0003FC std      FA8100F0   1     ST8       #SPILL10(gr1,240)=gr20
    0| 000400 subf     7E28E050   1     S         gr17=gr28,gr8
    0| 000404 mcrf     4C800000   1     LRCR      cr1=cr0
    0| 000408 std      FA210108   1     ST8       #SPILL13(gr1,264)=gr17
    0| 00040C mulld    7D8759D2   1     M         gr12=gr7,gr11
    0| 000410 mulld    7FC559D2   1     M         gr30=gr5,gr11
    0| 000414 mulld    7F8659D2   1     M         gr28=gr6,gr11
    0| 000418 mulld    7E8459D2   1     M         gr20=gr4,gr11
    0| 00041C mulld    7E2999D2   1     M         gr17=gr9,gr19
    0| 000420 mulld    7DE981D2   1     M         gr15=gr9,gr16
    0| 000424 mulld    7E0951D2   1     M         gr16=gr9,gr10
    0| 000428 ld       E94100D8   1     L8        gr10=#SPILL7(gr1,216)
    0| 00042C subfic   212B0001   1     SFI       gr9=1,gr11,ca"
    0| 000430 ld       E96100E8   1     L8        gr11=#SPILL9(gr1,232)
    0| 000434 add      7E695214   1     A         gr19=gr9,gr10
    0| 000438 ld       E94100F8   1     L8        gr10=#SPILL11(gr1,248)
    0| 00043C add      7FBD5A14   1     A         gr29=gr29,gr11
    0| 000440 ld       E92100F0   1     L8        gr9=#SPILL10(gr1,240)
    0| 000444 add      7D6AF214   1     A         gr11=gr10,gr30
    0| 000448 ld       EBC10100   1     L8        gr30=#SPILL12(gr1,256)
    0| 00044C add      7D8C4A14   1     A         gr12=gr12,gr9
    0| 000450 add      7D2EA214   1     A         gr9=gr14,gr20
    0| 000454 add      7D8C9214   1     A         gr12=gr12,gr18
    0| 000458 add      7D6B8A14   1     A         gr11=gr11,gr17
    0| 00045C add      7D298214   1     A         gr9=gr9,gr16
    0| 000460 add      7D5CF214   1     A         gr10=gr28,gr30
    0| 000464 add      7FD5EA14   1     A         gr30=gr21,gr29
    0| 000468 add      7D4A7A14   1     A         gr10=gr10,gr15
    0| 00046C rldicl   7A75F842   1     SRL8      gr21=gr19,1
    0| 000470 subf     7DC3F050   1     S         gr14=gr30,gr3
    0| 000474 subf     7F876050   1     S         gr28=gr12,gr7
    0| 000478 std      F9C10110   1     ST8       #SPILL14(gr1,272)=gr14
    0| 00047C std      FB810118   1     ST8       #SPILL15(gr1,280)=gr28
    0| 000480 subf     7E455850   1     S         gr18=gr11,gr5
    0| 000484 subf     7E265050   1     S         gr17=gr10,gr6
    0| 000488 std      FA410120   1     ST8       #SPILL16(gr1,288)=gr18
    0| 00048C std      FA210128   1     ST8       #SPILL17(gr1,296)=gr17
    0| 000490 subf     7E844850   1     S         gr20=gr9,gr4
    0| 000494 andi.    72690001   1     RN4_R     gr9,cr0=gr19,0,0x1
    0| 000498 cmpdi    2FB50000   1     C8        cr7=gr21,0
  154|                              CL.27:
  155| 00049C addi     39200000   1     LI        gr9=0
    0| 0004A0 bc       408500F0   1     BF        CL.28,cr1,0x2/gt,taken=20%(20,80)
    0| 0004A4 ld       EA610108   1     L8        gr19=#SPILL13(gr1,264)
    0| 0004A8 or       7E92A378   1     LR        gr18=gr20
    0| 0004AC ld       EA210128   1     L8        gr17=#SPILL17(gr1,296)
    0| 0004B0 ld       EA010120   1     L8        gr16=#SPILL16(gr1,288)
    0| 0004B4 ld       E9E10118   1     L8        gr15=#SPILL15(gr1,280)
    0| 0004B8 ld       E9C10110   1     L8        gr14=#SPILL14(gr1,272)
    0| 0004BC ori      60210000   1     XNOP      
    0| 0004C0 ori      60210000   1     XNOP      
    0| 0004C4 ori      60210000   1     XNOP      
  155|                              CL.29:
  157| 0004C8 or       7E6A9B78   1     LR        gr10=gr19
  159| 0004CC or       7DEB7B78   1     LR        gr11=gr15
  158| 0004D0 or       7E2C8B78   1     LR        gr12=gr17
  157| 0004D4 or       7E5E9378   1     LR        gr30=gr18
  159| 0004D8 or       7DDD7378   1     LR        gr29=gr14
  158| 0004DC or       7E1C8378   1     LR        gr28=gr16
    0| 0004E0 mtspr    7EA903A6   1     LCTR      ctr=gr21
    0| 0004E4 bc       41820020   1     BT        CL.129,cr0,0x4/eq,taken=50%(0,0)
  157| 0004E8 lfdux    7C0A44EE   1     LFDU      fp0,gr10=w3dd(gr10,gr8,0)
  158| 0004EC lfdux    7C2C34EE   1     LFDU      fp1,gr12=w3de(gr12,gr6,0)
  159| 0004F0 lfdux    7C4B3CEE   1     LFDU      fp2,gr11=w3df(gr11,gr7,0)
  157| 0004F4 stfdux   7C1E25EE   1     STFDU     gr30,v1(gr30,gr4,0)=fp0
  158| 0004F8 stfdux   7C3C2DEE   1     STFDU     gr28,v2(gr28,gr5,0)=fp1
  159| 0004FC stfdux   7C5D1DEE   1     STFDU     gr29,v3(gr29,gr3,0)=fp2
    0| 000500 bc       419E006C   1     BT        CL.111,cr7,0x4/eq,taken=20%(20,80)
    0|                              CL.129:
  157| 000504 lfdux    7C4A44EE   1     LFDU      fp2,gr10=w3dd(gr10,gr8,0)
  158| 000508 lfdux    7C0C34EE   1     LFDU      fp0,gr12=w3de(gr12,gr6,0)
  159| 00050C lfdux    7C2B3CEE   1     LFDU      fp1,gr11=w3df(gr11,gr7,0)
  157| 000510 lfdux    7C6A44EE   1     LFDU      fp3,gr10=w3dd(gr10,gr8,0)
  157| 000514 stfdux   7C5E25EE   1     STFDU     gr30,v1(gr30,gr4,0)=fp2
  158| 000518 lfdux    7C4C34EE   1     LFDU      fp2,gr12=w3de(gr12,gr6,0)
  159| 00051C lfdux    7CAB3CEE   1     LFDU      fp5,gr11=w3df(gr11,gr7,0)
  157| 000520 stfdux   7C7E25EE   1     STFDU     gr30,v1(gr30,gr4,0)=fp3
    0| 000524 bc       42400038   1     BCF       ctr=CL.133,taken=0%(0,100)
    0|                              CL.134:
  157| 000528 lfdux    7C6A44EE   1     LFDU      fp3,gr10=w3dd(gr10,gr8,0)
  158| 00052C stfdux   7C1C2DEE   1     STFDU     gr28,v2(gr28,gr5,0)=fp0
  159| 000530 stfdux   7C3D1DEE   1     STFDU     gr29,v3(gr29,gr3,0)=fp1
  158| 000534 stfdux   7C5C2DEE   1     STFDU     gr28,v2(gr28,gr5,0)=fp2
  158| 000538 lfdux    7C0C34EE   1     LFDU      fp0,gr12=w3de(gr12,gr6,0)
  157| 00053C lfdux    7C8A44EE   1     LFDU      fp4,gr10=w3dd(gr10,gr8,0)
  159| 000540 lfdux    7C2B3CEE   1     LFDU      fp1,gr11=w3df(gr11,gr7,0)
  159| 000544 stfdux   7CBD1DEE   1     STFDU     gr29,v3(gr29,gr3,0)=fp5
  158| 000548 lfdux    7C4C34EE   1     LFDU      fp2,gr12=w3de(gr12,gr6,0)
  157| 00054C stfdux   7C7E25EE   1     STFDU     gr30,v1(gr30,gr4,0)=fp3
  157| 000550 stfdux   7C9E25EE   1     STFDU     gr30,v1(gr30,gr4,0)=fp4
  159| 000554 lfdux    7CAB3CEE   1     LFDU      fp5,gr11=w3df(gr11,gr7,0)
    0| 000558 bc       4200FFD0   1     BCT       ctr=CL.134,taken=100%(100,0)
    0|                              CL.133:
  158| 00055C stfdux   7C1C2DEE   1     STFDU     gr28,v2(gr28,gr5,0)=fp0
  159| 000560 stfdux   7C3D1DEE   1     STFDU     gr29,v3(gr29,gr3,0)=fp1
  158| 000564 stfdux   7C5C2DEE   1     STFDU     gr28,v2(gr28,gr5,0)=fp2
  159| 000568 stfdux   7CBD1DEE   1     STFDU     gr29,v3(gr29,gr3,0)=fp5
    0|                              CL.111:
  161| 00056C addi     39290001   1     AI        gr9=gr9,1
    0| 000570 add      7E73C214   1     A         gr19=gr19,gr24
  161| 000574 cmpld    7F29B040   1     CL8       cr6=gr9,gr22
    0| 000578 add      7E409214   1     A         gr18=gr0,gr18
    0| 00057C add      7E31D214   1     A         gr17=gr17,gr26
    0| 000580 add      7E10DA14   1     A         gr16=gr16,gr27
    0| 000584 add      7DEFCA14   1     A         gr15=gr15,gr25
    0| 000588 add      7DCEBA14   1     A         gr14=gr14,gr23
  161| 00058C bc       4198FF3C   1     BT        CL.29,cr6,0x8/llt,taken=80%(80,20)
  161|                              CL.28:
  162| 000590 ld       E92100E0   1     L8        gr9=#SPILL8(gr1,224)
    0| 000594 ld       E94100B0   1     L8        gr10=#SPILL2(gr1,176)
    0| 000598 ld       E9610110   1     L8        gr11=#SPILL14(gr1,272)
  162| 00059C ld       E98100A0   1     L8        gr12=#SPILL0(gr1,160)
    0| 0005A0 ld       EBC100D0   1     L8        gr30=#SPILL6(gr1,208)
    0| 0005A4 ld       EBA10118   1     L8        gr29=#SPILL15(gr1,280)
    0| 0005A8 ld       EB8100C0   1     L8        gr28=#SPILL4(gr1,192)
    0| 0005AC ld       EA610120   1     L8        gr19=#SPILL16(gr1,288)
    0| 0005B0 ld       EA4100C8   1     L8        gr18=#SPILL5(gr1,200)
    0| 0005B4 ld       EA210128   1     L8        gr17=#SPILL17(gr1,296)
    0| 0005B8 ld       E9E100A8   1     L8        gr15=#SPILL1(gr1,168)
    0| 0005BC ld       E9C10108   1     L8        gr14=#SPILL13(gr1,264)
    0| 0005C0 ld       EA0100B8   1     L8        gr16=#SPILL3(gr1,184)
  162| 0005C4 addi     39290001   1     AI        gr9=gr9,1
    0| 0005C8 add      7D6A5A14   1     A         gr11=gr10,gr11
  162| 0005CC std      F92100E0   1     ST8       #SPILL8(gr1,224)=gr9
    0| 0005D0 std      F9610110   1     ST8       #SPILL14(gr1,272)=gr11
  162| 0005D4 cmpld    7F296040   1     CL8       cr6=gr9,gr12
    0| 0005D8 add      7FBDF214   1     A         gr29=gr29,gr30
    0| 0005DC add      7E73E214   1     A         gr19=gr19,gr28
    0| 0005E0 std      FBA10118   1     ST8       #SPILL15(gr1,280)=gr29
    0| 0005E4 std      FA610120   1     ST8       #SPILL16(gr1,288)=gr19
    0| 0005E8 add      7E319214   1     A         gr17=gr17,gr18
    0| 0005EC add      7DCE7A14   1     A         gr14=gr14,gr15
    0| 0005F0 std      FA210128   1     ST8       #SPILL17(gr1,296)=gr17
    0| 0005F4 std      F9C10108   1     ST8       #SPILL13(gr1,264)=gr14
    0| 0005F8 add      7E90A214   1     A         gr20=gr16,gr20
  162| 0005FC bc       4198FEA0   1     BT        CL.27,cr6,0x8/llt,taken=80%(80,20)
    0| 000600 b        48000034   1     B         CL.23,-1
  164|                              CL.2:
  165| 000604 ld       E81F0568   1     L8        gr0=<s39:d1384:l8>(gr31,1384)
  165| 000608 ld       E87F05D0   1     L8        gr3=<s39:d1488:l8>(gr31,1488)
  165| 00060C ld       E89F0638   1     L8        gr4=<s39:d1592:l8>(gr31,1592)
  165| 000610 ld       E8BF06A0   1     L8        gr5=<s39:d1696:l8>(gr31,1696)
  165| 000614 ld       E8DE01A0   1     L8        gr6=<s10:d416:l8>(gr30,416)
  165| 000618 ld       E8FE0208   1     L8        gr7=<s10:d520:l8>(gr30,520)
  165| 00061C std      F8010070   1     ST8       #MX_TEMP1(gr1,112)=gr0
  165| 000620 ld       E91E0270   1     L8        gr8=<s10:d624:l8>(gr30,624)
  165| 000624 ld       E93F0498   1     L8        gr9=<s39:d1176:l8>(gr31,1176)
  165| 000628 ld       E95F0500   1     L8        gr10=<s39:d1280:l8>(gr31,1280)
  165| 00062C bl       48000001   1     CALL      avisc_d,9,w3dd",gr3,w3de",gr4,w3df",gr5,v1",gr6,v2",gr7,v3",gr8,w3da",gr9,w3db",gr10,w3dc",avisc_d",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  165| 000630 ori      60000000   1
  166|                              CL.23:
  176| 000634 ld       E8620000   1     L8        gr3=.&&N&&config(gr2,0)
  176| 000638 lwz      80030018   1     L4Z       gr0=<s96:d24:l4>(gr3,24)
  176| 00063C cmpdi    2C200000   1     C8        cr0=gr0,0
  176| 000640 cmpwi    2C800000   1     C4        cr1=gr0,0
  176| 000644 bc       41820018   1     BT        CL.24,cr0,0x4/eq,taken=60%(60,40)
  176| 000648 bl       48000001   1     CALL      rad_solve,0,rad_solve",fcr",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  176| 00064C ori      60000000   1
    0| 000650 ld       E8620000   1     L8        gr3=.&&N&&config(gr2,0)
    0| 000654 lwz      80030018   1     L4Z       gr0=<s96:d24:l4>(gr3,24)
    0| 000658 cmpwi    2C800000   1     C4        cr1=gr0,0
  176|                              CL.24:
  200| 00065C lwa      E8030046   1     L4A       gr0=<s96:d68:l4>(gr3,68)
  200| 000660 addi     38600001   1     LI        gr3=1
  200| 000664 xori     68000001   1     XIL       gr0=gr0,0x1
  200| 000668 bc       41860008   1     BT        CL.121,cr1,0x4/eq,taken=50%(0,0)
  200| 00066C addi     38600000   1     LI        gr3=0
  200|                              CL.121:
  200| 000670 and      7C001839   1     N_R       gr0,cr0=gr0,gr3
  200| 000674 bc       40820070   1     BF        CL.180,cr0,0x4/eq,taken=40%(40,60)
  206|                              CL.34:
  206| 000678 ld       E8010210   1     L8        gr0=#stack(gr1,528)
  206| 00067C lwa      E981020A   1     L4A       gr12=#stack(gr1,520)
  206| 000680 lfd      CBE101F8   1     LFL       fp31=#stack(gr1,504)
  206| 000684 lfd      CBC101F0   1     LFL       fp30=#stack(gr1,496)
  206| 000688 lfd      CBA101E8   1     LFL       fp29=#stack(gr1,488)
  206| 00068C addi     38210200   1     AI        gr1=gr1,512
  206| 000690 mtspr    7C0803A6   1     LLR       lr=gr0
  206| 000694 mtcrf    7D808120   1     MTCRF     cr4=gr12
  206| 000698 ld       E9C1FF58   1     L8        gr14=#stack(gr1,-168)
  206| 00069C ld       E9E1FF60   1     L8        gr15=#stack(gr1,-160)
  206| 0006A0 ld       EA01FF68   1     L8        gr16=#stack(gr1,-152)
  206| 0006A4 ld       EA21FF70   1     L8        gr17=#stack(gr1,-144)
  206| 0006A8 ld       EA41FF78   1     L8        gr18=#stack(gr1,-136)
  206| 0006AC ld       EA61FF80   1     L8        gr19=#stack(gr1,-128)
  206| 0006B0 ld       EA81FF88   1     L8        gr20=#stack(gr1,-120)
  206| 0006B4 ld       EAA1FF90   1     L8        gr21=#stack(gr1,-112)
  206| 0006B8 ld       EAC1FF98   1     L8        gr22=#stack(gr1,-104)
  206| 0006BC ld       EAE1FFA0   1     L8        gr23=#stack(gr1,-96)
  206| 0006C0 ld       EB01FFA8   1     L8        gr24=#stack(gr1,-88)
  206| 0006C4 ld       EB21FFB0   1     L8        gr25=#stack(gr1,-80)
  206| 0006C8 ld       EB41FFB8   1     L8        gr26=#stack(gr1,-72)
  206| 0006CC ld       EB61FFC0   1     L8        gr27=#stack(gr1,-64)
  206| 0006D0 ld       EB81FFC8   1     L8        gr28=#stack(gr1,-56)
  206| 0006D4 ld       EBA1FFD0   1     L8        gr29=#stack(gr1,-48)
  206| 0006D8 ld       EBC1FFD8   1     L8        gr30=#stack(gr1,-40)
  206| 0006DC ld       EBE1FFE0   1     L8        gr31=#stack(gr1,-32)
  206| 0006E0 bclr     4E800020   1     BA        lr
    0|                              CL.180:
  202| 0006E4 ld       E87F05D0   1     L8        gr3=<s39:d1488:l8>(gr31,1488)
  202| 0006E8 ld       E89F0638   1     L8        gr4=<s39:d1592:l8>(gr31,1592)
  202| 0006EC bl       48000001   1     CALL      pdv_d,2,w3dd",gr3,w3de",gr4,pdv_d",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  202| 0006F0 ori      60000000   1
    0| 0006F4 b        4BFFFF84   1     B         CL.34,-1
     |               Tag Table
     | 0006F8        00000000 00012203 83120000 000006F8
     |               Instruction count          446
     |               Straight-line exec time    450
     |               Constant Area
     | 000000        2B617F7D 4ED8C33E 00000000 BF800000

 
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              NODIRECTSTORAG  ESCAPE          I4
         INLGLUE         NOLIBESSL       NOLIBPOSIX      OBJECT
         SWAPOMP         THREADED        UNWIND          ZEROSIZE
  
         ==  Options Of Integer Type ==
         ALIAS_SIZE(65536)     MAXMEM(-1)            OPTIMIZE(3)
         SPILLSIZE(512)        STACKTEMP(0)
  
         ==  Options of Integer and Character Type ==
         CACHE(LEVEL(1),TYPE(I),ASSOC(4),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(I),ASSOC(16),COST(80),LINE(128))
         CACHE(LEVEL(1),TYPE(D),ASSOC(8),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(D),ASSOC(16),COST(80),LINE(128))
         INLINE(NOAUTO,LEVEL(5))
         HOT(FASTMATH,LEVEL(0))
         SIMD(AUTO)
  
         ==  Options Of Character Type  ==
         64()                  ALIAS(STD,NOINTPTR)   ALIGN(BINDC(LINUXPPC),STRUCT(NATURAL))
         ARCH(QP)              AUTODBL(NONE)         DESCRIPTOR(V1)
         DIRECTIVE(IBM*,IBMT)  ENUM()                FLAG(I,I)
         FLOAT(MAF,FOLD,RSQRT,FLTINT)
         FREE(F90)             GNU_VERSION(DOT_TRIPLE)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LIST()                LANGLVL(EXTENDED)     REALSIZE(4)
         REPORT(HOTLIST)       STRICT(NONE,NOPRECISION,NOEXCEPTIONS,NOIEEEFP,NONANS,NOINFINITIES,NOSUBNORMALS,NOZEROSIGNS,NOOPERATIONPRECISION,ORDER,NOLIBRARY,NOCONSTRUCTCOPY,NOVECTORPRECISION)
         TUNE(QP)              UNROLL(AUTO)          XFLAG()
         XLF2003(NOPOLYMORPHIC,NOBOZLITARGS,NOSIGNDZEROINTR,NOSTOPEXCEPT,NOVOLATILE,NOAUTOREALLOC,OLDNANINF)
         XLF2008(NOCHECKPRESENCE)
         XLF77(LEADZERO,BLANKPAD)
         XLF90(SIGNEDZERO,AUTODEALLOC)
  
>>>>> SOURCE SECTION <<<<<
 
>>>>> FILE TABLE SECTION <<<<<
 
 
                                       FILE CREATION        FROM
FILE NO   FILENAME                    DATE       TIME       FILE    LINE
     0    srcstep.f90                 07/08/15   15:48:36
 
 
>>>>> COMPILATION EPILOGUE SECTION <<<<<
 
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
 
    Source records read.......................................     213
1501-510  Compilation successful for file srcstep.f90.
1501-543  Object file created.

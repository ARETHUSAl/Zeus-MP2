IBM XL Fortran for Blue Gene, V14.1 (5799-AH1) Version 14.01.0000.0012 --- diverg.f90 07/08/15 15:47:33
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              NODIRECTSTORAG  ESCAPE          I4
         INLGLUE         NOLIBESSL       NOLIBPOSIX      OBJECT
         SWAPOMP         THREADED        UNWIND          ZEROSIZE
  
         ==  Options Of Integer Type ==
         ALIAS_SIZE(65536)     MAXMEM(-1)            OPTIMIZE(3)
         SPILLSIZE(512)        STACKTEMP(0)
  
         ==  Options of Integer and Character Type ==
         CACHE(LEVEL(1),TYPE(I),ASSOC(4),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(I),ASSOC(16),COST(80),LINE(128))
         CACHE(LEVEL(1),TYPE(D),ASSOC(8),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(D),ASSOC(16),COST(80),LINE(128))
         INLINE(NOAUTO,LEVEL(5))
         HOT(FASTMATH,LEVEL(0))
         SIMD(AUTO)
  
         ==  Options Of Character Type  ==
         64()                  ALIAS(STD,NOINTPTR)   ALIGN(BINDC(LINUXPPC),STRUCT(NATURAL))
         ARCH(QP)              AUTODBL(NONE)         DESCRIPTOR(V1)
         DIRECTIVE(IBM*,IBMT)  ENUM()                FLAG(I,I)
         FLOAT(MAF,FOLD,RSQRT,FLTINT)
         FREE(F90)             GNU_VERSION(DOT_TRIPLE)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LIST()                LANGLVL(EXTENDED)     REALSIZE(4)
         REPORT(HOTLIST)       STRICT(NONE,NOPRECISION,NOEXCEPTIONS,NOIEEEFP,NONANS,NOINFINITIES,NOSUBNORMALS,NOZEROSIGNS,NOOPERATIONPRECISION,ORDER,NOLIBRARY,NOCONSTRUCTCOPY,NOVECTORPRECISION)
         TUNE(QP)              UNROLL(AUTO)          XFLAG()
         XLF2003(NOPOLYMORPHIC,NOBOZLITARGS,NOSIGNDZEROINTR,NOSTOPEXCEPT,NOVOLATILE,NOAUTOREALLOC,OLDNANINF)
         XLF2008(NOCHECKPRESENCE)
         XLF77(LEADZERO,BLANKPAD)
         XLF90(SIGNEDZERO,AUTODEALLOC)
  
>>>>> SOURCE SECTION <<<<<
** diverg   === End of Compilation 1 ===
 
>>>>> LOOP TRANSFORMATION SECTION <<<<<

1586-534 (I) Loop (loop index 1) at diverg.f90 <line 76> was not SIMD vectorized because the loop is not the innermost loop.
1586-534 (I) Loop (loop index 2) at diverg.f90 <line 78> was not SIMD vectorized because the loop is not the innermost loop.
1586-535 (I) Loop (loop index 3) at diverg.f90 <line 80> was not SIMD vectorized because the aliasing-induced dependence prevents SIMD vectorization.
1586-536 (I) Loop (loop index 3) at diverg.f90 <line 82> was not SIMD vectorized because it contains memory references ((char *).div  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll))) + (8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))*($$CIV2 + ((long long) ks - (long long) (ldimen == 3 ? 1 : 0) * 2ll)) + (max((long long) in,0ll) * 8ll)*(($$CIV1 + (long long) js) - 2ll) + (8ll)*(($$CIV0 + (long long) is) - 2ll)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 3) at diverg.f90 <line 82> was not SIMD vectorized because it contains operation in (((((double *)((char *)d-g2a%addr  + d-g2a%rvo))->g2a[].rns8.[($$CIV0 + (long long) is) - 1ll] * ((double *)((char *)d-g31a%addr  + d-g31a%rvo))->g31a[].rns7.[($$CIV0 + (long long) is) - 1ll]) * ((double *)((char *).c1  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->c1[][$$CIV2 + ((long long) ks - (long long) (ldimen == 3 ? 1 : 0) * 2ll)][($$CIV1 + (long long) js) - 2ll][($$CIV0 + (long long) is) - 1ll] - (((double *)((char *)d-g2a%addr  + d-g2a%rvo))->g2a[].rns8.[($$CIV0 + (long long) is) - 2ll] * ((double *)((char *)d-g31a%addr  + d-g31a%rvo))->g31a[].rns7.[($$CIV0 + (long long) is) - 2ll]) * ((double *)((char *).c1  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->c1[][$$CIV2 + ((long long) ks - (long long) (ldimen == 3 ? 1 : 0) * 2ll)][($$CIV1 + (long long) js) - 2ll][($$CIV0 + (long long) is) - 2ll]) * ((double *)((char *)d-dvl1ai%addr  + d-dvl1ai%rvo))->dvl1ai[].rns6.[($$CIV0 + (long long) is) - 2ll] + ((((double *)((char *)d-g32a%addr  + d-g32a%rvo))->g32a[].rns5.[($$CIV1 + (long long) js) - 1ll] * ((double *)((char *).c2  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->c2[][$$CIV2 + ((long long) ks - (long long) (ldimen == 3 ? 1 : 0) * 2ll)][($$CIV1 + (long long) js) - 1ll][($$CIV0 + (long long) is) - 2ll] - ((double *)((char *)d-g32a%addr  + d-g32a%rvo))->g32a[].rns5.[($$CIV1 + (long long) js) - 2ll] * ((double *)((char *).c2  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->c2[][$$CIV2 + ((long long) ks - (long long) (ldimen == 3 ? 1 : 0) * 2ll)][($$CIV1 + (long long) js) - 2ll][($$CIV0 + (long long) is) - 2ll]) * ((double *)((char *)d-g2bi%addr  + d-g2bi%rvo))->g2bi[].rns4.[($$CIV0 + (long long) is) - 2ll]) * ((double *)((char *)d-dvl2ai%addr  + d-dvl2ai%rvo))->dvl2ai[].rns3.[($$CIV1 + (long long) js) - 2ll]) + (((((double *)((char *).c3  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->c3[][$$CIV2 + ((long long) ks - (long long) (ldimen == 3 ? 1 : 0))][($$CIV1 + (long long) js) - 2ll][($$CIV0 + (long long) is) - 2ll] - ((double *)((char *).c3  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->c3[][$$CIV2 + ((long long) ks - (long long) (ldimen == 3 ? 1 : 0) * 2ll)][($$CIV1 + (long long) js) - 2ll][($$CIV0 + (long long) is) - 2ll]) * ((double *)((char *)d-g31bi%addr  + d-g31bi%rvo))->g31bi[].rns2.[($$CIV0 + (long long) is) - 2ll]) * ((double *)((char *)d-g32bi%addr  + d-g32bi%rvo))->g32bi[].rns1.[($$CIV1 + (long long) js) - 2ll]) * ((double *)((char *)d-dvl3ai%addr  + d-dvl3ai%rvo))->dvl3ai[].rns0.[$$CIV2 + ((long long) ks - (long long) (ldimen == 3 ? 1 : 0) * 2ll)] which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 3) at diverg.f90 <line 82> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-534 (I) Loop (loop index 4) at diverg.f90 <line 100> was not SIMD vectorized because the loop is not the innermost loop.
1586-534 (I) Loop (loop index 5) at diverg.f90 <line 101> was not SIMD vectorized because the loop is not the innermost loop.
1586-535 (I) Loop (loop index 6) at diverg.f90 <line 102> was not SIMD vectorized because the aliasing-induced dependence prevents SIMD vectorization.
1586-537 (I) Loop (loop index 6) at diverg.f90 <line 103> was not SIMD vectorized because it contains operation in $$SCREP1 + ((double *)((char *).div  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->div[][(long long) ks + $$CIV5][(long long) js + $$CIV4][(long long) is + $$CIV3] which is not suitable for SIMD vectorization.
1586-549 (I) Loop (loop index 6) at diverg.f90 <line 103> was not SIMD vectorized because a data dependence  prevents SIMD vectorization.
1586-554 (I) Loop (loop index 6) at diverg.f90 <line 103> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-534 (I) Loop (loop index 7) at diverg.f90 <line 122> was not SIMD vectorized because the loop is not the innermost loop.
1586-534 (I) Loop (loop index 8) at diverg.f90 <line 124> was not SIMD vectorized because the loop is not the innermost loop.
1586-535 (I) Loop (loop index 9) at diverg.f90 <line 126> was not SIMD vectorized because the aliasing-induced dependence prevents SIMD vectorization.
1586-536 (I) Loop (loop index 9) at diverg.f90 <line 128> was not SIMD vectorized because it contains memory references ((char *)d-dx1a%addr  + d-dx1a%rvo + (8ll)*((long long) is + $$CIV6)) with non-vectorizable alignment.
1586-537 (I) Loop (loop index 9) at diverg.f90 <line 128> was not SIMD vectorized because it contains operation in ( 5.0000000000000000E-001 * ((abs(((double *)((char *).c1  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->c1[][(long long) ks + $$CIV8][(long long) js + $$CIV7][1ll + ($$CIV6 + (long long) is)] + ((double *)((char *).c1  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->c1[][(long long) ks + $$CIV8][(long long) js + $$CIV7][(long long) is + $$CIV6]) + abs(((double *)((char *).c2  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->c2[][(long long) ks + $$CIV8][1ll + ($$CIV7 + (long long) js)][(long long) is + $$CIV6] + ((double *)((char *).c2  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->c2[][(long long) ks + $$CIV8][(long long) js + $$CIV7][(long long) is + $$CIV6])) + abs(((double *)((char *).c3  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->c3[][$$CIV8 + ((long long) ks + (long long) (ldimen == 3 ? 1 : 0))][(long long) js + $$CIV7][(long long) is + $$CIV6] + ((double *)((char *).c3  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->c3[][(long long) ks + $$CIV8][(long long) js + $$CIV7][(long long) is + $$CIV6]))) / ((((double *)((char *)d-dx1a%addr  + d-dx1a%rvo))->dx1a[].rns15.[(long long) is + $$CIV6] + ((double *)((char *)d-g2b%addr  + d-g2b%rvo))->g2b[].rns14.[(long long) is + $$CIV6] * ((double *)((char *)d-dx2a%addr  + d-dx2a%rvo))->dx2a[].rns13.[(long long) js + $$CIV7]) + (((double *)((char *)d-g31b%addr  + d-g31b%rvo))->g31b[].rns12.[(long long) is + $$CIV6] * ((double *)((char *)d-g32b%addr  + d-g32b%rvo))->g32b[].rns11.[(long long) js + $$CIV7]) * ((double *)((char *)d-dx3a%addr  + d-dx3a%rvo))->dx3a[].rns10.[(long long) ks + $$CIV8]) which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 9) at diverg.f90 <line 128> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-537 (I) Loop (loop index 9) at diverg.f90 <line 134> was not SIMD vectorized because it contains operation in max(nmax,$$SCREP0) which is not suitable for SIMD vectorization.
1586-549 (I) Loop (loop index 9) at diverg.f90 <line 134> was not SIMD vectorized because a data dependence  prevents SIMD vectorization.
1586-554 (I) Loop (loop index 9) at diverg.f90 <line 134> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-537 (I) Loop (loop index 9) at diverg.f90 <line 133> was not SIMD vectorized because it contains operation in sumn + $$SCREP0 which is not suitable for SIMD vectorization.
1586-549 (I) Loop (loop index 9) at diverg.f90 <line 133> was not SIMD vectorized because a data dependence  prevents SIMD vectorization.
1586-554 (I) Loop (loop index 9) at diverg.f90 <line 133> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-534 (I) Loop (loop index 10) at diverg.f90 <line 146> was not SIMD vectorized because the loop is not the innermost loop.
1586-534 (I) Loop (loop index 11) at diverg.f90 <line 147> was not SIMD vectorized because the loop is not the innermost loop.
1586-535 (I) Loop (loop index 12) at diverg.f90 <line 148> was not SIMD vectorized because the aliasing-induced dependence prevents SIMD vectorization.
1586-537 (I) Loop (loop index 12) at diverg.f90 <line 149> was not SIMD vectorized because it contains operation in ((double *)((char *).div  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->div[][($$CIVC * 4ll + (1ll + ((long long) ke - (long long) ks)) % 4ll) + (long long) ks][(long long) js + $$CIVA][(long long) is + $$CIV9] * nmaxi which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 12) at diverg.f90 <line 149> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-537 (I) Loop (loop index 12) at diverg.f90 <line 149> was not SIMD vectorized because it contains operation in ((double *)((char *).div  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->div[][3ll + (($$CIVC * 4ll + (1ll + ((long long) ke - (long long) ks)) % 4ll) + (long long) ks)][(long long) js + $$CIVA][(long long) is + $$CIV9] * nmaxi which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 12) at diverg.f90 <line 149> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-537 (I) Loop (loop index 12) at diverg.f90 <line 149> was not SIMD vectorized because it contains operation in ((double *)((char *).div  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->div[][1ll + (($$CIVC * 4ll + (1ll + ((long long) ke - (long long) ks)) % 4ll) + (long long) ks)][(long long) js + $$CIVA][(long long) is + $$CIV9] * nmaxi which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 12) at diverg.f90 <line 149> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-537 (I) Loop (loop index 12) at diverg.f90 <line 149> was not SIMD vectorized because it contains operation in ((double *)((char *).div  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->div[][2ll + (($$CIVC * 4ll + (1ll + ((long long) ke - (long long) ks)) % 4ll) + (long long) ks)][(long long) js + $$CIVA][(long long) is + $$CIV9] * nmaxi which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 12) at diverg.f90 <line 149> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-534 (I) Loop (loop index 16) at diverg.f90 <line 146> was not SIMD vectorized because the loop is not the innermost loop.
1586-534 (I) Loop (loop index 17) at diverg.f90 <line 147> was not SIMD vectorized because the loop is not the innermost loop.
1586-535 (I) Loop (loop index 18) at diverg.f90 <line 148> was not SIMD vectorized because the aliasing-induced dependence prevents SIMD vectorization.
1586-537 (I) Loop (loop index 18) at diverg.f90 <line 149> was not SIMD vectorized because it contains operation in ((double *)((char *).div  + -8ll - (max((long long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * max((long long) in,0ll)))))->div[][(long long) ks + $$CIVB][(long long) js + $$CIVA][(long long) is + $$CIV9] * nmaxi which is not suitable for SIMD vectorization.
1586-554 (I) Loop (loop index 18) at diverg.f90 <line 149> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"5">. Total number of the innermost loops SIMD vectorized <"0">.


    11|         SUBROUTINE diverg (c1, c2, c3, inorm, isum, div, sumd)
    11|           d-norm%addr = _alloca((max(int(%VAL(ijkn)),0) * 8))
                  _alloca((max(int(%VAL(ijkn)),0) * 8))
                  _alloca((max(int(%VAL(ijkn)),0) * 8))
                  _alloca((max(int(%VAL(ijkn)),0) * 8))
    76|           IF ((1 + (int(((ldimen == 3 ? 1 : 0) * 2 + ke)) - int((ks - (&
                &   ldimen == 3 ? 1 : 0) * 2))) > 0)) THEN
                    $$CIV2 = 0
       Id=1         DO $$CIV2 = $$CIV2, int((1 + (int(((ldimen == 3 ? 1 : 0) &
                &       * 2 + ke)) - int((ks - (ldimen == 3 ? 1 : 0) * 2)))))-1
    78|               IF ((1 + (int((je + 2)) - int((js - 2))) > 0)) THEN
                        $$CIV1 = 0
       Id=2             DO $$CIV1 = $$CIV1, int((1 + (int((je + 2)) - int((js &
                &           - 2)))))-1
    80|                   IF ((1 + (int((ie + 2)) - int((is - 2))) > 0)) THEN
                            $$CIV0 = 0
                            $$PRC2 = c1(int(is) - 2,(int(js) + $$CIV1) - 2,int(&
                &             ks) + ($$CIV2 - int((ldimen == 3 ? 1 : 0)) * 2))
                            $$PRC4 = d-g31a%addr%g31a(int(is) - 2)
                            $$PRC6 = d-g2a%addr%g2a(int(is) - 2)
       Id=3                 DO $$CIV0 = $$CIV0, int((1 + (int((ie + 2)) - int(&
                &               (is - 2)))))-1
                              $$PRC3 = c1((int(is) + $$CIV0) - 1,(int(js) + &
                &               $$CIV1) - 2,int(ks) + ($$CIV2 - int((ldimen == 3 &
                &               ? 1 : 0)) * 2))
                              $$PRC5 = d-g31a%addr%g31a((int(is) + $$CIV0) - 1)
                              $$PRC7 = d-g2a%addr%g2a((int(is) + $$CIV0) - 1)
    82|                       div(($$CIV0 + int(is)) - 2,($$CIV1 + int(js)) - 2,&
                &               $$CIV2 + (int(ks) - int((ldimen == 3 ? 1 : 0)) * &
                &               2)) = ((($$PRC7 * $$PRC5) * $$PRC3 - ($$PRC6 * &
                &               $$PRC4) * $$PRC2) * d-dvl1ai%addr%dvl1ai(($$CIV0 &
                &               + int(is)) - 2) + ((d-g32a%addr%g32a(($$CIV1 + &
                &               int(js)) - 1) * c2(($$CIV0 + int(is)) - 2,($$CIV1 &
                &               + int(js)) - 1,$$CIV2 + (int(ks) - int((ldimen == &
                &               3 ? 1 : 0)) * 2)) - d-g32a%addr%g32a(($$CIV1 + &
                &               int(js)) - 2) * c2(($$CIV0 + int(is)) - 2,($$CIV1 &
                &               + int(js)) - 2,$$CIV2 + (int(ks) - int((ldimen == &
                &               3 ? 1 : 0)) * 2))) * d-g2bi%addr%g2bi(($$CIV0 + &
                &               int(is)) - 2)) * d-dvl2ai%addr%dvl2ai(($$CIV1 + &
                &               int(js)) - 2)) + (((c3(($$CIV0 + int(is)) - 2,(&
                &               $$CIV1 + int(js)) - 2,$$CIV2 + (int(ks) - int((&
                &               ldimen == 3 ? 1 : 0)))) - c3(($$CIV0 + int(is)) - &
                &               2,($$CIV1 + int(js)) - 2,$$CIV2 + (int(ks) - int((&
                &               ldimen == 3 ? 1 : 0)) * 2))) * d-g31bi%addr%g31bi(&
                &               ($$CIV0 + int(is)) - 2)) * d-g32bi%addr%g32bi((&
                &               $$CIV1 + int(js)) - 2)) * d-dvl3ai%addr%dvl3ai(&
                &               $$CIV2 + (int(ks) - int((ldimen == 3 ? 1 : 0)) * &
                &               2))
                              $$PRC6 = $$PRC7
                              $$PRC4 = $$PRC5
                              $$PRC2 = $$PRC3
    90|                     ENDDO
                          ENDIF
    91|                 ENDDO
                      ENDIF
    92|             ENDDO
                  ENDIF
    98|           sumd =  0.0000000000000000E+000
    99|           IF ((isum == 1)) THEN
   100|             IF (.NOT.(1 + (int(ke) - int(ks)) > 0)) GOTO lab_63
                    $$CIV5 = 0
       Id=4         DO $$CIV5 = $$CIV5, int((1 + (int(ke) - int(ks))))-1
   101|               IF ((1 + (int(je) - int(js)) > 0)) THEN
                        $$CIV4 = 0
       Id=5             DO $$CIV4 = $$CIV4, int((1 + (int(je) - int(js))))-1
   102|                   IF ((1 + (int(ie) - int(is)) > 0)) THEN
                            $$CIV3 = 0
                            $$SCREP1 = sumd
       Id=6                 DO $$CIV3 = $$CIV3, int((1 + (int(ie) - int(is))))&
                &               -1
   103|                       $$SCREP1 = $$SCREP1 + div(int(is) + $$CIV3,int(js)&
                &                + $$CIV4,int(ks) + $$CIV5)
   104|                     ENDDO
                            sumd = $$SCREP1
                          ENDIF
   105|                 ENDDO
                      ENDIF
   106|             ENDDO
                    lab_63
   107|             lab_15
   111|             IF ((inorm == 1)) THEN
   120|               sumn =  0.0000000000000000E+000
   121|               nmax =  0.0000000000000000E+000
   122|               IF ((1 + (int(ke) - int(ks)) > 0)) THEN
                        $$CIV8 = 0
       Id=7             DO $$CIV8 = $$CIV8, int((1 + (int(ke) - int(ks))))-1
   124|                   IF ((1 + (int(je) - int(js)) > 0)) THEN
                            $$CIV7 = 0
       Id=8                 DO $$CIV7 = $$CIV7, int((1 + (int(je) - int(js))))&
                &               -1
   126|                       IF ((1 + (int(ie) - int(is)) > 0)) THEN
                                $$CIV6 = 0
                                $$PRC0 = c1(int(is),$$CIV7 + int(js),$$CIV8 + &
                &                 int(ks))
       Id=9                     DO $$CIV6 = $$CIV6, int((1 + (int(ie) - int(&
                &                   is))))-1
                                  $$PRC1 = c1(1 + (int(is) + $$CIV6),$$CIV7 + &
                &                   int(js),$$CIV8 + int(ks))
   128|                           $$SCREP0 = ( 5.0000000000000000E-001 * ((abs(&
                &                   $$PRC1 + $$PRC0) + abs(c2(int(is) + $$CIV6,1 &
                &                   + ($$CIV7 + int(js)),int(ks) + $$CIV8) + c2(&
                &                   int(is) + $$CIV6,int(js) + $$CIV7,int(ks) + &
                &                   $$CIV8))) + abs(c3(int(is) + $$CIV6,int(js) + &
                &                   $$CIV7,$$CIV8 + (int(ks) + int((ldimen == 3 ? &
                &                   1 : 0)))) + c3(int(is) + $$CIV6,int(js) + &
                &                   $$CIV7,int(ks) + $$CIV8)))) / ((&
                &                   d-dx1a%addr%dx1a(int(is) + $$CIV6) + &
                &                   d-g2b%addr%g2b(int(is) + $$CIV6) * &
                &                   d-dx2a%addr%dx2a(int(js) + $$CIV7)) + (&
                &                   d-g31b%addr%g31b(int(is) + $$CIV6) * &
                &                   d-g32b%addr%g32b(int(js) + $$CIV7)) * &
                &                   d-dx3a%addr%dx3a(int(ks) + $$CIV8))
   133|                           sumn = sumn + $$SCREP0
   134|                           nmax = max(nmax,$$SCREP0)
                                  $$PRC0 = $$PRC1
   135|                         ENDDO
                              ENDIF
   136|                     ENDDO
                          ENDIF
   137|                 ENDDO
                      ENDIF
                      sumd = MERGE( 0.0000000000000000E+000, sumd, sumn ==  0.0000000000000000E+000)
   143|               IF ((sumn <>  0.0000000000000000E+000)) THEN
                        sumd = sumd / sumn
                      ENDIF
                      nmaxi = MERGE( 0.0000000000000000E+000, nmaxi, nmax ==  0.0000000000000000E+000)
   145|               IF ((nmax <>  0.0000000000000000E+000)) THEN
                        nmaxi =  1.0000000000000000E+000 / nmax
                      ENDIF
   146|               IF ((MOD((1 + (int(ke) - int(ks))), 4) > 0  .AND.  1 + (&
                &       int(ke) - int(ks)) > 0)) THEN
                        $$CIVB = 0
       Id=16            DO $$CIVB = $$CIVB, MOD((1 + (int(ke) - int(ks))), &
                &           int(4))-1
   147|                   IF ((1 + (int(je) - int(js)) > 0)) THEN
                            $$CIVA = 0
       Id=17                DO $$CIVA = $$CIVA, int((1 + (int(je) - int(js))))&
                &               -1
   148|                       IF ((1 + (int(ie) - int(is)) > 0)) THEN
                                $$CIV9 = 0
       Id=18                    DO $$CIV9 = $$CIV9, int((1 + (int(ie) - int(&
                &                   is))))-1
   149|                           div(int(is) + $$CIV9,int(js) + $$CIVA,int(ks) &
                &                   + $$CIVB) = div(int(is) + $$CIV9,int(js) + &
                &                   $$CIVA,int(ks) + $$CIVB) * nmaxi
   150|                         ENDDO
                              ENDIF
   151|                     ENDDO
                          ENDIF
   152|                 ENDDO
                      ENDIF
   146|               IF (.NOT.(1 + (int(ke) - int(ks)) > 0  .AND.  1 + (int(ke)&
                &        - int(ks)) > MOD((1 + (int(ke) - int(ks))), 4))) GOTO &
                &       lab_75
                      $$CIVC = int(0)
       Id=10          DO $$CIVC = $$CIVC, int(((int(ke) - (MOD((1 + (int(ke) &
                &         - int(ks))), 4) + int(ks))) / 4 + 1))-1
   147|                 IF ((1 + (int(je) - int(js)) > 0)) THEN
                          $$CIVA = 0
       Id=11              DO $$CIVA = $$CIVA, int((1 + (int(je) - int(js))))&
                &             -1
   148|                     IF ((1 + (int(ie) - int(is)) > 0)) THEN
                              $$CIV9 = 0
       Id=12                  DO $$CIV9 = $$CIV9, int((1 + (int(ie) - int(is))&
                &                 ))-1
   149|                         div(int(is) + $$CIV9,int(js) + $$CIVA,($$CIVC * &
                &                 4 + MOD((1 + (int(ke) - int(ks))), 4)) + int(ks)&
                &                 ) = div(int(is) + $$CIV9,int(js) + $$CIVA,(&
                &                 $$CIVC * 4 + MOD((1 + (int(ke) - int(ks))), 4)) &
                &                 + int(ks)) * nmaxi
                                div(int(is) + $$CIV9,int(js) + $$CIVA,1 + ((&
                &                 $$CIVC * 4 + MOD((1 + (int(ke) - int(ks))), 4)) &
                &                 + int(ks))) = div(int(is) + $$CIV9,int(js) + &
                &                 $$CIVA,1 + (($$CIVC * 4 + MOD((1 + (int(ke) - &
                &                 int(ks))), 4)) + int(ks))) * nmaxi
                                div(int(is) + $$CIV9,int(js) + $$CIVA,2 + ((&
                &                 $$CIVC * 4 + MOD((1 + (int(ke) - int(ks))), 4)) &
                &                 + int(ks))) = div(int(is) + $$CIV9,int(js) + &
                &                 $$CIVA,2 + (($$CIVC * 4 + MOD((1 + (int(ke) - &
                &                 int(ks))), 4)) + int(ks))) * nmaxi
                                div(int(is) + $$CIV9,int(js) + $$CIVA,3 + ((&
                &                 $$CIVC * 4 + MOD((1 + (int(ke) - int(ks))), 4)) &
                &                 + int(ks))) = div(int(is) + $$CIV9,int(js) + &
                &                 $$CIVA,3 + (($$CIVC * 4 + MOD((1 + (int(ke) - &
                &                 int(ks))), 4)) + int(ks))) * nmaxi
   150|                       ENDDO
                            ENDIF
   151|                   ENDDO
                        ENDIF
   152|               ENDDO
                      lab_75
   154|               lab_28
   157|               RETURN
                    END SUBROUTINE diverg


Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
         0            76             1    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            78             2    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            80             3    Loop was not SIMD vectorized because the 
                                          aliasing-induced dependence  prevents SIMD 
                                          vectorization.
         0            82                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).div  + -8ll - (max((long 
                                          long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) 
                                          * max((long long) in,0ll))) + (8ll * (max((long long) 
                                          jn,0ll) * max((long long) in,0ll)))*($$CIV2 + ((long 
                                          long) ks - (long long) (ldimen == 3 ? 1 : 0) * 2ll)) 
                                          + (max((long long) in,0ll) * 8ll)*(($$CIV1 + (long 
                                          long) js) - 2ll) + (8ll)*(($$CIV0 + (long long) is) - 
                                          2ll))  with non-vectorizable alignment.
         0            82                  Loop was not SIMD vectorized because it contains 
                                          operation in (((((double *)((char *)d-g2a%addr  + 
                                          d-g2a%rvo))->g2a[].rns8.[($$CIV0 + (long long) is) - 
                                          1ll] * ((double *)((char *)d-g31a%addr  + 
                                          d-g31a%rvo))->g31a[].rns7.[($$CIV0 + (long long) is) 
                                          - 1ll]) * ((double *)((char *).c1  + -8ll - 
                                          (max((long long) in,0ll) * 8ll + 8ll * (max((long 
                                          long) jn,0ll) * max((long long) 
                                          in,0ll)))))->c1[][$$CIV2 + ((long long) ks - (long 
                                          long) (ldimen == 3 ? 1 : 0) * 2ll)][($$CIV1 + (long 
                                          long) js) - 2ll][($$CIV0 + (long long) is) - 1ll] - 
                                          (((double *)((char *)d-g2a%addr  + 
                                          d-g2a%rvo))->g2a[].rns8.[($$CIV0 + (long long) is) - 
                                          2ll] * ((double *)((char *)d-g31a%addr  + 
                                          d-g31a%rvo))->g31a[].rns7.[($$CIV0 + (long long) is) 
                                          - 2ll]) * ((double *)((char *).c1  + -8ll - 
                                          (max((long long) in,0ll) * 8ll + 8ll * (max((long 
                                          long) jn,0ll) * max((long long) 
                                          in,0ll)))))->c1[][$$CIV2 + ((long long) ks - (long 
                                          long) (ldimen == 3 ? 1 : 0) * 2ll)][($$CIV1 + (long 
                                          long) js) - 2ll][($$CIV0 + (long long) is) - 2ll]) * 
                                          ((double *)((char *)d-dvl1ai%addr  + 
                                          d-dvl1ai%rvo))->dvl1ai[].rns6.[($$CIV0 + (long long) 
                                          is) - 2ll] + ((((double *)((char *)d-g32a%addr  + 
                                          d-g32a%rvo))->g32a[].rns5.[($$CIV1 + (long long) js) 
                                          - 1ll] * ((double *)((char *).c2  + -8ll - (max((long 
                                          long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) 
                                          * max((long long) in,0ll)))))->c2[][$$CIV2 + ((long 
                                          long) ks - (long long) (ldimen == 3 ? 1 : 0) * 
                                          2ll)][($$CIV1 + (long long) js) - 1ll][($$CIV0 + 
                                          (long long) is) - 2ll] - ((double *)((char 
                                          *)d-g32a%addr  + d-g32a%rvo))->g32a[].rns5.[($$CIV1 + 
                                          (long long) js) - 2ll] * ((double *)((char *).c2  + 
                                          -8ll - (max((long long) in,0ll) * 8ll + 8ll * 
                                          (max((long long) jn,0ll) * max((long long) 
                                          in,0ll)))))->c2[][$$CIV2 + ((long long) ks - (long 
                                          long) (ldimen == 3 ? 1 : 0) * 2ll)][($$CIV1 + (long 
                                          long) js) - 2ll][($$CIV0 + (long long) is) - 2ll]) * 
                                          ((double *)((char *)d-g2bi%addr  + 
                                          d-g2bi%rvo))->g2bi[].rns4.[($$CIV0 + (long long) is) 
                                          - 2ll]) * ((double *)((char *)d-dvl2ai%addr  + 
                                          d-dvl2ai%rvo))->dvl2ai[].rns3.[($$CIV1 + (long long) 
                                          js) - 2ll]) + (((((double *)((char *).c3  + -8ll - 
                                          (max((long long) in,0ll) * 8ll + 8ll * (max((long 
                                          long) jn,0ll) * max((long long) 
                                          in,0ll)))))->c3[][$$CIV2 + ((long long) ks - (long 
                                          long) (ldimen == 3 ? 1 : 0))][($$CIV1 + (long long) 
                                          js) - 2ll][($$CIV0 + (long long) is) - 2ll] - 
                                          ((double *)((char *).c3  + -8ll - (max((long long) 
                                          in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * 
                                          max((long long) in,0ll)))))->c3[][$$CIV2 + ((long 
                                          long) ks - (long long) (ldimen == 3 ? 1 : 0) * 
                                          2ll)][($$CIV1 + (long long) js) - 2ll][($$CIV0 + 
                                          (long long) is) - 2ll]) * ((double *)((char 
                                          *)d-g31bi%addr  + 
                                          d-g31bi%rvo))->g31bi[].rns2.[($$CIV0 + (long long) 
                                          is) - 2ll]) * ((double *)((char *)d-g32bi%addr  + 
                                          d-g32bi%rvo))->g32bi[].rns1.[($$CIV1 + (long long) 
                                          js) - 2ll]) * ((double *)((char *)d-dvl3ai%addr  + 
                                          d-dvl3ai%rvo))->dvl3ai[].rns0.[$$CIV2 + ((long long) 
                                          ks - (long long) (ldimen == 3 ? 1 : 0) * 2ll)] which 
                                          is not  suitable for SIMD vectorization.
         0            82                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           100             4    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0           101             5    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0           102             6    Loop was not SIMD vectorized because the 
                                          aliasing-induced dependence  prevents SIMD 
                                          vectorization.
         0           103                  Loop was not SIMD vectorized because it contains 
                                          operation in $$SCREP1 + ((double *)((char *).div  + 
                                          -8ll - (max((long long) in,0ll) * 8ll + 8ll * 
                                          (max((long long) jn,0ll) * max((long long) 
                                          in,0ll)))))->div[][(long long) ks + $$CIV5][(long 
                                          long) js + $$CIV4][(long long) is + $$CIV3] which is 
                                          not  suitable for SIMD vectorization.
         0           103                  Loop was not SIMD vectorized because a data 
                                          dependence  prevents SIMD  vectorization.
         0           103                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           122             7    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0           124             8    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0           126             9    Loop was not SIMD vectorized because the 
                                          aliasing-induced dependence  prevents SIMD 
                                          vectorization.
         0           128                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-dx1a%addr  + d-dx1a%rvo 
                                          + (8ll)*((long long) is + $$CIV6))  with 
                                          non-vectorizable alignment.
         0           128                  Loop was not SIMD vectorized because it contains 
                                          operation in ( 5.0000000000000000E-001 * 
                                          ((abs(((double *)((char *).c1  + -8ll - (max((long 
                                          long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) 
                                          * max((long long) in,0ll)))))->c1[][(long long) ks + 
                                          $$CIV8][(long long) js + $$CIV7][1ll + ($$CIV6 + 
                                          (long long) is)] + ((double *)((char *).c1  + -8ll - 
                                          (max((long long) in,0ll) * 8ll + 8ll * (max((long 
                                          long) jn,0ll) * max((long long) 
                                          in,0ll)))))->c1[][(long long) ks + $$CIV8][(long 
                                          long) js + $$CIV7][(long long) is + $$CIV6]) + 
                                          abs(((double *)((char *).c2  + -8ll - (max((long 
                                          long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) 
                                          * max((long long) in,0ll)))))->c2[][(long long) ks + 
                                          $$CIV8][1ll + ($$CIV7 + (long long) js)][(long long) 
                                          is + $$CIV6] + ((double *)((char *).c2  + -8ll - 
                                          (max((long long) in,0ll) * 8ll + 8ll * (max((long 
                                          long) jn,0ll) * max((long long) 
                                          in,0ll)))))->c2[][(long long) ks + $$CIV8][(long 
                                          long) js + $$CIV7][(long long) is + $$CIV6])) + 
                                          abs(((double *)((char *).c3  + -8ll - (max((long 
                                          long) in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) 
                                          * max((long long) in,0ll)))))->c3[][$$CIV8 + ((long 
                                          long) ks + (long long) (ldimen == 3 ? 1 : 0))][(long 
                                          long) js + $$CIV7][(long long) is + $$CIV6] + 
                                          ((double *)((char *).c3  + -8ll - (max((long long) 
                                          in,0ll) * 8ll + 8ll * (max((long long) jn,0ll) * 
                                          max((long long) in,0ll)))))->c3[][(long long) ks + 
                                          $$CIV8][(long long) js + $$CIV7][(long long) is + 
                                          $$CIV6]))) / ((((double *)((char *)d-dx1a%addr  + 
                                          d-dx1a%rvo))->dx1a[].rns15.[(long long) is + $$CIV6] 
                                          + ((double *)((char *)d-g2b%addr  + 
                                          d-g2b%rvo))->g2b[].rns14.[(long long) is + $$CIV6] * 
                                          ((double *)((char *)d-dx2a%addr  + 
                                          d-dx2a%rvo))->dx2a[].rns13.[(long long) js + $$CIV7]) 
                                          + (((double *)((char *)d-g31b%addr  + 
                                          d-g31b%rvo))->g31b[].rns12.[(long long) is + $$CIV6] 
                                          * ((double *)((char *)d-g32b%addr  + 
                                          d-g32b%rvo))->g32b[].rns11.[(long long) js + $$CIV7]) 
                                          * ((double *)((char *)d-dx3a%addr  + 
                                          d-dx3a%rvo))->dx3a[].rns10.[(long long) ks + $$CIV8]) 
                                          which is not  suitable for SIMD vectorization.
         0           128                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           133                  Loop was not SIMD vectorized because it contains 
                                          operation in sumn + $$SCREP0 which is not  suitable 
                                          for SIMD vectorization.
         0           133                  Loop was not SIMD vectorized because a data 
                                          dependence  prevents SIMD  vectorization.
         0           133                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           134                  Loop was not SIMD vectorized because it contains 
                                          operation in max(nmax,$$SCREP0) which is not  
                                          suitable for SIMD vectorization.
         0           134                  Loop was not SIMD vectorized because a data 
                                          dependence  prevents SIMD  vectorization.
         0           134                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           146            16    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0           147            17    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0           148            18    Loop was not SIMD vectorized because the 
                                          aliasing-induced dependence  prevents SIMD 
                                          vectorization.
         0           149                  Loop was not SIMD vectorized because it contains 
                                          operation in ((double *)((char *).div  + -8ll - 
                                          (max((long long) in,0ll) * 8ll + 8ll * (max((long 
                                          long) jn,0ll) * max((long long) 
                                          in,0ll)))))->div[][(long long) ks + $$CIVB][(long 
                                          long) js + $$CIVA][(long long) is + $$CIV9] * nmaxi 
                                          which is not  suitable for SIMD vectorization.
         0           149                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           146            10    Outer loop has been unrolled 4 time(s).
         0           146            10    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0           147            11    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0           148            12    Loop was not SIMD vectorized because the 
                                          aliasing-induced dependence  prevents SIMD 
                                          vectorization.
         0           149                  Loop was not SIMD vectorized because it contains 
                                          operation in ((double *)((char *).div  + -8ll - 
                                          (max((long long) in,0ll) * 8ll + 8ll * (max((long 
                                          long) jn,0ll) * max((long long) 
                                          in,0ll)))))->div[][($$CIVC * 4ll + (1ll + ((long 
                                          long) ke - (long long) ks)) % 4ll) + (long long) 
                                          ks][(long long) js + $$CIVA][(long long) is + $$CIV9] 
                                          * nmaxi which is not  suitable for SIMD vectorization.
         0           149                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           149                  Loop was not SIMD vectorized because it contains 
                                          operation in ((double *)((char *).div  + -8ll - 
                                          (max((long long) in,0ll) * 8ll + 8ll * (max((long 
                                          long) jn,0ll) * max((long long) 
                                          in,0ll)))))->div[][1ll + (($$CIVC * 4ll + (1ll + 
                                          ((long long) ke - (long long) ks)) % 4ll) + (long 
                                          long) ks)][(long long) js + $$CIVA][(long long) is + 
                                          $$CIV9] * nmaxi which is not  suitable for SIMD 
                                          vectorization.
         0           149                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           149                  Loop was not SIMD vectorized because it contains 
                                          operation in ((double *)((char *).div  + -8ll - 
                                          (max((long long) in,0ll) * 8ll + 8ll * (max((long 
                                          long) jn,0ll) * max((long long) 
                                          in,0ll)))))->div[][2ll + (($$CIVC * 4ll + (1ll + 
                                          ((long long) ke - (long long) ks)) % 4ll) + (long 
                                          long) ks)][(long long) js + $$CIVA][(long long) is + 
                                          $$CIV9] * nmaxi which is not  suitable for SIMD 
                                          vectorization.
         0           149                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           149                  Loop was not SIMD vectorized because it contains 
                                          operation in ((double *)((char *).div  + -8ll - 
                                          (max((long long) in,0ll) * 8ll + 8ll * (max((long 
                                          long) jn,0ll) * max((long long) 
                                          in,0ll)))))->div[][3ll + (($$CIVC * 4ll + (1ll + 
                                          ((long long) ke - (long long) ks)) % 4ll) + (long 
                                          long) ks)][(long long) js + $$CIVA][(long long) is + 
                                          $$CIV9] * nmaxi which is not  suitable for SIMD 
                                          vectorization.
         0           149                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.


    11|         SUBROUTINE diverg (c1, c2, c3, inorm, isum, div, sumd)
    76|           d-norm%addr = _alloca(max(int(%VAL(ijkn)),0) * 8)
                  _alloca(max(int(%VAL(ijkn)),0) * 8)
                  _alloca(max(int(%VAL(ijkn)),0) * 8)
                  _alloca(max(int(%VAL(ijkn)),0) * 8)
    76|           IF ((1 + (int(((ldimen == 3 ? 1 : 0) * 2 + ke)) - int((ks - (&
                &   ldimen == 3 ? 1 : 0) * 2))) > 0)) THEN
                    $$CIV2 = 0
       Id=1         DO $$CIV2 = $$CIV2, int((1 + (int(((ldimen == 3 ? 1 : 0) &
                &       * 2 + ke)) - int((ks - (ldimen == 3 ? 1 : 0) * 2)))))-1
    78|               IF ((1 + (int((je + 2)) - int((js - 2))) > 0)) THEN
                        $$CIV1 = 0
       Id=2             DO $$CIV1 = $$CIV1, int((1 + (int((je + 2)) - int((js &
                &           - 2)))))-1
    80|                   IF ((1 + (int((ie + 2)) - int((is - 2))) > 0)) THEN
                            $$CIV0 = 0
                            $$csx0 = int(js) + $$CIV1
                            $$PRC2 = c1(int(is) - 2,$$csx0 - 2,int(ks) + (&
                &             $$CIV2 - int((ldimen == 3 ? 1 : 0)) * 2))
                            $$PRC4 = d-g31a%addr%g31a(int(is) - 2)
                            $$PRC6 = d-g2a%addr%g2a(int(is) - 2)
                            $$ICM0 = $$csx0 - 2
    82|                     $$ICM1 = d-g32bi%addr%g32bi($$csx0 - 2)
                            $$ICM2 = d-dvl2ai%addr%dvl2ai($$csx0 - 2)
                            $$ICM3 = d-g32a%addr%g32a($$csx0 - 2)
    80|Id=3                 DO $$CIV0 = $$CIV0, int((1 + (int((ie + 2)) - int(&
                &               (is - 2)))))-1
                              $$PRC3 = c1((int(is) + $$CIV0) - 1,$$ICM0,int(ks) &
                &               + ($$CIV2 - int((ldimen == 3 ? 1 : 0)) * 2))
                              $$PRC5 = d-g31a%addr%g31a((int(is) + $$CIV0) - 1)
                              $$PRC7 = d-g2a%addr%g2a((int(is) + $$CIV0) - 1)
    82|                       div(($$CIV0 + int(is)) - 2,$$ICM0,$$CIV2 + (int(&
                &               ks) - int((ldimen == 3 ? 1 : 0)) * 2)) = (((&
                &               $$PRC7 * $$PRC5) * $$PRC3 - ($$PRC6 * $$PRC4) * &
                &               $$PRC2) * d-dvl1ai%addr%dvl1ai(($$CIV0 + int(is)) &
                &               - 2) + ((d-g32a%addr%g32a($$csx0 - 1) * c2((&
                &               $$CIV0 + int(is)) - 2,$$csx0 - 1,$$CIV2 + (int(ks)&
                &                - int((ldimen == 3 ? 1 : 0)) * 2)) - $$ICM3 * c2(&
                &               ($$CIV0 + int(is)) - 2,$$ICM0,$$CIV2 + (int(ks) - &
                &               int((ldimen == 3 ? 1 : 0)) * 2))) * &
                &               d-g2bi%addr%g2bi(($$CIV0 + int(is)) - 2)) * &
                &               $$ICM2) + (((c3(($$CIV0 + int(is)) - 2,$$ICM0,&
                &               $$CIV2 + (int(ks) - int((ldimen == 3 ? 1 : 0)))) &
                &               - c3(($$CIV0 + int(is)) - 2,$$ICM0,$$CIV2 + (int(&
                &               ks) - int((ldimen == 3 ? 1 : 0)) * 2))) * &
                &               d-g31bi%addr%g31bi(($$CIV0 + int(is)) - 2)) * &
                &               $$ICM1) * d-dvl3ai%addr%dvl3ai($$CIV2 + (int(ks) &
                &               - int((ldimen == 3 ? 1 : 0)) * 2))
                              $$PRC6 = $$PRC7
                              $$PRC4 = $$PRC5
                              $$PRC2 = $$PRC3
    90|                     ENDDO
                          ENDIF
    91|                 ENDDO
                      ENDIF
    92|             ENDDO
                  ENDIF
    98|           sumd =  0.0000000000000000E+000
    99|           IF ((isum == 1)) THEN
   100|             IF (.NOT.(1 + (int(ke) - int(ks)) > 0)) GOTO lab_63
                    $$CIV5 = 0
       Id=4         DO $$CIV5 = $$CIV5, int((1 + (int(ke) - int(ks))))-1
   101|               IF ((1 + (int(je) - int(js)) > 0)) THEN
                        $$CIV4 = 0
       Id=5             DO $$CIV4 = $$CIV4, int((1 + (int(je) - int(js))))-1
   102|                   IF ((1 + (int(ie) - int(is)) > 0)) THEN
                            $$CIV3 = 0
                            $$SCREP1 = sumd
       Id=6                 DO $$CIV3 = $$CIV3, int((1 + (int(ie) - int(is))))&
                &               -1
   103|                       $$SCREP1 = $$SCREP1 + div(int(is) + $$CIV3,int(js)&
                &                + $$CIV4,int(ks) + $$CIV5)
   104|                     ENDDO
                            sumd = $$SCREP1
                          ENDIF
   105|                 ENDDO
                      ENDIF
   106|             ENDDO
                    lab_63
   107|             lab_15
   111|             IF ((inorm == 1)) THEN
   120|               sumn =  0.0000000000000000E+000
   121|               nmax =  0.0000000000000000E+000
   122|               IF ((1 + (int(ke) - int(ks)) > 0)) THEN
                        $$CIV8 = 0
       Id=7             DO $$CIV8 = $$CIV8, int((1 + (int(ke) - int(ks))))-1
   124|                   IF ((1 + (int(je) - int(js)) > 0)) THEN
                            $$CIV7 = 0
       Id=8                 DO $$CIV7 = $$CIV7, int((1 + (int(je) - int(js))))&
                &               -1
   126|                       IF ((1 + (int(ie) - int(is)) > 0)) THEN
                                $$CIV6 = 0
                                $$PRC0 = c1(int(is),$$CIV7 + int(js),$$CIV8 + &
                &                 int(ks))
                                $$ICM4 = $$CIV8 + int(ks)
   128|                         $$ICM5 = d-dx3a%addr%dx3a(int(ks) + $$CIV8)
   126|                         $$ICM6 = $$CIV7 + int(js)
   128|                         $$ICM7 = d-g32b%addr%g32b(int(js) + $$CIV7)
                                $$ICM8 = d-dx2a%addr%dx2a(int(js) + $$CIV7)
                                $$ICM9 = 1 + ($$CIV7 + int(js))
   126|Id=9                     DO $$CIV6 = $$CIV6, int((1 + (int(ie) - int(&
                &                   is))))-1
                                  $$PRC1 = c1(1 + (int(is) + $$CIV6),$$ICM6,&
                &                   $$ICM4)
   128|                           $$SCREP0 = ( 5.0000000000000000E-001 * ((abs(&
                &                   $$PRC1 + $$PRC0) + abs(c2(int(is) + $$CIV6,&
                &                   $$ICM9,$$ICM4) + c2(int(is) + $$CIV6,$$ICM6,&
                &                   $$ICM4))) + abs(c3(int(is) + $$CIV6,$$ICM6,&
                &                   $$CIV8 + (int(ks) + int((ldimen == 3 ? 1 : 0))&
                &                   )) + c3(int(is) + $$CIV6,$$ICM6,$$ICM4)))) / (&
                &                   (d-dx1a%addr%dx1a(int(is) + $$CIV6) + &
                &                   d-g2b%addr%g2b(int(is) + $$CIV6) * $$ICM8) + (&
                &                   d-g31b%addr%g31b(int(is) + $$CIV6) * $$ICM7) &
                &                   * $$ICM5)
   133|                           sumn = sumn + $$SCREP0
   134|                           nmax = max(nmax,$$SCREP0)
                                  $$PRC0 = $$PRC1
   135|                         ENDDO
                              ENDIF
   136|                     ENDDO
                          ENDIF
   137|                 ENDDO
                      ENDIF
                      $$csx1 = MERGE( 0.0000000000000000E+000, sumd, sumn ==  0.0000000000000000E+000)
   142|               sumd = $$csx1
   143|               IF ((sumn <>  0.0000000000000000E+000)) THEN
                        sumd = $$csx1 / sumn
                      ENDIF
                      nmaxi = MERGE( 0.0000000000000000E+000, nmaxi, nmax ==  0.0000000000000000E+000)
   145|               IF ((nmax <>  0.0000000000000000E+000)) THEN
                        nmaxi =  1.0000000000000000E+000 / nmax
                      ENDIF
   146|               IF ((MOD((1 + (int(ke) - int(ks))), 4) > 0  .AND.  1 + (&
                &       int(ke) - int(ks)) > 0)) THEN
                        $$CIVB = 0
       Id=16            DO $$CIVB = $$CIVB, MOD((1 + (int(ke) - int(ks))), &
                &           int(4))-1
   147|                   IF ((1 + (int(je) - int(js)) > 0)) THEN
                            $$CIVA = 0
       Id=17                DO $$CIVA = $$CIVA, int((1 + (int(je) - int(js))))&
                &               -1
   148|                       IF ((1 + (int(ie) - int(is)) > 0)) THEN
                                $$CIV9 = 0
       Id=18                    DO $$CIV9 = $$CIV9, int((1 + (int(ie) - int(&
                &                   is))))-1
   149|                           div(int(is) + $$CIV9,int(js) + $$CIVA,int(ks) &
                &                   + $$CIVB) = div(int(is) + $$CIV9,int(js) + &
                &                   $$CIVA,int(ks) + $$CIVB) * nmaxi
   150|                         ENDDO
                              ENDIF
   151|                     ENDDO
                          ENDIF
   152|                 ENDDO
                      ENDIF
   146|               IF (.NOT.(1 + (int(ke) - int(ks)) > 0  .AND.  1 + (int(ke)&
                &        - int(ks)) > MOD((1 + (int(ke) - int(ks))), 4))) GOTO &
                &       lab_75
                      $$CIVC = int(0)
       Id=10          DO $$CIVC = $$CIVC, int(((int(ke) - (MOD((1 + (int(ke) &
                &         - int(ks))), 4) + int(ks))) / 4 + 1))-1
   147|                 IF ((1 + (int(je) - int(js)) > 0)) THEN
                          $$CIVA = 0
       Id=11              DO $$CIVA = $$CIVA, int((1 + (int(je) - int(js))))&
                &             -1
   148|                     IF ((1 + (int(ie) - int(is)) > 0)) THEN
                              $$CIV9 = 0
       Id=12                  DO $$CIV9 = $$CIV9, int((1 + (int(ie) - int(is))&
                &                 ))-1
   149|                         div(int(is) + $$CIV9,int(js) + $$CIVA,($$CIVC * &
                &                 4 + MOD((1 + (int(ke) - int(ks))), 4)) + int(ks)&
                &                 ) = div(int(is) + $$CIV9,int(js) + $$CIVA,(&
                &                 $$CIVC * 4 + MOD((1 + (int(ke) - int(ks))), 4)) &
                &                 + int(ks)) * nmaxi
                                div(int(is) + $$CIV9,int(js) + $$CIVA,1 + ((&
                &                 $$CIVC * 4 + MOD((1 + (int(ke) - int(ks))), 4)) &
                &                 + int(ks))) = div(int(is) + $$CIV9,int(js) + &
                &                 $$CIVA,1 + (($$CIVC * 4 + MOD((1 + (int(ke) - &
                &                 int(ks))), 4)) + int(ks))) * nmaxi
                                div(int(is) + $$CIV9,int(js) + $$CIVA,2 + ((&
                &                 $$CIVC * 4 + MOD((1 + (int(ke) - int(ks))), 4)) &
                &                 + int(ks))) = div(int(is) + $$CIV9,int(js) + &
                &                 $$CIVA,2 + (($$CIVC * 4 + MOD((1 + (int(ke) - &
                &                 int(ks))), 4)) + int(ks))) * nmaxi
                                div(int(is) + $$CIV9,int(js) + $$CIVA,3 + ((&
                &                 $$CIVC * 4 + MOD((1 + (int(ke) - int(ks))), 4)) &
                &                 + int(ks))) = div(int(is) + $$CIV9,int(js) + &
                &                 $$CIVA,3 + (($$CIVC * 4 + MOD((1 + (int(ke) - &
                &                 int(ks))), 4)) + int(ks))) * nmaxi
   150|                       ENDDO
                            ENDIF
   151|                   ENDDO
                        ENDIF
   152|               ENDDO
                      lab_75
   154|               lab_28
   157|               RETURN
                    END SUBROUTINE diverg

 
 
>>>>> OBJECT SECTION <<<<<
 GPR's set/used:   s-us ssss ssss s-ss  ssss ssss ssss ssss
 FPR's set/used:   ssss ssss ssss ssss  ssss ssss ssss ssss
 CCR's set/used:   ss-- -sss
     | 000000                           PDEF     diverg
   11|                                  PROC      .c1,.c2,.c3,.inorm,.isum,.div,.sumd,gr3-gr9
    0| 000000 stfd     DBE1FFF8   1     STFL      #stack(gr1,-8)=fp31
    0| 000004 stfd     DBC1FFF0   1     STFL      #stack(gr1,-16)=fp30
    0| 000008 stfd     DBA1FFE8   1     STFL      #stack(gr1,-24)=fp29
    0| 00000C stfd     DB81FFE0   1     STFL      #stack(gr1,-32)=fp28
    0| 000010 stfd     DB61FFD8   1     STFL      #stack(gr1,-40)=fp27
    0| 000014 stfd     DB41FFD0   1     STFL      #stack(gr1,-48)=fp26
    0| 000018 stfd     DB21FFC8   1     STFL      #stack(gr1,-56)=fp25
    0| 00001C stfd     DB01FFC0   1     STFL      #stack(gr1,-64)=fp24
    0| 000020 stfd     DAE1FFB8   1     STFL      #stack(gr1,-72)=fp23
    0| 000024 stfd     DAC1FFB0   1     STFL      #stack(gr1,-80)=fp22
    0| 000028 stfd     DAA1FFA8   1     STFL      #stack(gr1,-88)=fp21
    0| 00002C stfd     DA81FFA0   1     STFL      #stack(gr1,-96)=fp20
    0| 000030 stfd     DA61FF98   1     STFL      #stack(gr1,-104)=fp19
    0| 000034 stfd     DA41FF90   1     STFL      #stack(gr1,-112)=fp18
    0| 000038 stfd     DA21FF88   1     STFL      #stack(gr1,-120)=fp17
    0| 00003C stfd     DA01FF80   1     STFL      #stack(gr1,-128)=fp16
    0| 000040 stfd     D9E1FF78   1     STFL      #stack(gr1,-136)=fp15
    0| 000044 stfd     D9C1FF70   1     STFL      #stack(gr1,-144)=fp14
    0| 000048 std      FBE1FF68   1     ST8       #stack(gr1,-152)=gr31
    0| 00004C std      FBC1FF60   1     ST8       #stack(gr1,-160)=gr30
    0| 000050 std      FBA1FF58   1     ST8       #stack(gr1,-168)=gr29
    0| 000054 std      FB81FF50   1     ST8       #stack(gr1,-176)=gr28
    0| 000058 std      FB61FF48   1     ST8       #stack(gr1,-184)=gr27
    0| 00005C std      FB41FF40   1     ST8       #stack(gr1,-192)=gr26
    0| 000060 std      FB21FF38   1     ST8       #stack(gr1,-200)=gr25
    0| 000064 std      FB01FF30   1     ST8       #stack(gr1,-208)=gr24
    0| 000068 std      FAE1FF28   1     ST8       #stack(gr1,-216)=gr23
    0| 00006C std      FAC1FF20   1     ST8       #stack(gr1,-224)=gr22
    0| 000070 std      FAA1FF18   1     ST8       #stack(gr1,-232)=gr21
    0| 000074 std      FA81FF10   1     ST8       #stack(gr1,-240)=gr20
    0| 000078 std      FA61FF08   1     ST8       #stack(gr1,-248)=gr19
    0| 00007C std      FA41FF00   1     ST8       #stack(gr1,-256)=gr18
    0| 000080 std      FA21FEF8   1     ST8       #stack(gr1,-264)=gr17
    0| 000084 std      FA01FEF0   1     ST8       #stack(gr1,-272)=gr16
    0| 000088 std      F9E1FEE8   1     ST8       #stack(gr1,-280)=gr15
    0| 00008C std      F9C1FEE0   1     ST8       #stack(gr1,-288)=gr14
    0| 000090 stdu     F821FCC1   1     ST8U      gr1,#stack(gr1,-832)=gr1
    0| 000094 or       7C3F0B78   1     LR        gr31=gr1
   76| 000098 ld       E9620000   1     L8        gr11=.&&N&&config(gr2,0)
   76| 00009C ld       EBC20000   1     L8        gr30=.&&N&&grid(gr2,0)
    0| 0000A0 ld       E9420000   1     L8        gr10=.&&N&&param(gr2,0)
   76| 0000A4 lwz      816B0004   1     L4Z       gr11=<s210:d4:l4>(gr11,4)
   76| 0000A8 lwz      833E0010   1     L4Z       gr25=<s213:d16:l4>(gr30,16)
   76| 0000AC lwz      801E0014   1     L4Z       gr0=<s213:d20:l4>(gr30,20)
    0| 0000B0 lwa      EB6A0006   1     L4A       gr27=<s16:d4:l4>(gr10,4)
    0| 0000B4 lwa      E94A0002   1     L4A       gr10=<s16:d0:l4>(gr10,0)
   78| 0000B8 lwz      83BE000C   1     L4Z       gr29=<s213:d12:l4>(gr30,12)
   76| 0000BC addi     396BFFFD   1     AI        gr11=gr11,-3
   76| 0000C0 extsw    7F3807B4   1     EXTS4     gr24=gr25
   76| 0000C4 cntlzw   7D740034   1     CNTLZ4    gr20=gr11
   76| 0000C8 std      FB1F0088   1     ST8       #SPILL0(gr31,136)=gr24
   92| 0000CC rlwinm   568BE13C   1     RN4       gr11=gr20,28,0xFFFFFFE
   78| 0000D0 lwz      819E0008   1     L4Z       gr12=<s213:d8:l4>(gr30,8)
   76| 0000D4 add      7F805A14   1     A         gr28=gr0,gr11
   76| 0000D8 subf     7D6BC850   1     S         gr11=gr25,gr11
   76| 0000DC extsw    7F9907B4   1     EXTS4     gr25=gr28
   76| 0000E0 extsw    7D7C07B4   1     EXTS4     gr28=gr11
   80| 0000E4 lwa      EA5E0002   1     L4A       gr18=<s213:d0:l4>(gr30,0)
   80| 0000E8 lwa      EA3E0006   1     L4A       gr17=<s213:d4:l4>(gr30,4)
   76| 0000EC subf     7F9CC850   1     S         gr28=gr25,gr28
   76| 0000F0 sradi    7F7AFE76   1     SRA8      gr26=gr27,63,ca"
   76| 0000F4 sradi    7D4BFE76   1     SRA8      gr11=gr10,63,ca"
   76| 0000F8 addic.   36DC0001   1     AI_R      gr22,cr0=gr28,1,ca"
   80| 0000FC std      FA5F00B0   1     ST8       #SPILL5(gr31,176)=gr18
   76| 000100 std      FADF0098   1     ST8       #SPILL2(gr31,152)=gr22
   80| 000104 std      FA3F00B8   1     ST8       #SPILL6(gr31,184)=gr17
   76| 000108 extsw    7C1507B4   1     EXTS4     gr21=gr0
   78| 00010C extsw    7FB307B4   1     EXTS4     gr19=gr29
   76| 000110 std      FABF00A0   1     ST8       #SPILL3(gr31,160)=gr21
   78| 000114 std      FA7F00A8   1     ST8       #SPILL4(gr31,168)=gr19
   76| 000118 rlwinm   5690D97E   1     SRL4      gr16=gr20,5
   76| 00011C andc     7F77D078   1     ANDC      gr23=gr27,gr26
   76| 000120 andc     7D4F5878   1     ANDC      gr15=gr10,gr11
   76| 000124 std      FAFF0090   1     ST8       #SPILL1(gr31,144)=gr23
   76| 000128 std      FA1F00C0   1     ST8       #SPILL7(gr31,192)=gr16
   78| 00012C extsw    7D8007B4   1     EXTS4     gr0=gr12
   76| 000130 std      F9FF00C8   1     ST8       #SPILL8(gr31,200)=gr15
   76| 000134 bc       40810554   1     BF        CL.57,cr0,0x2/gt,taken=50%(0,0)
    0| 000138 rldicr   7AEB26E4   1     SLL8      gr11=gr23,4
    0| 00013C rldicr   7B0A1F24   1     SLL8      gr10=gr24,3
    0| 000140 neg      7D6B00D0   1     COMP      gr11=gr11
   82| 000144 ld       EB020000   1     L8        gr24=.&&N&grid(gr2,0)
    0| 000148 mulld    7E6AB9D2   1     M         gr19=gr10,gr23
    0| 00014C rldicr   7AEE1F24   1     SLL8      gr14=gr23,3
    0| 000150 mulld    7F8B79D2   1     M         gr28=gr11,gr15
   82| 000154 std      F81F00E8   1     ST8       #SPILL12(gr31,232)=gr0
   82| 000158 rldicr   780B1F24   1     SLL8      gr11=gr0,3
   82| 00015C ld       E81803F0   1     L8        gr0=<s70:d1008:l8>(gr24,1008)
    0| 000160 neg      7E4E00D0   1     COMP      gr18=gr14
    0| 000164 std      F9DF00D0   1     ST8       #SPILL9(gr31,208)=gr14
    0| 000168 mulld    7E6F99D2   1     M         gr19=gr15,gr19
   82| 00016C std      F81F00F0   1     ST8       #SPILL13(gr31,240)=gr0
    0| 000170 ld       E81F00C0   1     L8        gr0=#SPILL7(gr31,192)
    0| 000174 mulld    7DCF91D2   1     M         gr14=gr15,gr18
   78| 000178 addi     3A3D0002   1     AI        gr17=gr29,2
   80| 00017C ld       EBB804D0   1     L8        gr29=<s70:d1232:l8>(gr24,1232)
   82| 000180 ld       EBD805E8   1     L8        gr30=<s70:d1512:l8>(gr24,1512)
   78| 000184 addi     398CFFFE   1     AI        gr12=gr12,-2
   82| 000188 ld       EAD80600   1     L8        gr22=<s70:d1536:l8>(gr24,1536)
    0| 00018C std      F9DF00E0   1     ST8       #SPILL11(gr31,224)=gr14
   78| 000190 extsw    7E3207B4   1     EXTS4     gr18=gr17
   78| 000194 extsw    7D9107B4   1     EXTS4     gr17=gr12
   80| 000198 ld       E99F00B0   1     L8        gr12=#SPILL5(gr31,176)
    0| 00019C add      7E6E9A14   1     A         gr19=gr14,gr19
    0| 0001A0 mulld    7DCB79D2   1     M         gr14=gr11,gr15
   82| 0001A4 ld       EB580428   1     L8        gr26=<s70:d1064:l8>(gr24,1064)
   80| 0001A8 std      FBBF00D8   1     ST8       #SPILL10(gr31,216)=gr29
    0| 0001AC mulld    7F80E1D2   1     M         gr28=gr0,gr28
    0| 0001B0 std      FA7F0100   1     ST8       #SPILL15(gr31,256)=gr19
   82| 0001B4 addi     3A7EFFF0   1     AI        gr19=gr30,-16
   80| 0001B8 ld       EA1804B0   1     L8        gr16=<s70:d1200:l8>(gr24,1200)
   80| 0001BC rldicr   798C1F24   1     SLL8      gr12=gr12,3
    0| 0001C0 std      F9DF0108   1     ST8       #SPILL16(gr31,264)=gr14
   82| 0001C4 add      7DD3B214   1     A         gr14=gr19,gr22
   82| 0001C8 addi     3ACBFFE8   1     AI        gr22=gr11,-24
   82| 0001CC ld       EAB80C20   1     L8        gr21=<s70:d3104:l8>(gr24,3104)
    0| 0001D0 std      FB9F00F8   1     ST8       #SPILL14(gr31,248)=gr28
   78| 0001D4 subf     7F919050   1     S         gr28=gr18,gr17
   82| 0001D8 add      7E36D214   1     A         gr17=gr22,gr26
   80| 0001DC addi     3B4CFFF0   1     AI        gr26=gr12,-16
   82| 0001E0 ld       EB380460   1     L8        gr25=<s70:d1120:l8>(gr24,1120)
   82| 0001E4 ld       EAF80408   1     L8        gr23=<s70:d1032:l8>(gr24,1032)
   82| 0001E8 ld       EB780C58   1     L8        gr27=<s70:d3160:l8>(gr24,3160)
   82| 0001EC ld       EBB80D00   1     L8        gr29=<s70:d3328:l8>(gr24,3328)
   80| 0001F0 add      7E70D214   1     A         gr19=gr16,gr26
   80| 0001F4 ld       EA1F00D8   1     L8        gr16=#SPILL10(gr31,216)
   82| 0001F8 addi     3BCCFFE8   1     AI        gr30=gr12,-24
   82| 0001FC rlwinm   5694F876   1     RN4       gr20=gr20,31,0x7FFFFFF0
   82| 000200 add      7DF5F214   1     A         gr15=gr21,gr30
   78| 000204 addic.   36BC0001   1     AI_R      gr21,cr0=gr28,1,ca"
   82| 000208 subf     7F34C850   1     S         gr25=gr25,gr20
   82| 00020C add      7EF7F214   1     A         gr23=gr23,gr30
   82| 000210 add      7F7BF214   1     A         gr27=gr27,gr30
   78| 000214 std      FABF0110   1     ST8       #SPILL17(gr31,272)=gr21
   82| 000218 add      7FBDB214   1     A         gr29=gr29,gr22
   80| 00021C ld       EA980498   1     L8        gr20=<s70:d1176:l8>(gr24,1176)
   80| 000220 add      7ED0D214   1     A         gr22=gr16,gr26
   82| 000224 ld       EA180C08   1     L8        gr16=<s70:d3080:l8>(gr24,3080)
   82| 000228 ld       EB580C40   1     L8        gr26=<s70:d3136:l8>(gr24,3136)
   80| 00022C ld       EAB804E8   1     L8        gr21=<s70:d1256:l8>(gr24,1256)
   82| 000230 ld       EB980CE8   1     L8        gr28=<s70:d3304:l8>(gr24,3304)
   82| 000234 ld       EA580440   1     L8        gr18=<s70:d1088:l8>(gr24,1088)
   82| 000238 ld       EB180478   1     L8        gr24=<s70:d1144:l8>(gr24,1144)
   76| 00023C addi     38000000   1     LI        gr0=0
   76| 000240 std      F81F0118   1     ST8       #SPILL18(gr31,280)=gr0
    0| 000244 ld       E81F00E8   1     L8        gr0=#SPILL12(gr31,232)
    0| 000248 bc       40810440   1     BF        CL.57,cr0,0x2/gt,taken=20%(20,80)
    0| 00024C std      F87F01A0   1     ST8       #SPILL35(gr31,416)=gr3
   80| 000250 add      7ED5B214   1     A         gr22=gr21,gr22
   82| 000254 ld       EABF00F0   1     L8        gr21=#SPILL13(gr31,240)
   82| 000258 add      7F38CA14   1     A         gr25=gr24,gr25
   80| 00025C std      FADF0128   1     ST8       #SPILL20(gr31,296)=gr22
   82| 000260 add      7F7ADA14   1     A         gr27=gr26,gr27
   82| 000264 add      7F4F8214   1     A         gr26=gr15,gr16
   82| 000268 add      7E0B7214   1     A         gr16=gr11,gr14
   82| 00026C std      FB3F0138   1     ST8       #SPILL22(gr31,312)=gr25
    0| 000270 ld       E9DF00C8   1     L8        gr14=#SPILL8(gr31,200)
    0| 000274 ld       E97F00D0   1     L8        gr11=#SPILL9(gr31,208)
   82| 000278 std      FB7F0140   1     ST8       #SPILL23(gr31,320)=gr27
    0| 00027C ld       EB3F00C0   1     L8        gr25=#SPILL7(gr31,192)
    0| 000280 ld       EB7F00E0   1     L8        gr27=#SPILL11(gr31,224)
    0| 000284 ld       EADF00F8   1     L8        gr22=#SPILL14(gr31,248)
   82| 000288 std      FB5F0158   1     ST8       #SPILL26(gr31,344)=gr26
    0| 00028C mulld    7F0B71D2   1     M         gr24=gr11,gr14
    0| 000290 rldicr   79DA2EA4   1     SLL8      gr26=gr14,5
    0| 000294 std      FB1F0168   1     ST8       #SPILL28(gr31,360)=gr24
   82| 000298 add      7EF5BA14   1     A         gr23=gr21,gr23
    0| 00029C addi     3B0CFFE0   1     AI        gr24=gr12,-32
   82| 0002A0 std      FAFF0130   1     ST8       #SPILL21(gr31,304)=gr23
    0| 0002A4 ld       EAFF0100   1     L8        gr23=#SPILL15(gr31,256)
   82| 0002A8 add      7FBCEA14   1     A         gr29=gr28,gr29
   82| 0002AC add      7F919214   1     A         gr28=gr17,gr18
    0| 0002B0 rldicr   79CB1F24   1     SLL8      gr11=gr14,3
    0| 0002B4 ld       E9FF0108   1     L8        gr15=#SPILL16(gr31,264)
   82| 0002B8 std      FA1F0160   1     ST8       #SPILL27(gr31,352)=gr16
    0| 0002BC ld       EA5F00B8   1     L8        gr18=#SPILL6(gr31,184)
    0| 0002C0 ld       EA3F00B0   1     L8        gr17=#SPILL5(gr31,176)
    0| 0002C4 add      7EB6BA14   1     A         gr21=gr22,gr23
    0| 0002C8 mulld    7ED9D9D2   1     M         gr22=gr25,gr27
   82| 0002CC std      FBBF0148   1     ST8       #SPILL24(gr31,328)=gr29
    0| 0002D0 subf     7FB19050   1     S         gr29=gr18,gr17
   80| 0002D4 add      7E949A14   1     A         gr20=gr20,gr19
   82| 0002D8 std      FB9F0150   1     ST8       #SPILL25(gr31,336)=gr28
    0| 0002DC addi     3A7D0005   1     AI        gr19=gr29,5
    0| 0002E0 addi     3B920002   1     AI        gr28=gr18,2
    0| 0002E4 addi     3BB1FFFE   1     AI        gr29=gr17,-2
    0| 0002E8 addi     3B25FFE0   1     AI        gr25=gr5,-32
    0| 0002EC extsw    7F9B07B4   1     EXTS4     gr27=gr28
    0| 0002F0 extsw    7FBC07B4   1     EXTS4     gr28=gr29
    0| 0002F4 subf     7FBAA850   1     S         gr29=gr21,gr26
    0| 0002F8 add      7ED6CA14   1     A         gr22=gr22,gr25
    0| 0002FC rldicr   79D926E4   1     SLL8      gr25=gr14,4
   80| 000300 std      FA9F0120   1     ST8       #SPILL19(gr31,288)=gr20
    0| 000304 add      7F44C214   1     A         gr26=gr4,gr24
    0| 000308 subf     7EEB6050   1     S         gr23=gr12,gr11
    0| 00030C subf     7F59D050   1     S         gr26=gr26,gr25
    0| 000310 add      7D95BA14   1     A         gr12=gr21,gr23
    0| 000314 add      7E837A14   1     A         gr20=gr3,gr15
    0| 000318 add      7DF5D214   1     A         gr15=gr21,gr26
    0| 00031C ld       EABF0100   1     L8        gr21=#SPILL15(gr31,256)
    0| 000320 subf     7F9CD850   1     S         gr28=gr27,gr28
    0| 000324 add      7FDEEA14   1     A         gr30=gr30,gr29
    0| 000328 addi     3BACFFE8   1     AI        gr29=gr12,-24
    0| 00032C addi     398CFFE0   1     AI        gr12=gr12,-32
    0| 000330 add      7F76BA14   1     A         gr27=gr22,gr23
    0| 000334 addic.   379C0001   1     AI_R      gr28,cr0=gr28,1,ca"
    0| 000338 rldicl   7A77F842   1     SRL8      gr23=gr19,1
    0| 00033C add      7F14F214   1     A         gr24=gr20,gr30
    0| 000340 std      FAFF0170   1     ST8       #SPILL29(gr31,368)=gr23
    0| 000344 std      FB1F0178   1     ST8       #SPILL30(gr31,376)=gr24
    0| 000348 add      7E83EA14   1     A         gr20=gr3,gr29
    0| 00034C add      7EC46214   1     A         gr22=gr4,gr12
    0| 000350 std      FA9F0180   1     ST8       #SPILL31(gr31,384)=gr20
    0| 000354 std      FADF0188   1     ST8       #SPILL32(gr31,392)=gr22
    0| 000358 add      7F286214   1     A         gr25=gr8,gr12
    0| 00035C add      7FC56214   1     A         gr30=gr5,gr12
    0| 000360 std      FB3F0190   1     ST8       #SPILL33(gr31,400)=gr25
    0| 000364 std      FBDF0198   1     ST8       #SPILL34(gr31,408)=gr30
    0| 000368 add      7DD5DA14   1     A         gr14=gr21,gr27
    0| 00036C mcrf     4C800000   1     LRCR      cr1=cr0
    0| 000370 andi.    726C0001   1     RN4_R     gr12,cr0=gr19,0,0x1
    0| 000374 cmpdi    2FB70000   1     C8        cr7=gr23,0
   76|                              CL.58:
   78| 000378 addi     39800000   1     LI        gr12=0
    0| 00037C bc       408502A4   1     BF        CL.59,cr1,0x2/gt,taken=20%(20,80)
    0| 000380 ld       EB5F0120   1     L8        gr26=#SPILL19(gr31,288)
    0| 000384 ld       EB3F0128   1     L8        gr25=#SPILL20(gr31,296)
   82| 000388 ld       EBDF0160   1     L8        gr30=#SPILL27(gr31,352)
   82| 00038C ld       EBBF0150   1     L8        gr29=#SPILL25(gr31,336)
   82| 000390 ld       EB9F0148   1     L8        gr28=#SPILL24(gr31,328)
   80| 000394 ld       EB7F0178   1     L8        gr27=#SPILL30(gr31,376)
    0| 000398 lfd      C81A0000   1     LFL       fp0=g2a(gr26,0)
    0| 00039C lfd      C8390000   1     LFL       fp1=g31a(gr25,0)
   78|                              CL.60:
   80| 0003A0 add      7F406214   1     A         gr26=gr0,gr12
   80| 0003A4 fmr      FCE00890   1     LRFL      fp7=fp1
   80| 0003A8 addi     3B3AFFFE   1     AI        gr25=gr26,-2
   80| 0003AC fmr      FD000090   1     LRFL      fp8=fp0
   82| 0003B0 ld       E87F0138   1     L8        gr3=#SPILL22(gr31,312)
   82| 0003B4 mulld    7E0BC9D2   1     M         gr16=gr11,gr25
   82| 0003B8 ld       EAFF0188   1     L8        gr23=#SPILL32(gr31,392)
   82| 0003BC ld       EABF0198   1     L8        gr21=#SPILL34(gr31,408)
   80| 0003C0 ld       EA5F0180   1     L8        gr18=#SPILL31(gr31,384)
   82| 0003C4 lfdx     7CC354AE   1     LFL       fp6=dvl3ai(gr3,gr10,0)
   82| 0003C8 ld       E87F0190   1     L8        gr3=#SPILL33(gr31,400)
   82| 0003CC mulld    7F0BD1D2   1     M         gr24=gr11,gr26
   82| 0003D0 add      7F50BA14   1     A         gr26=gr16,gr23
   82| 0003D4 add      7ED0AA14   1     A         gr22=gr16,gr21
   82| 0003D8 add      7EAE8214   1     A         gr21=gr14,gr16
   80| 0003DC add      7E709214   1     A         gr19=gr16,gr18
   82| 0003E0 add      7E038214   1     A         gr16=gr3,gr16
    0| 0003E4 ld       E87F0170   1     L8        gr3=#SPILL29(gr31,368)
   80| 0003E8 ld       EB3F0120   1     L8        gr25=#SPILL19(gr31,288)
   82| 0003EC add      7F0FC214   1     A         gr24=gr15,gr24
   80| 0003F0 ld       EAFF0128   1     L8        gr23=#SPILL20(gr31,296)
   82| 0003F4 lfd      C85E0000   1     LFL       fp2=g32a(gr30,0)
   82| 0003F8 ld       EA9F0158   1     L8        gr20=#SPILL26(gr31,344)
   82| 0003FC lfdu     CC7E0008   1     LFDU      fp3,gr30=g32a(gr30,8)
   80| 000400 lfdux    7D3B5CEE   1     LFDU      fp9,gr27=c1[](gr27,gr11,0)
   82| 000404 ld       EA5F0140   1     L8        gr18=#SPILL23(gr31,320)
   82| 000408 ld       EA3F0130   1     L8        gr17=#SPILL21(gr31,304)
   82| 00040C lfdu     CC9D0008   1     LFDU      fp4,gr29=dvl2ai(gr29,8)
   82| 000410 lfdu     CCBC0008   1     LFDU      fp5,gr28=g32bi(gr28,8)
    0| 000414 mtspr    7C6903A6   1     LCTR      ctr=gr3
    0| 000418 bc       41820070   1     BT        CL.392,cr0,0x4/eq,taken=50%(0,0)
   82| 00041C fmul     FDA00072   1     MFL       fp13=fp0,fp1,fcr
   82| 000420 lfdu     CCFA0008   1     LFDU      fp7,gr26=c2[](gr26,8)
   82| 000424 lfdu     CD980008   1     LFDU      fp12,gr24=c2[](gr24,8)
   80| 000428 lfdu     CD770008   1     LFDU      fp11,gr23=g31a(gr23,8)
   80| 00042C lfdu     CD190008   1     LFDU      fp8,gr25=g2a(gr25,8)
   82| 000430 lfdu     CD540008   1     LFDU      fp10,gr20=g2bi(gr20,8)
   82| 000434 fmul     FD2D0272   1     MFL       fp9=fp13,fp9,fcr
   82| 000438 lfdu     CFF50008   1     LFDU      fp31,gr21=c3[](gr21,8)
   82| 00043C fmul     FDA201F2   1     MFL       fp13=fp2,fp7,fcr
   82| 000440 lfdu     CFD60008   1     LFDU      fp30,gr22=c3[](gr22,8)
   82| 000444 fmr      FCE05890   1     LRFL      fp7=fp11
   80| 000448 lfdu     CFB30008   2     LFDU      fp29,gr19=c1[](gr19,8)
   82| 00044C fmul     FF8802F2   1     MFL       fp28=fp8,fp11,fcr
   82| 000450 lfdu     CD720008   2     LFDU      fp11,gr18=g31bi(gr18,8)
   82| 000454 fmsub    FD836B38   1     FMS       fp12=fp13,fp3,fp12,fcr
   82| 000458 lfdu     CDB10008   2     LFDU      fp13,gr17=dvl1ai(gr17,8)
   82| 00045C fsub     FFFFF028   1     SFL       fp31=fp31,fp30,fcr
   82| 000460 fmsub    FFDC4F78   2     FMS       fp30=fp9,fp28,fp29,fcr
   82| 000464 fmr      FD20E890   2     LRFL      fp9=fp29
   82| 000468 fmul     FD4C02B2   2     MFL       fp10=fp12,fp10,fcr
   82| 00046C fmul     FD7F02F2   2     MFL       fp11=fp31,fp11,fcr
   82| 000470 fmul     FD4A0132   2     MFL       fp10=fp10,fp4,fcr
   82| 000474 fmul     FD6B0172   2     MFL       fp11=fp11,fp5,fcr
   82| 000478 fmadd    FD5E537A   2     FMA       fp10=fp10,fp30,fp13,fcr
   82| 00047C fmadd    FD4652FA   2     FMA       fp10=fp10,fp6,fp11,fcr
   82| 000480 stfdu    DD500008   2     STFDU     gr16,div[](gr16,8)=fp10
    0| 000484 bc       419E018C   1     BT        CL.345,cr7,0x4/eq,taken=20%(20,80)
    0|                              CL.392:
   82| 000488 lfd      C97A0008   1     LFL       fp11=c2[](gr26,8)
   82| 00048C fmul     FD4801F2   1     MFL       fp10=fp8,fp7,fcr
   82| 000490 lfdu     CCFA0010   1     LFDU      fp7,gr26=c2[](gr26,16)
   82| 000494 lfd      C9980008   1     LFL       fp12=c2[](gr24,8)
   80| 000498 lfd      CBB70008   1     LFL       fp29=g31a(gr23,8)
   80| 00049C lfd      CB790008   1     LFL       fp27=g2a(gr25,8)
   82| 0004A0 lfdu     CFD80010   1     LFDU      fp30,gr24=c2[](gr24,16)
   82| 0004A4 fmul     FDA202F2   1     MFL       fp13=fp2,fp11,fcr
   82| 0004A8 lfd      C9140008   1     LFL       fp8=g2bi(gr20,8)
   82| 0004AC fmul     FF8201F2   1     MFL       fp28=fp2,fp7,fcr
   82| 0004B0 lfd      C8F50008   1     LFL       fp7=c3[](gr21,8)
   82| 0004B4 fmul     FD4A0272   1     MFL       fp10=fp10,fp9,fcr
   82| 0004B8 lfd      C9760008   1     LFL       fp11=c3[](gr22,8)
   82| 0004BC fmsub    FD836B38   1     FMS       fp12=fp13,fp3,fp12,fcr
   80| 0004C0 lfd      C9B30008   2     LFL       fp13=c1[](gr19,8)
   82| 0004C4 fmul     FFFB0772   1     MFL       fp31=fp27,fp29,fcr
   82| 0004C8 lfdu     CFB60010   1     LFDU      fp29,gr22=c3[](gr22,16)
   82| 0004CC fmsub    FF83E7B8   1     FMS       fp28=fp28,fp3,fp30,fcr
   82| 0004D0 lfdu     CFD50010   1     LFDU      fp30,gr21=c3[](gr21,16)
   82| 0004D4 fsub     FD675828   1     SFL       fp11=fp7,fp11,fcr
   82| 0004D8 lfdu     CD340010   1     LFDU      fp9,gr20=g2bi(gr20,16)
   82| 0004DC fmul     FD8C0232   1     MFL       fp12=fp12,fp8,fcr
   80| 0004E0 lfdu     CCF70010   1     LFDU      fp7,gr23=g31a(gr23,16)
   82| 0004E4 fmr      FF20F890   1     LRFL      fp25=fp31
   80| 0004E8 lfdu     CD190010   1     LFDU      fp8,gr25=g2a(gr25,16)
   82| 0004EC fsub     FFDEE828   1     SFL       fp30=fp30,fp29,fcr
   82| 0004F0 lfd      CB520008   2     LFL       fp26=g31bi(gr18,8)
   82| 0004F4 fmul     FFFF0372   1     MFL       fp31=fp31,fp13,fcr
   82| 0004F8 lfdu     CFB20010   2     LFDU      fp29,gr18=g31bi(gr18,16)
   82| 0004FC fmul     FF9C0272   1     MFL       fp28=fp28,fp9,fcr
   80| 000500 lfdu     CF130010   2     LFDU      fp24,gr19=c1[](gr19,16)
   82| 000504 fmul     FF6801F2   1     MFL       fp27=fp8,fp7,fcr
   82| 000508 lfd      C9310008   2     LFL       fp9=dvl1ai(gr17,8)
   82| 00050C fmsub    FDB95378   1     FMS       fp13=fp10,fp25,fp13,fcr
   82| 000510 lfdu     CD510010   2     LFDU      fp10,gr17=dvl1ai(gr17,16)
   82| 000514 fmul     FD6B06B2   1     MFL       fp11=fp11,fp26,fcr
   82| 000518 fmul     FF4C0132   2     MFL       fp26=fp12,fp4,fcr
   82| 00051C fmul     FD9E0772   2     MFL       fp12=fp30,fp29,fcr
   82| 000520 fmsub    FFDBFE38   2     FMS       fp30=fp31,fp27,fp24,fcr
   82| 000524 fmul     FFFC0132   2     MFL       fp31=fp28,fp4,fcr
    0| 000528 bc       424000C8   1     BCF       ctr=CL.411,taken=0%(0,100)
    0| 00052C ori      60210000   1     XNOP      
    0|                              CL.412:
   82| 000530 fmul     FCE801F2   1     MFL       fp7=fp8,fp7,fcr
   82| 000534 fmul     FD0B0172   2     MFL       fp8=fp11,fp5,fcr
   82| 000538 fmul     FFAC0172   2     MFL       fp29=fp12,fp5,fcr
   82| 00053C fmadd    FDADD27A   2     FMA       fp13=fp26,fp13,fp9,fcr
   82| 000540 fmadd    FFFEFABA   2     FMA       fp31=fp31,fp30,fp10,fcr
   82| 000544 lfd      C9310008   2     LFL       fp9=dvl1ai(gr17,8)
   82| 000548 lfdu     CD510010   1     LFDU      fp10,gr17=dvl1ai(gr17,16)
   82| 00054C lfd      C9720008   1     LFL       fp11=g31bi(gr18,8)
   82| 000550 lfdu     CD920010   1     LFDU      fp12,gr18=g31bi(gr18,16)
   82| 000554 fmadd    FF666A3A   1     FMA       fp27=fp13,fp6,fp8,fcr
   82| 000558 fmadd    FD06FF7A   2     FMA       fp8=fp31,fp6,fp29,fcr
   80| 00055C lfd      C9B30008   2     LFL       fp13=c1[](gr19,8)
   82| 000560 lfd      CBF40008   1     LFL       fp31=g2bi(gr20,8)
   82| 000564 lfd      CBD50008   1     LFL       fp30=c3[](gr21,8)
   82| 000568 lfd      CBB60008   1     LFL       fp29=c3[](gr22,8)
   82| 00056C fmul     FF870632   1     MFL       fp28=fp7,fp24,fcr
   82| 000570 stfd     DB700008   1     STFL      div[](gr16,8)=fp27
   82| 000574 stfdu    DD100010   1     STFDU     gr16,div[](gr16,16)=fp8
   82| 000578 lfdu     CF740010   1     LFDU      fp27,gr20=g2bi(gr20,16)
   82| 00057C lfdu     CF550010   1     LFDU      fp26,gr21=c3[](gr21,16)
   82| 000580 lfdu     CF360010   1     LFDU      fp25,gr22=c3[](gr22,16)
   82| 000584 lfd      CA9A0008   1     LFL       fp20=c2[](gr26,8)
   82| 000588 lfdu     CD1A0010   1     LFDU      fp8,gr26=c2[](gr26,16)
   80| 00058C lfd      CB170008   1     LFL       fp24=g31a(gr23,8)
   80| 000590 lfd      CAF90008   1     LFL       fp23=g2a(gr25,8)
   82| 000594 lfd      CAD80008   1     LFL       fp22=c2[](gr24,8)
   82| 000598 lfdu     CEB80010   1     LFDU      fp21,gr24=c2[](gr24,16)
   80| 00059C lfdu     CCF70010   1     LFDU      fp7,gr23=g31a(gr23,16)
   82| 0005A0 fmul     FE820532   1     MFL       fp20=fp2,fp20,fcr
   82| 0005A4 fmul     FE620232   2     MFL       fp19=fp2,fp8,fcr
   80| 0005A8 lfdu     CD190010   1     LFDU      fp8,gr25=g2a(gr25,16)
   82| 0005AC fmul     FE570632   1     MFL       fp18=fp23,fp24,fcr
   82| 0005B0 fsub     FFDEE828   2     SFL       fp30=fp30,fp29,fcr
   82| 0005B4 fmsub    FEE3A5B8   2     FMS       fp23=fp20,fp3,fp22,fcr
   82| 0005B8 fmsub    FEC39D78   2     FMS       fp22=fp19,fp3,fp21,fcr
   80| 0005BC lfdu     CF130010   2     LFDU      fp24,gr19=c1[](gr19,16)
   82| 0005C0 fsub     FF5AC828   1     SFL       fp26=fp26,fp25,fcr
   82| 0005C4 fmul     FF2801F2   2     MFL       fp25=fp8,fp7,fcr
   82| 0005C8 fmul     FFB20372   2     MFL       fp29=fp18,fp13,fcr
   82| 0005CC fmul     FFF707F2   2     MFL       fp31=fp23,fp31,fcr
   82| 0005D0 fmul     FF7606F2   2     MFL       fp27=fp22,fp27,fcr
   82| 0005D4 fmsub    FDB2E378   2     FMS       fp13=fp28,fp18,fp13,fcr
   82| 0005D8 fmul     FD7E02F2   2     MFL       fp11=fp30,fp11,fcr
   82| 0005DC fmul     FD9A0332   2     MFL       fp12=fp26,fp12,fcr
   82| 0005E0 fmsub    FFD9EE38   2     FMS       fp30=fp29,fp25,fp24,fcr
   82| 0005E4 fmul     FF5F0132   2     MFL       fp26=fp31,fp4,fcr
   82| 0005E8 fmul     FFFB0132   2     MFL       fp31=fp27,fp4,fcr
    0| 0005EC bc       4200FF44   1     BCT       ctr=CL.412,taken=100%(100,0)
    0|                              CL.411:
   82| 0005F0 fmul     FC4B0172   1     MFL       fp2=fp11,fp5,fcr
   82| 0005F4 fmadd    FC6DD27A   2     FMA       fp3=fp26,fp13,fp9,fcr
   82| 0005F8 fmul     FC8C0172   2     MFL       fp4=fp12,fp5,fcr
   82| 0005FC fmadd    FCBEFABA   2     FMA       fp5=fp31,fp30,fp10,fcr
   82| 000600 fmadd    FC4618BA   2     FMA       fp2=fp3,fp6,fp2,fcr
   82| 000604 fmadd    FC66293A   2     FMA       fp3=fp5,fp6,fp4,fcr
   82| 000608 stfd     D8500008   1     STFL      div[](gr16,8)=fp2
   82| 00060C stfdu    DC700010   1     STFDU     gr16,div[](gr16,16)=fp3
    0|                              CL.345:
   91| 000610 ld       E87F0110   1     L8        gr3=#SPILL17(gr31,272)
   91| 000614 addi     398C0001   1     AI        gr12=gr12,1
   91| 000618 cmpld    7F2C1840   1     CL8       cr6=gr12,gr3
   91| 00061C bc       4198FD84   1     BT        CL.60,cr6,0x8/llt,taken=80%(80,20)
   91|                              CL.59:
   92| 000620 ld       E87F0118   1     L8        gr3=#SPILL18(gr31,280)
    0| 000624 ld       E99F0168   1     L8        gr12=#SPILL28(gr31,360)
    0| 000628 ld       EBDF0178   1     L8        gr30=#SPILL30(gr31,376)
   92| 00062C ld       EBBF0098   1     L8        gr29=#SPILL2(gr31,152)
    0| 000630 ld       EB9F0180   1     L8        gr28=#SPILL31(gr31,384)
    0| 000634 ld       EB7F0188   1     L8        gr27=#SPILL32(gr31,392)
    0| 000638 ld       EB5F0190   1     L8        gr26=#SPILL33(gr31,400)
    0| 00063C ld       EB3F0198   1     L8        gr25=#SPILL34(gr31,408)
   92| 000640 addi     38630001   1     AI        gr3=gr3,1
    0| 000644 add      7FCCF214   1     A         gr30=gr12,gr30
   92| 000648 std      F87F0118   1     ST8       #SPILL18(gr31,280)=gr3
    0| 00064C std      FBDF0178   1     ST8       #SPILL30(gr31,376)=gr30
   92| 000650 cmpld    7F23E840   1     CL8       cr6=gr3,gr29
    0| 000654 add      7F8CE214   1     A         gr28=gr12,gr28
    0| 000658 add      7F6CDA14   1     A         gr27=gr12,gr27
    0| 00065C std      FB9F0180   1     ST8       #SPILL31(gr31,384)=gr28
    0| 000660 std      FB7F0188   1     ST8       #SPILL32(gr31,392)=gr27
    0| 000664 add      7F4CD214   1     A         gr26=gr12,gr26
    0| 000668 add      7F2CCA14   1     A         gr25=gr12,gr25
    0| 00066C std      FB5F0190   1     ST8       #SPILL33(gr31,400)=gr26
    0| 000670 std      FB3F0198   1     ST8       #SPILL34(gr31,408)=gr25
    0| 000674 add      7DEC7A14   1     A         gr15=gr12,gr15
    0| 000678 add      7DCC7214   1     A         gr14=gr12,gr14
    0| 00067C addi     394A0008   1     AI        gr10=gr10,8
   92| 000680 bc       4198FCF8   1     BT        CL.58,cr6,0x8/llt,taken=80%(80,20)
   92| 000684 ld       E87F01A0   1     L8        gr3=#SPILL35(gr31,416)
   92|                              CL.57:
   98| 000688 ld       E9420000   1     L8        gr10=.+CONSTANT_AREA(gr2,0)
   99| 00068C lwz      80E70000   1     L4Z       gr7=isum(gr7,0)
   98| 000690 addi     39600000   1     LI        gr11=0
   98| 000694 std      F9690000   1     ST8       sumd(gr9,0)=gr11
   98| 000698 lfs      C00A0000   1     LFS       fp0=+CONSTANT_AREA(gr10,0)
   99| 00069C cmpwi    2C070001   1     C4        cr0=gr7,1
   98| 0006A0 fmr      FC200090   1     LRFL      fp1=fp0
   99| 0006A4 bc       40820174   1     BF        CL.15,cr0,0x4/eq,taken=50%(0,0)
  100| 0006A8 ld       E97F00A0   1     L8        gr11=#SPILL3(gr31,160)
  100| 0006AC ld       E99F0088   1     L8        gr12=#SPILL0(gr31,136)
  100| 0006B0 subf     7CEC5850   1     S         gr7=gr11,gr12
  100| 0006B4 addic.   37C70001   1     AI_R      gr30,cr0=gr7,1,ca"
  100| 0006B8 bc       40810160   1     BF        CL.15,cr0,0x2/gt,taken=50%(0,0)
    0| 0006BC ld       EAFF0090   1     L8        gr23=#SPILL1(gr31,144)
    0| 0006C0 rldicr   79871F24   1     SLL8      gr7=gr12,3
    0| 0006C4 ld       EADF00C8   1     L8        gr22=#SPILL8(gr31,200)
  101| 0006C8 ld       EABF00A8   1     L8        gr21=#SPILL4(gr31,168)
    0| 0006CC ld       EA9F00B0   1     L8        gr20=#SPILL5(gr31,176)
    0| 0006D0 ld       EA7F00B8   1     L8        gr19=#SPILL6(gr31,184)
    0| 0006D4 mulld    7F67B9D2   1     M         gr27=gr7,gr23
    0| 0006D8 rldicr   7AEC1F24   1     SLL8      gr12=gr23,3
    0| 0006DC rldicr   78071F24   1     SLL8      gr7=gr0,3
    0| 0006E0 neg      7F8C00D0   1     COMP      gr28=gr12
    0| 0006E4 mulld    7F47B1D2   1     M         gr26=gr7,gr22
  101| 0006E8 subf     7D60A850   1     S         gr11=gr21,gr0
    0| 0006EC rldicr   7ADD1F24   1     SLL8      gr29=gr22,3
    0| 0006F0 rldicr   7A871F24   1     SLL8      gr7=gr20,3
    0| 0006F4 mulld    7F36D9D2   1     M         gr25=gr22,gr27
    0| 0006F8 mulld    7F16E1D2   1     M         gr24=gr22,gr28
  101| 0006FC addic.   378B0001   1     AI_R      gr28,cr0=gr11,1,ca"
    0| 000700 subf     7D749850   1     S         gr11=gr19,gr20
    0| 000704 subf     7F7D3850   1     S         gr27=gr7,gr29
  100| 000708 addi     38E00000   1     LI        gr7=0
    0| 00070C bc       4081010C   1     BF        CL.15,cr0,0x2/gt,taken=20%(20,80)
    0| 000710 addic.   356B0001   1     AI_R      gr11,cr0=gr11,1,ca"
    0| 000714 addi     3B7BFFF0   1     AI        gr27=gr27,-16
    0| 000718 add      7F48D214   1     A         gr26=gr8,gr26
    0| 00071C add      7F38CA14   1     A         gr25=gr24,gr25
    0| 000720 add      7F1ADA14   1     A         gr24=gr26,gr27
    0| 000724 rldicl   797BE8C2   1     SRL8      gr27=gr11,3
    0| 000728 mulld    7F4CB1D2   1     M         gr26=gr12,gr22
    0| 00072C add      7EF8CA14   1     A         gr23=gr24,gr25
    0| 000730 mcrf     4C800000   1     LRCR      cr1=cr0
    0| 000734 andi.    71790007   1     RN4_R     gr25,cr0=gr11,0,0x7
    0| 000738 cmpdi    2FBB0000   1     C8        cr7=gr27,0
  100|                              CL.64:
  101| 00073C addi     39600000   1     LI        gr11=0
    0| 000740 bc       408500C8   1     BF        CL.65,cr1,0x2/gt,taken=20%(20,80)
    0| 000744 or       7EF8BB78   1     LR        gr24=gr23
  101|                              CL.66:
  103| 000748 or       7F0CC378   1     LR        gr12=gr24
    0| 00074C bc       41820018   1     BT        CL.347,cr0,0x4/eq,taken=50%(0,0)
    0| 000750 mtspr    7F2903A6   1     LCTR      ctr=gr25
    0|                              CL.413:
  103| 000754 lfdu     CC4C0008   1     LFDU      fp2,gr12=div[](gr12,8)
  103| 000758 fadd     FC21102A   1     AFL       fp1=fp1,fp2,fcr
    0| 00075C bc       4200FFF8   1     BCT       ctr=CL.413,taken=100%(100,0)
    0| 000760 bc       419E0094   1     BT        CL.348,cr7,0x4/eq,taken=20%(20,80)
    0|                              CL.347:
  103| 000764 lfd      C84C0008   1     LFL       fp2=div[](gr12,8)
  103| 000768 lfd      C86C0010   1     LFL       fp3=div[](gr12,16)
  103| 00076C lfd      C88C0018   1     LFL       fp4=div[](gr12,24)
  103| 000770 lfd      C8AC0020   1     LFL       fp5=div[](gr12,32)
  103| 000774 lfd      C8CC0028   1     LFL       fp6=div[](gr12,40)
  103| 000778 lfd      C8EC0030   1     LFL       fp7=div[](gr12,48)
  103| 00077C lfd      C90C0038   1     LFL       fp8=div[](gr12,56)
  103| 000780 fadd     FC21102A   1     AFL       fp1=fp1,fp2,fcr
    0| 000784 mtspr    7F6903A6   1     LCTR      ctr=gr27
  103| 000788 lfdu     CC4C0040   1     LFDU      fp2,gr12=div[](gr12,64)
  103| 00078C fadd     FC21182A   1     AFL       fp1=fp1,fp3,fcr
  103| 000790 fadd     FC21202A   2     AFL       fp1=fp1,fp4,fcr
  103| 000794 fadd     FC21282A   2     AFL       fp1=fp1,fp5,fcr
  103| 000798 fadd     FC21302A   2     AFL       fp1=fp1,fp6,fcr
  103| 00079C fadd     FC21382A   2     AFL       fp1=fp1,fp7,fcr
  103| 0007A0 fadd     FC21402A   2     AFL       fp1=fp1,fp8,fcr
    0| 0007A4 bc       4240004C   1     BCF       ctr=CL.414,taken=0%(0,100)
    0| 0007A8 ori      60210000   1     XNOP      
    0|                              CL.415:
  103| 0007AC lfd      C86C0008   1     LFL       fp3=div[](gr12,8)
  103| 0007B0 fadd     FC21102A   1     AFL       fp1=fp1,fp2,fcr
  103| 0007B4 lfd      C84C0010   1     LFL       fp2=div[](gr12,16)
  103| 0007B8 fadd     FC21182A   1     AFL       fp1=fp1,fp3,fcr
  103| 0007BC lfd      C86C0018   1     LFL       fp3=div[](gr12,24)
  103| 0007C0 fadd     FC21102A   1     AFL       fp1=fp1,fp2,fcr
  103| 0007C4 lfd      C84C0020   1     LFL       fp2=div[](gr12,32)
  103| 0007C8 fadd     FC21182A   1     AFL       fp1=fp1,fp3,fcr
  103| 0007CC lfd      C86C0028   1     LFL       fp3=div[](gr12,40)
  103| 0007D0 fadd     FC21102A   1     AFL       fp1=fp1,fp2,fcr
  103| 0007D4 lfd      C84C0030   1     LFL       fp2=div[](gr12,48)
  103| 0007D8 fadd     FC61182A   1     AFL       fp3=fp1,fp3,fcr
  103| 0007DC lfd      C82C0038   1     LFL       fp1=div[](gr12,56)
  103| 0007E0 fadd     FC63102A   1     AFL       fp3=fp3,fp2,fcr
  103| 0007E4 lfdu     CC4C0040   1     LFDU      fp2,gr12=div[](gr12,64)
  103| 0007E8 fadd     FC23082A   1     AFL       fp1=fp3,fp1,fcr
    0| 0007EC bc       4200FFC0   1     BCT       ctr=CL.415,taken=100%(100,0)
    0|                              CL.414:
  103| 0007F0 fadd     FC21102A   1     AFL       fp1=fp1,fp2,fcr
    0|                              CL.348:
  105| 0007F4 addi     396B0001   1     AI        gr11=gr11,1
  104| 0007F8 stfd     D8290000   1     STFL      sumd(gr9,0)=fp1
  105| 0007FC cmpld    7F2BE040   1     CL8       cr6=gr11,gr28
    0| 000800 add      7F18EA14   1     A         gr24=gr24,gr29
  105| 000804 bc       4198FF44   1     BT        CL.66,cr6,0x8/llt,taken=80%(80,20)
  105|                              CL.65:
  106| 000808 addi     38E70001   1     AI        gr7=gr7,1
    0| 00080C add      7EF7D214   1     A         gr23=gr23,gr26
  106| 000810 cmpld    7F27F040   1     CL8       cr6=gr7,gr30
  106| 000814 bc       4198FF28   1     BT        CL.64,cr6,0x8/llt,taken=80%(80,20)
  107|                              CL.15:
  111| 000818 lwz      80C60000   1     L4Z       gr6=inorm(gr6,0)
  111| 00081C cmpwi    2C060001   1     C4        cr0=gr6,1
  111| 000820 bc       40820924   1     BF        CL.570,cr0,0x4/eq,taken=30%(30,70)
  120| 000824 fmr      FC400090   1     LRFL      fp2=fp0
  122| 000828 ld       E8FF00A0   1     L8        gr7=#SPILL3(gr31,160)
  121| 00082C fmr      FC601090   1     LRFL      fp3=fp2
  122| 000830 ld       E97F0088   1     L8        gr11=#SPILL0(gr31,136)
  122| 000834 subf     7CCB3850   1     S         gr6=gr7,gr11
  122| 000838 addic.   35860001   1     AI_R      gr12,cr0=gr6,1,ca"
  122| 00083C std      F99F01A8   1     ST8       #SPILL36(gr31,424)=gr12
  122| 000840 mcrf     4C800000   1     LRCR      cr1=cr0
  122| 000844 bc       408105BC   1     BF        CL.69,cr0,0x2/gt,taken=50%(0,0)
  128| 000848 ld       EA1F0090   1     L8        gr16=#SPILL1(gr31,144)
    0| 00084C rldicr   79711F24   1     SLL8      gr17=gr11,3
    0| 000850 ld       E9FF00C8   1     L8        gr15=#SPILL8(gr31,200)
    0| 000854 std      FA3F01B0   1     ST8       #SPILL37(gr31,432)=gr17
  128| 000858 ld       EB820000   1     L8        gr28=.&&N&grid(gr2,0)
  128| 00085C rldicr   781B1F24   1     SLL8      gr27=gr0,3
  128| 000860 rldicr   7A061F24   1     SLL8      gr6=gr16,3
    0| 000864 mulld    7CF089D2   1     M         gr7=gr16,gr17
  128| 000868 ld       EA1F00B0   1     L8        gr16=#SPILL5(gr31,176)
    0| 00086C ld       EA3F00B8   1     L8        gr17=#SPILL6(gr31,184)
  128| 000870 neg      7D6600D0   1     COMP      gr11=gr6
    0| 000874 mulld    7DC679D2   1     M         gr14=gr6,gr15
    0| 000878 subf     7FB08850   1     S         gr29=gr17,gr16
    0| 00087C std      F9DF01B8   1     ST8       #SPILL38(gr31,440)=gr14
  128| 000880 ld       EA3C0CB0   1     L8        gr17=<s70:d3248:l8>(gr28,3248)
  128| 000884 rldicr   79E61F24   1     SLL8      gr6=gr15,3
  128| 000888 mulld    7D6B79D2   1     M         gr11=gr11,gr15
  128| 00088C std      FA3F01D0   1     ST8       #SPILL41(gr31,464)=gr17
    0| 000890 mulld    7E6779D2   1     M         gr19=gr7,gr15
    0| 000894 rldicr   79F926E4   1     SLL8      gr25=gr15,4
    0| 000898 mulld    7EAFD9D2   1     M         gr21=gr15,gr27
  128| 00089C ld       E9FC01C0   1     L8        gr15=<s70:d448:l8>(gr28,448)
    0| 0008A0 ld       EA3F00C0   1     L8        gr17=#SPILL7(gr31,192)
  128| 0008A4 rldicr   7A0C1F24   1     SLL8      gr12=gr16,3
  128| 0008A8 ld       EA1C0B98   1     L8        gr16=<s70:d2968:l8>(gr28,2968)
  124| 0008AC ld       EBDF00A8   1     L8        gr30=#SPILL4(gr31,168)
  128| 0008B0 subf     7F466050   1     S         gr26=gr12,gr6
  128| 0008B4 std      F9FF01C0   1     ST8       #SPILL39(gr31,448)=gr15
  128| 0008B8 ld       E9FC0168   1     L8        gr15=<s70:d360:l8>(gr28,360)
  128| 0008BC ld       EA5C0188   1     L8        gr18=<s70:d392:l8>(gr28,392)
  128| 0008C0 std      FA1F01C8   1     ST8       #SPILL40(gr31,456)=gr16
  128| 0008C4 ld       EA9C0CC8   1     L8        gr20=<s70:d3272:l8>(gr28,3272)
  128| 0008C8 ld       EA1C0B78   1     L8        gr16=<s70:d2936:l8>(gr28,2936)
  124| 0008CC subf     7CE0F050   1     S         gr7=gr30,gr0
  128| 0008D0 std      F9FF01D8   1     ST8       #SPILL42(gr31,472)=gr15
    0| 0008D4 mulld    7DEE89D2   1     M         gr15=gr14,gr17
  128| 0008D8 ld       E9DC01A0   1     L8        gr14=<s70:d416:l8>(gr28,416)
  128| 0008DC addi     3B7BFFF8   1     AI        gr27=gr27,-8
  128| 0008E0 std      FA1F01E0   1     ST8       #SPILL43(gr31,480)=gr16
  128| 0008E4 addi     3BDAFFF0   1     AI        gr30=gr26,-16
    0| 0008E8 std      F9FF01E8   1     ST8       #SPILL44(gr31,488)=gr15
  128| 0008EC ld       EB1C0150   1     L8        gr24=<s70:d336:l8>(gr28,336)
  128| 0008F0 ld       EAFC0B60   1     L8        gr23=<s70:d2912:l8>(gr28,2912)
  128| 0008F4 ld       EADC0BB0   1     L8        gr22=<s70:d2992:l8>(gr28,2992)
  124| 0008F8 addic.   34E70001   1     AI_R      gr7,cr0=gr7,1,ca"
  128| 0008FC std      F9DF01F0   1     ST8       #SPILL45(gr31,496)=gr14
  128| 000900 ld       E9DC01D8   1     L8        gr14=<s70:d472:l8>(gr28,472)
  128| 000904 add      7F85F214   1     A         gr28=gr5,gr30
  126| 000908 add      7CA3D214   1     A         gr5=gr3,gr26
    0| 00090C add      7F4B9A14   1     A         gr26=gr11,gr19
  126| 000910 add      7E255A14   1     A         gr17=gr5,gr11
  128| 000914 add      7DF4DA14   1     A         gr15=gr20,gr27
  128| 000918 add      7E12DA14   1     A         gr16=gr18,gr27
  122| 00091C addi     38A00000   1     LI        gr5=0
    0| 000920 bc       408104E0   1     BF        CL.69,cr0,0x2/gt,taken=20%(20,80)
    0| 000924 add      7C63AA14   1     A         gr3=gr3,gr21
    0| 000928 subfic   2379FFF8   1     SFI       gr27=-8,gr25,ca"
    0| 00092C std      F87F01F8   1     ST8       #SPILL46(gr31,504)=gr3
  128| 000930 addi     386CFFF8   1     AI        gr3=gr12,-8
  128| 000934 add      7EA45A14   1     A         gr21=gr4,gr11
    0| 000938 add      7E8CDA14   1     A         gr20=gr12,gr27
  128| 00093C add      7F63B214   1     A         gr27=gr3,gr22
  128| 000940 add      7ED5F214   1     A         gr22=gr21,gr30
  128| 000944 add      7EABE214   1     A         gr21=gr11,gr28
  128| 000948 ld       E97F01C0   1     L8        gr11=#SPILL39(gr31,448)
  128| 00094C add      7D83C214   1     A         gr12=gr3,gr24
    0| 000950 add      7C9AE214   1     A         gr4=gr26,gr28
  128| 000954 ld       EB9F01D8   1     L8        gr28=#SPILL42(gr31,472)
  128| 000958 ld       EB1F01E0   1     L8        gr24=#SPILL43(gr31,480)
  128| 00095C add      7F23BA14   1     A         gr25=gr3,gr23
  128| 000960 add      7FCB7214   1     A         gr30=gr11,gr14
  128| 000964 ld       E9DF01D0   1     L8        gr14=#SPILL41(gr31,464)
  128| 000968 std      FBDF0200   1     ST8       #SPILL47(gr31,512)=gr30
    0| 00096C add      7C74D214   1     A         gr3=gr20,gr26
  128| 000970 add      7E8CE214   1     A         gr20=gr12,gr28
  128| 000974 ld       EB5F01C8   1     L8        gr26=#SPILL40(gr31,456)
  128| 000978 add      7E58CA14   1     A         gr18=gr24,gr25
  128| 00097C add      7D8E7A14   1     A         gr12=gr14,gr15
  128| 000980 ld       E9FF01F0   1     L8        gr15=#SPILL45(gr31,496)
  128| 000984 std      F99F0208   1     ST8       #SPILL48(gr31,520)=gr12
    0| 000988 ld       EB3F01F8   1     L8        gr25=#SPILL46(gr31,504)
    0| 00098C addic.   37BD0001   1     AI_R      gr29,cr0=gr29,1,ca"
  128| 000990 add      7E7ADA14   1     A         gr19=gr26,gr27
    0| 000994 rldicl   7BB7F842   1     SRL8      gr23=gr29,1
  128| 000998 add      7F6F8214   1     A         gr27=gr15,gr16
  126| 00099C addi     3A31FFF8   1     AI        gr17=gr17,-8
  128| 0009A0 std      FB7F0210   1     ST8       #SPILL49(gr31,528)=gr27
    0| 0009A4 add      7D63CA14   1     A         gr11=gr3,gr25
    0| 0009A8 std      F97F0218   1     ST8       #SPILL50(gr31,536)=gr11
    0| 0009AC ld       EB9F01E8   1     L8        gr28=#SPILL44(gr31,488)
    0| 0009B0 mcrf     4F000000   1     LRCR      cr6=cr0
    0| 0009B4 lfs      C08A0004   1     LFS       fp4=+CONSTANT_AREA(gr10,4)
    0| 0009B8 lfs      C0AA0008   1     LFS       fp5=+CONSTANT_AREA(gr10,8)
    0| 0009BC andi.    73A30001   1     RN4_R     gr3,cr0=gr29,0,0x1
    0| 0009C0 cmpdi    2EB70000   1     C8        cr5=gr23,0
    0| 0009C4 add      7E04E214   1     A         gr16=gr4,gr28
  122|                              CL.70:
    0| 0009C8 ld       E95F0088   1     L8        gr10=#SPILL0(gr31,136)
  124| 0009CC addi     38600000   1     LI        gr3=0
    0| 0009D0 add      7C855214   1     A         gr4=gr5,gr10
    0| 0009D4 bc       409903FC   1     BF        CL.71,cr6,0x2/gt,taken=20%(20,80)
    0| 0009D8 ld       E99F01B8   1     L8        gr12=#SPILL38(gr31,440)
    0| 0009DC ld       EBDF0200   1     L8        gr30=#SPILL47(gr31,512)
    0| 0009E0 ld       EBBF01B0   1     L8        gr29=#SPILL37(gr31,432)
  128| 0009E4 ld       E95F0208   1     L8        gr10=#SPILL48(gr31,520)
  126| 0009E8 ld       E97F0218   1     L8        gr11=#SPILL50(gr31,536)
    0| 0009EC mulld    7DE461D2   1     M         gr15=gr4,gr12
  128| 0009F0 ld       E89F0210   1     L8        gr4=#SPILL49(gr31,528)
    0| 0009F4 lfdx     7CDEECAE   1     LFL       fp6=dx3a(gr30,gr29,0)
    0| 0009F8 add      7DCFB214   1     A         gr14=gr15,gr22
    0| 0009FC ori      60210000   1     XNOP      
    0| 000A00 ori      60210000   1     XNOP      
  124|                              CL.72:
  126| 000A04 add      7FC01A14   1     A         gr30=gr0,gr3
  128| 000A08 or       7E6C9B78   1     LR        gr12=gr19
  128| 000A0C addi     3BBE0001   1     AI        gr29=gr30,1
  128| 000A10 mulld    7F26F1D2   1     M         gr25=gr6,gr30
  128| 000A14 mulld    7F66E9D2   1     M         gr27=gr6,gr29
  128| 000A18 or       7E5E9378   1     LR        gr30=gr18
  128| 000A1C or       7E9DA378   1     LR        gr29=gr20
  128| 000A20 add      7F0FCA14   1     A         gr24=gr15,gr25
  128| 000A24 lfdu     CCEA0008   1     LFDU      fp7,gr10=g32b(gr10,8)
  128| 000A28 lfdu     CD040008   1     LFDU      fp8,gr4=dx2a(gr4,8)
  128| 000A2C add      7F96C214   1     A         gr28=gr22,gr24
  128| 000A30 add      7F7B7214   1     A         gr27=gr27,gr14
  128| 000A34 add      7F55C214   1     A         gr26=gr21,gr24
  128| 000A38 add      7F30CA14   1     A         gr25=gr16,gr25
  126| 000A3C add      7F11C214   1     A         gr24=gr17,gr24
  126| 000A40 lfdux    7D8B34EE   1     LFDU      fp12,gr11=c1[](gr11,gr6,0)
    0| 000A44 mtspr    7EE903A6   1     LCTR      ctr=gr23
    0| 000A48 bc       41820088   1     BT        CL.400,cr0,0x4/eq,taken=50%(0,0)
  128| 000A4C lfdu     CD3D0008   1     LFDU      fp9,gr29=dx1a(gr29,8)
  128| 000A50 lfdu     CD5E0008   1     LFDU      fp10,gr30=g2b(gr30,8)
  128| 000A54 lfdu     CD6C0008   1     LFDU      fp11,gr12=g31b(gr12,8)
  128| 000A58 lfdu     CDBB0008   1     LFDU      fp13,gr27=c2[](gr27,8)
  128| 000A5C lfdu     CFFC0008   1     LFDU      fp31,gr28=c2[](gr28,8)
  126| 000A60 lfdu     CFD80008   1     LFDU      fp30,gr24=c1[](gr24,8)
  128| 000A64 lfdu     CFB90008   1     LFDU      fp29,gr25=c3[](gr25,8)
  128| 000A68 lfdu     CF9A0008   1     LFDU      fp28,gr26=c3[](gr26,8)
  128| 000A6C fmadd    FD2A4A3A   1     FMA       fp9=fp9,fp10,fp8,fcr
  128| 000A70 fmul     FD4B01F2   2     MFL       fp10=fp11,fp7,fcr
  128| 000A74 fadd     FD6DF82A   2     AFL       fp11=fp13,fp31,fcr
  128| 000A78 fadd     FDBE602A   2     AFL       fp13=fp30,fp12,fcr
  134| 000A7C fmr      FD80F090   2     LRFL      fp12=fp30
  128| 000A80 fadd     FFFDE02A   2     AFL       fp31=fp29,fp28,fcr
  128| 000A84 fmadd    FD2A49BA   2     FMA       fp9=fp9,fp10,fp6,fcr
  128| 000A88 fabs     FD405A10   2     ABSFL     fp10=fp11
  128| 000A8C fabs     FD606A10   2     ABSFL     fp11=fp13
  128| 000A90 fadd     FD4B502A   2     AFL       fp10=fp11,fp10,fcr
  128| 000A94 qvfre    11604830   1     QVFRE     fp11=fp9
  128| 000A98 fabs     FDA0FA10   1     ABSFL     fp13=fp31
  128| 000A9C fadd     FD4A682A   2     AFL       fp10=fp10,fp13,fcr
  128| 000AA0 fmsub    FDA92AF8   2     FMS       fp13=fp5,fp9,fp11,fcr
  128| 000AA4 fmul     FD4A0132   2     MFL       fp10=fp10,fp4,fcr
  128| 000AA8 fnmsub   FD6B5B7C   2     FNMS      fp11=fp11,fp11,fp13,fcr
  128| 000AAC fmsub    FDA92AF8   2     FMS       fp13=fp5,fp9,fp11,fcr
  128| 000AB0 fnmsub   FD6B5B7C   2     FNMS      fp11=fp11,fp11,fp13,fcr
  128| 000AB4 fmul     FDAA02F2   2     MFL       fp13=fp10,fp11,fcr
  128| 000AB8 fmsub    FD295378   2     FMS       fp9=fp10,fp9,fp13,fcr
  128| 000ABC fnmsub   FD2B6A7C   2     FNMS      fp9=fp13,fp11,fp9,fcr
  134| 000AC0 fsub     FD491828   2     SFL       fp10=fp9,fp3,fcr
  133| 000AC4 fadd     FC42482A   2     AFL       fp2=fp2,fp9,fcr
  134| 000AC8 fsel     FC6A1A6E   2     FSEL      fp3=fp10,fp3,fp9
    0| 000ACC bc       419602F8   1     BT        CL.351,cr5,0x4/eq,taken=20%(20,80)
    0|                              CL.400:
  128| 000AD0 lfd      C93D0008   1     LFL       fp9=dx1a(gr29,8)
  128| 000AD4 lfd      C97E0008   1     LFL       fp11=g2b(gr30,8)
  128| 000AD8 lfd      C94C0008   1     LFL       fp10=g31b(gr12,8)
  128| 000ADC lfdu     CFFB0010   1     LFDU      fp31,gr27=c2[](gr27,16)
  128| 000AE0 lfdu     CF9C0010   1     LFDU      fp28,gr28=c2[](gr28,16)
  128| 000AE4 lfdu     CDBD0010   1     LFDU      fp13,gr29=dx1a(gr29,16)
  128| 000AE8 lfdu     CFBE0010   1     LFDU      fp29,gr30=g2b(gr30,16)
  128| 000AEC lfdu     CFCC0010   1     LFDU      fp30,gr12=g31b(gr12,16)
  128| 000AF0 fmadd    FD6B4A3A   1     FMA       fp11=fp9,fp11,fp8,fcr
  128| 000AF4 lfdu     CD390010   1     LFDU      fp9,gr25=c3[](gr25,16)
  128| 000AF8 fmul     FF6A01F2   1     MFL       fp27=fp10,fp7,fcr
  128| 000AFC lfdu     CD5A0010   1     LFDU      fp10,gr26=c3[](gr26,16)
  128| 000B00 fadd     FF9FE02A   1     AFL       fp28=fp31,fp28,fcr
  126| 000B04 lfd      CBF80008   1     LFL       fp31=c1[](gr24,8)
  128| 000B08 fmadd    FDBD6A3A   1     FMA       fp13=fp13,fp29,fp8,fcr
  128| 000B0C lfd      CBBBFFF8   1     LFL       fp29=c2[](gr27,-8)
  128| 000B10 fmadd    FD7B59BA   1     FMA       fp11=fp11,fp27,fp6,fcr
  128| 000B14 lfd      CAFCFFF8   1     LFL       fp23=c2[](gr28,-8)
  128| 000B18 fmul     FF3E01F2   1     MFL       fp25=fp30,fp7,fcr
  128| 000B1C lfd      CBD9FFF8   1     LFL       fp30=c3[](gr25,-8)
  128| 000B20 fadd     FF5F602A   1     AFL       fp26=fp31,fp12,fcr
  128| 000B24 lfd      CB1AFFF8   1     LFL       fp24=c3[](gr26,-8)
  128| 000B28 qvfre    13605830   1     QVFRE     fp27=fp11
  126| 000B2C lfdu     CD980010   1     LFDU      fp12,gr24=c1[](gr24,16)
  128| 000B30 fadd     FFBDB82A   1     AFL       fp29=fp29,fp23,fcr
  128| 000B34 fmadd    FDB969BA   2     FMA       fp13=fp13,fp25,fp6,fcr
  128| 000B38 fabs     FF20D210   2     ABSFL     fp25=fp26
  128| 000B3C fabs     FEE0E210   2     ABSFL     fp23=fp28
  128| 000B40 fmsub    FF4B2EF8   2     FMS       fp26=fp5,fp11,fp27,fcr
  128| 000B44 fadd     FFDEC02A   2     AFL       fp30=fp30,fp24,fcr
  128| 000B48 fabs     FFA0EA10   2     ABSFL     fp29=fp29
  128| 000B4C qvfre    12C06830   1     QVFRE     fp22=fp13
  128| 000B50 fadd     FFB9E82A   1     AFL       fp29=fp25,fp29,fcr
  128| 000B54 fadd     FFECF82A   2     AFL       fp31=fp12,fp31,fcr
  128| 000B58 fnmsub   FF3BDEBC   2     FNMS      fp25=fp27,fp27,fp26,fcr
  128| 000B5C fabs     FF00F210   2     ABSFL     fp24=fp30
  128| 000B60 fabs     FF60FA10   2     ABSFL     fp27=fp31
    0| 000B64 bc       424001F8   1     BCF       ctr=CL.416,taken=0%(0,100)
  128| 000B68 fadd     FE9DC02A   1     AFL       fp20=fp29,fp24,fcr
  128| 000B6C lfd      CBFD0008   1     LFL       fp31=dx1a(gr29,8)
  128| 000B70 fmsub    FEAD2DB8   1     FMS       fp21=fp5,fp13,fp22,fcr
  128| 000B74 lfd      CBDE0008   1     LFL       fp30=g2b(gr30,8)
  128| 000B78 fmsub    FF4B2E78   1     FMS       fp26=fp5,fp11,fp25,fcr
  128| 000B7C lfd      CBAC0008   1     LFL       fp29=g31b(gr12,8)
  128| 000B80 fadd     FF09502A   1     AFL       fp24=fp9,fp10,fcr
  128| 000B84 lfdu     CF9B0010   1     LFDU      fp28,gr27=c2[](gr27,16)
  128| 000B88 fadd     FEFBB82A   1     AFL       fp23=fp27,fp23,fcr
  128| 000B8C lfdu     CF7C0010   1     LFDU      fp27,gr28=c2[](gr28,16)
  128| 000B90 fmul     FDF40132   1     MFL       fp15=fp20,fp4,fcr
  128| 000B94 lfd      CA9BFFF8   1     LFL       fp20=c2[](gr27,-8)
  128| 000B98 fnmsub   FE36B57C   1     FNMS      fp17=fp22,fp22,fp21,fcr
  128| 000B9C lfd      CA5CFFF8   1     LFL       fp18=c2[](gr28,-8)
  128| 000BA0 fnmsub   FF59CEBC   1     FNMS      fp26=fp25,fp25,fp26,fcr
  128| 000BA4 lfdu     CF3D0010   1     LFDU      fp25,gr29=dx1a(gr29,16)
  128| 000BA8 fabs     FEC0C210   1     ABSFL     fp22=fp24
  128| 000BAC lfdu     CF1E0010   1     LFDU      fp24,gr30=g2b(gr30,16)
  128| 000BB0 fadd     FE77B02A   1     AFL       fp19=fp23,fp22,fcr
  126| 000BB4 lfd      CAD80008   1     LFL       fp22=c1[](gr24,8)
  128| 000BB8 fmsub    FE0D2C78   1     FMS       fp16=fp5,fp13,fp17,fcr
  128| 000BBC lfdu     CD390010   1     LFDU      fp9,gr25=c3[](gr25,16)
  128| 000BC0 fmul     FEAF06B2   1     MFL       fp21=fp15,fp26,fcr
  128| 000BC4 lfdu     CD5A0010   1     LFDU      fp10,gr26=c3[](gr26,16)
  128| 000BC8 fmul     FE730132   1     MFL       fp19=fp19,fp4,fcr
  128| 000BCC lfdu     CEEC0010   1     LFDU      fp23,gr12=g31b(gr12,16)
  128| 000BD0 fnmsub   FE318C3C   1     FNMS      fp17=fp17,fp17,fp16,fcr
  128| 000BD4 lfd      CA19FFF8   1     LFL       fp16=c3[](gr25,-8)
  128| 000BD8 fmsub    FD6B7D78   1     FMS       fp11=fp15,fp11,fp21,fcr
  128| 000BDC lfd      C9FAFFF8   1     LFL       fp15=c3[](gr26,-8)
  128| 000BE0 fmadd    FFDEFA3A   1     FMA       fp30=fp31,fp30,fp8,fcr
  126| 000BE4 lfdu     CFF80010   1     LFDU      fp31,gr24=c1[](gr24,16)
  128| 000BE8 fmadd    FF38CA3A   1     FMA       fp25=fp25,fp24,fp8,fcr
  128| 000BEC fmul     FF1D01F2   2     MFL       fp24=fp29,fp7,fcr
  128| 000BF0 fmul     FFB30472   2     MFL       fp29=fp19,fp17,fcr
  128| 000BF4 fnmsub   FF5AAAFC   2     FNMS      fp26=fp21,fp26,fp11,fcr
  128| 000BF8 fadd     FD96602A   2     AFL       fp12=fp22,fp12,fcr
  128| 000BFC fadd     FEB4902A   2     AFL       fp21=fp20,fp18,fcr
  128| 000C00 fmul     FEF701F2   2     MFL       fp23=fp23,fp7,fcr
  128| 000C04 fmadd    FD78F1BA   2     FMA       fp11=fp30,fp24,fp6,fcr
  128| 000C08 fmsub    FFCD9F78   2     FMS       fp30=fp19,fp13,fp29,fcr
  134| 000C0C fsub     FF1A1828   2     SFL       fp24=fp26,fp3,fcr
  128| 000C10 fabs     FD806210   2     ABSFL     fp12=fp12
  128| 000C14 fadd     FF9CD82A   2     AFL       fp28=fp28,fp27,fcr
  128| 000C18 fmadd    FDB7C9BA   2     FMA       fp13=fp25,fp23,fp6,fcr
  128| 000C1C qvfre    12805830   1     QVFRE     fp20=fp11
  128| 000C20 fnmsub   FFD1EFBC   1     FNMS      fp30=fp29,fp17,fp30,fcr
  134| 000C24 fsel     FC781EAE   2     FSEL      fp3=fp24,fp3,fp26
  128| 000C28 fabs     FFA0AA10   2     ABSFL     fp29=fp21
  128| 000C2C fadd     FF30782A   2     AFL       fp25=fp16,fp15,fcr
  128| 000C30 fadd     FEFFB02A   2     AFL       fp23=fp31,fp22,fcr
  128| 000C34 fmsub    FEAB2D38   2     FMS       fp21=fp5,fp11,fp20,fcr
  128| 000C38 fadd     FFACE82A   2     AFL       fp29=fp12,fp29,fcr
  134| 000C3C fsub     FD9E1828   2     SFL       fp12=fp30,fp3,fcr
  128| 000C40 qvfre    12C06830   1     QVFRE     fp22=fp13
  128| 000C44 fabs     FF00CA10   1     ABSFL     fp24=fp25
  128| 000C48 fabs     FF60BA10   2     ABSFL     fp27=fp23
  128| 000C4C fnmsub   FF34A57C   2     FNMS      fp25=fp20,fp20,fp21,fcr
  133| 000C50 fadd     FC42D02A   2     AFL       fp2=fp2,fp26,fcr
  134| 000C54 fsel     FC6C1FAE   2     FSEL      fp3=fp12,fp3,fp30
    0| 000C58 bc       42400100   1     BCF       ctr=CL.417,taken=0%(0,100)
    0|                              CL.418:
  126| 000C5C lfd      C9980008   1     LFL       fp12=c1[](gr24,8)
  128| 000C60 fadd     FF1DC02A   1     AFL       fp24=fp29,fp24,fcr
  128| 000C64 fmsub    FF4D2DB8   2     FMS       fp26=fp5,fp13,fp22,fcr
  128| 000C68 fmsub    FFAB2E78   2     FMS       fp29=fp5,fp11,fp25,fcr
  128| 000C6C fabs     FF80E210   2     ABSFL     fp28=fp28
  128| 000C70 fadd     FD29502A   2     AFL       fp9=fp9,fp10,fcr
  128| 000C74 fadd     FD5BE02A   2     AFL       fp10=fp27,fp28,fcr
  128| 000C78 fmul     FF780132   2     MFL       fp27=fp24,fp4,fcr
  128| 000C7C fnmsub   FF16B6BC   2     FNMS      fp24=fp22,fp22,fp26,fcr
  128| 000C80 fnmsub   FF59CF7C   2     FNMS      fp26=fp25,fp25,fp29,fcr
  133| 000C84 fadd     FC42F02A   2     AFL       fp2=fp2,fp30,fcr
  128| 000C88 fabs     FFC04A10   2     ABSFL     fp30=fp9
  128| 000C8C lfdu     CD390010   1     LFDU      fp9,gr25=c3[](gr25,16)
  128| 000C90 fadd     FEEAF02A   1     AFL       fp23=fp10,fp30,fcr
  128| 000C94 fmsub    FFCD2E38   2     FMS       fp30=fp5,fp13,fp24,fcr
  128| 000C98 fmul     FF3B06B2   2     MFL       fp25=fp27,fp26,fcr
  128| 000C9C lfdu     CD5A0010   1     LFDU      fp10,gr26=c3[](gr26,16)
  128| 000CA0 lfdu     CF9B0010   1     LFDU      fp28,gr27=c2[](gr27,16)
  128| 000CA4 fadd     FFACF82A   1     AFL       fp29=fp12,fp31,fcr
  128| 000CA8 fmul     FE770132   2     MFL       fp19=fp23,fp4,fcr
  128| 000CAC fnmsub   FFD8C7BC   2     FNMS      fp30=fp24,fp24,fp30,fcr
  128| 000CB0 fmsub    FD6BDE78   2     FMS       fp11=fp27,fp11,fp25,fcr
  128| 000CB4 lfdu     CEFC0010   1     LFDU      fp23,gr28=c2[](gr28,16)
  128| 000CB8 lfd      CB79FFF8   1     LFL       fp27=c3[](gr25,-8)
  128| 000CBC lfd      CADD0008   1     LFL       fp22=dx1a(gr29,8)
  128| 000CC0 lfd      CABE0008   1     LFL       fp21=g2b(gr30,8)
  128| 000CC4 fmul     FE9307B2   1     MFL       fp20=fp19,fp30,fcr
  128| 000CC8 fnmsub   FD7ACAFC   2     FNMS      fp11=fp25,fp26,fp11,fcr
  128| 000CCC lfd      CB4C0008   1     LFL       fp26=g31b(gr12,8)
  128| 000CD0 lfd      CB3AFFF8   1     LFL       fp25=c3[](gr26,-8)
  128| 000CD4 lfd      CB1BFFF8   1     LFL       fp24=c2[](gr27,-8)
  128| 000CD8 lfdu     CFFD0010   1     LFDU      fp31,gr29=dx1a(gr29,16)
  128| 000CDC fmsub    FE4D9D38   1     FMS       fp18=fp19,fp13,fp20,fcr
  134| 000CE0 fsub     FE6B1828   2     SFL       fp19=fp11,fp3,fcr
  128| 000CE4 fmadd    FED5B23A   2     FMA       fp22=fp22,fp21,fp8,fcr
  128| 000CE8 fmul     FEBA01F2   2     MFL       fp21=fp26,fp7,fcr
  128| 000CEC lfdu     CDBE0010   1     LFDU      fp13,gr30=g2b(gr30,16)
  128| 000CF0 lfdu     CF4C0010   1     LFDU      fp26,gr12=g31b(gr12,16)
  128| 000CF4 fnmsub   FFDEA4BC   1     FNMS      fp30=fp20,fp30,fp18,fcr
  134| 000CF8 fsel     FC731AEE   2     FSEL      fp3=fp19,fp3,fp11
  133| 000CFC fadd     FC42582A   2     AFL       fp2=fp2,fp11,fcr
  128| 000D00 fmadd    FD75B1BA   2     FMA       fp11=fp22,fp21,fp6,fcr
  128| 000D04 lfd      CADCFFF8   1     LFL       fp22=c2[](gr28,-8)
  128| 000D08 fmadd    FDADFA3A   1     FMA       fp13=fp31,fp13,fp8,fcr
  128| 000D0C fmul     FE9A01F2   2     MFL       fp20=fp26,fp7,fcr
  134| 000D10 fsub     FF5E1828   2     SFL       fp26=fp30,fp3,fcr
  126| 000D14 lfdu     CFF80010   1     LFDU      fp31,gr24=c1[](gr24,16)
  128| 000D18 qvfre    12A05830   1     QVFRE     fp21=fp11
  128| 000D1C fadd     FF9CB82A   1     AFL       fp28=fp28,fp23,fcr
  128| 000D20 fadd     FF18B02A   2     AFL       fp24=fp24,fp22,fcr
  128| 000D24 fadd     FF7BC82A   2     AFL       fp27=fp27,fp25,fcr
  128| 000D28 fabs     FFA0EA10   2     ABSFL     fp29=fp29
  128| 000D2C fmadd    FDB469BA   2     FMA       fp13=fp13,fp20,fp6,fcr
  128| 000D30 fmsub    FF2B2D78   2     FMS       fp25=fp5,fp11,fp21,fcr
  128| 000D34 fadd     FD9F602A   2     AFL       fp12=fp31,fp12,fcr
  128| 000D38 fabs     FEE0C210   2     ABSFL     fp23=fp24
  128| 000D3C fabs     FF00DA10   2     ABSFL     fp24=fp27
  128| 000D40 fadd     FFBDB82A   2     AFL       fp29=fp29,fp23,fcr
  128| 000D44 qvfre    12C06830   1     QVFRE     fp22=fp13
  128| 000D48 fnmsub   FF35AE7C   1     FNMS      fp25=fp21,fp21,fp25,fcr
  128| 000D4C fabs     FF606210   2     ABSFL     fp27=fp12
  134| 000D50 fsel     FC7A1FAE   2     FSEL      fp3=fp26,fp3,fp30
    0| 000D54 bc       4200FF08   1     BCT       ctr=CL.418,taken=100%(100,0)
    0|                              CL.417:
  133| 000D58 fadd     FC42F02A   1     AFL       fp2=fp2,fp30,fcr
    0|                              CL.416:
  128| 000D5C fadd     FCFDC02A   1     AFL       fp7=fp29,fp24,fcr
  128| 000D60 fmsub    FD0D2DB8   2     FMS       fp8=fp5,fp13,fp22,fcr
  128| 000D64 fmsub    FD8B2E78   2     FMS       fp12=fp5,fp11,fp25,fcr
  128| 000D68 fabs     FFE0E210   2     ABSFL     fp31=fp28
  128| 000D6C fadd     FD29502A   2     AFL       fp9=fp9,fp10,fcr
  128| 000D70 fadd     FD5BF82A   2     AFL       fp10=fp27,fp31,fcr
  128| 000D74 fmul     FCE70132   2     MFL       fp7=fp7,fp4,fcr
  128| 000D78 fnmsub   FD16B23C   2     FNMS      fp8=fp22,fp22,fp8,fcr
  128| 000D7C fnmsub   FD99CB3C   2     FNMS      fp12=fp25,fp25,fp12,fcr
  128| 000D80 fabs     FD204A10   2     ABSFL     fp9=fp9
  128| 000D84 fadd     FD2A482A   2     AFL       fp9=fp10,fp9,fcr
  128| 000D88 fmsub    FD4D2A38   2     FMS       fp10=fp5,fp13,fp8,fcr
  128| 000D8C fmul     FFE70332   2     MFL       fp31=fp7,fp12,fcr
  128| 000D90 fmul     FD290132   2     MFL       fp9=fp9,fp4,fcr
  128| 000D94 fnmsub   FD0842BC   2     FNMS      fp8=fp8,fp8,fp10,fcr
  128| 000D98 fmsub    FCEB3FF8   2     FMS       fp7=fp7,fp11,fp31,fcr
  128| 000D9C fmul     FD490232   2     MFL       fp10=fp9,fp8,fcr
  128| 000DA0 fnmsub   FCECF9FC   2     FNMS      fp7=fp31,fp12,fp7,fcr
  128| 000DA4 fmsub    FD2D4AB8   2     FMS       fp9=fp9,fp13,fp10,fcr
  134| 000DA8 fsub     FD671828   2     SFL       fp11=fp7,fp3,fcr
  133| 000DAC fadd     FC42382A   2     AFL       fp2=fp2,fp7,fcr
  128| 000DB0 fnmsub   FD08527C   2     FNMS      fp8=fp10,fp8,fp9,fcr
  134| 000DB4 fsel     FC6B19EE   2     FSEL      fp3=fp11,fp3,fp7
  133| 000DB8 fadd     FC42402A   2     AFL       fp2=fp2,fp8,fcr
  134| 000DBC fsub     FCE81828   2     SFL       fp7=fp8,fp3,fcr
  134| 000DC0 fsel     FC671A2E   2     FSEL      fp3=fp7,fp3,fp8
    0|                              CL.351:
  136| 000DC4 addi     38630001   1     AI        gr3=gr3,1
  136| 000DC8 cmpld    7FA33840   1     CL8       cr7=gr3,gr7
  136| 000DCC bc       419CFC38   1     BT        CL.72,cr7,0x8/llt,taken=80%(80,20)
  136|                              CL.71:
    0| 000DD0 ld       E87F01B8   1     L8        gr3=#SPILL38(gr31,440)
    0| 000DD4 ld       E89F0218   1     L8        gr4=#SPILL50(gr31,536)
  137| 000DD8 ld       E95F01A8   1     L8        gr10=#SPILL36(gr31,424)
    0| 000DDC ld       E97F01B0   1     L8        gr11=#SPILL37(gr31,432)
  137| 000DE0 addi     38A50001   1     AI        gr5=gr5,1
    0| 000DE4 add      7E101A14   1     A         gr16=gr16,gr3
    0| 000DE8 add      7C832214   1     A         gr4=gr3,gr4
  137| 000DEC cmpld    7FA55040   1     CL8       cr7=gr5,gr10
    0| 000DF0 std      F89F0218   1     ST8       #SPILL50(gr31,536)=gr4
    0| 000DF4 addi     396B0008   1     AI        gr11=gr11,8
    0| 000DF8 std      F97F01B0   1     ST8       #SPILL37(gr31,432)=gr11
  137| 000DFC bc       419CFBCC   1     BT        CL.70,cr7,0x8/llt,taken=80%(80,20)
  137|                              CL.69:
  142| 000E00 fsel     FC82082E   1     FSEL      fp4=fp2,fp1,fp0
  142| 000E04 ld       E8620000   1     L8        gr3=.+CONSTANT_AREA(gr2,0)
  142| 000E08 fneg     FCA01050   1     COMPFL    fp5=fp2
  142| 000E0C fcmpu    FC001000   2     CFL       cr0=fp0,fp2
  142| 000E10 fsel     FC25092E   2     FSEL      fp1=fp5,fp1,fp4
  142| 000E14 stfd     D8290000   1     STFL      sumd(gr9,0)=fp1
  143| 000E18 bc       4182000C   1     BT        CL.42,cr0,0x80/feq,taken=40%(40,60)
  143| 000E1C fdiv     FC211024   1     DFL       fp1=fp1,fp2,fcr
  143| 000E20 stfd     D8290000   1     STFL      sumd(gr9,0)=fp1
  143|                              CL.42:
  144| 000E24 fcmpu    FC001800   1     CFL       cr0=fp0,fp3
  144| 000E28 fsel     FC03702E   2     FSEL      fp0=fp3,fp14,fp0
  144| 000E2C fneg     FC201850   2     COMPFL    fp1=fp3
  144| 000E30 fsel     FDC1702E   2     FSEL      fp14=fp1,fp14,fp0
  145| 000E34 bc       41820024   1     BT        CL.44,cr0,0x80/feq,taken=40%(40,60)
  145| 000E38 qvfre    10001830   1     QVFRE     fp0=fp3
  145| 000E3C lfs      C0430008   1     LFS       fp2=+CONSTANT_AREA(gr3,8)
  145| 000E40 fmsub    FC231038   1     FMS       fp1=fp2,fp3,fp0,fcr
  145| 000E44 fnmsub   FC00007C   2     FNMS      fp0=fp0,fp0,fp1,fcr
  145| 000E48 fmsub    FC231038   2     FMS       fp1=fp2,fp3,fp0,fcr
  145| 000E4C fnmsub   FC00007C   2     FNMS      fp0=fp0,fp0,fp1,fcr
  145| 000E50 fmsub    FC231038   2     FMS       fp1=fp2,fp3,fp0,fcr
  145| 000E54 fnmsub   FDC0007C   2     FNMS      fp14=fp0,fp0,fp1,fcr
  145|                              CL.44:
  145| 000E58 ld       E89F01A8   1     L8        gr4=#SPILL36(gr31,424)
  145| 000E5C sradi    7C831674   1     SRA8CA    gr3,ca=gr4,2
  145| 000E60 addze    7C630194   1     ADDE      gr3,ca=gr3,0,ca
  146| 000E64 rldicr   78631764   1     SLL8      gr3=gr3,2
  146| 000E68 subf     7CE32051   1     S_R       gr7,cr0=gr4,gr3
  146| 000E6C crand    4C250A02   1     CR_N      cr0=cr[10],0x2/gt,0x2/gt,0x2/gt,cr0
  146| 000E70 bc       408100D4   1     BF        CL.94,cr0,0x2/gt,taken=50%(0,0)
  147| 000E74 ld       E8DF00A8   1     L8        gr6=#SPILL4(gr31,168)
  146| 000E78 addi     38800000   1     LI        gr4=0
  147| 000E7C subf     7CA03050   1     S         gr5=gr6,gr0
  147| 000E80 addic.   35250001   1     AI_R      gr9,cr0=gr5,1,ca"
    0| 000E84 bc       408102AC   1     BF        CL.265,cr0,0x2/gt,taken=50%(0,0)
    0| 000E88 ld       EB9F0088   1     L8        gr28=#SPILL0(gr31,136)
    0| 000E8C ld       EB7F0090   1     L8        gr27=#SPILL1(gr31,144)
    0| 000E90 ld       EB5F00C8   1     L8        gr26=#SPILL8(gr31,200)
    0| 000E94 rldicr   78061F24   1     SLL8      gr6=gr0,3
    0| 000E98 ld       EB3F00B0   1     L8        gr25=#SPILL5(gr31,176)
    0| 000E9C ld       EB1F00B8   1     L8        gr24=#SPILL6(gr31,184)
    0| 000EA0 rldicr   7B851F24   1     SLL8      gr5=gr28,3
    0| 000EA4 rldicr   7B6C1F24   1     SLL8      gr12=gr27,3
    0| 000EA8 mulld    7CA5D9D2   1     M         gr5=gr5,gr27
    0| 000EAC neg      7FCC00D0   1     COMP      gr30=gr12
    0| 000EB0 mulld    7CC6D1D2   1     M         gr6=gr6,gr26
    0| 000EB4 rldicr   7B4A1F24   1     SLL8      gr10=gr26,3
    0| 000EB8 rldicr   7B2B1F24   1     SLL8      gr11=gr25,3
    0| 000EBC mulld    7CA5D1D2   1     M         gr5=gr5,gr26
    0| 000EC0 mulld    7FBAF1D2   1     M         gr29=gr26,gr30
    0| 000EC4 subf     7D6A5850   1     S         gr11=gr11,gr10
    0| 000EC8 add      7CC64214   1     A         gr6=gr6,gr8
    0| 000ECC addi     3BCBFFF0   1     AI        gr30=gr11,-16
    0| 000ED0 subf     7D79C050   1     S         gr11=gr24,gr25
    0| 000ED4 add      7CA5EA14   1     A         gr5=gr5,gr29
    0| 000ED8 add      7CC6F214   1     A         gr6=gr6,gr30
    0| 000EDC addic.   356B0001   1     AI_R      gr11,cr0=gr11,1,ca"
    0| 000EE0 mulld    7FACD1D2   1     M         gr29=gr12,gr26
    0| 000EE4 add      7D853214   1     A         gr12=gr5,gr6
  146|                              CL.89:
  147| 000EE8 addi     38A00000   1     LI        gr5=0
    0| 000EEC bc       40810048   1     BF        CL.93,cr0,0x2/gt,taken=20%(20,80)
    0| 000EF0 or       7D9E6378   1     LR        gr30=gr12
  147|                              CL.90:
  149| 000EF4 lfd      C81E0008   1     LFL       fp0=div[](gr30,8)
    0| 000EF8 mtspr    7D6903A6   1     LCTR      ctr=gr11
  149| 000EFC or       7FC6F378   1     LR        gr6=gr30
  149| 000F00 fmul     FC0E0032   1     MFL       fp0=fp14,fp0,fcr
    0| 000F04 bc       4240001C   1     BCF       ctr=CL.419,taken=0%(0,100)
    0| 000F08 ori      60210000   1     XNOP      
    0| 000F0C ori      60210000   1     XNOP      
    0|                              CL.420:
  149| 000F10 lfd      C8260010   1     LFL       fp1=div[](gr6,16)
  149| 000F14 stfdu    DC060008   1     STFDU     gr6,div[](gr6,8)=fp0
  149| 000F18 fmul     FC0E0072   1     MFL       fp0=fp14,fp1,fcr
    0| 000F1C bc       4200FFF4   1     BCT       ctr=CL.420,taken=100%(100,0)
    0|                              CL.419:
  151| 000F20 addi     38A50001   1     AI        gr5=gr5,1
  149| 000F24 stfdu    DC060008   1     STFDU     gr6,div[](gr6,8)=fp0
  151| 000F28 cmpld    7F254840   1     CL8       cr6=gr5,gr9
    0| 000F2C add      7FDE5214   1     A         gr30=gr30,gr10
  151| 000F30 bc       4198FFC4   1     BT        CL.90,cr6,0x8/llt,taken=80%(80,20)
  151|                              CL.93:
  152| 000F34 addi     38840001   1     AI        gr4=gr4,1
    0| 000F38 add      7D8CEA14   1     A         gr12=gr12,gr29
  152| 000F3C cmpd     7F272000   1     C8        cr6=gr7,gr4
  152| 000F40 bc       4199FFA8   1     BT        CL.89,cr6,0x2/gt,taken=80%(80,20)
  152|                              CL.94:
  146| 000F44 ld       E89F01A8   1     L8        gr4=#SPILL36(gr31,424)
  146| 000F48 cmpd     7F243800   1     C8        cr6=gr4,gr7
  146| 000F4C crand    4C25CA02   1     CR_N      cr0=cr[16],0x2/gt,0x2/gt,0x2/gt,cr0
  146| 000F50 bc       40810148   1     BF        CL.95,cr0,0x2/gt,taken=30%(30,70)
    0| 000F54 ld       EBBF0090   1     L8        gr29=#SPILL1(gr31,144)
    0| 000F58 ld       EB9F0088   1     L8        gr28=#SPILL0(gr31,136)
    0| 000F5C ld       EB7F00C8   1     L8        gr27=#SPILL8(gr31,200)
    0| 000F60 rldicr   78041F24   1     SLL8      gr4=gr0,3
    0| 000F64 ld       EB5F00B0   1     L8        gr26=#SPILL5(gr31,176)
  147| 000F68 ld       EB3F00A8   1     L8        gr25=#SPILL4(gr31,168)
    0| 000F6C rldicr   7BA61F24   1     SLL8      gr6=gr29,3
    0| 000F70 rldicr   7B851F24   1     SLL8      gr5=gr28,3
    0| 000F74 mulld    7D26D9D2   1     M         gr9=gr6,gr27
    0| 000F78 mulld    7D45E9D2   1     M         gr10=gr5,gr29
    0| 000F7C mulld    7D64D9D2   1     M         gr11=gr4,gr27
    0| 000F80 rldicr   7B641F24   1     SLL8      gr4=gr27,3
    0| 000F84 rldicr   7B451F24   1     SLL8      gr5=gr26,3
    0| 000F88 neg      7D8600D0   1     COMP      gr12=gr6
    0| 000F8C subf     7CA42850   1     S         gr5=gr5,gr4
    0| 000F90 rldicr   7BA626E4   1     SLL8      gr6=gr29,4
    0| 000F94 mulld    7CE749D2   1     M         gr7=gr7,gr9
    0| 000F98 add      7D085A14   1     A         gr8=gr8,gr11
    0| 000F9C addi     38A5FFF0   1     AI        gr5=gr5,-16
  147| 000FA0 subf     7D60C850   1     S         gr11=gr25,gr0
    0| 000FA4 mulld    7D4AD9D2   1     M         gr10=gr10,gr27
    0| 000FA8 mulld    7D8CD9D2   1     M         gr12=gr12,gr27
    0| 000FAC ld       EB1F00B8   1     L8        gr24=#SPILL6(gr31,184)
  152| 000FB0 addi     3863FFFF   1     AI        gr3=gr3,-1
    0| 000FB4 add      7CA54214   1     A         gr5=gr5,gr8
  147| 000FB8 addic.   340B0001   1     AI_R      gr0,cr0=gr11,1,ca"
    0| 000FBC rldicr   7BBE2EA4   1     SLL8      gr30=gr29,5
    0| 000FC0 mulld    7D06D9D2   1     M         gr8=gr6,gr27
  152| 000FC4 sradi    7C631674   1     SRA8CA    gr3,ca=gr3,2
    0| 000FC8 add      7D653A14   1     A         gr11=gr5,gr7
  152| 000FCC addze    7CE30194   1     ADDE      gr7,ca=gr3,0,ca
    0| 000FD0 subf     7CDAC050   1     S         gr6=gr24,gr26
    0| 000FD4 add      7CAA5A14   1     A         gr5=gr10,gr11
    0| 000FD8 add      7D4A6214   1     A         gr10=gr10,gr12
  146| 000FDC addi     38600000   1     LI        gr3=0
    0| 000FE0 bc       408100B8   1     BF        CL.95,cr0,0x2/gt,taken=20%(20,80)
    0| 000FE4 addic.   34C60001   1     AI_R      gr6,cr0=gr6,1,ca"
    0| 000FE8 mulld    7EFBF1D2   1     M         gr23=gr27,gr30
    0| 000FEC add      7D854A14   1     A         gr12=gr5,gr9
    0| 000FF0 add      7FCA5A14   1     A         gr30=gr10,gr11
    0| 000FF4 add      7FA54214   1     A         gr29=gr5,gr8
    0| 000FF8 addi     3B870001   1     AI        gr28=gr7,1
  146|                              CL.76:
  147| 000FFC addi     38E00000   1     LI        gr7=0
    0| 001000 bc       4081007C   1     BF        CL.77,cr0,0x2/gt,taken=20%(20,80)
    0| 001004 or       7CBB2B78   1     LR        gr27=gr5
    0| 001008 or       7FBAEB78   1     LR        gr26=gr29
    0| 00100C or       7FD9F378   1     LR        gr25=gr30
    0| 001010 or       7D986378   1     LR        gr24=gr12
  147|                              CL.78:
  149| 001014 or       7F48D378   1     LR        gr8=gr26
  149| 001018 or       7F29CB78   1     LR        gr9=gr25
  149| 00101C or       7F0AC378   1     LR        gr10=gr24
  149| 001020 or       7F6BDB78   1     LR        gr11=gr27
    0| 001024 mtspr    7CC903A6   1     LCTR      ctr=gr6
    0| 001028 ori      60210000   1     XNOP      
    0|                              CL.421:
  149| 00102C lfd      C8090008   1     LFL       fp0=div[](gr9,8)
  149| 001030 fmul     FC0E0032   1     MFL       fp0=fp14,fp0,fcr
  149| 001034 stfdu    DC090008   2     STFDU     gr9,div[](gr9,8)=fp0
  149| 001038 lfd      C80B0008   1     LFL       fp0=div[](gr11,8)
  149| 00103C fmul     FC0E0032   1     MFL       fp0=fp14,fp0,fcr
  149| 001040 stfdu    DC0B0008   2     STFDU     gr11,div[](gr11,8)=fp0
  149| 001044 lfd      C80A0008   1     LFL       fp0=div[](gr10,8)
  149| 001048 fmul     FC0E0032   1     MFL       fp0=fp14,fp0,fcr
  149| 00104C stfdu    DC0A0008   2     STFDU     gr10,div[](gr10,8)=fp0
  149| 001050 lfd      C8080008   1     LFL       fp0=div[](gr8,8)
  149| 001054 fmul     FC0E0032   1     MFL       fp0=fp14,fp0,fcr
  149| 001058 stfdu    DC080008   2     STFDU     gr8,div[](gr8,8)=fp0
    0| 00105C bc       4200FFD0   1     BCT       ctr=CL.421,taken=100%(100,0)
  151| 001060 addi     38E70001   1     AI        gr7=gr7,1
    0| 001064 add      7F7B2214   1     A         gr27=gr27,gr4
  151| 001068 cmpld    7CA70040   1     CL8       cr1=gr7,gr0
    0| 00106C add      7F5A2214   1     A         gr26=gr26,gr4
    0| 001070 add      7F392214   1     A         gr25=gr25,gr4
    0| 001074 add      7F182214   1     A         gr24=gr24,gr4
  151| 001078 bc       4184FF9C   1     BT        CL.78,cr1,0x8/llt,taken=80%(80,20)
  151|                              CL.77:
  152| 00107C addi     38630001   1     AI        gr3=gr3,1
    0| 001080 add      7D8CBA14   1     A         gr12=gr12,gr23
  152| 001084 cmpld    7CA3E040   1     CL8       cr1=gr3,gr28
    0| 001088 add      7FD7F214   1     A         gr30=gr23,gr30
    0| 00108C add      7FB7EA14   1     A         gr29=gr23,gr29
    0| 001090 add      7CA5BA14   1     A         gr5=gr5,gr23
  152| 001094 bc       4184FF68   1     BT        CL.76,cr1,0x8/llt,taken=80%(80,20)
  157|                              CL.95:
  157| 001098 ld       E8210000   1     L8        gr1=#stack(gr1,0),gr31"
  157| 00109C ld       E9C1FEE0   1     L8        gr14=#stack(gr1,-288)
  157| 0010A0 ld       E9E1FEE8   1     L8        gr15=#stack(gr1,-280)
  157| 0010A4 ld       EA01FEF0   1     L8        gr16=#stack(gr1,-272)
  157| 0010A8 ld       EA21FEF8   1     L8        gr17=#stack(gr1,-264)
  157| 0010AC ld       EA41FF00   1     L8        gr18=#stack(gr1,-256)
  157| 0010B0 ld       EA61FF08   1     L8        gr19=#stack(gr1,-248)
  157| 0010B4 ld       EA81FF10   1     L8        gr20=#stack(gr1,-240)
  157| 0010B8 ld       EAA1FF18   1     L8        gr21=#stack(gr1,-232)
  157| 0010BC ld       EAC1FF20   1     L8        gr22=#stack(gr1,-224)
  157| 0010C0 ld       EAE1FF28   1     L8        gr23=#stack(gr1,-216)
  157| 0010C4 ld       EB01FF30   1     L8        gr24=#stack(gr1,-208)
  157| 0010C8 ld       EB21FF38   1     L8        gr25=#stack(gr1,-200)
  157| 0010CC ld       EB41FF40   1     L8        gr26=#stack(gr1,-192)
  157| 0010D0 ld       EB61FF48   1     L8        gr27=#stack(gr1,-184)
  157| 0010D4 ld       EB81FF50   1     L8        gr28=#stack(gr1,-176)
  157| 0010D8 ld       EBA1FF58   1     L8        gr29=#stack(gr1,-168)
  157| 0010DC ld       EBC1FF60   1     L8        gr30=#stack(gr1,-160)
  157| 0010E0 ld       EBE1FF68   1     L8        gr31=#stack(gr1,-152)
  157| 0010E4 lfd      CBE1FFF8   1     LFL       fp31=#stack(gr1,-8)
  157| 0010E8 lfd      CBC1FFF0   1     LFL       fp30=#stack(gr1,-16)
  157| 0010EC lfd      CBA1FFE8   1     LFL       fp29=#stack(gr1,-24)
  157| 0010F0 lfd      CB81FFE0   1     LFL       fp28=#stack(gr1,-32)
  157| 0010F4 lfd      CB61FFD8   1     LFL       fp27=#stack(gr1,-40)
  157| 0010F8 lfd      CB41FFD0   1     LFL       fp26=#stack(gr1,-48)
  157| 0010FC lfd      CB21FFC8   1     LFL       fp25=#stack(gr1,-56)
  157| 001100 lfd      CB01FFC0   1     LFL       fp24=#stack(gr1,-64)
  157| 001104 lfd      CAE1FFB8   1     LFL       fp23=#stack(gr1,-72)
  157| 001108 lfd      CAC1FFB0   1     LFL       fp22=#stack(gr1,-80)
  157| 00110C lfd      CAA1FFA8   1     LFL       fp21=#stack(gr1,-88)
  157| 001110 lfd      CA81FFA0   1     LFL       fp20=#stack(gr1,-96)
  157| 001114 lfd      CA61FF98   1     LFL       fp19=#stack(gr1,-104)
  157| 001118 lfd      CA41FF90   1     LFL       fp18=#stack(gr1,-112)
  157| 00111C lfd      CA21FF88   1     LFL       fp17=#stack(gr1,-120)
  157| 001120 lfd      CA01FF80   1     LFL       fp16=#stack(gr1,-128)
  157| 001124 lfd      C9E1FF78   1     LFL       fp15=#stack(gr1,-136)
  157| 001128 lfd      C9C1FF70   1     LFL       fp14=#stack(gr1,-144)
  157| 00112C bclr     4E800020   1     BA        lr
  151|                              CL.265:
    0| 001130 mtspr    7CE903A6   1     LCTR      ctr=gr7
  151|                              CL.194:
  152| 001134 addi     38840001   1     AI        gr4=gr4,1
  152| 001138 cmpd     7F243800   1     C8        cr6=gr4,gr7
  152| 00113C bc       4118FFF8   1     BCTT      ctr=CL.194,cr6,0x1/lt,taken=80%(80,20)
    0| 001140 b        4BFFFE04   1     B         CL.94,-1
  111|                              CL.570:
  157| 001144 ld       E8210000   1     L8        gr1=#stack(gr1,0),gr31"
  157| 001148 ld       E9C1FEE0   1     L8        gr14=#stack(gr1,-288)
  157| 00114C ld       E9E1FEE8   1     L8        gr15=#stack(gr1,-280)
  157| 001150 ld       EA01FEF0   1     L8        gr16=#stack(gr1,-272)
  157| 001154 ld       EA21FEF8   1     L8        gr17=#stack(gr1,-264)
  157| 001158 ld       EA41FF00   1     L8        gr18=#stack(gr1,-256)
  157| 00115C ld       EA61FF08   1     L8        gr19=#stack(gr1,-248)
  157| 001160 ld       EA81FF10   1     L8        gr20=#stack(gr1,-240)
  157| 001164 ld       EAA1FF18   1     L8        gr21=#stack(gr1,-232)
  157| 001168 ld       EAC1FF20   1     L8        gr22=#stack(gr1,-224)
  157| 00116C ld       EAE1FF28   1     L8        gr23=#stack(gr1,-216)
  157| 001170 ld       EB01FF30   1     L8        gr24=#stack(gr1,-208)
  157| 001174 ld       EB21FF38   1     L8        gr25=#stack(gr1,-200)
  157| 001178 ld       EB41FF40   1     L8        gr26=#stack(gr1,-192)
  157| 00117C ld       EB61FF48   1     L8        gr27=#stack(gr1,-184)
  157| 001180 ld       EB81FF50   1     L8        gr28=#stack(gr1,-176)
  157| 001184 ld       EBA1FF58   1     L8        gr29=#stack(gr1,-168)
  157| 001188 ld       EBC1FF60   1     L8        gr30=#stack(gr1,-160)
  157| 00118C ld       EBE1FF68   1     L8        gr31=#stack(gr1,-152)
  157| 001190 lfd      CBE1FFF8   1     LFL       fp31=#stack(gr1,-8)
  157| 001194 lfd      CBC1FFF0   1     LFL       fp30=#stack(gr1,-16)
  157| 001198 lfd      CBA1FFE8   1     LFL       fp29=#stack(gr1,-24)
  157| 00119C lfd      CB81FFE0   1     LFL       fp28=#stack(gr1,-32)
  157| 0011A0 lfd      CB61FFD8   1     LFL       fp27=#stack(gr1,-40)
  157| 0011A4 lfd      CB41FFD0   1     LFL       fp26=#stack(gr1,-48)
  157| 0011A8 lfd      CB21FFC8   1     LFL       fp25=#stack(gr1,-56)
  157| 0011AC lfd      CB01FFC0   1     LFL       fp24=#stack(gr1,-64)
  157| 0011B0 lfd      CAE1FFB8   1     LFL       fp23=#stack(gr1,-72)
  157| 0011B4 lfd      CAC1FFB0   1     LFL       fp22=#stack(gr1,-80)
  157| 0011B8 lfd      CAA1FFA8   1     LFL       fp21=#stack(gr1,-88)
  157| 0011BC lfd      CA81FFA0   1     LFL       fp20=#stack(gr1,-96)
  157| 0011C0 lfd      CA61FF98   1     LFL       fp19=#stack(gr1,-104)
  157| 0011C4 lfd      CA41FF90   1     LFL       fp18=#stack(gr1,-112)
  157| 0011C8 bclr     4E800020   1     BA        lr
     |               Tag Table
     | 0011CC        00000000 00012220 92120000 000011CC 1F
     |               Instruction count         1139
     |               Straight-line exec time   1321
     |               Constant Area
     | 000000        00000000 3F000000 3F800000

 
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              NODIRECTSTORAG  ESCAPE          I4
         INLGLUE         NOLIBESSL       NOLIBPOSIX      OBJECT
         SWAPOMP         THREADED        UNWIND          ZEROSIZE
  
         ==  Options Of Integer Type ==
         ALIAS_SIZE(65536)     MAXMEM(-1)            OPTIMIZE(3)
         SPILLSIZE(512)        STACKTEMP(0)
  
         ==  Options of Integer and Character Type ==
         CACHE(LEVEL(1),TYPE(I),ASSOC(4),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(I),ASSOC(16),COST(80),LINE(128))
         CACHE(LEVEL(1),TYPE(D),ASSOC(8),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(D),ASSOC(16),COST(80),LINE(128))
         INLINE(NOAUTO,LEVEL(5))
         HOT(FASTMATH,LEVEL(0))
         SIMD(AUTO)
  
         ==  Options Of Character Type  ==
         64()                  ALIAS(STD,NOINTPTR)   ALIGN(BINDC(LINUXPPC),STRUCT(NATURAL))
         ARCH(QP)              AUTODBL(NONE)         DESCRIPTOR(V1)
         DIRECTIVE(IBM*,IBMT)  ENUM()                FLAG(I,I)
         FLOAT(MAF,FOLD,RSQRT,FLTINT)
         FREE(F90)             GNU_VERSION(DOT_TRIPLE)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LIST()                LANGLVL(EXTENDED)     REALSIZE(4)
         REPORT(HOTLIST)       STRICT(NONE,NOPRECISION,NOEXCEPTIONS,NOIEEEFP,NONANS,NOINFINITIES,NOSUBNORMALS,NOZEROSIGNS,NOOPERATIONPRECISION,ORDER,NOLIBRARY,NOCONSTRUCTCOPY,NOVECTORPRECISION)
         TUNE(QP)              UNROLL(AUTO)          XFLAG()
         XLF2003(NOPOLYMORPHIC,NOBOZLITARGS,NOSIGNDZEROINTR,NOSTOPEXCEPT,NOVOLATILE,NOAUTOREALLOC,OLDNANINF)
         XLF2008(NOCHECKPRESENCE)
         XLF77(LEADZERO,BLANKPAD)
         XLF90(SIGNEDZERO,AUTODEALLOC)
  
>>>>> SOURCE SECTION <<<<<
 
>>>>> FILE TABLE SECTION <<<<<
 
 
                                       FILE CREATION        FROM
FILE NO   FILENAME                    DATE       TIME       FILE    LINE
     0    diverg.f90                  07/08/15   15:47:33
 
 
>>>>> COMPILATION EPILOGUE SECTION <<<<<
 
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
 
    Source records read.......................................     164
1501-510  Compilation successful for file diverg.f90.
1501-543  Object file created.

IBM XL Fortran for Blue Gene, V14.1 (5799-AH1) Version 14.01.0000.0012 --- subs.f90 07/08/15 15:48:58
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              NODIRECTSTORAG  ESCAPE          I4
         INLGLUE         NOLIBESSL       NOLIBPOSIX      OBJECT
         SWAPOMP         THREADED        UNWIND          ZEROSIZE
  
         ==  Options Of Integer Type ==
         ALIAS_SIZE(65536)     MAXMEM(-1)            OPTIMIZE(3)
         SPILLSIZE(512)        STACKTEMP(0)
  
         ==  Options of Integer and Character Type ==
         CACHE(LEVEL(1),TYPE(I),ASSOC(4),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(I),ASSOC(16),COST(80),LINE(128))
         CACHE(LEVEL(1),TYPE(D),ASSOC(8),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(D),ASSOC(16),COST(80),LINE(128))
         INLINE(NOAUTO,LEVEL(5))
         HOT(FASTMATH,LEVEL(0))
         SIMD(AUTO)
  
         ==  Options Of Character Type  ==
         64()                  ALIAS(STD,NOINTPTR)   ALIGN(BINDC(LINUXPPC),STRUCT(NATURAL))
         ARCH(QP)              AUTODBL(NONE)         DESCRIPTOR(V1)
         DIRECTIVE(IBM*,IBMT)  ENUM()                FLAG(I,I)
         FLOAT(MAF,FOLD,RSQRT,FLTINT)
         FREE(F90)             GNU_VERSION(DOT_TRIPLE)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LIST()                LANGLVL(EXTENDED)     REALSIZE(4)
         REPORT(HOTLIST)       STRICT(NONE,NOPRECISION,NOEXCEPTIONS,NOIEEEFP,NONANS,NOINFINITIES,NOSUBNORMALS,NOZEROSIGNS,NOOPERATIONPRECISION,ORDER,NOLIBRARY,NOCONSTRUCTCOPY,NOVECTORPRECISION)
         TUNE(QP)              UNROLL(AUTO)          XFLAG()
         XLF2003(NOPOLYMORPHIC,NOBOZLITARGS,NOSIGNDZEROINTR,NOSTOPEXCEPT,NOVOLATILE,NOAUTOREALLOC,OLDNANINF)
         XLF2008(NOCHECKPRESENCE)
         XLF77(LEADZERO,BLANKPAD)
         XLF90(SIGNEDZERO,AUTODEALLOC)
  
>>>>> SOURCE SECTION <<<<<
** subs   === End of Compilation 1 ===
 
>>>>> LOOP TRANSFORMATION SECTION <<<<<

1586-540 (I) Loop (loop index 1) at subs.f90 <line 110> was not SIMD vectorized because it contains memory references T_2 = T_2 + ((double *)((char *).a  + - ((long long *)((char *).d-a_1  + -24ll))->d-a_1%bounds%mult[][1ll]))->a[][$$CIV0 + 1ll] * ((double *)((char *).a  + - ((long long *)((char *).d-a_1  + -24ll))->d-a_1%bounds%mult[][1ll]))->a[][$$CIV0 + 1ll]; with non-vectorizable strides.
1586-536 (I) Loop (loop index 1) at subs.f90 <line 110> was not SIMD vectorized because it contains memory references T_2 = T_2 + ((double *)((char *).a  + - ((long long *)((char *).d-a_1  + -24ll))->d-a_1%bounds%mult[][1ll]))->a[][$$CIV0 + 1ll] * ((double *)((char *).a  + - ((long long *)((char *).d-a_1  + -24ll))->d-a_1%bounds%mult[][1ll]))->a[][$$CIV0 + 1ll]; with non-vectorizable alignment.
1586-537 (I) Loop (loop index 1) at subs.f90 <line 110> was not SIMD vectorized because it contains operation in T_2 + ((double *)((char *).a  + - ((long long *)((char *).d-a_1  + -24ll))->d-a_1%bounds%mult[][1ll]))->a[][$$CIV0 + 1ll] * ((double *)((char *).a  + - ((long long *)((char *).d-a_1  + -24ll))->d-a_1%bounds%mult[][1ll]))->a[][$$CIV0 + 1ll] which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 1) at subs.f90 <line 110> was not SIMD vectorized because it contains memory references ((char *).a  + - ((long long *)((char *).d-a_1  + -24ll))->d-a_1%bounds%mult[][1ll] + (.d-a_1->d-a_1%bounds%mult[])*($$CIV0 + 1ll)) with non-vectorizable strides.
1586-549 (I) Loop (loop index 1) at subs.f90 <line 110> was not SIMD vectorized because a data dependence  prevents SIMD vectorization.
1586-554 (I) Loop (loop index 1) at subs.f90 <line 110> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"1">. Total number of the innermost loops SIMD vectorized <"0">.
1586-540 (I) Loop (loop index 1) at subs.f90 <line 93> was not SIMD vectorized because it contains memory references T_3 = T_3 + ((double *)((char *).a  + - ((long long *)((char *).d-a_2  + -24ll))->d-a_2%bounds%mult[][1ll]))->a[][$$CIV1 + 1ll] * ((double *)((char *).b  + - ((long long *)((char *).d-b_1  + -24ll))->d-b_1%bounds%mult[][1ll]))->b[][$$CIV1 + 1ll]; with non-vectorizable strides.
1586-536 (I) Loop (loop index 1) at subs.f90 <line 93> was not SIMD vectorized because it contains memory references T_3 = T_3 + ((double *)((char *).a  + - ((long long *)((char *).d-a_2  + -24ll))->d-a_2%bounds%mult[][1ll]))->a[][$$CIV1 + 1ll] * ((double *)((char *).b  + - ((long long *)((char *).d-b_1  + -24ll))->d-b_1%bounds%mult[][1ll]))->b[][$$CIV1 + 1ll]; with non-vectorizable alignment.
1586-537 (I) Loop (loop index 1) at subs.f90 <line 93> was not SIMD vectorized because it contains operation in T_3 + ((double *)((char *).a  + - ((long long *)((char *).d-a_2  + -24ll))->d-a_2%bounds%mult[][1ll]))->a[][$$CIV1 + 1ll] * ((double *)((char *).b  + - ((long long *)((char *).d-b_1  + -24ll))->d-b_1%bounds%mult[][1ll]))->b[][$$CIV1 + 1ll] which is not suitable for SIMD vectorization.
1586-540 (I) Loop (loop index 1) at subs.f90 <line 93> was not SIMD vectorized because it contains memory references ((char *).a  + - ((long long *)((char *).d-a_2  + -24ll))->d-a_2%bounds%mult[][1ll] + (.d-a_2->d-a_2%bounds%mult[])*($$CIV1 + 1ll)) with non-vectorizable strides.
1586-549 (I) Loop (loop index 1) at subs.f90 <line 93> was not SIMD vectorized because a data dependence  prevents SIMD vectorization.
1586-554 (I) Loop (loop index 1) at subs.f90 <line 93> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"1">. Total number of the innermost loops SIMD vectorized <"0">.
1586-533 (I) Loop (loop index 1) at subs.f90 <line 37> was not SIMD vectorized because its number of iterations is too small.
1586-535 (I) Loop (loop index 1) at subs.f90 <line 37> was not SIMD vectorized because the aliasing-induced dependence prevents SIMD vectorization.
1586-534 (I) Loop (loop index 2) at subs.f90 <line 36> was not SIMD vectorized because the loop is not the innermost loop.
1586-538 (I) Loop (loop index 2) at subs.f90 <line 36> was not SIMD vectorized because it contains unsupported loop structure.
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"1">. Total number of the innermost loops SIMD vectorized <"0">.
1586-534 (I) Loop (loop index 1) at subs.f90 <line 18> was not SIMD vectorized because the loop is not the innermost loop.
1586-534 (I) Loop (loop index 2) at subs.f90 <line 18> was not SIMD vectorized because the loop is not the innermost loop.
1586-534 (I) Loop (loop index 3) at subs.f90 <line 18> was not SIMD vectorized because the loop is not the innermost loop.
1586-540 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((float *)((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll]))))->out[][1ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)][2ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)][1ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)][$$CIV3 + 1ll] = ((float *)((char *).in  + .d-in_1->d-in_1%rvo))->in[][1ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)][2ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)][1ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)][$$CIV3 + 1ll]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((float *)((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll]))))->out[][2ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)][1ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)][1ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)][$$CIV3 + 1ll] = ((float *)((char *).in  + .d-in_1->d-in_1%rvo))->in[][2ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)][1ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)][1ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)][$$CIV3 + 1ll]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((float *)((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll]))))->out[][1ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)][1ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)][2ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)][$$CIV3 + 1ll] = ((float *)((char *).in  + .d-in_1->d-in_1%rvo))->in[][1ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)][1ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)][2ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)][$$CIV3 + 1ll]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((float *)((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll]))))->out[][1ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)][2ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)][2ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)][$$CIV3 + 1ll] = ((float *)((char *).in  + .d-in_1->d-in_1%rvo))->in[][1ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)][2ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)][2ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)][$$CIV3 + 1ll]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((float *)((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll]))))->out[][1ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)][1ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)][1ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)][$$CIV3 + 1ll] = ((float *)((char *).in  + .d-in_1->d-in_1%rvo))->in[][1ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)][1ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)][1ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)][$$CIV3 + 1ll]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((float *)((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll]))))->out[][2ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)][2ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)][2ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)][$$CIV3 + 1ll] = ((float *)((char *).in  + .d-in_1->d-in_1%rvo))->in[][2ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)][2ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)][2ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)][$$CIV3 + 1ll]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((float *)((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll]))))->out[][2ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)][1ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)][2ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)][$$CIV3 + 1ll] = ((float *)((char *).in  + .d-in_1->d-in_1%rvo))->in[][2ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)][1ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)][2ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)][$$CIV3 + 1ll]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((float *)((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll]))))->out[][2ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)][2ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)][1ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)][$$CIV3 + 1ll] = ((float *)((char *).in  + .d-in_1->d-in_1%rvo))->in[][2ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)][2ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)][1ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)][$$CIV3 + 1ll]; with non-vectorizable strides.
1586-536 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains non-stride-one store references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)).
1586-536 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains non-stride-one store references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)).
1586-536 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains non-stride-one store references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)).
1586-536 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains non-stride-one store references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)).
1586-536 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains non-stride-one store references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)).
1586-536 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains non-stride-one store references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)).
1586-536 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains non-stride-one store references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)).
1586-536 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 4) at subs.f90 <line 18> was not SIMD vectorized because it contains non-stride-one store references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 2ll + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][2ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%extent[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)).
1586-534 (I) Loop (loop index 5) at subs.f90 <line 18> was not SIMD vectorized because the loop is not the innermost loop.
1586-538 (I) Loop (loop index 5) at subs.f90 <line 18> was not SIMD vectorized because it contains unsupported loop structure.
1586-534 (I) Loop (loop index 6) at subs.f90 <line 18> was not SIMD vectorized because the loop is not the innermost loop.
1586-538 (I) Loop (loop index 6) at subs.f90 <line 18> was not SIMD vectorized because it contains unsupported loop structure.
1586-534 (I) Loop (loop index 9) at subs.f90 <line 18> was not SIMD vectorized because the loop is not the innermost loop.
1586-534 (I) Loop (loop index 10) at subs.f90 <line 18> was not SIMD vectorized because the loop is not the innermost loop.
1586-534 (I) Loop (loop index 11) at subs.f90 <line 18> was not SIMD vectorized because the loop is not the innermost loop.
1586-540 (I) Loop (loop index 12) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((float *)((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll]))))->out[][$$CIV6 + 1ll][$$CIV5 + 1ll][$$CIV4 + 1ll][$$CIV3 + 1ll] = ((float *)((char *).in  + .d-in_1->d-in_1%rvo))->in[][$$CIV6 + 1ll][$$CIV5 + 1ll][$$CIV4 + 1ll][$$CIV3 + 1ll]; with non-vectorizable strides.
1586-536 (I) Loop (loop index 12) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*($$CIV6 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][1ll])*($$CIV5 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][2ll])*($$CIV4 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 12) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*($$CIV6 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][1ll])*($$CIV5 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][2ll])*($$CIV4 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 12) at subs.f90 <line 18> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 12) at subs.f90 <line 18> was not SIMD vectorized because it contains non-stride-one store references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*($$CIV6 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][1ll])*($$CIV5 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][2ll])*($$CIV4 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)).
1586-534 (I) Loop (loop index 13) at subs.f90 <line 18> was not SIMD vectorized because the loop is not the innermost loop.
1586-534 (I) Loop (loop index 14) at subs.f90 <line 18> was not SIMD vectorized because the loop is not the innermost loop.
1586-540 (I) Loop (loop index 15) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((float *)((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll]))))->out[][$$CIV6 + 1ll][$$CIV5 + 1ll][$$CIV4 + 1ll][$$CIV3 + 1ll] = ((float *)((char *).in  + .d-in_1->d-in_1%rvo))->in[][$$CIV6 + 1ll][$$CIV5 + 1ll][$$CIV4 + 1ll][$$CIV3 + 1ll]; with non-vectorizable strides.
1586-536 (I) Loop (loop index 15) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*($$CIV6 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][1ll])*($$CIV5 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][2ll])*($$CIV4 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 15) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*($$CIV6 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][1ll])*($$CIV5 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][2ll])*($$CIV4 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 15) at subs.f90 <line 18> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 15) at subs.f90 <line 18> was not SIMD vectorized because it contains non-stride-one store references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*($$CIV6 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][1ll])*($$CIV5 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][2ll])*($$CIV4 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)).
1586-534 (I) Loop (loop index 16) at subs.f90 <line 18> was not SIMD vectorized because the loop is not the innermost loop.
1586-540 (I) Loop (loop index 17) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((float *)((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll]))))->out[][$$CIV6 + 1ll][$$CIV5 + 1ll][$$CIV4 + 1ll][$$CIV3 + 1ll] = ((float *)((char *).in  + .d-in_1->d-in_1%rvo))->in[][$$CIV6 + 1ll][$$CIV5 + 1ll][$$CIV4 + 1ll][$$CIV3 + 1ll]; with non-vectorizable strides.
1586-536 (I) Loop (loop index 17) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*($$CIV6 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][1ll])*($$CIV5 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][2ll])*($$CIV4 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 17) at subs.f90 <line 18> was not SIMD vectorized because it contains memory references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*($$CIV6 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][1ll])*($$CIV5 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][2ll])*($$CIV4 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 17) at subs.f90 <line 18> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 17) at subs.f90 <line 18> was not SIMD vectorized because it contains non-stride-one store references ((char *).out  + - ((((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][1ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][3ll] + ((long long *)((char *).d-out_1  + -24ll))->d-out_1%bounds%mult[][4ll])) + (.d-out_1->d-out_1%bounds%mult[])*($$CIV6 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][1ll])*($$CIV5 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][2ll])*($$CIV4 + 1ll) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 1ll)).
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"4">. Total number of the innermost loops SIMD vectorized <"0">.


     1|         SUBROUTINE __subs_NMOD__&&_subs ()
   114|           RETURN
                END SUBROUTINE __subs_NMOD__&&_subs


    97|         SUBROUTINE __subs_NMOD_dot2 (a, b, d-a_1)
    97|           d-a_1(1) = 1
                  d-a_1 = -d-a_1(1)
   110|           T_2 =  0.0000000000000000E+000
                  IF ((d-a_1(1) > 0)) THEN
                    $$CIV0 = 0
       Id=1         DO $$CIV0 = $$CIV0, int(d-a_1(1))-1
                      T_2 = T_2 + a($$CIV0 + 1) * a($$CIV0 + 1)
                    ENDDO
                  ENDIF
                  b = T_2
   112|           RETURN
                END SUBROUTINE __subs_NMOD_dot2


Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
         0           110                  Loop was not SIMD vectorized because it contains 
                                          memory references T_2 = T_2 + ((double *)((char *).a  
                                          + - ((long long *)((char *).d-a_1  + 
                                          -24ll))->d-a_1%bounds%mult[][1ll]))->a[][$$CIV0 + 
                                          1ll] * ((double *)((char *).a  + - ((long long 
                                          *)((char *).d-a_1  + 
                                          -24ll))->d-a_1%bounds%mult[][1ll]))->a[][$$CIV0 + 
                                          1ll];  with non-vectorizable alignment.
         0           110                  Loop was not SIMD vectorized because it contains 
                                          operation in T_2 + ((double *)((char *).a  + - ((long 
                                          long *)((char *).d-a_1  + 
                                          -24ll))->d-a_1%bounds%mult[][1ll]))->a[][$$CIV0 + 
                                          1ll] * ((double *)((char *).a  + - ((long long 
                                          *)((char *).d-a_1  + 
                                          -24ll))->d-a_1%bounds%mult[][1ll]))->a[][$$CIV0 + 
                                          1ll] which is not  suitable for SIMD vectorization.
         0           110                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).a  + - ((long long 
                                          *)((char *).d-a_1  + 
                                          -24ll))->d-a_1%bounds%mult[][1ll] + 
                                          (.d-a_1->d-a_1%bounds%mult[])*($$CIV0 + 1ll)) with  
                                          non-vectorizable strides.
         0           110                  Loop was not SIMD vectorized because a data 
                                          dependence  prevents SIMD  vectorization.
         0           110                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.


    80|         SUBROUTINE __subs_NMOD_dot (a, b, c, d-a_2, d-b_1)
    80|           d-a_2(1) = 1
                  d-a_2 = -d-a_2(1)
                  d-b_1(1) = 1
                  d-b_1 = -d-b_1(1)
    93|           T_3 =  0.0000000000000000E+000
                  IF ((d-a_2(1) > 0)) THEN
                    $$CIV1 = 0
       Id=1         DO $$CIV1 = $$CIV1, int(d-a_2(1))-1
                      T_3 = T_3 + a($$CIV1 + 1) * b($$CIV1 + 1)
                    ENDDO
                  ENDIF
                  c = T_3
    95|           RETURN
                END SUBROUTINE __subs_NMOD_dot


Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
         0            93                  Loop was not SIMD vectorized because it contains 
                                          memory references T_3 = T_3 + ((double *)((char *).a  
                                          + - ((long long *)((char *).d-a_2  + 
                                          -24ll))->d-a_2%bounds%mult[][1ll]))->a[][$$CIV1 + 
                                          1ll] * ((double *)((char *).b  + - ((long long 
                                          *)((char *).d-b_1  + 
                                          -24ll))->d-b_1%bounds%mult[][1ll]))->b[][$$CIV1 + 
                                          1ll];  with non-vectorizable alignment.
         0            93                  Loop was not SIMD vectorized because it contains 
                                          operation in T_3 + ((double *)((char *).a  + - ((long 
                                          long *)((char *).d-a_2  + 
                                          -24ll))->d-a_2%bounds%mult[][1ll]))->a[][$$CIV1 + 
                                          1ll] * ((double *)((char *).b  + - ((long long 
                                          *)((char *).d-b_1  + 
                                          -24ll))->d-b_1%bounds%mult[][1ll]))->b[][$$CIV1 + 
                                          1ll] which is not  suitable for SIMD vectorization.
         0            93                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).a  + - ((long long 
                                          *)((char *).d-a_2  + 
                                          -24ll))->d-a_2%bounds%mult[][1ll] + 
                                          (.d-a_2->d-a_2%bounds%mult[])*($$CIV1 + 1ll)) with  
                                          non-vectorizable strides.
         0            93                  Loop was not SIMD vectorized because a data 
                                          dependence  prevents SIMD  vectorization.
         0            93                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.


    64|         SUBROUTINE __subs_NMOD_cross (a, b, c)
    74|           c(1) = a(2) * b(3) - a(3) * b(2)
    75|           c(2) = a(3) * b(1) - a(1) * b(3)
    76|           c(3) = a(1) * b(2) - a(2) * b(1)
    78|           RETURN
                END SUBROUTINE __subs_NMOD_cross


    46|         INTEGER*4 FUNCTION __subs_NMOD_loptest (lopt, ldef, (OPT)lopt, (OPT)ldef)
    55|           IF ((0 <> ((OPT)lopt  .AND.  1))) THEN
    56|             loptest = lopt
    57|           ELSE
                    lab_1
                    IF (.NOT.(0 <> ((OPT)ldef  .AND.  1))) GOTO lab_3
    58|             loptest = ldef
    59|             GOTO lab_4
                    lab_3
    60|             loptest = 0
    61|             lab_4
                    lab_2
    62|             RETURN
                  END FUNCTION __subs_NMOD_loptest


    22|         SUBROUTINE __subs_NMOD_backskip_to_time (lun, lroot, (OPT)lroot)
    32|           _xlfIOCmd(int(lun),3,#1,0,NULL)
    33|           #3 = _xlfBeginIO(int(lun),0,#2,0,NULL,0,NULL)
                  CALL _xlfReadUfmt(%VAL(#3),id,4,4,0)
                  _xlfEndIO(%VAL(#3))
    34|           IF ((id == 2000)) THEN
    35|             _xlfIOCmd(int(lun),3,#4,0,NULL)
    36|             lab_2 /* loopid=2 */
    37|             IF (.FALSE.) GOTO lab_10
                    $$CIV2 = 0
       Id=1         DO $$CIV2 = $$CIV2, 2
                      _xlfIOCmd(int(lun),3,#5,0,NULL)
                    ENDDO
                    lab_10
    38|             #7 = _xlfBeginIO(int(lun),0,#6,0,NULL,0,NULL)
                    CALL _xlfReadUfmt(%VAL(#7),id,4,4,0)
                    _xlfEndIO(%VAL(#7))
    39|             IF (.NOT.(id == 2000)) GOTO lab_2
    41|             _xlfIOCmd(int(lun),3,#8,0,NULL)
    42|           ENDIF
    43|           _xlfIOCmd(int(lun),3,#9,0,NULL)
                  $$PARM..lopt0 = lroot
    55|           IF ((0 <> ((OPT)lroot  .AND.  1))) THEN
    56|             loptest = $$PARM..lopt0
    57|           ELSE
    60|             loptest = 0
    61|           ENDIF
    44|           IF ((0 <> (loptest  .AND.  1))) THEN
                    _xlfIOCmd(int(lun),3,#10,0,NULL)
                  ENDIF
    45|           RETURN
                END SUBROUTINE __subs_NMOD_backskip_to_time


Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
         0            36                  Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            36                  Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0            37             1    Loop was not SIMD vectorized because its number of 
                                          iterations is too small.
         0            37             1    Loop was not SIMD vectorized because the 
                                          aliasing-induced dependence  prevents SIMD 
                                          vectorization.


     4|         SUBROUTINE __subs_NMOD_localize_xy (out, in, (OPT)in, d-out_1, d-in_1)
     4|           d-out_1(4) = 1
                  d-out_1(3) = 1
                  d-out_1(2) = 1
                  d-out_1(1) = 1
                  d-out_1 = -((d-out_1(4) + d-out_1(2)) + (d-out_1(3) + d-out_1(&
                &   1)))
                  IF (((OPT)in  .AND.  1)) THEN
                    d-in_1(4) = 1
                    d-in_1(3) = 1
                    d-in_1(2) = 1
                    d-in_1(1) = 1
                    d-in_1 = -((d-in_1(4) + d-in_1(2)) + (d-in_1(3) + d-in_1(1))&
                &     )
                  ENDIF
    18|           IF ((0 <> ((OPT)in  .AND.  1))) THEN
                    IF ((MOD(d-out_1(1), 2) > 0  .AND.  d-out_1(1) > 0)) THEN
                      $$CIV6 = 0
       Id=9           DO $$CIV6 = $$CIV6, MOD(d-out_1(1), int(2))-1
                        IF (((d-out_1(2) == 0 ? 0 : (d-out_1(2) + d-out_1(2)) - &
                &         1) > 0)) THEN
                          $$CIV5 = 0
       Id=10              DO $$CIV5 = $$CIV5, int((d-out_1(2) == 0 ? 0 : (&
                &             d-out_1(2) + d-out_1(2)) - 1))-1
                            IF (((d-out_1(3) == 0 ? 0 : (d-out_1(3) + d-out_1(3)&
                &             ) - 1) > 0)) THEN
                              $$CIV4 = 0
       Id=11                  DO $$CIV4 = $$CIV4, int((d-out_1(3) == 0 ? 0 : (&
                &                 d-out_1(3) + d-out_1(3)) - 1))-1
                                IF (((d-out_1(4) == 0 ? 0 : (d-out_1(4) + &
                &                 d-out_1(4)) - 1) > 0)) THEN
                                  $$CIV3 = 0
       Id=12                      DO $$CIV3 = $$CIV3, int((d-out_1(4) == 0 ? &
                &                     0 : (d-out_1(4) + d-out_1(4)) - 1))-1
                                    out($$CIV3 + 1,$$CIV4 + 1,$$CIV5 + 1,$$CIV6 &
                &                     + 1) = in($$CIV3 + 1,$$CIV4 + 1,$$CIV5 + 1,&
                &                     $$CIV6 + 1)
                                  ENDDO
                                ENDIF
                              ENDDO
                            ENDIF
                          ENDDO
                        ENDIF
                      ENDDO
                    ENDIF
                    IF ((d-out_1(1) > MOD(d-out_1(1), 2)  .AND.  d-out_1(1) > 0)&
                &     ) THEN
                      $$CIV6 = MOD(d-out_1(1), int(2))
       Id=5           DO $$CIV6 = $$CIV6, int(d-out_1(1))
                        IF ((MOD((d-out_1(2) == 0 ? 0 : (d-out_1(2) + d-out_1(2)&
                &         ) - 1), 2) > 0  .AND.  (d-out_1(2) == 0 ? 0 : (d-out_1(&
                &         2) + d-out_1(2)) - 1) > 0)) THEN
                          $$CIV5 = 0
       Id=13              DO $$CIV5 = $$CIV5, MOD((d-out_1(2) == 0 ? 0 : (&
                &             d-out_1(2) + d-out_1(2)) - 1), int(2))-1
                            IF (((d-out_1(3) == 0 ? 0 : (d-out_1(3) + d-out_1(3)&
                &             ) - 1) > 0)) THEN
                              $$CIV4 = 0
       Id=14                  DO $$CIV4 = $$CIV4, int((d-out_1(3) == 0 ? 0 : (&
                &                 d-out_1(3) + d-out_1(3)) - 1))-1
                                IF (((d-out_1(4) == 0 ? 0 : (d-out_1(4) + &
                &                 d-out_1(4)) - 1) > 0)) THEN
                                  $$CIV3 = 0
       Id=15                      DO $$CIV3 = $$CIV3, int((d-out_1(4) == 0 ? &
                &                     0 : (d-out_1(4) + d-out_1(4)) - 1))-1
                                    out($$CIV3 + 1,$$CIV4 + 1,$$CIV5 + 1,$$CIV6 &
                &                     + 1) = in($$CIV3 + 1,$$CIV4 + 1,$$CIV5 + 1,&
                &                     $$CIV6 + 1)
                                  ENDDO
                                ENDIF
                              ENDDO
                            ENDIF
                          ENDDO
                        ENDIF
                        IF (((d-out_1(2) == 0 ? 0 : (d-out_1(2) + d-out_1(2)) - &
                &         1) > MOD((d-out_1(2) == 0 ? 0 : (d-out_1(2) + d-out_1(2)&
                &         ) - 1), 2)  .AND.  (d-out_1(2) == 0 ? 0 : (d-out_1(2) + &
                &         d-out_1(2)) - 1) > 0)) THEN
                          $$CIV5 = MOD((d-out_1(2) == 0 ? 0 : (d-out_1(2) + &
                &           d-out_1(2)) - 1), int(2))
       Id=6               DO $$CIV5 = $$CIV5, int((d-out_1(2) == 0 ? 0 : (&
                &             d-out_1(2) + d-out_1(2)) - 1))
                            IF ((MOD((d-out_1(3) == 0 ? 0 : (d-out_1(3) + &
                &             d-out_1(3)) - 1), 2) > 0  .AND.  (d-out_1(3) == 0 ? &
                &             0 : (d-out_1(3) + d-out_1(3)) - 1) > 0)) THEN
                              $$CIV4 = 0
       Id=16                  DO $$CIV4 = $$CIV4, MOD((d-out_1(3) == 0 ? 0 : (&
                &                 d-out_1(3) + d-out_1(3)) - 1), int(2))-1
                                IF (((d-out_1(4) == 0 ? 0 : (d-out_1(4) + &
                &                 d-out_1(4)) - 1) > 0)) THEN
                                  $$CIV3 = 0
       Id=17                      DO $$CIV3 = $$CIV3, int((d-out_1(4) == 0 ? &
                &                     0 : (d-out_1(4) + d-out_1(4)) - 1))-1
                                    out($$CIV3 + 1,$$CIV4 + 1,$$CIV5 + 1,$$CIV6 &
                &                     + 1) = in($$CIV3 + 1,$$CIV4 + 1,$$CIV5 + 1,&
                &                     $$CIV6 + 1)
                                  ENDDO
                                ENDIF
                              ENDDO
                            ENDIF
                          ENDDO
                        ENDIF
                      ENDDO
                    ENDIF
                    IF (.NOT.(d-out_1(1) > 0  .AND.  d-out_1(1) > MOD(d-out_1(1)&
                &     , 2))) GOTO lab_20
                    $$CIV9 = int(0)
       Id=1         DO $$CIV9 = $$CIV9, int((((d-out_1(1) - MOD(d-out_1(1), 2)&
                &       ) - 1) / 2 + 1))-1
                      IF (((d-out_1(2) == 0 ? 0 : (d-out_1(2) + d-out_1(2)) - 1)&
                &        > 0  .AND.  (d-out_1(2) == 0 ? 0 : (d-out_1(2) + d-out_1(&
                &       2)) - 1) > MOD((d-out_1(2) == 0 ? 0 : (d-out_1(2) + &
                &       d-out_1(2)) - 1), 2))) THEN
                        $$CIV8 = int(0)
       Id=2             DO $$CIV8 = $$CIV8, int(((((d-out_1(2) == 0 ? 0 : (&
                &           d-out_1(2) + d-out_1(2)) - 1) - MOD((d-out_1(2) == 0 &
                &           ? 0 : (d-out_1(2) + d-out_1(2)) - 1), 2)) - 1) / 2 + &
                &           1))-1
                          IF (((d-out_1(3) == 0 ? 0 : (d-out_1(3) + d-out_1(3)) &
                &           - 1) > 0  .AND.  (d-out_1(3) == 0 ? 0 : (d-out_1(3) + &
                &           d-out_1(3)) - 1) > MOD((d-out_1(3) == 0 ? 0 : (&
                &           d-out_1(3) + d-out_1(3)) - 1), 2))) THEN
                            $$CIV7 = int(0)
       Id=3                 DO $$CIV7 = $$CIV7, int(((((d-out_1(3) == 0 ? 0 : &
                &               (d-out_1(3) + d-out_1(3)) - 1) - MOD((d-out_1(3) &
                &               == 0 ? 0 : (d-out_1(3) + d-out_1(3)) - 1), 2)) - &
                &               1) / 2 + 1))-1
                              IF (((d-out_1(4) == 0 ? 0 : (d-out_1(4) + d-out_1(&
                &               4)) - 1) > 0)) THEN
                                $$CIV3 = 0
       Id=4                     DO $$CIV3 = $$CIV3, int((d-out_1(4) == 0 ? 0 &
                &                   : (d-out_1(4) + d-out_1(4)) - 1))-1
                                  out($$CIV3 + 1,1 + ($$CIV7 * 2 + MOD((d-out_1(&
                &                   3) == 0 ? 0 : (d-out_1(3) + d-out_1(3)) - 1), &
                &                   2)),1 + ($$CIV8 * 2 + MOD((d-out_1(2) == 0 ? &
                &                   0 : (d-out_1(2) + d-out_1(2)) - 1), 2)),1 + (&
                &                   $$CIV9 * 2 + MOD(d-out_1(1), 2))) = in($$CIV3 &
                &                   + 1,1 + ($$CIV7 * 2 + MOD((d-out_1(3) == 0 ? &
                &                   0 : (d-out_1(3) + d-out_1(3)) - 1), 2)),1 + (&
                &                   $$CIV8 * 2 + MOD((d-out_1(2) == 0 ? 0 : (&
                &                   d-out_1(2) + d-out_1(2)) - 1), 2)),1 + (&
                &                   $$CIV9 * 2 + MOD(d-out_1(1), 2)))
                                  out($$CIV3 + 1,2 + ($$CIV7 * 2 + MOD((d-out_1(&
                &                   3) == 0 ? 0 : (d-out_1(3) + d-out_1(3)) - 1), &
                &                   2)),1 + ($$CIV8 * 2 + MOD((d-out_1(2) == 0 ? &
                &                   0 : (d-out_1(2) + d-out_1(2)) - 1), 2)),1 + (&
                &                   $$CIV9 * 2 + MOD(d-out_1(1), 2))) = in($$CIV3 &
                &                   + 1,2 + ($$CIV7 * 2 + MOD((d-out_1(3) == 0 ? &
                &                   0 : (d-out_1(3) + d-out_1(3)) - 1), 2)),1 + (&
                &                   $$CIV8 * 2 + MOD((d-out_1(2) == 0 ? 0 : (&
                &                   d-out_1(2) + d-out_1(2)) - 1), 2)),1 + (&
                &                   $$CIV9 * 2 + MOD(d-out_1(1), 2)))
                                  out($$CIV3 + 1,1 + ($$CIV7 * 2 + MOD((d-out_1(&
                &                   3) == 0 ? 0 : (d-out_1(3) + d-out_1(3)) - 1), &
                &                   2)),2 + ($$CIV8 * 2 + MOD((d-out_1(2) == 0 ? &
                &                   0 : (d-out_1(2) + d-out_1(2)) - 1), 2)),1 + (&
                &                   $$CIV9 * 2 + MOD(d-out_1(1), 2))) = in($$CIV3 &
                &                   + 1,1 + ($$CIV7 * 2 + MOD((d-out_1(3) == 0 ? &
                &                   0 : (d-out_1(3) + d-out_1(3)) - 1), 2)),2 + (&
                &                   $$CIV8 * 2 + MOD((d-out_1(2) == 0 ? 0 : (&
                &                   d-out_1(2) + d-out_1(2)) - 1), 2)),1 + (&
                &                   $$CIV9 * 2 + MOD(d-out_1(1), 2)))
                                  out($$CIV3 + 1,2 + ($$CIV7 * 2 + MOD((d-out_1(&
                &                   3) == 0 ? 0 : (d-out_1(3) + d-out_1(3)) - 1), &
                &                   2)),2 + ($$CIV8 * 2 + MOD((d-out_1(2) == 0 ? &
                &                   0 : (d-out_1(2) + d-out_1(2)) - 1), 2)),1 + (&
                &                   $$CIV9 * 2 + MOD(d-out_1(1), 2))) = in($$CIV3 &
                &                   + 1,2 + ($$CIV7 * 2 + MOD((d-out_1(3) == 0 ? &
                &                   0 : (d-out_1(3) + d-out_1(3)) - 1), 2)),2 + (&
                &                   $$CIV8 * 2 + MOD((d-out_1(2) == 0 ? 0 : (&
                &                   d-out_1(2) + d-out_1(2)) - 1), 2)),1 + (&
                &                   $$CIV9 * 2 + MOD(d-out_1(1), 2)))
                                  out($$CIV3 + 1,1 + ($$CIV7 * 2 + MOD((d-out_1(&
                &                   3) == 0 ? 0 : (d-out_1(3) + d-out_1(3)) - 1), &
                &                   2)),1 + ($$CIV8 * 2 + MOD((d-out_1(2) == 0 ? &
                &                   0 : (d-out_1(2) + d-out_1(2)) - 1), 2)),2 + (&
                &                   $$CIV9 * 2 + MOD(d-out_1(1), 2))) = in($$CIV3 &
                &                   + 1,1 + ($$CIV7 * 2 + MOD((d-out_1(3) == 0 ? &
                &                   0 : (d-out_1(3) + d-out_1(3)) - 1), 2)),1 + (&
                &                   $$CIV8 * 2 + MOD((d-out_1(2) == 0 ? 0 : (&
                &                   d-out_1(2) + d-out_1(2)) - 1), 2)),2 + (&
                &                   $$CIV9 * 2 + MOD(d-out_1(1), 2)))
                                  out($$CIV3 + 1,2 + ($$CIV7 * 2 + MOD((d-out_1(&
                &                   3) == 0 ? 0 : (d-out_1(3) + d-out_1(3)) - 1), &
                &                   2)),1 + ($$CIV8 * 2 + MOD((d-out_1(2) == 0 ? &
                &                   0 : (d-out_1(2) + d-out_1(2)) - 1), 2)),2 + (&
                &                   $$CIV9 * 2 + MOD(d-out_1(1), 2))) = in($$CIV3 &
                &                   + 1,2 + ($$CIV7 * 2 + MOD((d-out_1(3) == 0 ? &
                &                   0 : (d-out_1(3) + d-out_1(3)) - 1), 2)),1 + (&
                &                   $$CIV8 * 2 + MOD((d-out_1(2) == 0 ? 0 : (&
                &                   d-out_1(2) + d-out_1(2)) - 1), 2)),2 + (&
                &                   $$CIV9 * 2 + MOD(d-out_1(1), 2)))
                                  out($$CIV3 + 1,1 + ($$CIV7 * 2 + MOD((d-out_1(&
                &                   3) == 0 ? 0 : (d-out_1(3) + d-out_1(3)) - 1), &
                &                   2)),2 + ($$CIV8 * 2 + MOD((d-out_1(2) == 0 ? &
                &                   0 : (d-out_1(2) + d-out_1(2)) - 1), 2)),2 + (&
                &                   $$CIV9 * 2 + MOD(d-out_1(1), 2))) = in($$CIV3 &
                &                   + 1,1 + ($$CIV7 * 2 + MOD((d-out_1(3) == 0 ? &
                &                   0 : (d-out_1(3) + d-out_1(3)) - 1), 2)),2 + (&
                &                   $$CIV8 * 2 + MOD((d-out_1(2) == 0 ? 0 : (&
                &                   d-out_1(2) + d-out_1(2)) - 1), 2)),2 + (&
                &                   $$CIV9 * 2 + MOD(d-out_1(1), 2)))
                                  out($$CIV3 + 1,2 + ($$CIV7 * 2 + MOD((d-out_1(&
                &                   3) == 0 ? 0 : (d-out_1(3) + d-out_1(3)) - 1), &
                &                   2)),2 + ($$CIV8 * 2 + MOD((d-out_1(2) == 0 ? &
                &                   0 : (d-out_1(2) + d-out_1(2)) - 1), 2)),2 + (&
                &                   $$CIV9 * 2 + MOD(d-out_1(1), 2))) = in($$CIV3 &
                &                   + 1,2 + ($$CIV7 * 2 + MOD((d-out_1(3) == 0 ? &
                &                   0 : (d-out_1(3) + d-out_1(3)) - 1), 2)),2 + (&
                &                   $$CIV8 * 2 + MOD((d-out_1(2) == 0 ? 0 : (&
                &                   d-out_1(2) + d-out_1(2)) - 1), 2)),2 + (&
                &                   $$CIV9 * 2 + MOD(d-out_1(1), 2)))
                                ENDDO
                              ENDIF
                            ENDDO
                          ENDIF
                        ENDDO
                      ENDIF
                    ENDDO
                    lab_20
                    lab_3
    20|             RETURN
                  END SUBROUTINE __subs_NMOD_localize_xy


Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
         0            18             9    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            18            10    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            18            11    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*($$CIV6 + 1ll) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*($$CIV5 + 1ll) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*($$CIV4 + 
                                          1ll) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 
                                          + 1ll))  with non-vectorizable alignment.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*($$CIV6 + 1ll) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*($$CIV5 + 1ll) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*($$CIV4 + 
                                          1ll) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 
                                          + 1ll)) with  non-vectorizable strides.
         0            18                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *).out  + - 
                                          ((((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*($$CIV6 + 1ll) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*($$CIV5 + 1ll) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*($$CIV4 + 
                                          1ll) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 
                                          + 1ll)).
         0            18             5    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            18             5    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0            18            13    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            18            14    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*($$CIV6 + 1ll) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*($$CIV5 + 1ll) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*($$CIV4 + 
                                          1ll) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 
                                          + 1ll))  with non-vectorizable alignment.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*($$CIV6 + 1ll) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*($$CIV5 + 1ll) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*($$CIV4 + 
                                          1ll) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 
                                          + 1ll)) with  non-vectorizable strides.
         0            18                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *).out  + - 
                                          ((((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*($$CIV6 + 1ll) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*($$CIV5 + 1ll) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*($$CIV4 + 
                                          1ll) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 
                                          + 1ll)).
         0            18             6    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            18             6    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0            18            16    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*($$CIV6 + 1ll) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*($$CIV5 + 1ll) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*($$CIV4 + 
                                          1ll) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 
                                          + 1ll))  with non-vectorizable alignment.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*($$CIV6 + 1ll) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*($$CIV5 + 1ll) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*($$CIV4 + 
                                          1ll) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 
                                          + 1ll)) with  non-vectorizable strides.
         0            18                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *).out  + - 
                                          ((((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*($$CIV6 + 1ll) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*($$CIV5 + 1ll) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*($$CIV4 + 
                                          1ll) + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 
                                          + 1ll)).
         0            18             1    Outer loop has been unrolled 2 time(s).
         0            18             1    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            18             2    Outer loop has been unrolled 2 time(s).
         0            18             2    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            18             3    Outer loop has been unrolled 2 time(s).
         0            18             3    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll))  with non-vectorizable alignment.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll)) with  non-vectorizable strides.
         0            18                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *).out  + - 
                                          ((((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll)).
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll))  with non-vectorizable alignment.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll)) with  non-vectorizable strides.
         0            18                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *).out  + - 
                                          ((((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll)).
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll))  with non-vectorizable alignment.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll)) with  non-vectorizable strides.
         0            18                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *).out  + - 
                                          ((((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll)).
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll))  with non-vectorizable alignment.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll)) with  non-vectorizable strides.
         0            18                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *).out  + - 
                                          ((((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(1ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll)).
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll))  with non-vectorizable alignment.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll)) with  non-vectorizable strides.
         0            18                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *).out  + - 
                                          ((((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll)).
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll))  with non-vectorizable alignment.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll)) with  non-vectorizable strides.
         0            18                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *).out  + - 
                                          ((((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(1ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll)).
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll))  with non-vectorizable alignment.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll)) with  non-vectorizable strides.
         0            18                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *).out  + - 
                                          ((((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(1ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll)).
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll))  with non-vectorizable alignment.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *).out  + - ((((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll)) with  non-vectorizable strides.
         0            18                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            18                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *).out  + - 
                                          ((((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][1ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][2ll]) + (((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%mult[][4ll])) + 
                                          (.d-out_1->d-out_1%bounds%mult[])*(2ll + ($$CIV9 * 
                                          2ll + ((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][1ll] % 2ll)) + 
                                          (.d-out_1->d-out_1%bounds%mult[][1ll])*(2ll + ($$CIV8 
                                          * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][2ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][2ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][2ll])*(2ll + 
                                          ($$CIV7 * 2ll + (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] == 0ll ? 0ll : 
                                          (((long long *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%extent[][3ll] + ((long long 
                                          *)((char *).d-out_1  + 
                                          -24ll))->d-out_1%bounds%lbound[][3ll]) - 1ll) % 2ll)) 
                                          + (.d-out_1->d-out_1%bounds%mult[][3ll])*($$CIV3 + 
                                          1ll)).


     1|         SUBROUTINE __subs_NMOD__&&_subs ()
   114|           RETURN
                END SUBROUTINE __subs_NMOD__&&_subs


    97|         SUBROUTINE __subs_NMOD_dot2 (a, b, d-a_1)
    97|           d-a_1(1) = 1
                  d-a_1 = -d-a_1(1)
   110|           T_2 =  0.0000000000000000E+000
                  IF ((d-a_1(1) > 0)) THEN
                    $$CIV0 = 0
       Id=1         DO $$CIV0 = $$CIV0, int(d-a_1(1))-1
                      T_2 = T_2 + a($$CIV0 + 1) * a($$CIV0 + 1)
                    ENDDO
                  ENDIF
                  b = T_2
   112|           RETURN
                END SUBROUTINE __subs_NMOD_dot2


    80|         SUBROUTINE __subs_NMOD_dot (a, b, c, d-a_2, d-b_1)
    80|           d-a_2(1) = 1
                  d-a_2 = -d-a_2(1)
                  d-b_1(1) = 1
                  d-b_1 = -d-b_1(1)
    93|           T_3 =  0.0000000000000000E+000
                  IF ((d-a_2(1) > 0)) THEN
                    $$CIV1 = 0
       Id=1         DO $$CIV1 = $$CIV1, int(d-a_2(1))-1
                      T_3 = T_3 + a($$CIV1 + 1) * b($$CIV1 + 1)
                    ENDDO
                  ENDIF
                  c = T_3
    95|           RETURN
                END SUBROUTINE __subs_NMOD_dot


    64|         SUBROUTINE __subs_NMOD_cross (a, b, c)
    74|           c(1) = a(2) * b(3) - a(3) * b(2)
    75|           c(2) = a(3) * b(1) - a(1) * b(3)
    76|           c(3) = a(1) * b(2) - a(2) * b(1)
    78|           RETURN
                END SUBROUTINE __subs_NMOD_cross


    46|         INTEGER*4 FUNCTION __subs_NMOD_loptest (lopt, ldef, (OPT)lopt, (OPT)ldef)
    55|           IF ((0 <> ((OPT)lopt  .AND.  1))) THEN
    56|             loptest = lopt
    57|           ELSE
                    lab_1
                    IF (.NOT.(0 <> ((OPT)ldef  .AND.  1))) GOTO lab_3
    58|             loptest = ldef
    59|             GOTO lab_4
                    lab_3
    60|             loptest = 0
    61|             lab_4
                    lab_2
    62|             RETURN
                  END FUNCTION __subs_NMOD_loptest


    22|         SUBROUTINE __subs_NMOD_backskip_to_time (lun, lroot, (OPT)lroot)
    32|           _xlfIOCmd(int(lun),3,#1,0,NULL)
    33|           #3 = _xlfBeginIO(int(lun),0,#2,0,NULL,0,NULL)
                  CALL _xlfReadUfmt(%VAL(#3),id,4,4,0)
                  _xlfEndIO(%VAL(#3))
    34|           IF ((id == 2000)) THEN
    35|             _xlfIOCmd(int(lun),3,#4,0,NULL)
    36|             lab_2 /* loopid=2 */
    37|             IF (.FALSE.) GOTO lab_10
                    $$CIV2 = 0
       Id=1         DO $$CIV2 = $$CIV2, 2
                      _xlfIOCmd(int(lun),3,#5,0,NULL)
                    ENDDO
                    lab_10
    38|             #7 = _xlfBeginIO(int(lun),0,#6,0,NULL,0,NULL)
                    CALL _xlfReadUfmt(%VAL(#7),id,4,4,0)
                    _xlfEndIO(%VAL(#7))
    39|             IF (.NOT.(id == 2000)) GOTO lab_2
    41|             _xlfIOCmd(int(lun),3,#8,0,NULL)
    42|           ENDIF
    43|           _xlfIOCmd(int(lun),3,#9,0,NULL)
                  $$PARM..lopt0 = lroot
    55|           IF ((0 <> ((OPT)lroot  .AND.  1))) THEN
    56|             loptest = $$PARM..lopt0
    57|           ELSE
    60|             loptest = 0
    61|           ENDIF
    44|           IF ((0 <> (loptest  .AND.  1))) THEN
                    _xlfIOCmd(int(lun),3,#10,0,NULL)
                  ENDIF
    45|           RETURN
                END SUBROUTINE __subs_NMOD_backskip_to_time


     4|         SUBROUTINE __subs_NMOD_localize_xy (out, in, (OPT)in, d-out_1, d-in_1)
     4|           d-out_1(4) = 1
                  d-out_1(3) = 1
                  d-out_1(2) = 1
                  d-out_1(1) = 1
                  d-out_1 = -((d-out_1(4) + d-out_1(2)) + (d-out_1(3) + d-out_1(&
                &   1)))
                  IF (((OPT)in  .AND.  1)) THEN
                    d-in_1(4) = 1
                    d-in_1(3) = 1
                    d-in_1(2) = 1
                    d-in_1(1) = 1
                    d-in_1 = -((d-in_1(4) + d-in_1(2)) + (d-in_1(3) + d-in_1(1))&
                &     )
                  ENDIF
    18|           IF ((0 <> ((OPT)in  .AND.  1))) THEN
                    IF ((MOD(d-out_1(1), 2) > 0  .AND.  d-out_1(1) > 0)) THEN
                      $$CIV6 = 0
                      $$csx0 = d-out_1(2)
       Id=9           DO $$CIV6 = $$CIV6, MOD(d-out_1(1), int(2))-1
                        IF (((d-out_1(2) == 0 ? 0 : (d-out_1(2) + $$csx0) - 1) &
                &         > 0)) THEN
                          $$CIV5 = 0
                          $$csx1 = d-out_1(3)
       Id=10              DO $$CIV5 = $$CIV5, int((d-out_1(2) == 0 ? 0 : (&
                &             d-out_1(2) + $$csx0) - 1))-1
                            IF (((d-out_1(3) == 0 ? 0 : (d-out_1(3) + $$csx1) - &
                &             1) > 0)) THEN
                              $$CIV4 = 0
                              $$csx2 = d-out_1(4)
       Id=11                  DO $$CIV4 = $$CIV4, int((d-out_1(3) == 0 ? 0 : (&
                &                 d-out_1(3) + $$csx1) - 1))-1
                                IF (((d-out_1(4) == 0 ? 0 : (d-out_1(4) + &
                &                 $$csx2) - 1) > 0)) THEN
                                  $$CIV3 = 0
       Id=12                      DO $$CIV3 = $$CIV3, int((d-out_1(4) == 0 ? &
                &                     0 : (d-out_1(4) + $$csx2) - 1))-1
                                    out($$CIV3 + 1,$$CIV4 + 1,$$CIV5 + 1,$$CIV6 &
                &                     + 1) = in($$CIV3 + 1,$$CIV4 + 1,$$CIV5 + 1,&
                &                     $$CIV6 + 1)
                                  ENDDO
                                ENDIF
                              ENDDO
                            ENDIF
                          ENDDO
                        ENDIF
                      ENDDO
                    ENDIF
                    $$csx3 = d-out_1(1) > MOD(d-out_1(1), 2)  .AND.  d-out_1(1) &
                &     > 0
                    IF ($$csx3) THEN
                      $$CIV6 = MOD(d-out_1(1), int(2))
                      $$csx4 = d-out_1(2)
                      $$csx5 = (d-out_1(2) == 0 ? 0 : (d-out_1(2) + $$csx4) - 1)&
                &        > MOD((d-out_1(2) == 0 ? 0 : (d-out_1(2) + $$csx4) - 1), &
                &       2)  .AND.  (d-out_1(2) == 0 ? 0 : (d-out_1(2) + $$csx4) - &
                &       1) > 0
       Id=5           DO $$CIV6 = $$CIV6, int(d-out_1(1))
                        IF ((MOD((d-out_1(2) == 0 ? 0 : (d-out_1(2) + $$csx4) - &
                &         1), 2) > 0  .AND.  (d-out_1(2) == 0 ? 0 : (d-out_1(2) + &
                &         $$csx4) - 1) > 0)) THEN
                          $$CIV5 = 0
                          $$csx6 = d-out_1(3)
       Id=13              DO $$CIV5 = $$CIV5, MOD((d-out_1(2) == 0 ? 0 : (&
                &             d-out_1(2) + $$csx4) - 1), int(2))-1
                            IF (((d-out_1(3) == 0 ? 0 : (d-out_1(3) + $$csx6) - &
                &             1) > 0)) THEN
                              $$CIV4 = 0
                              $$csx7 = d-out_1(4)
       Id=14                  DO $$CIV4 = $$CIV4, int((d-out_1(3) == 0 ? 0 : (&
                &                 d-out_1(3) + $$csx6) - 1))-1
                                IF (((d-out_1(4) == 0 ? 0 : (d-out_1(4) + &
                &                 $$csx7) - 1) > 0)) THEN
                                  $$CIV3 = 0
       Id=15                      DO $$CIV3 = $$CIV3, int((d-out_1(4) == 0 ? &
                &                     0 : (d-out_1(4) + $$csx7) - 1))-1
                                    out($$CIV3 + 1,$$CIV4 + 1,$$CIV5 + 1,$$CIV6 &
                &                     + 1) = in($$CIV3 + 1,$$CIV4 + 1,$$CIV5 + 1,&
                &                     $$CIV6 + 1)
                                  ENDDO
                                ENDIF
                              ENDDO
                            ENDIF
                          ENDDO
                        ENDIF
                        IF ($$csx5) THEN
                          $$CIV5 = MOD((d-out_1(2) == 0 ? 0 : (d-out_1(2) + &
                &           $$csx4) - 1), int(2))
                          $$csx8 = d-out_1(3)
       Id=6               DO $$CIV5 = $$CIV5, int((d-out_1(2) == 0 ? 0 : (&
                &             d-out_1(2) + $$csx4) - 1))
                            IF ((MOD((d-out_1(3) == 0 ? 0 : (d-out_1(3) + &
                &             $$csx8) - 1), 2) > 0  .AND.  (d-out_1(3) == 0 ? 0 : &
                &             (d-out_1(3) + $$csx8) - 1) > 0)) THEN
                              $$CIV4 = 0
                              $$csx9 = d-out_1(4)
       Id=16                  DO $$CIV4 = $$CIV4, MOD((d-out_1(3) == 0 ? 0 : (&
                &                 d-out_1(3) + $$csx8) - 1), int(2))-1
                                IF (((d-out_1(4) == 0 ? 0 : (d-out_1(4) + &
                &                 $$csx9) - 1) > 0)) THEN
                                  $$CIV3 = 0
       Id=17                      DO $$CIV3 = $$CIV3, int((d-out_1(4) == 0 ? &
                &                     0 : (d-out_1(4) + $$csx9) - 1))-1
                                    out($$CIV3 + 1,$$CIV4 + 1,$$CIV5 + 1,$$CIV6 &
                &                     + 1) = in($$CIV3 + 1,$$CIV4 + 1,$$CIV5 + 1,&
                &                     $$CIV6 + 1)
                                  ENDDO
                                ENDIF
                              ENDDO
                            ENDIF
                          ENDDO
                        ENDIF
                      ENDDO
                    ENDIF
                    IF (.NOT.$$csx3) GOTO lab_20
                    $$CIV9 = int(0)
                    $$csxB = d-out_1(2)
                    $$csxA = (d-out_1(2) == 0 ? 0 : (d-out_1(2) + $$csxB) - 1) &
                &     > 0  .AND.  (d-out_1(2) == 0 ? 0 : (d-out_1(2) + $$csxB) - &
                &     1) > MOD((d-out_1(2) == 0 ? 0 : (d-out_1(2) + $$csxB) - 1), &
                &     2)
       Id=1         DO $$CIV9 = $$CIV9, int((((d-out_1(1) - MOD(d-out_1(1), 2)&
                &       ) - 1) / 2 + 1))-1
                      IF ($$csxA) THEN
                        $$CIV8 = int(0)
                        $$csxD = d-out_1(3)
                        $$csxC = (d-out_1(3) == 0 ? 0 : (d-out_1(3) + $$csxD) - &
                &         1) > 0  .AND.  (d-out_1(3) == 0 ? 0 : (d-out_1(3) + &
                &         $$csxD) - 1) > MOD((d-out_1(3) == 0 ? 0 : (d-out_1(3) + &
                &         $$csxD) - 1), 2)
       Id=2             DO $$CIV8 = $$CIV8, int(((((d-out_1(2) == 0 ? 0 : (&
                &           d-out_1(2) + $$csxB) - 1) - MOD((d-out_1(2) == 0 ? 0 &
                &           : (d-out_1(2) + $$csxB) - 1), 2)) - 1) / 2 + 1))-1
                          IF ($$csxC) THEN
                            $$CIV7 = int(0)
                            $$csxE = d-out_1(4)
       Id=3                 DO $$CIV7 = $$CIV7, int(((((d-out_1(3) == 0 ? 0 : &
                &               (d-out_1(3) + $$csxD) - 1) - MOD((d-out_1(3) == 0 &
                &               ? 0 : (d-out_1(3) + $$csxD) - 1), 2)) - 1) / 2 + &
                &               1))-1
                              IF (((d-out_1(4) == 0 ? 0 : (d-out_1(4) + $$csxE) &
                &               - 1) > 0)) THEN
                                $$CIV3 = 0
       Id=4                     DO $$CIV3 = $$CIV3, int((d-out_1(4) == 0 ? 0 &
                &                   : (d-out_1(4) + $$csxE) - 1))-1
                                  out($$CIV3 + 1,1 + ($$CIV7 * 2 + MOD((d-out_1(&
                &                   3) == 0 ? 0 : (d-out_1(3) + $$csxD) - 1), 2)),&
                &                   1 + ($$CIV8 * 2 + MOD((d-out_1(2) == 0 ? 0 : (&
                &                   d-out_1(2) + $$csxB) - 1), 2)),1 + ($$CIV9 * &
                &                   2 + MOD(d-out_1(1), 2))) = in($$CIV3 + 1,1 + (&
                &                   $$CIV7 * 2 + MOD((d-out_1(3) == 0 ? 0 : (&
                &                   d-out_1(3) + $$csxD) - 1), 2)),1 + ($$CIV8 * &
                &                   2 + MOD((d-out_1(2) == 0 ? 0 : (d-out_1(2) + &
                &                   $$csxB) - 1), 2)),1 + ($$CIV9 * 2 + MOD(&
                &                   d-out_1(1), 2)))
                                  out($$CIV3 + 1,2 + ($$CIV7 * 2 + MOD((d-out_1(&
                &                   3) == 0 ? 0 : (d-out_1(3) + $$csxD) - 1), 2)),&
                &                   1 + ($$CIV8 * 2 + MOD((d-out_1(2) == 0 ? 0 : (&
                &                   d-out_1(2) + $$csxB) - 1), 2)),1 + ($$CIV9 * &
                &                   2 + MOD(d-out_1(1), 2))) = in($$CIV3 + 1,2 + (&
                &                   $$CIV7 * 2 + MOD((d-out_1(3) == 0 ? 0 : (&
                &                   d-out_1(3) + $$csxD) - 1), 2)),1 + ($$CIV8 * &
                &                   2 + MOD((d-out_1(2) == 0 ? 0 : (d-out_1(2) + &
                &                   $$csxB) - 1), 2)),1 + ($$CIV9 * 2 + MOD(&
                &                   d-out_1(1), 2)))
                                  out($$CIV3 + 1,1 + ($$CIV7 * 2 + MOD((d-out_1(&
                &                   3) == 0 ? 0 : (d-out_1(3) + $$csxD) - 1), 2)),&
                &                   2 + ($$CIV8 * 2 + MOD((d-out_1(2) == 0 ? 0 : (&
                &                   d-out_1(2) + $$csxB) - 1), 2)),1 + ($$CIV9 * &
                &                   2 + MOD(d-out_1(1), 2))) = in($$CIV3 + 1,1 + (&
                &                   $$CIV7 * 2 + MOD((d-out_1(3) == 0 ? 0 : (&
                &                   d-out_1(3) + $$csxD) - 1), 2)),2 + ($$CIV8 * &
                &                   2 + MOD((d-out_1(2) == 0 ? 0 : (d-out_1(2) + &
                &                   $$csxB) - 1), 2)),1 + ($$CIV9 * 2 + MOD(&
                &                   d-out_1(1), 2)))
                                  out($$CIV3 + 1,2 + ($$CIV7 * 2 + MOD((d-out_1(&
                &                   3) == 0 ? 0 : (d-out_1(3) + $$csxD) - 1), 2)),&
                &                   2 + ($$CIV8 * 2 + MOD((d-out_1(2) == 0 ? 0 : (&
                &                   d-out_1(2) + $$csxB) - 1), 2)),1 + ($$CIV9 * &
                &                   2 + MOD(d-out_1(1), 2))) = in($$CIV3 + 1,2 + (&
                &                   $$CIV7 * 2 + MOD((d-out_1(3) == 0 ? 0 : (&
                &                   d-out_1(3) + $$csxD) - 1), 2)),2 + ($$CIV8 * &
                &                   2 + MOD((d-out_1(2) == 0 ? 0 : (d-out_1(2) + &
                &                   $$csxB) - 1), 2)),1 + ($$CIV9 * 2 + MOD(&
                &                   d-out_1(1), 2)))
                                  out($$CIV3 + 1,1 + ($$CIV7 * 2 + MOD((d-out_1(&
                &                   3) == 0 ? 0 : (d-out_1(3) + $$csxD) - 1), 2)),&
                &                   1 + ($$CIV8 * 2 + MOD((d-out_1(2) == 0 ? 0 : (&
                &                   d-out_1(2) + $$csxB) - 1), 2)),2 + ($$CIV9 * &
                &                   2 + MOD(d-out_1(1), 2))) = in($$CIV3 + 1,1 + (&
                &                   $$CIV7 * 2 + MOD((d-out_1(3) == 0 ? 0 : (&
                &                   d-out_1(3) + $$csxD) - 1), 2)),1 + ($$CIV8 * &
                &                   2 + MOD((d-out_1(2) == 0 ? 0 : (d-out_1(2) + &
                &                   $$csxB) - 1), 2)),2 + ($$CIV9 * 2 + MOD(&
                &                   d-out_1(1), 2)))
                                  out($$CIV3 + 1,2 + ($$CIV7 * 2 + MOD((d-out_1(&
                &                   3) == 0 ? 0 : (d-out_1(3) + $$csxD) - 1), 2)),&
                &                   1 + ($$CIV8 * 2 + MOD((d-out_1(2) == 0 ? 0 : (&
                &                   d-out_1(2) + $$csxB) - 1), 2)),2 + ($$CIV9 * &
                &                   2 + MOD(d-out_1(1), 2))) = in($$CIV3 + 1,2 + (&
                &                   $$CIV7 * 2 + MOD((d-out_1(3) == 0 ? 0 : (&
                &                   d-out_1(3) + $$csxD) - 1), 2)),1 + ($$CIV8 * &
                &                   2 + MOD((d-out_1(2) == 0 ? 0 : (d-out_1(2) + &
                &                   $$csxB) - 1), 2)),2 + ($$CIV9 * 2 + MOD(&
                &                   d-out_1(1), 2)))
                                  out($$CIV3 + 1,1 + ($$CIV7 * 2 + MOD((d-out_1(&
                &                   3) == 0 ? 0 : (d-out_1(3) + $$csxD) - 1), 2)),&
                &                   2 + ($$CIV8 * 2 + MOD((d-out_1(2) == 0 ? 0 : (&
                &                   d-out_1(2) + $$csxB) - 1), 2)),2 + ($$CIV9 * &
                &                   2 + MOD(d-out_1(1), 2))) = in($$CIV3 + 1,1 + (&
                &                   $$CIV7 * 2 + MOD((d-out_1(3) == 0 ? 0 : (&
                &                   d-out_1(3) + $$csxD) - 1), 2)),2 + ($$CIV8 * &
                &                   2 + MOD((d-out_1(2) == 0 ? 0 : (d-out_1(2) + &
                &                   $$csxB) - 1), 2)),2 + ($$CIV9 * 2 + MOD(&
                &                   d-out_1(1), 2)))
                                  out($$CIV3 + 1,2 + ($$CIV7 * 2 + MOD((d-out_1(&
                &                   3) == 0 ? 0 : (d-out_1(3) + $$csxD) - 1), 2)),&
                &                   2 + ($$CIV8 * 2 + MOD((d-out_1(2) == 0 ? 0 : (&
                &                   d-out_1(2) + $$csxB) - 1), 2)),2 + ($$CIV9 * &
                &                   2 + MOD(d-out_1(1), 2))) = in($$CIV3 + 1,2 + (&
                &                   $$CIV7 * 2 + MOD((d-out_1(3) == 0 ? 0 : (&
                &                   d-out_1(3) + $$csxD) - 1), 2)),2 + ($$CIV8 * &
                &                   2 + MOD((d-out_1(2) == 0 ? 0 : (d-out_1(2) + &
                &                   $$csxB) - 1), 2)),2 + ($$CIV9 * 2 + MOD(&
                &                   d-out_1(1), 2)))
                                ENDDO
                              ENDIF
                            ENDDO
                          ENDIF
                        ENDDO
                      ENDIF
                    ENDDO
                    lab_20
                    lab_3
    20|             RETURN
                  END SUBROUTINE __subs_NMOD_localize_xy

 
 
>>>>> OBJECT SECTION <<<<<
 GPR's set/used:   ---- ---- ---- ----  ---- ---- ---- ----
 FPR's set/used:   ---- ---- ---- ----  ---- ---- ---- ----
 CCR's set/used:   ---- ----
     | 000000                           PDEF     __subs_NMOD__&&_subs
    1|                                  PROC      
  114| 000000 bclr     4E800020   1     BA        lr
     |               Tag Table
     | 000004        00000000 00012000 00000000 00000004
     |               Instruction count            1
     |               Straight-line exec time      1
 GPR's set/used:   s-us uuss ss-- ----  ---- ---- ---- ----
 FPR's set/used:   sss- ---- ---- ----  ---- ---- ---- ----
 CCR's set/used:   ss-- ----
     | 000000                           PDEF     __subs_NMOD_dot2
   97|                                  PROC      .a,.b,.d-a_1,gr3-gr5
  110| 000020 ld       E9250020   1     L8        gr9=d-a_1%bounds%extent[](gr5,32)
    0| 000024 ld       E8C50028   1     L8        gr6=d-a_1%bounds%mult[](gr5,40)
  110| 000028 ld       E8E20000   1     L8        gr7=.+CONSTANT_AREA(gr2,0)
    0| 00002C addi     38000001   1     LI        gr0=1
    0| 000030 std      F8050018   1     ST8       d-a_1%bounds%lbound[](gr5,24)=gr0
  110| 000034 cmpdi    2CA90000   1     C8        cr1=gr9,0
    0| 000038 neg      7C0600D0   1     COMP      gr0=gr6
    0| 00003C andi.    71280007   1     RN4_R     gr8,cr0=gr9,0,0x7
    0| 000040 std      F8050010   1     ST8       d-a_1%rvo(gr5,16)=gr0
  110| 000044 lfs      C0470008   1     LFS       fp2=+CONSTANT_AREA(gr7,8)
  110| 000048 bc       40850078   1     BF        CL.491,cr1,0x2/gt,taken=30%(30,70)
    0| 00004C rldicl   7920E8C2   1     SRL8      gr0=gr9,3
  110| 000050 subf     7C661850   1     S         gr3=gr3,gr6
    0| 000054 cmpdi    2CA00000   1     C8        cr1=gr0,0
    0| 000058 bc       4182001C   1     BT        CL.487,cr0,0x4/eq,taken=50%(0,0)
    0| 00005C mtspr    7D0903A6   1     LCTR      ctr=gr8
    0| 000060 ori      60210000   1     XNOP      
    0|                              CL.738:
  110| 000064 lfdux    7C0334EE   1     LFDU      fp0,gr3=a[](gr3,gr6,0)
  110| 000068 fmadd    FC40103A   1     FMA       fp2=fp2,fp0,fp0,fcr
    0| 00006C bc       4200FFF8   1     BCT       ctr=CL.738,taken=100%(100,0)
    0| 000070 bc       41860058   1     BT        CL.758,cr1,0x4/eq,taken=30%(30,70)
    0|                              CL.487:
    0| 000074 mtspr    7C0903A6   1     LCTR      ctr=gr0
    0| 000078 ori      60210000   1     XNOP      
    0|                              CL.739:
  110| 00007C lfdux    7C0334EE   1     LFDU      fp0,gr3=a[](gr3,gr6,0)
  110| 000080 lfdux    7C2334EE   1     LFDU      fp1,gr3=a[](gr3,gr6,0)
  110| 000084 fmadd    FC00103A   1     FMA       fp0=fp2,fp0,fp0,fcr
  110| 000088 lfdux    7C4334EE   2     LFDU      fp2,gr3=a[](gr3,gr6,0)
  110| 00008C fmadd    FC01007A   1     FMA       fp0=fp0,fp1,fp1,fcr
  110| 000090 lfdux    7C2334EE   2     LFDU      fp1,gr3=a[](gr3,gr6,0)
  110| 000094 fmadd    FC0200BA   1     FMA       fp0=fp0,fp2,fp2,fcr
  110| 000098 lfdux    7C4334EE   2     LFDU      fp2,gr3=a[](gr3,gr6,0)
  110| 00009C fmadd    FC01007A   1     FMA       fp0=fp0,fp1,fp1,fcr
  110| 0000A0 lfdux    7C2334EE   2     LFDU      fp1,gr3=a[](gr3,gr6,0)
  110| 0000A4 fmadd    FC0200BA   1     FMA       fp0=fp0,fp2,fp2,fcr
  110| 0000A8 lfdux    7C4334EE   2     LFDU      fp2,gr3=a[](gr3,gr6,0)
  110| 0000AC fmadd    FC01007A   1     FMA       fp0=fp0,fp1,fp1,fcr
  110| 0000B0 lfdux    7C2334EE   2     LFDU      fp1,gr3=a[](gr3,gr6,0)
  110| 0000B4 fmadd    FC0200BA   1     FMA       fp0=fp0,fp2,fp2,fcr
  110| 0000B8 fmadd    FC41007A   2     FMA       fp2=fp0,fp1,fp1,fcr
    0| 0000BC bc       4200FFC0   1     BCT       ctr=CL.739,taken=100%(100,0)
    0|                              CL.491:
  110| 0000C0 stfd     D8440000   1     STFL      b(gr4,0)=fp2
    0| 0000C4 bclr     4E800020   1     BA        lr
    0|                              CL.758:
  110| 0000C8 stfd     D8440000   1     STFL      b(gr4,0)=fp2
    0| 0000CC bclr     4E800020   1     BA        lr
     |               Tag Table
     | 0000D0        00000000 00012200 00000000 000000B0
     |               Instruction count           44
     |               Straight-line exec time     51
 GPR's set/used:   s-us susu ssss s---  ---- ---- ---- ----
 FPR's set/used:   ssss s--- ---- ----  ---- ---- ---- ----
 CCR's set/used:   ss-- ----
     | 000000                           PDEF     __subs_NMOD_dot
   80|                                  PROC      .a,.b,.c,.d-a_2,.d-b_1,gr3-gr7
    0| 0000E0 ld       E9060028   1     L8        gr8=d-a_2%bounds%mult[](gr6,40)
    0| 0000E4 ld       E9270028   1     L8        gr9=d-b_1%bounds%mult[](gr7,40)
   93| 0000E8 ld       E9860020   1     L8        gr12=d-a_2%bounds%extent[](gr6,32)
   93| 0000EC ld       E9420000   1     L8        gr10=.+CONSTANT_AREA(gr2,0)
    0| 0000F0 addi     38000001   1     LI        gr0=1
    0| 0000F4 std      F8060018   1     ST8       d-a_2%bounds%lbound[](gr6,24)=gr0
    0| 0000F8 std      F8070018   1     ST8       d-b_1%bounds%lbound[](gr7,24)=gr0
    0| 0000FC neg      7C0800D0   1     COMP      gr0=gr8
    0| 000100 neg      7D6900D0   1     COMP      gr11=gr9
   93| 000104 cmpdi    2C2C0000   1     C8        cr0=gr12,0
   93| 000108 lfs      C06A0008   1     LFS       fp3=+CONSTANT_AREA(gr10,8)
    0| 00010C std      F8060010   1     ST8       d-a_2%rvo(gr6,16)=gr0
    0| 000110 std      F9670010   1     ST8       d-b_1%rvo(gr7,16)=gr11
   93| 000114 bc       408100C0   1     BF        CL.471,cr0,0x2/gt,taken=30%(30,70)
    0| 000118 rldicl   7980F082   1     SRL8      gr0=gr12,2
    0| 00011C andi.    71860003   1     RN4_R     gr6,cr0=gr12,0,0x3
    0| 000120 cmpdi    2CA00000   1     C8        cr1=gr0,0
   93| 000124 subf     7C892050   1     S         gr4=gr4,gr9
   93| 000128 subf     7C681850   1     S         gr3=gr3,gr8
    0| 00012C bc       4182003C   1     BT        CL.467,cr0,0x4/eq,taken=50%(0,0)
    0| 000130 mtspr    7CC903A6   1     LCTR      ctr=gr6
   93| 000134 lfdux    7C0344EE   1     LFDU      fp0,gr3=a[](gr3,gr8,0)
   93| 000138 lfdux    7C244CEE   1     LFDU      fp1,gr4=b[](gr4,gr9,0)
    0| 00013C bc       42400024   1     BCF       ctr=CL.695,taken=0%(0,100)
    0| 000140 ori      60210000   1     XNOP      
    0| 000144 ori      60210000   1     XNOP      
    0| 000148 ori      60210000   1     XNOP      
    0|                              CL.696:
   93| 00014C lfdux    7C4344EE   1     LFDU      fp2,gr3=a[](gr3,gr8,0)
   93| 000150 fmadd    FC60187A   1     FMA       fp3=fp3,fp0,fp1,fcr
   93| 000154 lfdux    7C244CEE   1     LFDU      fp1,gr4=b[](gr4,gr9,0)
    0| 000158 fmr      FC001090   1     LRFL      fp0=fp2
    0| 00015C bc       4200FFF0   1     BCT       ctr=CL.696,taken=100%(100,0)
    0|                              CL.695:
   93| 000160 fmadd    FC60187A   1     FMA       fp3=fp3,fp0,fp1,fcr
    0| 000164 bc       41860078   1     BT        CL.733,cr1,0x4/eq,taken=30%(30,70)
    0|                              CL.467:
   93| 000168 lfdux    7C0344EE   1     LFDU      fp0,gr3=a[](gr3,gr8,0)
   93| 00016C lfdux    7C244CEE   1     LFDU      fp1,gr4=b[](gr4,gr9,0)
    0| 000170 mtspr    7C0903A6   1     LCTR      ctr=gr0
   93| 000174 lfdux    7C4344EE   1     LFDU      fp2,gr3=a[](gr3,gr8,0)
   93| 000178 fmadd    FC20187A   1     FMA       fp1=fp3,fp0,fp1,fcr
   93| 00017C lfdux    7C644CEE   1     LFDU      fp3,gr4=b[](gr4,gr9,0)
   93| 000180 lfdux    7C0344EE   1     LFDU      fp0,gr3=a[](gr3,gr8,0)
   93| 000184 fmadd    FC2208FA   1     FMA       fp1=fp1-fp3,fcr
   93| 000188 lfdux    7C444CEE   1     LFDU      fp2,gr4=b[](gr4,gr9,0)
   93| 00018C lfdux    7C6344EE   1     LFDU      fp3,gr3=a[](gr3,gr8,0)
   93| 000190 fmadd    FC2008BA   1     FMA       fp1=fp1,fp0,fp2,fcr
   93| 000194 lfdux    7C844CEE   1     LFDU      fp4,gr4=b[](gr4,gr9,0)
    0| 000198 bc       42400038   1     BCF       ctr=CL.697,taken=0%(0,100)
    0|                              CL.698:
   93| 00019C lfdux    7C0344EE   1     LFDU      fp0,gr3=a[](gr3,gr8,0)
   93| 0001A0 fmadd    FC23093A   1     FMA       fp1=fp1,fp3,fp4,fcr
   93| 0001A4 lfdux    7C444CEE   1     LFDU      fp2,gr4=b[](gr4,gr9,0)
   93| 0001A8 lfdux    7C6344EE   1     LFDU      fp3,gr3=a[](gr3,gr8,0)
   93| 0001AC lfdux    7C844CEE   1     LFDU      fp4,gr4=b[](gr4,gr9,0)
   93| 0001B0 fmadd    FC0008BA   1     FMA       fp0=fp1,fp0,fp2,fcr
   93| 0001B4 lfdux    7C2344EE   2     LFDU      fp1,gr3=a[](gr3,gr8,0)
   93| 0001B8 lfdux    7C444CEE   1     LFDU      fp2,gr4=b[](gr4,gr9,0)
   93| 0001BC fmadd    FC03013A   1     FMA       fp0=fp0,fp3,fp4,fcr
   93| 0001C0 lfdux    7C6344EE   2     LFDU      fp3,gr3=a[](gr3,gr8,0)
   93| 0001C4 lfdux    7C844CEE   1     LFDU      fp4,gr4=b[](gr4,gr9,0)
   93| 0001C8 fmadd    FC2100BA   1     FMA       fp1=fp0-fp2,fcr
    0| 0001CC bc       4200FFD0   1     BCT       ctr=CL.698,taken=100%(100,0)
    0|                              CL.697:
   93| 0001D0 fmadd    FC63093A   1     FMA       fp3=fp1,fp3,fp4,fcr
    0|                              CL.471:
   93| 0001D4 stfd     D8650000   1     STFL      c(gr5,0)=fp3
    0| 0001D8 bclr     4E800020   1     BA        lr
    0|                              CL.733:
   93| 0001DC stfd     D8650000   1     STFL      c(gr5,0)=fp3
    0| 0001E0 bclr     4E800020   1     BA        lr
     |               Tag Table
     | 0001E4        00000000 00012200 00000000 00000104
     |               Instruction count           65
     |               Straight-line exec time     67
 GPR's set/used:   ---u uu-- ---- ----  ---- ---- ---- ----
 FPR's set/used:   ssss ssss s--- ----  ---- ---- ---- ----
 CCR's set/used:   ---- ----
     | 000000                           PDEF     __subs_NMOD_cross
   64|                                  PROC      .a,.b,.c,gr3-gr5
   74| 000200 lfd      C8030008   1     LFL       fp0=a[](gr3,8)
   74| 000204 lfd      C8240010   1     LFL       fp1=b[](gr4,16)
   74| 000208 lfd      C8430010   1     LFL       fp2=a[](gr3,16)
   74| 00020C lfd      C8640008   1     LFL       fp3=b[](gr4,8)
   75| 000210 lfd      C8840000   1     LFL       fp4=b[](gr4,0)
   75| 000214 lfd      C8A30000   1     LFL       fp5=a[](gr3,0)
   74| 000218 fmul     FCC200F2   1     MFL       fp6=fp2,fp3,fcr
   76| 00021C fmul     FCE00132   2     MFL       fp7=fp0,fp4,fcr
   75| 000220 fmul     FD010172   2     MFL       fp8=fp1,fp5,fcr
   74| 000224 fmsub    FC003078   2     FMS       fp0=fp6,fp0,fp1,fcr
   76| 000228 fmsub    FC233978   2     FMS       fp1=fp7,fp3,fp5,fcr
   75| 00022C fmsub    FC424138   2     FMS       fp2=fp8,fp2,fp4,fcr
   74| 000230 stfd     D8050000   1     STFL      c[](gr5,0)=fp0
   76| 000234 stfd     D8250010   1     STFL      c[](gr5,16)=fp1
   75| 000238 stfd     D8450008   1     STFL      c[](gr5,8)=fp2
   78| 00023C bclr     4E800020   1     BA        lr
     |               Tag Table
     | 000240        00000000 00012200 00000000 00000040
     |               Instruction count           16
     |               Straight-line exec time     21
 GPR's set/used:   s--s uuu- ---- ----  ---- ---- ---- ----
 FPR's set/used:   ---- ---- ---- ----  ---- ---- ---- ----
 CCR's set/used:   s--- ----
     | 000000                           PDEF     __subs_NMOD_loptest
   46|                                  PROC      .lopt,.ldef,(OPT)lopt,(OPT)ldef,gr3-gr6
   55| 000250 andi.    70A00001   1     RN4_R     gr0,cr0=gr5,0,0x1
   55| 000254 bc       40820020   1     BF        CL.451,cr0,0x4/eq,taken=30%(30,70)
   57| 000258 andi.    70C00001   1     RN4_R     gr0,cr0=gr6,0,0x1
   57| 00025C bc       41820010   1     BT        CL.77,cr0,0x4/eq,taken=50%(0,0)
   58| 000260 lwa      E8040002   1     L4A       gr0=ldef(gr4,0)
   62| 000264 extsw    7C0307B4   1     EXTS4     gr3=gr0
   59| 000268 bclr     4E800020   1     BA        lr
   59|                              CL.77:
   62| 00026C addi     38600000   1     LI        gr3=0
   62| 000270 bclr     4E800020   1     BA        lr
    0|                              CL.451:
   56| 000274 lwa      E8630002   1     L4A       gr3=lopt(gr3,0)
    0| 000278 bclr     4E800020   1     BA        lr
     |               Tag Table
     | 00027C        00000000 00012000 00000000 0000002C
     |               Instruction count           11
     |               Straight-line exec time     11
 GPR's set/used:   ssus ssss ssss s---  ---- ---- ---s ssss
 FPR's set/used:   ssss ssss ssss ss--  ---- ---- ---- ----
 CCR's set/used:   ss-- -sss
     | 000000                           PDEF     __subs_NMOD_backskip_to_time
   22|                                  PROC      .lun,.lroot,(OPT)lroot,gr3-gr5
    0| 000290 std      FBE1FFF8   1     ST8       #stack(gr1,-8)=gr31
    0| 000294 std      FBC1FFF0   1     ST8       #stack(gr1,-16)=gr30
    0| 000298 std      FBA1FFE8   1     ST8       #stack(gr1,-24)=gr29
    0| 00029C std      FB81FFE0   1     ST8       #stack(gr1,-32)=gr28
    0| 0002A0 std      FB61FFD8   1     ST8       #stack(gr1,-40)=gr27
    0| 0002A4 mfspr    7C0802A6   1     LFLR      gr0=lr
    0| 0002A8 std      F8010010   1     ST8       #stack(gr1,16)=gr0
    0| 0002AC stdu     F821FF21   1     ST8U      gr1,#stack(gr1,-224)=gr1
   32| 0002B0 lwa      EBE30002   1     L4A       gr31=lun(gr3,0)
   32| 0002B4 ld       EBC20000   1     L8        gr30=.$STATIC(gr2,0)
    0| 0002B8 or       7C9D2378   1     LR        gr29=gr4
    0| 0002BC or       7CBB2B78   1     LR        gr27=gr5
   32| 0002C0 addi     38800003   1     LI        gr4=3
   32| 0002C4 addi     38C00000   1     LI        gr6=0
   32| 0002C8 or       7FE3FB78   1     LR        gr3=gr31
   32| 0002CC or       7FC5F378   1     LR        gr5=gr30
   32| 0002D0 addi     38E00000   1     LI        gr7=0
   32| 0002D4 bl       48000001   1     CALL      gr3=_xlfIOCmd,5,gr3,gr4,#1",gr5,gr6,@PALI_SHADOW_CONST.rns0.,gr7,_xlfIOCmd",fcr",#MX_TEMP6",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   32| 0002D8 ori      60000000   1
   33| 0002DC addi     38BE0040   1     AI        gr5=gr30,64
   33| 0002E0 or       7FE3FB78   1     LR        gr3=gr31
   33| 0002E4 addi     38800000   1     LI        gr4=0
   33| 0002E8 addi     38C00000   1     LI        gr6=0
   33| 0002EC addi     38E00000   1     LI        gr7=0
   33| 0002F0 addi     39000000   1     LI        gr8=0
   33| 0002F4 addi     39200000   1     LI        gr9=0
   33| 0002F8 bl       48000001   1     CALL      gr3=_xlfBeginIO,7,gr3,gr4,#2",gr5,gr6,@PALI_SHADOW_CONST.rns0.,gr7,gr8,@PALI_SHADOW_CONST.rns0.,gr9,_xlfBeginIO",fcr",#MX_TEMP6",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   33| 0002FC ori      60000000   1
   33| 000300 or       7C7C1B78   1     LR        gr28=gr3
   33| 000304 addi     38810080   1     AI        gr4=gr1,128
   33| 000308 addi     38A00004   1     LI        gr5=4
   33| 00030C addi     38C00004   1     LI        gr6=4
   33| 000310 addi     38E00000   1     LI        gr7=0
   33| 000314 bl       48000001   1     CALL      _xlfReadUfmt,5,gr3,id",gr4-gr7,_xlfReadUfmt",fcr",#MX_TEMP6",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   33| 000318 ori      60000000   1
   33| 00031C or       7F83E378   1     LR        gr3=gr28
   33| 000320 bl       48000001   1     CALL      gr3=_xlfEndIO,1,gr3,_xlfEndIO",fcr",#MX_TEMP6",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   33| 000324 ori      60000000   1
   34| 000328 lwz      80010080   1     L4Z       gr0=id(gr1,128)
   34| 00032C cmpwi    2C0007D0   1     C4        cr0=gr0,2000
   34| 000330 bc       4182007C   1     BT        CL.447,cr0,0x4/eq,taken=50%(0,0)
   43| 000334 addi     38BE0180   1     AI        gr5=gr30,384
   43| 000338 or       7FE3FB78   1     LR        gr3=gr31
   43| 00033C addi     38800003   1     LI        gr4=3
   43| 000340 addi     38C00000   1     LI        gr6=0
   43| 000344 addi     38E00000   1     LI        gr7=0
   43| 000348 bl       48000001   1     CALL      gr3=_xlfIOCmd,5,gr3,gr4,#9",gr5,gr6,@PALI_SHADOW_CONST.rns0.,gr7,_xlfIOCmd",fcr",#MX_TEMP6",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   43| 00034C ori      60000000   1
   55| 000350 andi.    73600001   1     RN4_R     gr0,cr0=gr27,0,0x1
   55| 000354 bc       41820014   1     BT        CL.93,cr0,0x4/eq,taken=30%(30,70)
    0|                              CL.444:
   56| 000358 lwz      801D0000   1     L4Z       gr0=lopt$$6(gr29,0)
   44| 00035C andi.    70000001   1     RN4_R     gr0,cr0=gr0,0,0x1
   44| 000360 bc       4082002C   1     BF        CL.691,cr0,0x4/eq,taken=40%(40,60)
    0| 000364 b        48000004   1     B         CL.155,-1
   59|                              CL.93:
   45|                              CL.155:
   45| 000368 ld       E98100F0   1     L8        gr12=#stack(gr1,240)
   45| 00036C addi     382100E0   1     AI        gr1=gr1,224
   45| 000370 ld       EB61FFD8   1     L8        gr27=#stack(gr1,-40)
   45| 000374 ld       EB81FFE0   1     L8        gr28=#stack(gr1,-32)
   45| 000378 ld       EBA1FFE8   1     L8        gr29=#stack(gr1,-24)
   45| 00037C mtspr    7D8803A6   1     LLR       lr=gr12
   45| 000380 ld       EBC1FFF0   1     L8        gr30=#stack(gr1,-16)
   45| 000384 ld       EBE1FFF8   1     L8        gr31=#stack(gr1,-8)
   45| 000388 bclr     4E800020   1     BA        lr
    0|                              CL.691:
   44| 00038C addi     38BE01C0   1     AI        gr5=gr30,448
   44| 000390 or       7FE3FB78   1     LR        gr3=gr31
   44| 000394 addi     38800003   1     LI        gr4=3
   44| 000398 addi     38C00000   1     LI        gr6=0
   44| 00039C addi     38E00000   1     LI        gr7=0
   44| 0003A0 bl       48000001   1     CALL      gr3=_xlfIOCmd,5,gr3,gr4,#10",gr5,gr6,@PALI_SHADOW_CONST.rns0.,gr7,_xlfIOCmd",fcr",#MX_TEMP6",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   44| 0003A4 ori      60000000   1
   44| 0003A8 b        4BFFFFC0   1     B         CL.155,-1
    0|                              CL.447:
   35| 0003AC addi     38BE0080   1     AI        gr5=gr30,128
   35| 0003B0 or       7FE3FB78   1     LR        gr3=gr31
   35| 0003B4 addi     38800003   1     LI        gr4=3
   35| 0003B8 addi     38C00000   1     LI        gr6=0
   35| 0003BC addi     38E00000   1     LI        gr7=0
   35| 0003C0 bl       48000001   1     CALL      gr3=_xlfIOCmd,5,gr3,gr4,#4",gr5,gr6,@PALI_SHADOW_CONST.rns0.,gr7,_xlfIOCmd",fcr",#MX_TEMP6",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   35| 0003C4 ori      60000000   1
    0| 0003C8 ori      60210000   1     XNOP      
   36|                              CL.81:
   37| 0003CC or       7FE3FB78   1     LR        gr3=gr31
   37| 0003D0 addi     38800003   1     LI        gr4=3
   37| 0003D4 addi     38BE00C0   1     AI        gr5=gr30,192
   37| 0003D8 addi     38C00000   1     LI        gr6=0
   37| 0003DC addi     38E00000   1     LI        gr7=0
   37| 0003E0 addi     3B800000   1     LI        gr28=0
    0|                              CL.680:
   37| 0003E4 bl       48000001   1     CALL      gr3=_xlfIOCmd,5,gr3,gr4,#5",gr5,gr6,@PALI_SHADOW_CONST.rns0.,gr7,_xlfIOCmd",fcr",#MX_TEMP6",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   37| 0003E8 ori      60000000   1
   37| 0003EC addi     381C0001   1     AI        gr0=gr28,1
   37| 0003F0 or       7FE3FB78   1     LR        gr3=gr31
   37| 0003F4 cmpldi   28200003   1     CL8       cr0=gr0,3
   37| 0003F8 bc       40800040   1     BF        CL.439,cr0,0x8/llt,taken=20%(20,80)
   37| 0003FC addi     38800003   1     LI        gr4=3
   37| 000400 addi     38BE00C0   1     AI        gr5=gr30,192
   37| 000404 addi     38C00000   1     LI        gr6=0
   37| 000408 addi     38E00000   1     LI        gr7=0
   37| 00040C bl       48000001   1     CALL      gr3=_xlfIOCmd,5,gr3,gr4,#5",gr5,gr6,@PALI_SHADOW_CONST.rns0.,gr7,_xlfIOCmd",fcr",#MX_TEMP6",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   37| 000410 ori      60000000   1
   37| 000414 addi     3B9C0002   1     AI        gr28=gr28,2
   37| 000418 or       7FE3FB78   1     LR        gr3=gr31
   37| 00041C cmpldi   283C0003   1     CL8       cr0=gr28,3
   37| 000420 bc       40800018   1     BF        CL.439,cr0,0x8/llt,taken=20%(20,80)
   37| 000424 addi     38800003   1     LI        gr4=3
   37| 000428 addi     38BE00C0   1     AI        gr5=gr30,192
   37| 00042C addi     38C00000   1     LI        gr6=0
   37| 000430 addi     38E00000   1     LI        gr7=0
    0| 000434 b        4BFFFFB0   1     B         CL.680,-1
    0|                              CL.439:
   38| 000438 or       7FE3FB78   1     LR        gr3=gr31
   38| 00043C addi     38800000   1     LI        gr4=0
   38| 000440 addi     38BE0100   1     AI        gr5=gr30,256
   38| 000444 addi     38C00000   1     LI        gr6=0
   38| 000448 addi     38E00000   1     LI        gr7=0
   38| 00044C addi     39000000   1     LI        gr8=0
   38| 000450 addi     39200000   1     LI        gr9=0
   38| 000454 bl       48000001   1     CALL      gr3=_xlfBeginIO,7,gr3,gr4,#6",gr5,gr6,@PALI_SHADOW_CONST.rns0.,gr7,gr8,@PALI_SHADOW_CONST.rns0.,gr9,_xlfBeginIO",fcr",#MX_TEMP6",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   38| 000458 ori      60000000   1
   38| 00045C or       7C7C1B78   1     LR        gr28=gr3
   38| 000460 addi     38810080   1     AI        gr4=gr1,128
   38| 000464 addi     38A00004   1     LI        gr5=4
   38| 000468 addi     38C00004   1     LI        gr6=4
   38| 00046C addi     38E00000   1     LI        gr7=0
   38| 000470 bl       48000001   1     CALL      _xlfReadUfmt,5,gr3,id",gr4-gr7,_xlfReadUfmt",fcr",#MX_TEMP6",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   38| 000474 ori      60000000   1
   38| 000478 or       7F83E378   1     LR        gr3=gr28
   38| 00047C bl       48000001   1     CALL      gr3=_xlfEndIO,1,gr3,_xlfEndIO",fcr",#MX_TEMP6",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   38| 000480 ori      60000000   1
   39| 000484 lwz      80010080   1     L4Z       gr0=id(gr1,128)
   39| 000488 cmpwi    2C0007D0   1     C4        cr0=gr0,2000
   39| 00048C bc       4082FF40   1     BF        CL.81,cr0,0x4/eq,taken=80%(80,20)
   41| 000490 addi     38BE0140   1     AI        gr5=gr30,320
   41| 000494 or       7FE3FB78   1     LR        gr3=gr31
   41| 000498 addi     38800003   1     LI        gr4=3
   41| 00049C addi     38C00000   1     LI        gr6=0
   41| 0004A0 addi     38E00000   1     LI        gr7=0
   41| 0004A4 bl       48000001   1     CALL      gr3=_xlfIOCmd,5,gr3,gr4,#8",gr5,gr6,@PALI_SHADOW_CONST.rns0.,gr7,_xlfIOCmd",fcr",#MX_TEMP6",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   41| 0004A8 ori      60000000   1
   43| 0004AC addi     38BE0180   1     AI        gr5=gr30,384
   43| 0004B0 or       7FE3FB78   1     LR        gr3=gr31
   43| 0004B4 addi     38800003   1     LI        gr4=3
   43| 0004B8 addi     38C00000   1     LI        gr6=0
   43| 0004BC addi     38E00000   1     LI        gr7=0
   43| 0004C0 bl       48000001   1     CALL      gr3=_xlfIOCmd,5,gr3,gr4,#9",gr5,gr6,@PALI_SHADOW_CONST.rns0.,gr7,_xlfIOCmd",fcr",#MX_TEMP6",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   43| 0004C4 ori      60000000   1
   55| 0004C8 andi.    73600001   1     RN4_R     gr0,cr0=gr27,0,0x1
   55| 0004CC bc       4182FE9C   1     BT        CL.93,cr0,0x4/eq,taken=30%(30,70)
    0| 0004D0 b        4BFFFE88   1     B         CL.444,-1
     |               Tag Table
     | 0004D4        00000000 00012001 80050000 00000244
     |               Instruction count          145
     |               Straight-line exec time    145
 GPR's set/used:   ss-s usus ssss s-ss  ssss ssss ssss ssss
 FPR's set/used:   ssss sss- ---- ----  ---- ---- ---- ----
 CCR's set/used:   ss-- -sss
     | 000000                           PDEF     __subs_NMOD_localize_xy
    4|                                  PROC      .out,.in,(OPT)in,.d-out_1,.d-in_1,gr3-gr7
    0| 0004F0 std      FBE1FFF8   1     ST8       #stack(gr1,-8)=gr31
    0| 0004F4 std      FBC1FFF0   1     ST8       #stack(gr1,-16)=gr30
    0| 0004F8 std      FBA1FFE8   1     ST8       #stack(gr1,-24)=gr29
    0| 0004FC std      FB81FFE0   1     ST8       #stack(gr1,-32)=gr28
    0| 000500 std      FB61FFD8   1     ST8       #stack(gr1,-40)=gr27
    0| 000504 std      FB41FFD0   1     ST8       #stack(gr1,-48)=gr26
    0| 000508 std      FB21FFC8   1     ST8       #stack(gr1,-56)=gr25
    0| 00050C std      FB01FFC0   1     ST8       #stack(gr1,-64)=gr24
    0| 000510 std      FAE1FFB8   1     ST8       #stack(gr1,-72)=gr23
    0| 000514 std      FAC1FFB0   1     ST8       #stack(gr1,-80)=gr22
    0| 000518 std      FAA1FFA8   1     ST8       #stack(gr1,-88)=gr21
    0| 00051C std      FA81FFA0   1     ST8       #stack(gr1,-96)=gr20
    0| 000520 std      FA61FF98   1     ST8       #stack(gr1,-104)=gr19
    0| 000524 std      FA41FF90   1     ST8       #stack(gr1,-112)=gr18
    0| 000528 std      FA21FF88   1     ST8       #stack(gr1,-120)=gr17
    0| 00052C std      FA01FF80   1     ST8       #stack(gr1,-128)=gr16
    0| 000530 std      F9E1FF78   1     ST8       #stack(gr1,-136)=gr15
    0| 000534 std      F9C1FF70   1     ST8       #stack(gr1,-144)=gr14
    0| 000538 stdu     F821FD21   1     ST8U      gr1,#stack(gr1,-736)=gr1
    0| 00053C ld       E9060070   1     L8        gr8=d-out_1%bounds%mult[](gr6,112)
    0| 000540 ld       E9460040   1     L8        gr10=d-out_1%bounds%mult[](gr6,64)
    0| 000544 ld       E9660058   1     L8        gr11=d-out_1%bounds%mult[](gr6,88)
    0| 000548 ld       E9260028   1     L8        gr9=d-out_1%bounds%mult[](gr6,40)
    0| 00054C andi.    70A00001   1     RN4_R     gr0,cr0=gr5,0,0x1
    0| 000550 addi     39800001   1     LI        gr12=1
    0| 000554 std      F9860060   1     ST8       d-out_1%bounds%lbound[](gr6,96)=gr12
    0| 000558 std      F9860048   1     ST8       d-out_1%bounds%lbound[](gr6,72)=gr12
    0| 00055C std      F9860030   1     ST8       d-out_1%bounds%lbound[](gr6,48)=gr12
    0| 000560 add      7C085214   1     A         gr0=gr8,gr10
    0| 000564 add      7CA95A14   1     A         gr5=gr9,gr11
    0| 000568 std      F9610088   1     ST8       #SPILL0(gr1,136)=gr11
    0| 00056C add      7C002A14   1     A         gr0=gr0,gr5
    0| 000570 std      F9860018   1     ST8       d-out_1%bounds%lbound[](gr6,24)=gr12
    0| 000574 neg      7C0000D0   1     COMP      gr0=gr0
    0| 000578 std      F8060010   1     ST8       d-out_1%rvo(gr6,16)=gr0
    0| 00057C bc       41820920   1     BT        CL.652,cr0,0x4/eq,taken=30%(30,70)
   18| 000580 ld       E8060020   1     L8        gr0=d-out_1%bounds%extent[](gr6,32)
    0| 000584 ld       E8A70070   1     L8        gr5=d-in_1%bounds%mult[](gr7,112)
    0| 000588 ld       EBA70040   1     L8        gr29=d-in_1%bounds%mult[](gr7,64)
    0| 00058C ld       EB870058   1     L8        gr28=d-in_1%bounds%mult[](gr7,88)
    0| 000590 ld       EB670028   1     L8        gr27=d-in_1%bounds%mult[](gr7,40)
    0| 000594 std      F9870060   1     ST8       d-in_1%bounds%lbound[](gr7,96)=gr12
   18| 000598 sradi    7C0B0E74   1     SRA8CA    gr11,ca=gr0,1
   18| 00059C cmpdi    2CA00000   1     C8        cr1=gr0,0
   18| 0005A0 addze    7D6B0194   1     ADDE      gr11,ca=gr11,0,ca
    0| 0005A4 add      7FC5EA14   1     A         gr30=gr5,gr29
    0| 0005A8 add      7FFBE214   1     A         gr31=gr27,gr28
    0| 0005AC std      F9870048   1     ST8       d-in_1%bounds%lbound[](gr7,72)=gr12
   18| 0005B0 rldicr   79710FA4   1     SLL8      gr17=gr11,1
    0| 0005B4 add      7FFEFA14   1     A         gr31=gr30,gr31
   18| 0005B8 subf     7D710051   1     S_R       gr11,cr0=gr0,gr17
    0| 0005BC std      F9870030   1     ST8       d-in_1%bounds%lbound[](gr7,48)=gr12
    0| 0005C0 neg      7F5F00D0   1     COMP      gr26=gr31
   18| 0005C4 crand    4C250A02   1     CR_N      cr0=cr[10],0x2/gt,0x2/gt,0x2/gt,cr0
    0| 0005C8 std      FBA10090   1     ST8       #SPILL1(gr1,144)=gr29
    0| 0005CC std      FB810098   1     ST8       #SPILL2(gr1,152)=gr28
    0| 0005D0 std      FB6100A0   1     ST8       #SPILL3(gr1,160)=gr27
    0| 0005D4 std      FB4100A8   1     ST8       #SPILL4(gr1,168)=gr26
    0| 0005D8 std      F9870018   1     ST8       d-in_1%bounds%lbound[](gr7,24)=gr12
    0| 0005DC std      FB470010   1     ST8       d-in_1%rvo(gr7,16)=gr26
   18| 0005E0 bc       40810114   1     BF        CL.139,cr0,0x2/gt,taken=50%(0,0)
   18| 0005E4 ld       EBE60038   1     L8        gr31=d-out_1%bounds%extent[](gr6,56)
   18| 0005E8 addi     38E00000   1     LI        gr7=0
   18| 0005EC neg      7D9F00D0   1     COMP      gr12=gr31
   18| 0005F0 or       7D8CFB78   1     O         gr12=gr12,gr31
   18| 0005F4 sradi    7D8CFE76   1     SRA8      gr12=gr12,63,ca"
   18| 0005F8 and      7FFC6039   1     N_R       gr28,cr0=gr31,gr12
    0| 0005FC bc       4081088C   1     BF        CL.326,cr0,0x2/gt,taken=50%(0,0)
    0| 000600 ld       EBE60050   1     L8        gr31=d-out_1%bounds%extent[](gr6,80)
    0| 000604 subf     7F681850   1     S         gr27=gr3,gr8
   18| 000608 ld       EA610098   1     L8        gr19=#SPILL2(gr1,152)
    0| 00060C ld       EA410090   1     L8        gr18=#SPILL1(gr1,144)
    0| 000610 ld       EA0100A8   1     L8        gr16=#SPILL4(gr1,168)
    0| 000614 ld       E9E10098   1     L8        gr15=#SPILL2(gr1,152)
    0| 000618 neg      7D9F00D0   1     COMP      gr12=gr31
    0| 00061C ld       E9C100A0   1     L8        gr14=#SPILL3(gr1,160)
    0| 000620 or       7D8CFB78   1     O         gr12=gr12,gr31
    0| 000624 sradi    7D8CFE76   1     SRA8      gr12=gr12,63,ca"
    0| 000628 and      7FFA6039   1     N_R       gr26,cr0=gr31,gr12
    0| 00062C mcrf     4F800000   1     LRCR      cr7=cr0
   18|                              CL.132:
   18| 000630 addi     39800000   1     LI        gr12=0
    0| 000634 bc       409D00B0   1     BF        CL.138,cr7,0x2/gt,taken=20%(20,80)
    0| 000638 ld       EBC60068   1     L8        gr30=d-out_1%bounds%extent[](gr6,104)
    0| 00063C ld       EBE60060   1     L8        gr31=d-out_1%bounds%lbound[](gr6,96)
    0| 000640 or       7F79DB78   1     LR        gr25=gr27
    0| 000644 addi     3B070001   1     AI        gr24=gr7,1
    0| 000648 neg      7FBE00D0   1     COMP      gr29=gr30
    0| 00064C add      7FFFF214   1     A         gr31=gr31,gr30
    0| 000650 or       7FDEEB78   1     O         gr30=gr30,gr29
    0| 000654 sradi    7FDEFE76   1     SRA8      gr30=gr30,63,ca"
    0| 000658 addi     3BFFFFFF   1     AI        gr31=gr31,-1
    0| 00065C and      7FF7F039   1     N_R       gr23,cr0=gr31,gr30
   18|                              CL.133:
   18| 000660 addi     3BE00000   1     LI        gr31=0
    0| 000664 bc       40810070   1     BF        CL.137,cr0,0x2/gt,taken=50%(0,0)
    0| 000668 addi     3BAC0001   1     AI        gr29=gr12,1
    0| 00066C mulld    7FCEC1D2   1     M         gr30=gr14,gr24
    0| 000670 mulld    7FB2E9D2   1     M         gr29=gr18,gr29
    0| 000674 add      7FD0F214   1     A         gr30=gr16,gr30
    0| 000678 or       7F36CB78   1     LR        gr22=gr25
    0| 00067C add      7EAFEA14   1     A         gr21=gr15,gr29
    0| 000680 add      7E84F214   1     A         gr20=gr4,gr30
   18|                              CL.134:
   18| 000684 mulld    7FD3F9D2   1     M         gr30=gr19,gr31
    0| 000688 mtspr    7EE903A6   1     LCTR      ctr=gr23
   18| 00068C add      7FDEAA14   1     A         gr30=gr30,gr21
    0| 000690 addi     3BFF0001   1     AI        gr31=gr31,1
   18| 000694 add      7FDEA214   1     A         gr30=gr30,gr20
   18| 000698 or       7EDDB378   1     LR        gr29=gr22
   18| 00069C lfsux    7C1E2C6E   1     LFSU      fp0,gr30=in[](gr30,gr5,0)
    0| 0006A0 bc       42400020   1     BCF       ctr=CL.509,taken=0%(0,100)
    0| 0006A4 ori      60210000   1     XNOP      
    0| 0006A8 ori      60210000   1     XNOP      
    0| 0006AC ori      60210000   1     XNOP      
    0|                              CL.510:
   18| 0006B0 lfsux    7C3E2C6E   1     LFSU      fp1,gr30=in[](gr30,gr5,0)
   18| 0006B4 stfsux   7C1D456E   1     STFSU     gr29,out[](gr29,gr8,0)=fp0
    0| 0006B8 fmr      FC000890   1     LRFL      fp0=fp1
    0| 0006BC bc       4200FFF4   1     BCT       ctr=CL.510,taken=100%(100,0)
    0|                              CL.509:
    0| 0006C0 ld       EBC10088   1     L8        gr30=#SPILL0(gr1,136)
   18| 0006C4 stfsux   7C1D456E   1     STFSU     gr29,out[](gr29,gr8,0)=fp0
   18| 0006C8 cmpld    7F3FD040   1     CL8       cr6=gr31,gr26
    0| 0006CC add      7ED6F214   1     A         gr22=gr22,gr30
   18| 0006D0 bc       4198FFB4   1     BT        CL.134,cr6,0x8/llt,taken=80%(80,20)
   18|                              CL.137:
   18| 0006D4 addi     398C0001   1     AI        gr12=gr12,1
    0| 0006D8 add      7F2ACA14   1     A         gr25=gr10,gr25
   18| 0006DC cmpld    7F2CE040   1     CL8       cr6=gr12,gr28
   18| 0006E0 bc       4198FF80   1     BT        CL.133,cr6,0x8/llt,taken=80%(80,20)
   18|                              CL.138:
   18| 0006E4 addi     38E70001   1     AI        gr7=gr7,1
    0| 0006E8 add      7F69DA14   1     A         gr27=gr9,gr27
   18| 0006EC cmpd     7C2B3800   1     C8        cr0=gr11,gr7
   18| 0006F0 bc       4181FF40   1     BT        CL.132,cr0,0x2/gt,taken=80%(80,20)
   18|                              CL.139:
   18| 0006F4 cmpd     7F205800   1     C8        cr6=gr0,gr11
    0| 0006F8 mulld    7E4959D2   1     M         gr18=gr9,gr11
   18| 0006FC crand    4CB92A02   1     CR_N      cr1=cr[61],0x2/gt,0x2/gt,0x2/gt,cr1
   18| 000700 bc       40850738   1     BF        CL.156,cr1,0x2/gt,taken=20%(20,80)
   18| 000704 ld       E9860038   1     L8        gr12=d-out_1%bounds%extent[](gr6,56)
    0| 000708 subf     7DC81850   1     S         gr14=gr3,gr8
   18| 00070C or       7D675B78   1     LR        gr7=gr11
    0| 000710 add      7F8E9214   1     A         gr28=gr14,gr18
   18| 000714 neg      7C6C00D0   1     COMP      gr3=gr12
   18| 000718 or       7C636378   1     O         gr3=gr3,gr12
   18| 00071C sradi    7C63FE76   1     SRA8      gr3=gr3,63,ca"
   18| 000720 and      7C7B6038   1     N         gr27=gr3,gr12
   18| 000724 sradi    7F630E74   1     SRA8CA    gr3,ca=gr27,1
   18| 000728 cmpdi    2EBB0000   1     C8        cr5=gr27,0
   18| 00072C addze    7C630194   1     ADDE      gr3,ca=gr3,0,ca
   18| 000730 rldicr   786F0FA4   1     SLL8      gr15=gr3,1
   18| 000734 subf     7C6FD851   1     S_R       gr3,cr0=gr27,gr15
    0| 000738 mulld    7E0351D2   1     M         gr16=gr3,gr10
   18| 00073C cmpd     7FBB1800   1     C8        cr7=gr27,gr3
   18| 000740 crand    4F21AA02   1     CR_N      cr6=cr[05],0x2/gt,0x2/gt,0x2/gt,cr6
   18| 000744 crand    4EBDAA02   1     CR_N      cr5=cr[75],0x2/gt,0x2/gt,0x2/gt,cr5
    0| 000748 crnor    4F39C842   1     CR_NOR    cr6=cr[66],0x2/gt,0x2/gt,0x2/gt,cr6
    0| 00074C add      7E70E214   1     A         gr19=gr16,gr28
   18|                              CL.124:
   18| 000750 bc       419900E4   1     BT        CL.145,cr6,0x2/gt,taken=50%(0,0)
   18| 000754 ld       EBC60050   1     L8        gr30=d-out_1%bounds%extent[](gr6,80)
   18| 000758 ld       EBE60048   1     L8        gr31=d-out_1%bounds%lbound[](gr6,72)
   18| 00075C addi     39800000   1     LI        gr12=0
   18| 000760 neg      7FBE00D0   1     COMP      gr29=gr30
   18| 000764 add      7FFEFA14   1     A         gr31=gr30,gr31
   18| 000768 or       7FDEEB78   1     O         gr30=gr30,gr29
   18| 00076C addi     3BFFFFFF   1     AI        gr31=gr31,-1
   18| 000770 sradi    7FDEFE76   1     SRA8      gr30=gr30,63,ca"
   18| 000774 and      7FFAF039   1     N_R       gr26,cr0=gr31,gr30
    0| 000778 bc       408100BC   1     BF        CL.145,cr0,0x2/gt,taken=20%(20,80)
    0| 00077C ld       EBC60068   1     L8        gr30=d-out_1%bounds%extent[](gr6,104)
    0| 000780 ld       EBE60060   1     L8        gr31=d-out_1%bounds%lbound[](gr6,96)
    0| 000784 or       7F99E378   1     LR        gr25=gr28
    0| 000788 addi     3B070001   1     AI        gr24=gr7,1
    0| 00078C neg      7FBE00D0   1     COMP      gr29=gr30
    0| 000790 add      7FFEFA14   1     A         gr31=gr30,gr31
    0| 000794 or       7FDEEB78   1     O         gr30=gr30,gr29
    0| 000798 sradi    7FDEFE76   1     SRA8      gr30=gr30,63,ca"
    0| 00079C addi     3BFFFFFF   1     AI        gr31=gr31,-1
    0| 0007A0 and      7FF7F039   1     N_R       gr23,cr0=gr31,gr30
   18|                              CL.140:
   18| 0007A4 addi     3BE00000   1     LI        gr31=0
    0| 0007A8 bc       4081007C   1     BF        CL.144,cr0,0x2/gt,taken=50%(0,0)
    0| 0007AC ld       EAC100A0   1     L8        gr22=#SPILL3(gr1,160)
    0| 0007B0 ld       EAA10090   1     L8        gr21=#SPILL1(gr1,144)
    0| 0007B4 addi     3BAC0001   1     AI        gr29=gr12,1
    0| 0007B8 ld       EA8100A8   1     L8        gr20=#SPILL4(gr1,168)
    0| 0007BC mulld    7FD6C1D2   1     M         gr30=gr22,gr24
    0| 0007C0 mulld    7FB5E9D2   1     M         gr29=gr21,gr29
    0| 0007C4 add      7FD4F214   1     A         gr30=gr20,gr30
    0| 0007C8 ld       EA810098   1     L8        gr20=#SPILL2(gr1,152)
    0| 0007CC or       7F36CB78   1     LR        gr22=gr25
    0| 0007D0 add      7EB4EA14   1     A         gr21=gr20,gr29
    0| 0007D4 add      7E84F214   1     A         gr20=gr4,gr30
   18|                              CL.141:
   18| 0007D8 ld       EBA10098   1     L8        gr29=#SPILL2(gr1,152)
    0| 0007DC mtspr    7EE903A6   1     LCTR      ctr=gr23
   18| 0007E0 mulld    7FDDF9D2   1     M         gr30=gr29,gr31
    0| 0007E4 addi     3BFF0001   1     AI        gr31=gr31,1
   18| 0007E8 add      7FDEAA14   1     A         gr30=gr30,gr21
   18| 0007EC or       7EDDB378   1     LR        gr29=gr22
   18| 0007F0 add      7FD4F214   1     A         gr30=gr20,gr30
   18| 0007F4 lfsux    7C1E2C6E   1     LFSU      fp0,gr30=in[](gr30,gr5,0)
    0| 0007F8 bc       42400018   1     BCF       ctr=CL.511,taken=0%(0,100)
    0| 0007FC ori      60210000   1     XNOP      
    0|                              CL.512:
   18| 000800 lfsux    7C3E2C6E   1     LFSU      fp1,gr30=in[](gr30,gr5,0)
   18| 000804 stfsux   7C1D456E   1     STFSU     gr29,out[](gr29,gr8,0)=fp0
    0| 000808 fmr      FC000890   1     LRFL      fp0=fp1
    0| 00080C bc       4200FFF4   1     BCT       ctr=CL.512,taken=100%(100,0)
    0|                              CL.511:
    0| 000810 ld       EBC10088   1     L8        gr30=#SPILL0(gr1,136)
   18| 000814 stfsux   7C1D456E   1     STFSU     gr29,out[](gr29,gr8,0)=fp0
   18| 000818 cmpld    7FBFD040   1     CL8       cr7=gr31,gr26
    0| 00081C add      7ED6F214   1     A         gr22=gr22,gr30
   18| 000820 bc       419CFFB8   1     BT        CL.141,cr7,0x8/llt,taken=80%(80,20)
   18|                              CL.144:
   18| 000824 addi     398C0001   1     AI        gr12=gr12,1
    0| 000828 add      7F2ACA14   1     A         gr25=gr10,gr25
   18| 00082C cmpd     7FAC1800   1     C8        cr7=gr12,gr3
   18| 000830 bc       419CFF74   1     BT        CL.140,cr7,0x1/lt,taken=80%(80,20)
   18|                              CL.145:
   18| 000834 bc       40950100   1     BF        CL.130,cr5,0x2/gt,taken=50%(0,0)
   18| 000838 ld       EBC60050   1     L8        gr30=d-out_1%bounds%extent[](gr6,80)
   18| 00083C ld       EBE60048   1     L8        gr31=d-out_1%bounds%lbound[](gr6,72)
   18| 000840 or       7C6C1B78   1     LR        gr12=gr3
   18| 000844 neg      7FBE00D0   1     COMP      gr29=gr30
   18| 000848 add      7FFEFA14   1     A         gr31=gr30,gr31
   18| 00084C or       7FDEEB78   1     O         gr30=gr30,gr29
   18| 000850 addi     3BFFFFFF   1     AI        gr31=gr31,-1
   18| 000854 sradi    7FDEFE76   1     SRA8      gr30=gr30,63,ca"
   18| 000858 and      7FDEF838   1     N         gr30=gr30,gr31
   18| 00085C sradi    7FDF0E74   1     SRA8CA    gr31,ca=gr30,1
   18| 000860 cmpdi    2FBE0000   1     C8        cr7=gr30,0
   18| 000864 addze    7FFF0194   1     ADDE      gr31,ca=gr31,0,ca
   18| 000868 rldicr   7BFF0FA4   1     SLL8      gr31=gr31,1
   18| 00086C subf     7F5FF051   1     S_R       gr26,cr0=gr30,gr31
   18| 000870 crand    4C3D0A02   1     CR_N      cr0=cr[70],0x2/gt,0x2/gt,0x2/gt,cr0
    0| 000874 bc       408100C0   1     BF        CL.130,cr0,0x2/gt,taken=20%(20,80)
    0| 000878 ld       EBC60068   1     L8        gr30=d-out_1%bounds%extent[](gr6,104)
    0| 00087C ld       EBE60060   1     L8        gr31=d-out_1%bounds%lbound[](gr6,96)
    0| 000880 or       7E799B78   1     LR        gr25=gr19
    0| 000884 addi     3B070001   1     AI        gr24=gr7,1
    0| 000888 neg      7FBE00D0   1     COMP      gr29=gr30
    0| 00088C add      7FFEFA14   1     A         gr31=gr30,gr31
    0| 000890 or       7FDEEB78   1     O         gr30=gr30,gr29
    0| 000894 sradi    7FDEFE76   1     SRA8      gr30=gr30,63,ca"
    0| 000898 addi     3BFFFFFF   1     AI        gr31=gr31,-1
    0| 00089C and      7FF7F039   1     N_R       gr23,cr0=gr31,gr30
   18|                              CL.125:
   18| 0008A0 addi     3BE00000   1     LI        gr31=0
    0| 0008A4 bc       40810080   1     BF        CL.149,cr0,0x2/gt,taken=50%(0,0)
    0| 0008A8 ld       EAC100A0   1     L8        gr22=#SPILL3(gr1,160)
    0| 0008AC ld       EAA10090   1     L8        gr21=#SPILL1(gr1,144)
    0| 0008B0 addi     3BAC0001   1     AI        gr29=gr12,1
    0| 0008B4 ld       EA8100A8   1     L8        gr20=#SPILL4(gr1,168)
    0| 0008B8 mulld    7FD6C1D2   1     M         gr30=gr22,gr24
    0| 0008BC mulld    7FB5E9D2   1     M         gr29=gr21,gr29
    0| 0008C0 add      7FD4F214   1     A         gr30=gr20,gr30
    0| 0008C4 ld       EA810098   1     L8        gr20=#SPILL2(gr1,152)
    0| 0008C8 or       7F36CB78   1     LR        gr22=gr25
    0| 0008CC add      7EB4EA14   1     A         gr21=gr20,gr29
    0| 0008D0 add      7E84F214   1     A         gr20=gr4,gr30
   18|                              CL.146:
   18| 0008D4 ld       EBA10098   1     L8        gr29=#SPILL2(gr1,152)
    0| 0008D8 mtspr    7EE903A6   1     LCTR      ctr=gr23
   18| 0008DC mulld    7FDDF9D2   1     M         gr30=gr29,gr31
    0| 0008E0 addi     3BFF0001   1     AI        gr31=gr31,1
   18| 0008E4 add      7FDEAA14   1     A         gr30=gr30,gr21
   18| 0008E8 or       7EDDB378   1     LR        gr29=gr22
   18| 0008EC add      7FD4F214   1     A         gr30=gr20,gr30
   18| 0008F0 lfsux    7C1E2C6E   1     LFSU      fp0,gr30=in[](gr30,gr5,0)
    0| 0008F4 bc       4240001C   1     BCF       ctr=CL.513,taken=0%(0,100)
    0| 0008F8 ori      60210000   1     XNOP      
    0| 0008FC ori      60210000   1     XNOP      
    0|                              CL.514:
   18| 000900 lfsux    7C3E2C6E   1     LFSU      fp1,gr30=in[](gr30,gr5,0)
   18| 000904 stfsux   7C1D456E   1     STFSU     gr29,out[](gr29,gr8,0)=fp0
    0| 000908 fmr      FC000890   1     LRFL      fp0=fp1
    0| 00090C bc       4200FFF4   1     BCT       ctr=CL.514,taken=100%(100,0)
    0|                              CL.513:
    0| 000910 ld       EBC10088   1     L8        gr30=#SPILL0(gr1,136)
   18| 000914 stfsux   7C1D456E   1     STFSU     gr29,out[](gr29,gr8,0)=fp0
   18| 000918 cmpd     7FBFD000   1     C8        cr7=gr31,gr26
    0| 00091C add      7ED6F214   1     A         gr22=gr22,gr30
   18| 000920 bc       419CFFB4   1     BT        CL.146,cr7,0x1/lt,taken=80%(80,20)
   18|                              CL.149:
   18| 000924 addi     398C0001   1     AI        gr12=gr12,1
    0| 000928 add      7F2ACA14   1     A         gr25=gr10,gr25
   18| 00092C cmpld    7FACD840   1     CL8       cr7=gr12,gr27
   18| 000930 bc       419CFF70   1     BT        CL.125,cr7,0x8/llt,taken=80%(80,20)
   18|                              CL.130:
   18| 000934 addi     38E70001   1     AI        gr7=gr7,1
    0| 000938 add      7F89E214   1     A         gr28=gr9,gr28
   18| 00093C cmpld    7C270040   1     CL8       cr0=gr7,gr0
    0| 000940 add      7E699A14   1     A         gr19=gr9,gr19
   18| 000944 bc       4180FE0C   1     BT        CL.124,cr0,0x8/llt,taken=80%(80,20)
   18| 000948 bc       408504F0   1     BF        CL.156,cr1,0x2/gt,taken=30%(30,70)
   18| 00094C addi     3811FFFF   1     AI        gr0=gr17,-1
   18| 000950 addi     39800000   1     LI        gr12=0
   18| 000954 sradi    7C070E74   1     SRA8CA    gr7,ca=gr0,1
   18| 000958 std      F98100B0   1     ST8       #SPILL5(gr1,176)=gr12
    0| 00095C addi     380FFFFF   1     AI        gr0=gr15,-1
   18| 000960 addze    7CE70194   1     ADDE      gr7,ca=gr7,0,ca
    0| 000964 bc       409504D4   1     BF        CL.156,cr5,0x2/gt,taken=20%(20,80)
    0| 000968 ld       E9860050   1     L8        gr12=d-out_1%bounds%extent[](gr6,80)
    0| 00096C add      7FEE8214   1     A         gr31=gr14,gr16
    0| 000970 ld       EB610088   1     L8        gr27=#SPILL0(gr1,136)
    0| 000974 add      7FB2FA14   1     A         gr29=gr18,gr31
    0| 000978 addi     3BC30002   1     AI        gr30=gr3,2
    0| 00097C std      FBA100C0   1     ST8       #SPILL7(gr1,192)=gr29
    0| 000980 std      FBC100B8   1     ST8       #SPILL6(gr1,184)=gr30
    0| 000984 neg      7FEC00D0   1     COMP      gr31=gr12
    0| 000988 add      7F5BEA14   1     A         gr26=gr27,gr29
    0| 00098C or       7D9FFB78   1     O         gr31=gr12,gr31
    0| 000990 std      FB4100D0   1     ST8       #SPILL9(gr1,208)=gr26
    0| 000994 sradi    7FFFFE76   1     SRA8      gr31=gr31,63,ca"
    0| 000998 sradi    7C000E74   1     SRA8CA    gr0,ca=gr0,1
    0| 00099C and      7D98F839   1     N_R       gr24,cr0=gr12,gr31
    0| 0009A0 std      FB0100E0   1     ST8       #SPILL11(gr1,224)=gr24
    0| 0009A4 addze    7EE00194   1     ADDE      gr23,ca=gr0,0,ca
    0| 0009A8 sradi    7F000E74   1     SRA8CA    gr0,ca=gr24,1
    0| 0009AC std      FAE100E8   1     ST8       #SPILL12(gr1,232)=gr23
    0| 0009B0 addze    7C000194   1     ADDE      gr0,ca=gr0,0,ca
    0| 0009B4 add      7F2AD214   1     A         gr25=gr10,gr26
    0| 0009B8 add      7ECAEA14   1     A         gr22=gr10,gr29
    0| 0009BC std      FB2100D8   1     ST8       #SPILL10(gr1,216)=gr25
    0| 0009C0 std      FAC100F0   1     ST8       #SPILL13(gr1,240)=gr22
    0| 0009C4 rldicr   78000FA4   1     SLL8      gr0=gr0,1
    0| 0009C8 addi     3B8B0002   1     AI        gr28=gr11,2
    0| 0009CC addi     3AA30001   1     AI        gr21=gr3,1
    0| 0009D0 std      FB8100C8   1     ST8       #SPILL8(gr1,200)=gr28
    0| 0009D4 std      FAA100F8   1     ST8       #SPILL14(gr1,248)=gr21
    0| 0009D8 subf     7C60C050   1     S         gr3=gr24,gr0
    0| 0009DC addi     3A8B0001   1     AI        gr20=gr11,1
    0| 0009E0 std      F8610100   1     ST8       #SPILL15(gr1,256)=gr3
    0| 0009E4 std      FA810108   1     ST8       #SPILL16(gr1,264)=gr20
    0| 0009E8 rldicr   794B0FA4   1     SLL8      gr11=gr10,1
    0| 0009EC rldicr   792A0FA4   1     SLL8      gr10=gr9,1
    0| 0009F0 std      F9610110   1     ST8       #SPILL17(gr1,272)=gr11
    0| 0009F4 std      F9410118   1     ST8       #SPILL18(gr1,280)=gr10
    0| 0009F8 add      7E69CA14   1     A         gr19=gr9,gr25
    0| 0009FC add      7E49D214   1     A         gr18=gr9,gr26
    0| 000A00 std      FA610120   1     ST8       #SPILL19(gr1,288)=gr19
    0| 000A04 add      7E29B214   1     A         gr17=gr9,gr22
    0| 000A08 std      FA410128   1     ST8       #SPILL20(gr1,296)=gr18
    0| 000A0C add      7E09EA14   1     A         gr16=gr9,gr29
    0| 000A10 addi     39270001   1     AI        gr9=gr7,1
    0| 000A14 std      FA210130   1     ST8       #SPILL21(gr1,304)=gr17
    0| 000A18 std      FA010138   1     ST8       #SPILL22(gr1,312)=gr16
    0| 000A1C cror     4CA10B82   1     CR_O      cr1=cr[00],0x2/gt,0x2/gt,0x2/gt,cr1
    0| 000A20 std      F9210140   1     ST8       #SPILL23(gr1,320)=gr9
    0| 000A24 cmpd     7FB81800   1     C8        cr7=gr24,gr3
    0| 000A28 rldicr   7B600FA4   1     SLL8      gr0=gr27,1
   18|                              CL.117:
   18| 000A2C addi     38600000   1     LI        gr3=0
   18| 000A30 crand    4C25EA02   1     CR_N      cr0=cr[17],0x2/gt,0x2/gt,0x2/gt,cr0
   18| 000A34 std      F8610148   1     ST8       #SPILL24(gr1,328)=gr3
    0| 000A38 bc       40810384   1     BF        CL.118,cr0,0x2/gt,taken=20%(20,80)
    0| 000A3C ld       EBE10100   1     L8        gr31=#SPILL15(gr1,256)
    0| 000A40 ld       EBC10088   1     L8        gr30=#SPILL0(gr1,136)
    0| 000A44 ld       E98100E0   1     L8        gr12=#SPILL11(gr1,224)
    0| 000A48 ld       E8660068   1     L8        gr3=d-out_1%bounds%extent[](gr6,104)
    0| 000A4C ld       E9660060   1     L8        gr11=d-out_1%bounds%lbound[](gr6,96)
    0| 000A50 ld       EBA100B0   1     L8        gr29=#SPILL5(gr1,176)
    0| 000A54 ld       EB8100C8   1     L8        gr28=#SPILL8(gr1,200)
    0| 000A58 mulld    7D5EF9D2   1     M         gr10=gr30,gr31
    0| 000A5C subf     7CFF6050   1     S         gr7=gr12,gr31
    0| 000A60 ld       EB010108   1     L8        gr24=#SPILL16(gr1,264)
    0| 000A64 ld       E9C100F0   1     L8        gr14=#SPILL13(gr1,240)
    0| 000A68 ld       E98100D0   1     L8        gr12=#SPILL9(gr1,208)
    0| 000A6C neg      7D2300D0   1     COMP      gr9=gr3
    0| 000A70 ld       EA010138   1     L8        gr16=#SPILL22(gr1,312)
    0| 000A74 or       7C694B78   1     O         gr9=gr3,gr9
    0| 000A78 add      7C635A14   1     A         gr3=gr3,gr11
    0| 000A7C rldicr   7BAB0FA4   1     SLL8      gr11=gr29,1
    0| 000A80 ld       EAC100D8   1     L8        gr22=#SPILL10(gr1,216)
    0| 000A84 add      7F6BE214   1     A         gr27=gr11,gr28
    0| 000A88 add      7EEBC214   1     A         gr23=gr11,gr24
    0| 000A8C std      FB610150   1     ST8       #SPILL25(gr1,336)=gr27
    0| 000A90 std      FAE10168   1     ST8       #SPILL28(gr1,360)=gr23
    0| 000A94 add      7D6A7214   1     A         gr11=gr10,gr14
    0| 000A98 add      7DCA6214   1     A         gr14=gr10,gr12
    0| 000A9C std      F9610190   1     ST8       #SPILL33(gr1,400)=gr11
    0| 000AA0 std      F9C10198   1     ST8       #SPILL34(gr1,408)=gr14
    0| 000AA4 ld       E98100C0   1     L8        gr12=#SPILL7(gr1,192)
    0| 000AA8 ld       EA810130   1     L8        gr20=#SPILL21(gr1,304)
    0| 000AAC ld       EA410128   1     L8        gr18=#SPILL20(gr1,296)
    0| 000AB0 add      7DEA8214   1     A         gr15=gr10,gr16
    0| 000AB4 add      7EAAB214   1     A         gr21=gr10,gr22
    0| 000AB8 std      F9E10188   1     ST8       #SPILL32(gr1,392)=gr15
    0| 000ABC std      FAA10170   1     ST8       #SPILL29(gr1,368)=gr21
    0| 000AC0 add      7E0A6214   1     A         gr16=gr10,gr12
    0| 000AC4 ld       E9810120   1     L8        gr12=#SPILL19(gr1,288)
    0| 000AC8 std      FA0101A0   1     ST8       #SPILL35(gr1,416)=gr16
    0| 000ACC add      7E6AA214   1     A         gr19=gr10,gr20
    0| 000AD0 add      7E2A9214   1     A         gr17=gr10,gr18
    0| 000AD4 std      FA610178   1     ST8       #SPILL30(gr1,376)=gr19
    0| 000AD8 std      FA210180   1     ST8       #SPILL31(gr1,384)=gr17
    0| 000ADC add      7D4A6214   1     A         gr10=gr10,gr12
    0| 000AE0 ld       E98100E8   1     L8        gr12=#SPILL12(gr1,232)
    0| 000AE4 std      F94101A8   1     ST8       #SPILL36(gr1,424)=gr10
    0| 000AE8 addi     38E7FFFF   1     AI        gr7=gr7,-1
    0| 000AEC sradi    7D29FE76   1     SRA8      gr9=gr9,63,ca"
    0| 000AF0 sradi    7CE70E74   1     SRA8CA    gr7,ca=gr7,1
    0| 000AF4 addi     3863FFFF   1     AI        gr3=gr3,-1
    0| 000AF8 addi     3B5F0002   1     AI        gr26=gr31,2
    0| 000AFC addi     3B3F0001   1     AI        gr25=gr31,1
    0| 000B00 std      FB410158   1     ST8       #SPILL26(gr1,344)=gr26
    0| 000B04 std      FB210160   1     ST8       #SPILL27(gr1,352)=gr25
    0| 000B08 addi     3A4C0001   1     AI        gr18=gr12,1
    0| 000B0C addze    7CE70194   1     ADDE      gr7,ca=gr7,0,ca
    0| 000B10 std      FA4101B0   1     ST8       #SPILL37(gr1,432)=gr18
    0| 000B14 std      F8E101B8   1     ST8       #SPILL38(gr1,440)=gr7
    0| 000B18 and      7C634839   1     N_R       gr3,cr0=gr3,gr9
    0| 000B1C std      F86101C0   1     ST8       #SPILL39(gr1,448)=gr3
   18|                              CL.119:
    0| 000B20 ld       E9610098   1     L8        gr11=#SPILL2(gr1,152)
    0| 000B24 ld       E9810160   1     L8        gr12=#SPILL27(gr1,352)
    0| 000B28 ld       EB8100A0   1     L8        gr28=#SPILL3(gr1,160)
    0| 000B2C ld       EB610168   1     L8        gr27=#SPILL28(gr1,360)
    0| 000B30 ld       EB210158   1     L8        gr25=#SPILL26(gr1,344)
    0| 000B34 ld       EAE10150   1     L8        gr23=#SPILL25(gr1,336)
    0| 000B38 ld       E9410148   1     L8        gr10=#SPILL24(gr1,328)
    0| 000B3C mulld    7FEB61D2   1     M         gr31=gr11,gr12
    0| 000B40 ld       EBC100B8   1     L8        gr30=#SPILL6(gr1,184)
    0| 000B44 std      FBE101C8   1     ST8       #SPILL40(gr1,456)=gr31
    0| 000B48 ld       EBA100F8   1     L8        gr29=#SPILL14(gr1,248)
    0| 000B4C mulld    7F5BE1D2   1     M         gr26=gr27,gr28
    0| 000B50 mulld    7F0BC9D2   1     M         gr24=gr11,gr25
    0| 000B54 std      FB4101D0   1     ST8       #SPILL41(gr1,464)=gr26
    0| 000B58 std      FB0101D8   1     ST8       #SPILL42(gr1,472)=gr24
    0| 000B5C mulld    7ED7E1D2   1     M         gr22=gr23,gr28
    0| 000B60 rldicr   79430FA4   1     SLL8      gr3=gr10,1
    0| 000B64 std      FAC101E0   1     ST8       #SPILL43(gr1,480)=gr22
    0| 000B68 add      7CE3F214   1     A         gr7=gr3,gr30
    0| 000B6C add      7D23EA14   1     A         gr9=gr3,gr29
   18| 000B70 addi     38600000   1     LI        gr3=0
    0| 000B74 bc       408101CC   1     BF        CL.120,cr0,0x2/gt,taken=20%(20,80)
    0| 000B78 ld       E94101B8   1     L8        gr10=#SPILL38(gr1,440)
    0| 000B7C ld       EAA101A8   1     L8        gr21=#SPILL36(gr1,424)
    0| 000B80 add      7EF6FA14   1     A         gr23=gr22,gr31
    0| 000B84 add      7ED8D214   1     A         gr22=gr24,gr26
    0| 000B88 std      FAE10218   1     ST8       #SPILL50(gr1,536)=gr23
    0| 000B8C std      FAC10220   1     ST8       #SPILL51(gr1,544)=gr22
    0| 000B90 addi     398A0001   1     AI        gr12=gr10,1
    0| 000B94 std      FAA101E8   1     ST8       #SPILL44(gr1,488)=gr21
    0| 000B98 std      F98101F0   1     ST8       #SPILL45(gr1,496)=gr12
    0| 000B9C ld       E9410090   1     L8        gr10=#SPILL1(gr1,144)
    0| 000BA0 rldicr   79780FA4   1     SLL8      gr24=gr11,1
    0| 000BA4 ld       EA810180   1     L8        gr20=#SPILL31(gr1,384)
    0| 000BA8 std      FB010228   1     ST8       #SPILL52(gr1,552)=gr24
    0| 000BAC ld       EA610190   1     L8        gr19=#SPILL33(gr1,400)
    0| 000BB0 ld       EA410170   1     L8        gr18=#SPILL29(gr1,368)
    0| 000BB4 mulld    7D2951D2   1     M         gr9=gr9,gr10
    0| 000BB8 mulld    7CE751D2   1     M         gr7=gr7,gr10
    0| 000BBC std      F92101F8   1     ST8       #SPILL46(gr1,504)=gr9
    0| 000BC0 ld       E94100A8   1     L8        gr10=#SPILL4(gr1,168)
    0| 000BC4 std      F8E10200   1     ST8       #SPILL47(gr1,512)=gr7
    0| 000BC8 ld       EA210178   1     L8        gr17=#SPILL30(gr1,376)
    0| 000BCC ld       EA010198   1     L8        gr16=#SPILL34(gr1,408)
    0| 000BD0 ld       E9E101A0   1     L8        gr15=#SPILL35(gr1,416)
    0| 000BD4 ld       E9C10188   1     L8        gr14=#SPILL32(gr1,392)
    0| 000BD8 add      7EA45214   1     A         gr21=gr4,gr10
    0| 000BDC add      7D5AFA14   1     A         gr10=gr26,gr31
    0| 000BE0 std      FAA10208   1     ST8       #SPILL48(gr1,520)=gr21
    0| 000BE4 std      F9410210   1     ST8       #SPILL49(gr1,528)=gr10
    0| 000BE8 ori      60210000   1     XNOP      
    0| 000BEC ori      60210000   1     XNOP      
    0| 000BF0 ori      60210000   1     XNOP      
   18|                              CL.121:
   18| 000BF4 ld       EAE10228   1     L8        gr23=#SPILL52(gr1,552)
    0| 000BF8 ld       EAC101C0   1     L8        gr22=#SPILL39(gr1,448)
   18| 000BFC ld       EAA10208   1     L8        gr21=#SPILL48(gr1,520)
   18| 000C00 ld       E96101F8   1     L8        gr11=#SPILL46(gr1,504)
   18| 000C04 ld       E9810200   1     L8        gr12=#SPILL47(gr1,512)
   18| 000C08 ld       EBE10220   1     L8        gr31=#SPILL51(gr1,544)
   18| 000C0C mulld    7CE3B9D2   1     M         gr7=gr3,gr23
    0| 000C10 mtspr    7EC903A6   1     LCTR      ctr=gr22
   18| 000C14 add      7D27AA14   1     A         gr9=gr7,gr21
   18| 000C18 ld       EAA101E0   1     L8        gr21=#SPILL43(gr1,480)
   18| 000C1C ld       EAC101D8   1     L8        gr22=#SPILL42(gr1,472)
   18| 000C20 ld       EAE10210   1     L8        gr23=#SPILL49(gr1,528)
   18| 000C24 ld       EB6101D0   1     L8        gr27=#SPILL41(gr1,464)
   18| 000C28 ld       EB4101C8   1     L8        gr26=#SPILL40(gr1,456)
   18| 000C2C add      7D495A14   1     A         gr10=gr9,gr11
   18| 000C30 add      7FA96214   1     A         gr29=gr9,gr12
   18| 000C34 add      7FCAAA14   1     A         gr30=gr10,gr21
   18| 000C38 add      7F96EA14   1     A         gr28=gr22,gr29
   18| 000C3C add      7D2ABA14   1     A         gr9=gr10,gr23
   18| 000C40 add      7D4AFA14   1     A         gr10=gr10,gr31
   18| 000C44 add      7D77EA14   1     A         gr11=gr23,gr29
   18| 000C48 add      7D9BE214   1     A         gr12=gr27,gr28
   18| 000C4C add      7FFAF214   1     A         gr31=gr26,gr30
   18| 000C50 ld       EB210218   1     L8        gr25=#SPILL50(gr1,536)
   18| 000C54 lfsux    7C092C6E   1     LFSU      fp0,gr9=in[](gr9,gr5,0)
   18| 000C58 lfsux    7C2A2C6E   1     LFSU      fp1,gr10=in[](gr10,gr5,0)
   18| 000C5C lfsux    7C4B2C6E   1     LFSU      fp2,gr11=in[](gr11,gr5,0)
   18| 000C60 lfsux    7C6C2C6E   1     LFSU      fp3,gr12=in[](gr12,gr5,0)
   18| 000C64 lfsux    7C9F2C6E   1     LFSU      fp4,gr31=in[](gr31,gr5,0)
   18| 000C68 or       7DE77B78   1     LR        gr7=gr15
   18| 000C6C add      7FD6F214   1     A         gr30=gr22,gr30
   18| 000C70 add      7FB9EA14   1     A         gr29=gr25,gr29
   18| 000C74 stfsux   7C07456E   1     STFSU     gr7,out[](gr7,gr8,0)=fp0
   18| 000C78 add      7F95E214   1     A         gr28=gr21,gr28
   18| 000C7C or       7E1B8378   1     LR        gr27=gr16
   18| 000C80 or       7E7A9B78   1     LR        gr26=gr19
   18| 000C84 stfsux   7C3B456E   1     STFSU     gr27,out[](gr27,gr8,0)=fp1
   18| 000C88 stfsux   7C5A456E   1     STFSU     gr26,out[](gr26,gr8,0)=fp2
   18| 000C8C or       7E599378   1     LR        gr25=gr18
   18| 000C90 or       7DD87378   1     LR        gr24=gr14
   18| 000C94 stfsux   7C79456E   1     STFSU     gr25,out[](gr25,gr8,0)=fp3
   18| 000C98 stfsux   7C98456E   1     STFSU     gr24,out[](gr24,gr8,0)=fp4
   18| 000C9C lfsux    7C1E2C6E   1     LFSU      fp0,gr30=in[](gr30,gr5,0)
   18| 000CA0 lfsux    7C3D2C6E   1     LFSU      fp1,gr29=in[](gr29,gr5,0)
   18| 000CA4 lfsux    7C5C2C6E   1     LFSU      fp2,gr28=in[](gr28,gr5,0)
   18| 000CA8 or       7E97A378   1     LR        gr23=gr20
   18| 000CAC or       7E368B78   1     LR        gr22=gr17
   18| 000CB0 ld       EAA101E8   1     L8        gr21=#SPILL44(gr1,488)
    0| 000CB4 bc       42400048   1     BCF       ctr=CL.515,taken=0%(0,100)
    0|                              CL.516:
   18| 000CB8 lfsux    7C692C6E   1     LFSU      fp3,gr9=in[](gr9,gr5,0)
   18| 000CBC stfsux   7C17456E   1     STFSU     gr23,out[](gr23,gr8,0)=fp0
   18| 000CC0 stfsux   7C36456E   1     STFSU     gr22,out[](gr22,gr8,0)=fp1
   18| 000CC4 lfsux    7C8A2C6E   1     LFSU      fp4,gr10=in[](gr10,gr5,0)
   18| 000CC8 stfsux   7C55456E   1     STFSU     gr21,out[](gr21,gr8,0)=fp2
   18| 000CCC lfsux    7C4B2C6E   1     LFSU      fp2,gr11=in[](gr11,gr5,0)
   18| 000CD0 lfsux    7CAC2C6E   1     LFSU      fp5,gr12=in[](gr12,gr5,0)
   18| 000CD4 lfsux    7CDF2C6E   1     LFSU      fp6,gr31=in[](gr31,gr5,0)
   18| 000CD8 lfsux    7C1E2C6E   1     LFSU      fp0,gr30=in[](gr30,gr5,0)
   18| 000CDC lfsux    7C3D2C6E   1     LFSU      fp1,gr29=in[](gr29,gr5,0)
   18| 000CE0 stfsux   7C67456E   1     STFSU     gr7,out[](gr7,gr8,0)=fp3
   18| 000CE4 stfsux   7C9B456E   1     STFSU     gr27,out[](gr27,gr8,0)=fp4
   18| 000CE8 stfsux   7C5A456E   1     STFSU     gr26,out[](gr26,gr8,0)=fp2
   18| 000CEC lfsux    7C5C2C6E   1     LFSU      fp2,gr28=in[](gr28,gr5,0)
   18| 000CF0 stfsux   7CB9456E   1     STFSU     gr25,out[](gr25,gr8,0)=fp5
   18| 000CF4 stfsux   7CD8456E   1     STFSU     gr24,out[](gr24,gr8,0)=fp6
    0| 000CF8 bc       4200FFC0   1     BCT       ctr=CL.516,taken=100%(100,0)
    0|                              CL.515:
   18| 000CFC ld       E8E101F0   1     L8        gr7=#SPILL45(gr1,496)
    0| 000D00 ld       E92101E8   1     L8        gr9=#SPILL44(gr1,488)
   18| 000D04 addi     38630001   1     AI        gr3=gr3,1
   18| 000D08 stfsux   7C17456E   1     STFSU     gr23,out[](gr23,gr8,0)=fp0
   18| 000D0C stfsux   7C36456E   1     STFSU     gr22,out[](gr22,gr8,0)=fp1
   18| 000D10 stfsux   7C55456E   1     STFSU     gr21,out[](gr21,gr8,0)=fp2
   18| 000D14 cmpld    7F233840   1     CL8       cr6=gr3,gr7
    0| 000D18 add      7D204A14   1     A         gr9=gr0,gr9
    0| 000D1C add      7E80A214   1     A         gr20=gr0,gr20
    0| 000D20 std      F92101E8   1     ST8       #SPILL44(gr1,488)=gr9
    0| 000D24 add      7E609A14   1     A         gr19=gr0,gr19
    0| 000D28 add      7E409214   1     A         gr18=gr0,gr18
    0| 000D2C add      7E208A14   1     A         gr17=gr0,gr17
    0| 000D30 add      7E008214   1     A         gr16=gr0,gr16
    0| 000D34 add      7DE07A14   1     A         gr15=gr0,gr15
    0| 000D38 add      7DC07214   1     A         gr14=gr0,gr14
   18| 000D3C bc       4198FEB8   1     BT        CL.121,cr6,0x8/llt,taken=80%(80,20)
   18|                              CL.120:
   18| 000D40 ld       E8610148   1     L8        gr3=#SPILL24(gr1,328)
    0| 000D44 ld       E8E10110   1     L8        gr7=#SPILL17(gr1,272)
    0| 000D48 ld       E9210170   1     L8        gr9=#SPILL29(gr1,368)
   18| 000D4C ld       E94101B0   1     L8        gr10=#SPILL37(gr1,432)
    0| 000D50 ld       E9610178   1     L8        gr11=#SPILL30(gr1,376)
    0| 000D54 ld       E9810180   1     L8        gr12=#SPILL31(gr1,384)
    0| 000D58 ld       EBE10188   1     L8        gr31=#SPILL32(gr1,392)
    0| 000D5C ld       EBC10190   1     L8        gr30=#SPILL33(gr1,400)
    0| 000D60 ld       EBA10198   1     L8        gr29=#SPILL34(gr1,408)
    0| 000D64 ld       EB8101A0   1     L8        gr28=#SPILL35(gr1,416)
    0| 000D68 ld       EB6101A8   1     L8        gr27=#SPILL36(gr1,424)
   18| 000D6C addi     38630001   1     AI        gr3=gr3,1
    0| 000D70 add      7D274A14   1     A         gr9=gr7,gr9
   18| 000D74 std      F8610148   1     ST8       #SPILL24(gr1,328)=gr3
    0| 000D78 std      F9210170   1     ST8       #SPILL29(gr1,368)=gr9
   18| 000D7C cmpld    7F235040   1     CL8       cr6=gr3,gr10
    0| 000D80 add      7D675A14   1     A         gr11=gr7,gr11
    0| 000D84 add      7D876214   1     A         gr12=gr7,gr12
    0| 000D88 std      F9610178   1     ST8       #SPILL30(gr1,376)=gr11
    0| 000D8C std      F9810180   1     ST8       #SPILL31(gr1,384)=gr12
    0| 000D90 add      7FE7FA14   1     A         gr31=gr7,gr31
    0| 000D94 add      7FC7F214   1     A         gr30=gr7,gr30
    0| 000D98 std      FBE10188   1     ST8       #SPILL32(gr1,392)=gr31
    0| 000D9C std      FBC10190   1     ST8       #SPILL33(gr1,400)=gr30
    0| 000DA0 add      7FA7EA14   1     A         gr29=gr7,gr29
    0| 000DA4 add      7F87E214   1     A         gr28=gr7,gr28
    0| 000DA8 std      FBA10198   1     ST8       #SPILL34(gr1,408)=gr29
    0| 000DAC std      FB8101A0   1     ST8       #SPILL35(gr1,416)=gr28
    0| 000DB0 add      7F67DA14   1     A         gr27=gr7,gr27
    0| 000DB4 std      FB6101A8   1     ST8       #SPILL36(gr1,424)=gr27
   18| 000DB8 bc       4198FD68   1     BT        CL.119,cr6,0x8/llt,taken=80%(80,20)
   18|                              CL.118:
   18| 000DBC ld       E86100B0   1     L8        gr3=#SPILL5(gr1,176)
    0| 000DC0 ld       E8E10118   1     L8        gr7=#SPILL18(gr1,280)
    0| 000DC4 ld       E9210120   1     L8        gr9=#SPILL19(gr1,288)
   18| 000DC8 ld       E9410140   1     L8        gr10=#SPILL23(gr1,320)
    0| 000DCC ld       E9610128   1     L8        gr11=#SPILL20(gr1,296)
    0| 000DD0 ld       E98100F0   1     L8        gr12=#SPILL13(gr1,240)
    0| 000DD4 ld       EBE10130   1     L8        gr31=#SPILL21(gr1,304)
    0| 000DD8 ld       EBC100D8   1     L8        gr30=#SPILL10(gr1,216)
    0| 000DDC ld       EBA100C0   1     L8        gr29=#SPILL7(gr1,192)
    0| 000DE0 ld       EB810138   1     L8        gr28=#SPILL22(gr1,312)
    0| 000DE4 ld       EB6100D0   1     L8        gr27=#SPILL9(gr1,208)
   18| 000DE8 addi     38630001   1     AI        gr3=gr3,1
    0| 000DEC add      7D274A14   1     A         gr9=gr7,gr9
   18| 000DF0 std      F86100B0   1     ST8       #SPILL5(gr1,176)=gr3
    0| 000DF4 std      F9210120   1     ST8       #SPILL19(gr1,288)=gr9
   18| 000DF8 cmpld    7F235040   1     CL8       cr6=gr3,gr10
    0| 000DFC add      7D675A14   1     A         gr11=gr7,gr11
    0| 000E00 add      7D876214   1     A         gr12=gr7,gr12
    0| 000E04 std      F9610128   1     ST8       #SPILL20(gr1,296)=gr11
    0| 000E08 std      F98100F0   1     ST8       #SPILL13(gr1,240)=gr12
    0| 000E0C add      7FE7FA14   1     A         gr31=gr7,gr31
    0| 000E10 add      7FC7F214   1     A         gr30=gr7,gr30
    0| 000E14 std      FBE10130   1     ST8       #SPILL21(gr1,304)=gr31
    0| 000E18 std      FBC100D8   1     ST8       #SPILL10(gr1,216)=gr30
    0| 000E1C add      7FA7EA14   1     A         gr29=gr7,gr29
    0| 000E20 add      7F87E214   1     A         gr28=gr7,gr28
    0| 000E24 std      FBA100C0   1     ST8       #SPILL7(gr1,192)=gr29
    0| 000E28 std      FB810138   1     ST8       #SPILL22(gr1,312)=gr28
    0| 000E2C add      7F67DA14   1     A         gr27=gr7,gr27
    0| 000E30 std      FB6100D0   1     ST8       #SPILL9(gr1,208)=gr27
   18| 000E34 bc       4198FBF8   1     BT        CL.117,cr6,0x8/llt,taken=80%(80,20)
   20|                              CL.156:
   20| 000E38 ld       E9C10250   1     L8        gr14=#stack(gr1,592)
   20| 000E3C ld       E9E10258   1     L8        gr15=#stack(gr1,600)
   20| 000E40 ld       EA010260   1     L8        gr16=#stack(gr1,608)
   20| 000E44 ld       EA210268   1     L8        gr17=#stack(gr1,616)
   20| 000E48 ld       EA410270   1     L8        gr18=#stack(gr1,624)
   20| 000E4C ld       EA610278   1     L8        gr19=#stack(gr1,632)
   20| 000E50 ld       EA810280   1     L8        gr20=#stack(gr1,640)
   20| 000E54 ld       EAA10288   1     L8        gr21=#stack(gr1,648)
   20| 000E58 ld       EAC10290   1     L8        gr22=#stack(gr1,656)
   20| 000E5C ld       EAE10298   1     L8        gr23=#stack(gr1,664)
   20| 000E60 ld       EB0102A0   1     L8        gr24=#stack(gr1,672)
   20| 000E64 ld       EB2102A8   1     L8        gr25=#stack(gr1,680)
   20| 000E68 ld       EB4102B0   1     L8        gr26=#stack(gr1,688)
   20| 000E6C ld       EB6102B8   1     L8        gr27=#stack(gr1,696)
   20| 000E70 ld       EB8102C0   1     L8        gr28=#stack(gr1,704)
   20| 000E74 ld       EBA102C8   1     L8        gr29=#stack(gr1,712)
   20| 000E78 ld       EBC102D0   1     L8        gr30=#stack(gr1,720)
   20| 000E7C ld       EBE102D8   1     L8        gr31=#stack(gr1,728)
   20| 000E80 addi     382102E0   1     AI        gr1=gr1,736
   20| 000E84 bclr     4E800020   1     BA        lr
   18|                              CL.326:
    0| 000E88 mtspr    7D6903A6   1     LCTR      ctr=gr11
   18|                              CL.304:
   18| 000E8C addi     38E70001   1     AI        gr7=gr7,1
   18| 000E90 cmpd     7C275800   1     C8        cr0=gr7,gr11
   18| 000E94 bc       4100FFF8   1     BCTT      ctr=CL.304,cr0,0x1/lt,taken=80%(80,20)
    0| 000E98 b        4BFFF85C   1     B         CL.139,-1
    0|                              CL.652:
   20| 000E9C addi     382102E0   1     AI        gr1=gr1,736
   20| 000EA0 bclr     4E800020   1     BA        lr
     |               Tag Table
     | 000EA4        00000000 00012200 80120000 000009B4
     |               Instruction count          621
     |               Straight-line exec time    621
     |               Constant Area
     | 000000        73756273 2E663930 00000000

 
 
>>>>> FILE TABLE SECTION <<<<<
 
 
                                       FILE CREATION        FROM
FILE NO   FILENAME                    DATE       TIME       FILE    LINE
     0    subs.f90                    07/08/15   15:48:58
 
 
>>>>> COMPILATION EPILOGUE SECTION <<<<<
 
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
 
    Source records read.......................................     114
1501-510  Compilation successful for file subs.f90.
1501-543  Object file created.

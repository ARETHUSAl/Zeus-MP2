IBM XL Fortran for Blue Gene, V14.1 (5799-AH1) Version 14.01.0000.0012 --- rshock.f90 07/08/15 15:48:49
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              NODIRECTSTORAG  ESCAPE          I4
         INLGLUE         NOLIBESSL       NOLIBPOSIX      OBJECT
         SWAPOMP         THREADED        UNWIND          ZEROSIZE
  
         ==  Options Of Integer Type ==
         ALIAS_SIZE(65536)     MAXMEM(-1)            OPTIMIZE(3)
         SPILLSIZE(512)        STACKTEMP(0)
  
         ==  Options of Integer and Character Type ==
         CACHE(LEVEL(1),TYPE(I),ASSOC(4),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(I),ASSOC(16),COST(80),LINE(128))
         CACHE(LEVEL(1),TYPE(D),ASSOC(8),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(D),ASSOC(16),COST(80),LINE(128))
         INLINE(NOAUTO,LEVEL(5))
         HOT(FASTMATH,LEVEL(0))
         SIMD(AUTO)
  
         ==  Options Of Character Type  ==
         64()                  ALIAS(STD,NOINTPTR)   ALIGN(BINDC(LINUXPPC),STRUCT(NATURAL))
         ARCH(QP)              AUTODBL(NONE)         DESCRIPTOR(V1)
         DIRECTIVE(IBM*,IBMT)  ENUM()                FLAG(I,I)
         FLOAT(MAF,FOLD,RSQRT,FLTINT)
         FREE(F90)             GNU_VERSION(DOT_TRIPLE)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LIST()                LANGLVL(EXTENDED)     REALSIZE(4)
         REPORT(HOTLIST)       STRICT(NONE,NOPRECISION,NOEXCEPTIONS,NOIEEEFP,NONANS,NOINFINITIES,NOSUBNORMALS,NOZEROSIGNS,NOOPERATIONPRECISION,ORDER,NOLIBRARY,NOCONSTRUCTCOPY,NOVECTORPRECISION)
         TUNE(QP)              UNROLL(AUTO)          XFLAG()
         XLF2003(NOPOLYMORPHIC,NOBOZLITARGS,NOSIGNDZEROINTR,NOSTOPEXCEPT,NOVOLATILE,NOAUTOREALLOC,OLDNANINF)
         XLF2008(NOCHECKPRESENCE)
         XLF77(LEADZERO,BLANKPAD)
         XLF90(SIGNEDZERO,AUTODEALLOC)
  
>>>>> SOURCE SECTION <<<<<
** rshock   === End of Compilation 1 ===
 
>>>>> LOOP TRANSFORMATION SECTION <<<<<

1586-534 (I) Loop (loop index 1) at rshock.f90 <line 55> was not SIMD vectorized because the loop is not the innermost loop.
1586-534 (I) Loop (loop index 2) at rshock.f90 <line 56> was not SIMD vectorized because the loop is not the innermost loop.
1586-540 (I) Loop (loop index 3) at rshock.f90 <line 57> was not SIMD vectorized because it contains memory references ((double *)((char *)d-p%addr  + d-p%rvo))->p[].rns2.[4ll + ($$CIV8 * 4ll + (long long) kn % 4ll)][$$CIV1 + 1ll][$$CIV0 + 1ll] = -1.0000000000000000E+000; with non-vectorizable strides.
1586-540 (I) Loop (loop index 3) at rshock.f90 <line 57> was not SIMD vectorized because it contains memory references ((double *)((char *)d-d%addr  + d-d%rvo))->d[].rns1.[3ll + ($$CIV8 * 4ll + (long long) kn % 4ll)][$$CIV1 + 1ll][$$CIV0 + 1ll] = d0; with non-vectorizable strides.
1586-540 (I) Loop (loop index 3) at rshock.f90 <line 57> was not SIMD vectorized because it contains memory references ((double *)((char *)d-d%addr  + d-d%rvo))->d[].rns1.[4ll + ($$CIV8 * 4ll + (long long) kn % 4ll)][$$CIV1 + 1ll][$$CIV0 + 1ll] = d0; with non-vectorizable strides.
1586-540 (I) Loop (loop index 3) at rshock.f90 <line 57> was not SIMD vectorized because it contains memory references ((double *)((char *)d-p%addr  + d-p%rvo))->p[].rns2.[3ll + ($$CIV8 * 4ll + (long long) kn % 4ll)][$$CIV1 + 1ll][$$CIV0 + 1ll] = -1.0000000000000000E+000; with non-vectorizable strides.
1586-540 (I) Loop (loop index 3) at rshock.f90 <line 57> was not SIMD vectorized because it contains memory references ((double *)((char *)d-d%addr  + d-d%rvo))->d[].rns1.[2ll + ($$CIV8 * 4ll + (long long) kn % 4ll)][$$CIV1 + 1ll][$$CIV0 + 1ll] = d0; with non-vectorizable strides.
1586-540 (I) Loop (loop index 3) at rshock.f90 <line 57> was not SIMD vectorized because it contains memory references ((double *)((char *)d-d%addr  + d-d%rvo))->d[].rns1.[1ll + ($$CIV8 * 4ll + (long long) kn % 4ll)][$$CIV1 + 1ll][$$CIV0 + 1ll] = d0; with non-vectorizable strides.
1586-540 (I) Loop (loop index 3) at rshock.f90 <line 57> was not SIMD vectorized because it contains memory references ((double *)((char *)d-p%addr  + d-p%rvo))->p[].rns2.[2ll + ($$CIV8 * 4ll + (long long) kn % 4ll)][$$CIV1 + 1ll][$$CIV0 + 1ll] = -1.0000000000000000E+000; with non-vectorizable strides.
1586-540 (I) Loop (loop index 3) at rshock.f90 <line 57> was not SIMD vectorized because it contains memory references ((double *)((char *)d-p%addr  + d-p%rvo))->p[].rns2.[1ll + ($$CIV8 * 4ll + (long long) kn % 4ll)][$$CIV1 + 1ll][$$CIV0 + 1ll] = -1.0000000000000000E+000; with non-vectorizable strides.
1586-536 (I) Loop (loop index 3) at rshock.f90 <line 59> was not SIMD vectorized because it contains memory references ((char *)d-p%addr  + d-p%rvo + (d-p%bounds%mult[].off256)*(4ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 3) at rshock.f90 <line 59> was not SIMD vectorized because it contains memory references ((char *)d-p%addr  + d-p%rvo + (d-p%bounds%mult[].off256)*(4ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 3) at rshock.f90 <line 59> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 3) at rshock.f90 <line 59> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-p%addr  + d-p%rvo + (d-p%bounds%mult[].off256)*(4ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)).
1586-536 (I) Loop (loop index 3) at rshock.f90 <line 58> was not SIMD vectorized because it contains memory references ((char *)d-d%addr  + d-d%rvo + (d-d%bounds%mult[].off48)*(3ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 3) at rshock.f90 <line 58> was not SIMD vectorized because it contains memory references ((char *)d-d%addr  + d-d%rvo + (d-d%bounds%mult[].off48)*(3ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 3) at rshock.f90 <line 58> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 3) at rshock.f90 <line 58> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-d%addr  + d-d%rvo + (d-d%bounds%mult[].off48)*(3ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)).
1586-536 (I) Loop (loop index 3) at rshock.f90 <line 58> was not SIMD vectorized because it contains memory references ((char *)d-d%addr  + d-d%rvo + (d-d%bounds%mult[].off48)*(4ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 3) at rshock.f90 <line 58> was not SIMD vectorized because it contains memory references ((char *)d-d%addr  + d-d%rvo + (d-d%bounds%mult[].off48)*(4ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 3) at rshock.f90 <line 58> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 3) at rshock.f90 <line 58> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-d%addr  + d-d%rvo + (d-d%bounds%mult[].off48)*(4ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)).
1586-536 (I) Loop (loop index 3) at rshock.f90 <line 59> was not SIMD vectorized because it contains memory references ((char *)d-p%addr  + d-p%rvo + (d-p%bounds%mult[].off256)*(3ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 3) at rshock.f90 <line 59> was not SIMD vectorized because it contains memory references ((char *)d-p%addr  + d-p%rvo + (d-p%bounds%mult[].off256)*(3ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 3) at rshock.f90 <line 59> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 3) at rshock.f90 <line 59> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-p%addr  + d-p%rvo + (d-p%bounds%mult[].off256)*(3ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)).
1586-536 (I) Loop (loop index 3) at rshock.f90 <line 58> was not SIMD vectorized because it contains memory references ((char *)d-d%addr  + d-d%rvo + (d-d%bounds%mult[].off48)*(2ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 3) at rshock.f90 <line 58> was not SIMD vectorized because it contains memory references ((char *)d-d%addr  + d-d%rvo + (d-d%bounds%mult[].off48)*(2ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 3) at rshock.f90 <line 58> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 3) at rshock.f90 <line 58> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-d%addr  + d-d%rvo + (d-d%bounds%mult[].off48)*(2ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)).
1586-536 (I) Loop (loop index 3) at rshock.f90 <line 58> was not SIMD vectorized because it contains memory references ((char *)d-d%addr  + d-d%rvo + (d-d%bounds%mult[].off48)*(1ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 3) at rshock.f90 <line 58> was not SIMD vectorized because it contains memory references ((char *)d-d%addr  + d-d%rvo + (d-d%bounds%mult[].off48)*(1ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 3) at rshock.f90 <line 58> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 3) at rshock.f90 <line 58> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-d%addr  + d-d%rvo + (d-d%bounds%mult[].off48)*(1ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)).
1586-536 (I) Loop (loop index 3) at rshock.f90 <line 59> was not SIMD vectorized because it contains memory references ((char *)d-p%addr  + d-p%rvo + (d-p%bounds%mult[].off256)*(2ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 3) at rshock.f90 <line 59> was not SIMD vectorized because it contains memory references ((char *)d-p%addr  + d-p%rvo + (d-p%bounds%mult[].off256)*(2ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 3) at rshock.f90 <line 59> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 3) at rshock.f90 <line 59> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-p%addr  + d-p%rvo + (d-p%bounds%mult[].off256)*(2ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)).
1586-536 (I) Loop (loop index 3) at rshock.f90 <line 59> was not SIMD vectorized because it contains memory references ((char *)d-p%addr  + d-p%rvo + (d-p%bounds%mult[].off256)*(1ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 3) at rshock.f90 <line 59> was not SIMD vectorized because it contains memory references ((char *)d-p%addr  + d-p%rvo + (d-p%bounds%mult[].off256)*(1ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 3) at rshock.f90 <line 59> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 3) at rshock.f90 <line 59> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-p%addr  + d-p%rvo + (d-p%bounds%mult[].off256)*(1ll + ($$CIV8 * 4ll + (long long) kn % 4ll)) + (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)).
1586-534 (I) Loop (loop index 4) at rshock.f90 <line 68> was not SIMD vectorized because the loop is not the innermost loop.
1586-534 (I) Loop (loop index 5) at rshock.f90 <line 69> was not SIMD vectorized because the loop is not the innermost loop.
1586-538 (I) Loop (loop index 6) at rshock.f90 <line 70> was not SIMD vectorized because it contains unsupported loop structure.
1586-552 (I) Loop (loop index 6) at rshock.f90 <line 70> was not SIMD vectorized because it contains control flow.
1586-534 (I) Loop (loop index 7) at rshock.f90 <line 83> was not SIMD vectorized because the loop is not the innermost loop.
1586-538 (I) Loop (loop index 8) at rshock.f90 <line 84> was not SIMD vectorized because it contains unsupported loop structure.
1586-552 (I) Loop (loop index 8) at rshock.f90 <line 84> was not SIMD vectorized because it contains control flow.
1586-534 (I) Loop (loop index 12) at rshock.f90 <line 55> was not SIMD vectorized because the loop is not the innermost loop.
1586-534 (I) Loop (loop index 13) at rshock.f90 <line 56> was not SIMD vectorized because the loop is not the innermost loop.
1586-540 (I) Loop (loop index 14) at rshock.f90 <line 57> was not SIMD vectorized because it contains memory references ((double *)((char *)d-d%addr  + d-d%rvo))->d[].rns1.[$$CIV2 + 1ll][$$CIV1 + 1ll][$$CIV0 + 1ll] = d0; with non-vectorizable strides.
1586-540 (I) Loop (loop index 14) at rshock.f90 <line 57> was not SIMD vectorized because it contains memory references ((double *)((char *)d-p%addr  + d-p%rvo))->p[].rns2.[$$CIV2 + 1ll][$$CIV1 + 1ll][$$CIV0 + 1ll] = -1.0000000000000000E+000; with non-vectorizable strides.
1586-536 (I) Loop (loop index 14) at rshock.f90 <line 58> was not SIMD vectorized because it contains memory references ((char *)d-d%addr  + d-d%rvo + (d-d%bounds%mult[].off48)*($$CIV2 + 1ll) + (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 14) at rshock.f90 <line 58> was not SIMD vectorized because it contains memory references ((char *)d-d%addr  + d-d%rvo + (d-d%bounds%mult[].off48)*($$CIV2 + 1ll) + (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 14) at rshock.f90 <line 58> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 14) at rshock.f90 <line 58> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-d%addr  + d-d%rvo + (d-d%bounds%mult[].off48)*($$CIV2 + 1ll) + (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)).
1586-536 (I) Loop (loop index 14) at rshock.f90 <line 59> was not SIMD vectorized because it contains memory references ((char *)d-p%addr  + d-p%rvo + (d-p%bounds%mult[].off256)*($$CIV2 + 1ll) + (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)) with non-vectorizable alignment.
1586-540 (I) Loop (loop index 14) at rshock.f90 <line 59> was not SIMD vectorized because it contains memory references ((char *)d-p%addr  + d-p%rvo + (d-p%bounds%mult[].off256)*($$CIV2 + 1ll) + (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 14) at rshock.f90 <line 59> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 14) at rshock.f90 <line 59> was not SIMD vectorized because it contains non-stride-one store references ((char *)d-p%addr  + d-p%rvo + (d-p%bounds%mult[].off256)*($$CIV2 + 1ll) + (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)).
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"4">. Total number of the innermost loops SIMD vectorized <"0">.


    10|         SUBROUTINE rshock ()
    35|           d0 =  1.0000000000000000E+000
    36|           e0 =  1.0000000000000000E-004
    38|           IF ((myid_w == 0)) THEN
    10|             |pgen%nlitems%type.off32 = 4
                    |pgen%nlitems%kind.off40 = 
                    |pgen%nlitems%size.off48 = 
                    |pgen%nlitems%name_addr.off56 = "pgend0e0rshock.f90" + 4
                    |pgen%nlitems%name_len.off64 = 2
                    |pgen%nlitems%item_addr.off72 = loc(d0)
                    |pgen%version = 129
                    |pgen%name_addr = "pgend0e0rshock.f90"
                    |pgen%name_len = 4
                    |pgen%num_of_items = 2
                    |pgen%nlitems%type.off80 = 4
                    |pgen%nlitems%kind.off88 = 
                    |pgen%nlitems%size.off96 = 
                    |pgen%nlitems%name_addr.off104 = "pgend0e0rshock.f90" + 6
                    |pgen%nlitems%name_len.off112 = 2
                    |pgen%nlitems%item_addr.off120 = loc(e0)
    39|             |pgen%name_flags = 0
                    #2 = _xlfBeginIO(1,2,#1,32768,NULL,0,|pgen)
                    _xlfEndIO(%VAL(#2))
    40|             |pgen%name_flags = 0
                    #4 = _xlfBeginIO(2,258,#3,32768,NULL,0,|pgen)
                    _xlfEndIO(%VAL(#4))
    41|             buf_in[].off1744 = d0
    42|             buf_in[].off1752 = e0
    43|           ENDIF
    44|           T_2 = 2
                  T_3 = 1275070495
                  T_4 = 0
                  T_5 = 1140850688
                  CALL mpi_bcast(buf_in,T_2,T_3,T_4,T_5,ierr)
    46|           IF ((myid_w <> 0)) THEN
    47|             d0 = buf_in[].off1744
    48|             e0 = buf_in[].off1752
    49|           ENDIF
    51|           gamm1 = gamma -  1.0000000000000000E+000
    55|           IF ((MOD(int(kn), 4) > 0  .AND.  int(kn) > 0)) THEN
                    $$CIV2 = 0
       Id=12        DO $$CIV2 = $$CIV2, MOD(int(kn), int(4))-1
    56|               IF ((int(jn) > 0)) THEN
                        $$CIV1 = 0
       Id=13            DO $$CIV1 = $$CIV1, int(int(jn))-1
    57|                   IF ((int(in) > 0)) THEN
                            $$CIV0 = 0
       Id=14                DO $$CIV0 = $$CIV0, int(int(in))-1
    58|                       d-d%addr%d($$CIV0 + 1,$$CIV1 + 1,$$CIV2 + 1) = d0
    59|                       d-p%addr%p($$CIV0 + 1,$$CIV1 + 1,$$CIV2 + 1) = &
                &               -1.0000000000000000E+000
    60|                     ENDDO
                          ENDIF
                        ENDDO
                      ENDIF
                    ENDDO
                  ENDIF
    55|           IF ((int(kn) > 0  .AND.  int(kn) > MOD(int(kn), 4))) THEN
                    $$CIV8 = int(0)
       Id=1         DO $$CIV8 = $$CIV8, int((((int(kn) - MOD(int(kn), 4)) - 1)&
                &        / 4 + 1))-1
    56|               IF ((int(jn) > 0)) THEN
                        $$CIV1 = 0
       Id=2             DO $$CIV1 = $$CIV1, int(int(jn))-1
    57|                   IF ((int(in) > 0)) THEN
                            $$CIV0 = 0
       Id=3                 DO $$CIV0 = $$CIV0, int(int(in))-1
    58|                       d-d%addr%d($$CIV0 + 1,$$CIV1 + 1,1 + ($$CIV8 * 4 &
                &               + MOD(int(kn), 4))) = d0
    59|                       d-p%addr%p($$CIV0 + 1,$$CIV1 + 1,1 + ($$CIV8 * 4 &
                &               + MOD(int(kn), 4))) = -1.0000000000000000E+000
    58|                       d-d%addr%d($$CIV0 + 1,$$CIV1 + 1,2 + ($$CIV8 * 4 &
                &               + MOD(int(kn), 4))) = d0
    59|                       d-p%addr%p($$CIV0 + 1,$$CIV1 + 1,2 + ($$CIV8 * 4 &
                &               + MOD(int(kn), 4))) = -1.0000000000000000E+000
    58|                       d-d%addr%d($$CIV0 + 1,$$CIV1 + 1,3 + ($$CIV8 * 4 &
                &               + MOD(int(kn), 4))) = d0
    59|                       d-p%addr%p($$CIV0 + 1,$$CIV1 + 1,3 + ($$CIV8 * 4 &
                &               + MOD(int(kn), 4))) = -1.0000000000000000E+000
    58|                       d-d%addr%d($$CIV0 + 1,$$CIV1 + 1,4 + ($$CIV8 * 4 &
                &               + MOD(int(kn), 4))) = d0
    59|                       d-p%addr%p($$CIV0 + 1,$$CIV1 + 1,4 + ($$CIV8 * 4 &
                &               + MOD(int(kn), 4))) = -1.0000000000000000E+000
    60|                     ENDDO
                          ENDIF
                        ENDDO
                      ENDIF
                    ENDDO
                  ENDIF
    64|           fois[].off120 = ((e0 * d0) / ((gamma -  &
                &   1.0000000000000000E+000) * mmw)) *  8.3145746516527831E+007
    66|           fois[].off200 =  7.5600002942392309E-015 * (e0 ** 4)
    68|           IF ((int(kn) > 0)) THEN
                    $$CIV5 = 0
       Id=4         DO $$CIV5 = $$CIV5, int(int(kn))-1
    69|               IF ((int(jn) > 0)) THEN
                        $$CIV4 = 0
       Id=5             DO $$CIV4 = $$CIV4, int(int(jn))-1
    70|                   IF ((1 + (int(ie) - int(is)) > 0)) THEN
                            $$CIV3 = 0
       Id=6                 DO $$CIV3 = $$CIV3, int((1 + (int(ie) - int(is))))&
                &               -1
    72|                       d-e%addr%e(int(is) + $$CIV3,$$CIV4 + 1,$$CIV5 + 1)&
                &                = (((e0 + (-1.0714285714285714E-009) * (&
                &               d-x1b%addr%x1b(int(is) + $$CIV3) -  &
                &               7.0000000000000000E+010)) * d0) / ((gamma -  &
                &               1.0000000000000000E+000) * mmw)) *  &
                &               8.3145746516527831E+007
    73|                       IF ((lrad == 1)) THEN
    74|                         d-er%addr%er(int(is) + $$CIV3,$$CIV4 + 1,$$CIV5 &
                &                 + 1) =  7.5600002942392309E-015 * (e0 + (&
                &                 -1.0714285714285714E-009) * (d-x1b%addr%x1b(int(&
                &                 is) + $$CIV3) -  7.0000000000000000E+010) ** 4)
    75|                       ENDIF
    76|                       d-v1%addr%v1(int(is) + $$CIV3,$$CIV4 + 1,$$CIV5 + &
                &               1) = fois[].off128
    77|                       d-v2%addr%v2(int(is) + $$CIV3,$$CIV4 + 1,$$CIV5 + &
                &               1) =  0.0000000000000000E+000
    78|                       d-v3%addr%v3(int(is) + $$CIV3,$$CIV4 + 1,$$CIV5 + &
                &               1) =  0.0000000000000000E+000
    79|                     ENDDO
                          ENDIF
                        ENDDO
                      ENDIF
                    ENDDO
                  ENDIF
    83|           IF ((int(kn) > 0)) THEN
                    $$CIV7 = 0
       Id=7         DO $$CIV7 = $$CIV7, int(int(kn))-1
    84|               IF ((int(jn) > 0)) THEN
                        $$CIV6 = 0
       Id=8             DO $$CIV6 = $$CIV6, int(int(jn))-1
    85|                   d-eoib%addr%eoib($$CIV6 + 1,$$CIV7 + 1,1) = ((e0 * d0)&
                &            / ((gamma -  1.0000000000000000E+000) * mmw)) *  &
                &           8.3145746516527831E+007
    86|                   d-eoib%addr%eoib($$CIV6 + 1,$$CIV7 + 1,2) = ((e0 * d0)&
                &            / ((gamma -  1.0000000000000000E+000) * mmw)) *  &
                &           8.3145746516527831E+007
    87|                   IF ((lrad == 1)) THEN
    88|                     d-eroib%addr%eroib($$CIV6 + 1,$$CIV7 + 1,1) = &
                &             fois[].off200
    89|                     d-eroib%addr%eroib($$CIV6 + 1,$$CIV7 + 1,2) = &
                &             fois[].off200
    90|                   ENDIF
    91|                 ENDDO
                      ENDIF
    92|             ENDDO
                  ENDIF
    95|           RETURN
                END SUBROUTINE rshock


Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
         0            55            12    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            56            13    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            58                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-d%addr  + d-d%rvo + 
                                          (d-d%bounds%mult[].off48)*($$CIV2 + 1ll) + 
                                          (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + 
                                          (d-d%bounds%mult[].off96)*($$CIV0 + 1ll))  with 
                                          non-vectorizable alignment.
         0            58                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-d%addr  + d-d%rvo + 
                                          (d-d%bounds%mult[].off48)*($$CIV2 + 1ll) + 
                                          (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + 
                                          (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)) with  
                                          non-vectorizable strides.
         0            58                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            58                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)d-d%addr  + 
                                          d-d%rvo + (d-d%bounds%mult[].off48)*($$CIV2 + 1ll) + 
                                          (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + 
                                          (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)).
         0            59                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-p%addr  + d-p%rvo + 
                                          (d-p%bounds%mult[].off256)*($$CIV2 + 1ll) + 
                                          (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + 
                                          (d-p%bounds%mult[].off304)*($$CIV0 + 1ll))  with 
                                          non-vectorizable alignment.
         0            59                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-p%addr  + d-p%rvo + 
                                          (d-p%bounds%mult[].off256)*($$CIV2 + 1ll) + 
                                          (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + 
                                          (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)) with  
                                          non-vectorizable strides.
         0            59                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            59                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)d-p%addr  + 
                                          d-p%rvo + (d-p%bounds%mult[].off256)*($$CIV2 + 1ll) + 
                                          (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + 
                                          (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)).
         0            55             1    Outer loop has been unrolled 4 time(s).
         0            55             1    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            56             2    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            58                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-d%addr  + d-d%rvo + 
                                          (d-d%bounds%mult[].off48)*(1ll + ($$CIV8 * 4ll + 
                                          (long long) kn % 4ll)) + 
                                          (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + 
                                          (d-d%bounds%mult[].off96)*($$CIV0 + 1ll))  with 
                                          non-vectorizable alignment.
         0            58                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-d%addr  + d-d%rvo + 
                                          (d-d%bounds%mult[].off48)*(1ll + ($$CIV8 * 4ll + 
                                          (long long) kn % 4ll)) + 
                                          (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + 
                                          (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)) with  
                                          non-vectorizable strides.
         0            58                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            58                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)d-d%addr  + 
                                          d-d%rvo + (d-d%bounds%mult[].off48)*(1ll + ($$CIV8 * 
                                          4ll + (long long) kn % 4ll)) + 
                                          (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + 
                                          (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)).
         0            59                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-p%addr  + d-p%rvo + 
                                          (d-p%bounds%mult[].off256)*(1ll + ($$CIV8 * 4ll + 
                                          (long long) kn % 4ll)) + 
                                          (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + 
                                          (d-p%bounds%mult[].off304)*($$CIV0 + 1ll))  with 
                                          non-vectorizable alignment.
         0            59                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-p%addr  + d-p%rvo + 
                                          (d-p%bounds%mult[].off256)*(1ll + ($$CIV8 * 4ll + 
                                          (long long) kn % 4ll)) + 
                                          (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + 
                                          (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)) with  
                                          non-vectorizable strides.
         0            59                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            59                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)d-p%addr  + 
                                          d-p%rvo + (d-p%bounds%mult[].off256)*(1ll + ($$CIV8 * 
                                          4ll + (long long) kn % 4ll)) + 
                                          (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + 
                                          (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)).
         0            58                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-d%addr  + d-d%rvo + 
                                          (d-d%bounds%mult[].off48)*(2ll + ($$CIV8 * 4ll + 
                                          (long long) kn % 4ll)) + 
                                          (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + 
                                          (d-d%bounds%mult[].off96)*($$CIV0 + 1ll))  with 
                                          non-vectorizable alignment.
         0            58                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-d%addr  + d-d%rvo + 
                                          (d-d%bounds%mult[].off48)*(2ll + ($$CIV8 * 4ll + 
                                          (long long) kn % 4ll)) + 
                                          (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + 
                                          (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)) with  
                                          non-vectorizable strides.
         0            58                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            58                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)d-d%addr  + 
                                          d-d%rvo + (d-d%bounds%mult[].off48)*(2ll + ($$CIV8 * 
                                          4ll + (long long) kn % 4ll)) + 
                                          (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + 
                                          (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)).
         0            59                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-p%addr  + d-p%rvo + 
                                          (d-p%bounds%mult[].off256)*(2ll + ($$CIV8 * 4ll + 
                                          (long long) kn % 4ll)) + 
                                          (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + 
                                          (d-p%bounds%mult[].off304)*($$CIV0 + 1ll))  with 
                                          non-vectorizable alignment.
         0            59                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-p%addr  + d-p%rvo + 
                                          (d-p%bounds%mult[].off256)*(2ll + ($$CIV8 * 4ll + 
                                          (long long) kn % 4ll)) + 
                                          (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + 
                                          (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)) with  
                                          non-vectorizable strides.
         0            59                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            59                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)d-p%addr  + 
                                          d-p%rvo + (d-p%bounds%mult[].off256)*(2ll + ($$CIV8 * 
                                          4ll + (long long) kn % 4ll)) + 
                                          (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + 
                                          (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)).
         0            58                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-d%addr  + d-d%rvo + 
                                          (d-d%bounds%mult[].off48)*(3ll + ($$CIV8 * 4ll + 
                                          (long long) kn % 4ll)) + 
                                          (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + 
                                          (d-d%bounds%mult[].off96)*($$CIV0 + 1ll))  with 
                                          non-vectorizable alignment.
         0            58                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-d%addr  + d-d%rvo + 
                                          (d-d%bounds%mult[].off48)*(3ll + ($$CIV8 * 4ll + 
                                          (long long) kn % 4ll)) + 
                                          (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + 
                                          (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)) with  
                                          non-vectorizable strides.
         0            58                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            58                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)d-d%addr  + 
                                          d-d%rvo + (d-d%bounds%mult[].off48)*(3ll + ($$CIV8 * 
                                          4ll + (long long) kn % 4ll)) + 
                                          (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + 
                                          (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)).
         0            59                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-p%addr  + d-p%rvo + 
                                          (d-p%bounds%mult[].off256)*(3ll + ($$CIV8 * 4ll + 
                                          (long long) kn % 4ll)) + 
                                          (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + 
                                          (d-p%bounds%mult[].off304)*($$CIV0 + 1ll))  with 
                                          non-vectorizable alignment.
         0            59                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-p%addr  + d-p%rvo + 
                                          (d-p%bounds%mult[].off256)*(3ll + ($$CIV8 * 4ll + 
                                          (long long) kn % 4ll)) + 
                                          (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + 
                                          (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)) with  
                                          non-vectorizable strides.
         0            59                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            59                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)d-p%addr  + 
                                          d-p%rvo + (d-p%bounds%mult[].off256)*(3ll + ($$CIV8 * 
                                          4ll + (long long) kn % 4ll)) + 
                                          (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + 
                                          (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)).
         0            58                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-d%addr  + d-d%rvo + 
                                          (d-d%bounds%mult[].off48)*(4ll + ($$CIV8 * 4ll + 
                                          (long long) kn % 4ll)) + 
                                          (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + 
                                          (d-d%bounds%mult[].off96)*($$CIV0 + 1ll))  with 
                                          non-vectorizable alignment.
         0            58                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-d%addr  + d-d%rvo + 
                                          (d-d%bounds%mult[].off48)*(4ll + ($$CIV8 * 4ll + 
                                          (long long) kn % 4ll)) + 
                                          (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + 
                                          (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)) with  
                                          non-vectorizable strides.
         0            58                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            58                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)d-d%addr  + 
                                          d-d%rvo + (d-d%bounds%mult[].off48)*(4ll + ($$CIV8 * 
                                          4ll + (long long) kn % 4ll)) + 
                                          (d-d%bounds%mult[].off72)*($$CIV1 + 1ll) + 
                                          (d-d%bounds%mult[].off96)*($$CIV0 + 1ll)).
         0            59                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-p%addr  + d-p%rvo + 
                                          (d-p%bounds%mult[].off256)*(4ll + ($$CIV8 * 4ll + 
                                          (long long) kn % 4ll)) + 
                                          (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + 
                                          (d-p%bounds%mult[].off304)*($$CIV0 + 1ll))  with 
                                          non-vectorizable alignment.
         0            59                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)d-p%addr  + d-p%rvo + 
                                          (d-p%bounds%mult[].off256)*(4ll + ($$CIV8 * 4ll + 
                                          (long long) kn % 4ll)) + 
                                          (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + 
                                          (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)) with  
                                          non-vectorizable strides.
         0            59                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            59                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)d-p%addr  + 
                                          d-p%rvo + (d-p%bounds%mult[].off256)*(4ll + ($$CIV8 * 
                                          4ll + (long long) kn % 4ll)) + 
                                          (d-p%bounds%mult[].off280)*($$CIV1 + 1ll) + 
                                          (d-p%bounds%mult[].off304)*($$CIV0 + 1ll)).
         0            68             4    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            69             5    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            70             6    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0            70             6    Loop was not SIMD vectorized because it contains 
                                          control flow.
         0            83             7    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            84             8    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0            84             8    Loop was not SIMD vectorized because it contains 
                                          control flow.


    10|         SUBROUTINE rshock ()
    35|           d0 =  1.0000000000000000E+000
    36|           e0 =  1.0000000000000000E-004
    38|           IF ((myid_w == 0)) THEN
    10|             |pgen%nlitems%type.off32 = 4
                    |pgen%nlitems%kind.off40 = 
                    |pgen%nlitems%size.off48 = 
                    |pgen%nlitems%name_addr.off56 = "pgend0e0rshock.f90" + 4
                    |pgen%nlitems%name_len.off64 = 2
                    |pgen%nlitems%item_addr.off72 = loc(d0)
                    |pgen%version = 129
                    |pgen%name_addr = "pgend0e0rshock.f90"
                    |pgen%name_len = 4
                    |pgen%num_of_items = 2
                    |pgen%nlitems%type.off80 = 4
                    |pgen%nlitems%kind.off88 = 
                    |pgen%nlitems%size.off96 = 
                    |pgen%nlitems%name_addr.off104 = "pgend0e0rshock.f90" + 6
                    |pgen%nlitems%name_len.off112 = 2
                    |pgen%nlitems%item_addr.off120 = loc(e0)
    39|             |pgen%name_flags = 0
                    #2 = _xlfBeginIO(1,2,#1,32768,NULL,0,|pgen)
                    _xlfEndIO(%VAL(#2))
    40|             |pgen%name_flags = 0
                    #4 = _xlfBeginIO(2,258,#3,32768,NULL,0,|pgen)
                    _xlfEndIO(%VAL(#4))
    41|             buf_in[].off1744 = d0
    42|             buf_in[].off1752 = e0
    43|           ENDIF
    44|           T_2 = 2
                  T_3 = 1275070495
                  T_4 = 0
                  T_5 = 1140850688
                  CALL mpi_bcast(buf_in,T_2,T_3,T_4,T_5,ierr)
    46|           IF ((myid_w <> 0)) THEN
    47|             d0 = buf_in[].off1744
    48|             e0 = buf_in[].off1752
    49|           ENDIF
    51|           gamm1 = gamma -  1.0000000000000000E+000
    55|           IF ((MOD(int(kn), 4) > 0  .AND.  int(kn) > 0)) THEN
                    $$CIV2 = 0
       Id=12        DO $$CIV2 = $$CIV2, MOD(int(kn), int(4))-1
    56|               IF ((int(jn) > 0)) THEN
                        $$CIV1 = 0
       Id=13            DO $$CIV1 = $$CIV1, int(int(jn))-1
    57|                   IF ((int(in) > 0)) THEN
                            $$CIV0 = 0
       Id=14                DO $$CIV0 = $$CIV0, int(int(in))-1
    58|                       d-d%addr%d($$CIV0 + 1,$$CIV1 + 1,$$CIV2 + 1) = d0
    59|                       d-p%addr%p($$CIV0 + 1,$$CIV1 + 1,$$CIV2 + 1) = &
                &               -1.0000000000000000E+000
    60|                     ENDDO
                          ENDIF
                        ENDDO
                      ENDIF
                    ENDDO
                  ENDIF
    55|           IF ((int(kn) > 0  .AND.  int(kn) > MOD(int(kn), 4))) THEN
                    $$CIV8 = int(0)
       Id=1         DO $$CIV8 = $$CIV8, int((((int(kn) - MOD(int(kn), 4)) - 1)&
                &        / 4 + 1))-1
    56|               IF ((int(jn) > 0)) THEN
                        $$CIV1 = 0
       Id=2             DO $$CIV1 = $$CIV1, int(int(jn))-1
    57|                   IF ((int(in) > 0)) THEN
                            $$CIV0 = 0
       Id=3                 DO $$CIV0 = $$CIV0, int(int(in))-1
    58|                       d-d%addr%d($$CIV0 + 1,$$CIV1 + 1,1 + ($$CIV8 * 4 &
                &               + MOD(int(kn), 4))) = d0
    59|                       d-p%addr%p($$CIV0 + 1,$$CIV1 + 1,1 + ($$CIV8 * 4 &
                &               + MOD(int(kn), 4))) = -1.0000000000000000E+000
    58|                       d-d%addr%d($$CIV0 + 1,$$CIV1 + 1,2 + ($$CIV8 * 4 &
                &               + MOD(int(kn), 4))) = d0
    59|                       d-p%addr%p($$CIV0 + 1,$$CIV1 + 1,2 + ($$CIV8 * 4 &
                &               + MOD(int(kn), 4))) = -1.0000000000000000E+000
    58|                       d-d%addr%d($$CIV0 + 1,$$CIV1 + 1,3 + ($$CIV8 * 4 &
                &               + MOD(int(kn), 4))) = d0
    59|                       d-p%addr%p($$CIV0 + 1,$$CIV1 + 1,3 + ($$CIV8 * 4 &
                &               + MOD(int(kn), 4))) = -1.0000000000000000E+000
    58|                       d-d%addr%d($$CIV0 + 1,$$CIV1 + 1,4 + ($$CIV8 * 4 &
                &               + MOD(int(kn), 4))) = d0
    59|                       d-p%addr%p($$CIV0 + 1,$$CIV1 + 1,4 + ($$CIV8 * 4 &
                &               + MOD(int(kn), 4))) = -1.0000000000000000E+000
    60|                     ENDDO
                          ENDIF
                        ENDDO
                      ENDIF
                    ENDDO
                  ENDIF
    64|           fois[].off120 = ((e0 * d0) / ((gamma -  &
                &   1.0000000000000000E+000) * mmw)) *  8.3145746516527831E+007
    66|           $$csx0 =  7.5600002942392309E-015 * (e0 ** 4)
                  fois[].off200 = $$csx0
    68|           IF ((int(kn) > 0)) THEN
                    $$CIV5 = 0
       Id=4         DO $$CIV5 = $$CIV5, int(int(kn))-1
    69|               IF ((int(jn) > 0)) THEN
                        $$CIV4 = 0
       Id=5             DO $$CIV4 = $$CIV4, int(int(jn))-1
    70|                   IF ((1 + (int(ie) - int(is)) > 0)) THEN
                            $$CIV3 = 0
       Id=6                 DO $$CIV3 = $$CIV3, int((1 + (int(ie) - int(is))))&
                &               -1
    72|                       d-e%addr%e(int(is) + $$CIV3,$$CIV4 + 1,$$CIV5 + 1)&
                &                = (((e0 + (-1.0714285714285714E-009) * (&
                &               d-x1b%addr%x1b(int(is) + $$CIV3) -  &
                &               7.0000000000000000E+010)) * d0) / ((gamma -  &
                &               1.0000000000000000E+000) * mmw)) *  &
                &               8.3145746516527831E+007
    73|                       IF ((lrad == 1)) THEN
    74|                         d-er%addr%er(int(is) + $$CIV3,$$CIV4 + 1,$$CIV5 &
                &                 + 1) =  7.5600002942392309E-015 * (e0 + (&
                &                 -1.0714285714285714E-009) * (d-x1b%addr%x1b(int(&
                &                 is) + $$CIV3) -  7.0000000000000000E+010) ** 4)
    75|                       ENDIF
    76|                       d-v1%addr%v1(int(is) + $$CIV3,$$CIV4 + 1,$$CIV5 + &
                &               1) = fois[].off128
    77|                       d-v2%addr%v2(int(is) + $$CIV3,$$CIV4 + 1,$$CIV5 + &
                &               1) =  0.0000000000000000E+000
    78|                       d-v3%addr%v3(int(is) + $$CIV3,$$CIV4 + 1,$$CIV5 + &
                &               1) =  0.0000000000000000E+000
    79|                     ENDDO
                          ENDIF
                        ENDDO
                      ENDIF
                    ENDDO
                  ENDIF
    83|           IF ((int(kn) > 0)) THEN
                    $$CIV7 = 0
       Id=7         DO $$CIV7 = $$CIV7, int(int(kn))-1
    84|               IF ((int(jn) > 0)) THEN
                        $$CIV6 = 0
       Id=8             DO $$CIV6 = $$CIV6, int(int(jn))-1
    85|                   d-eoib%addr%eoib($$CIV6 + 1,$$CIV7 + 1,1) = ((e0 * d0)&
                &            / ((gamma -  1.0000000000000000E+000) * mmw)) *  &
                &           8.3145746516527831E+007
    86|                   d-eoib%addr%eoib($$CIV6 + 1,$$CIV7 + 1,2) = ((e0 * d0)&
                &            / ((gamma -  1.0000000000000000E+000) * mmw)) *  &
                &           8.3145746516527831E+007
    87|                   IF ((lrad == 1)) THEN
    88|                     d-eroib%addr%eroib($$CIV6 + 1,$$CIV7 + 1,1) = &
                &             $$csx0
    89|                     d-eroib%addr%eroib($$CIV6 + 1,$$CIV7 + 1,2) = &
                &             $$csx0
    90|                   ENDIF
    91|                 ENDDO
                      ENDIF
    92|             ENDDO
                  ENDIF
    95|           RETURN
                END SUBROUTINE rshock

 
 
>>>>> OBJECT SECTION <<<<<
 GPR's set/used:   ssus ssss ssss s-ss  ssss ssss ssss ssss
 FPR's set/used:   ssss ssss ssss ss--  ---- ssss ssss ssss
 CCR's set/used:   ss-- -sss
     | 000000                           PDEF     rshock
   10|                                  PROC      
    0| 000000 stfd     DBE1FFF8   1     STFL      #stack(gr1,-8)=fp31
    0| 000004 stfd     DBC1FFF0   1     STFL      #stack(gr1,-16)=fp30
    0| 000008 stfd     DBA1FFE8   1     STFL      #stack(gr1,-24)=fp29
    0| 00000C stfd     DB81FFE0   1     STFL      #stack(gr1,-32)=fp28
    0| 000010 stfd     DB61FFD8   1     STFL      #stack(gr1,-40)=fp27
    0| 000014 stfd     DB41FFD0   1     STFL      #stack(gr1,-48)=fp26
    0| 000018 stfd     DB21FFC8   1     STFL      #stack(gr1,-56)=fp25
    0| 00001C stfd     DB01FFC0   1     STFL      #stack(gr1,-64)=fp24
    0| 000020 stfd     DAE1FFB8   1     STFL      #stack(gr1,-72)=fp23
    0| 000024 stfd     DAC1FFB0   1     STFL      #stack(gr1,-80)=fp22
    0| 000028 stfd     DAA1FFA8   1     STFL      #stack(gr1,-88)=fp21
    0| 00002C stfd     DA81FFA0   1     STFL      #stack(gr1,-96)=fp20
    0| 000030 std      FBE1FF98   1     ST8       #stack(gr1,-104)=gr31
    0| 000034 std      FBC1FF90   1     ST8       #stack(gr1,-112)=gr30
    0| 000038 std      FBA1FF88   1     ST8       #stack(gr1,-120)=gr29
    0| 00003C std      FB81FF80   1     ST8       #stack(gr1,-128)=gr28
    0| 000040 std      FB61FF78   1     ST8       #stack(gr1,-136)=gr27
    0| 000044 std      FB41FF70   1     ST8       #stack(gr1,-144)=gr26
    0| 000048 std      FB21FF68   1     ST8       #stack(gr1,-152)=gr25
    0| 00004C std      FB01FF60   1     ST8       #stack(gr1,-160)=gr24
    0| 000050 std      FAE1FF58   1     ST8       #stack(gr1,-168)=gr23
    0| 000054 std      FAC1FF50   1     ST8       #stack(gr1,-176)=gr22
    0| 000058 std      FAA1FF48   1     ST8       #stack(gr1,-184)=gr21
    0| 00005C std      FA81FF40   1     ST8       #stack(gr1,-192)=gr20
    0| 000060 std      FA61FF38   1     ST8       #stack(gr1,-200)=gr19
    0| 000064 std      FA41FF30   1     ST8       #stack(gr1,-208)=gr18
    0| 000068 std      FA21FF28   1     ST8       #stack(gr1,-216)=gr17
    0| 00006C std      FA01FF20   1     ST8       #stack(gr1,-224)=gr16
    0| 000070 std      F9E1FF18   1     ST8       #stack(gr1,-232)=gr15
    0| 000074 std      F9C1FF10   1     ST8       #stack(gr1,-240)=gr14
    0| 000078 mfspr    7C0802A6   1     LFLR      gr0=lr
    0| 00007C std      F8010010   1     ST8       #stack(gr1,16)=gr0
    0| 000080 stdu     F821FD21   1     ST8U      gr1,#stack(gr1,-736)=gr1
   38| 000084 ld       EBC20000   1     L8        gr30=.&&N&&mpipar(gr2,0)
   35| 000088 ld       EBE20000   1     L8        gr31=.+CONSTANT_AREA(gr2,0)
   35| 00008C addi     380003FF   1     LI        gr0=1023
   35| 000090 rldicr   7800A2C6   1     SLL8      gr0=gr0,52
   35| 000094 std      F8010090   1     ST8       d0(gr1,144)=gr0
   38| 000098 lwz      801E0008   1     L4Z       gr0=<s115:d8:l4>(gr30,8)
   36| 00009C lfd      CBFF0028   1     LFL       fp31=+CONSTANT_AREA(gr31,40)
   35| 0000A0 lfs      C3DF0020   1     LFS       fp30=+CONSTANT_AREA(gr31,32)
   38| 0000A4 cmpdi    2C200000   1     C8        cr0=gr0,0
   36| 0000A8 stfd     DBE10098   1     STFL      e0(gr1,152)=fp31
   38| 0000AC bc       408200DC   1     BF        CL.1,cr0,0x4/eq,taken=60%(60,40)
    0| 0000B0 addi     38000004   1     LI        gr0=4
   39| 0000B4 ld       EB820000   1     L8        gr28=.$STATIC(gr2,0)
    0| 0000B8 std      F80100C0   1     ST8       <a1:d192:l8>(gr1,192)=gr0
    0| 0000BC std      F80100B0   1     ST8       <a1:d176:l8>(gr1,176)=gr0
    0| 0000C0 std      F80100F0   1     ST8       <a1:d240:l8>(gr1,240)=gr0
   39| 0000C4 addi     38800000   1     LI        gr4=0
    0| 0000C8 addi     387F0012   1     AI        gr3=gr31,18
   39| 0000CC stw      908100A4   1     ST4Z      <a1:d164:l4>(gr1,164)=gr4
    0| 0000D0 std      F8610108   1     ST8       <a1:d264:l8>(gr1,264)=gr3
    0| 0000D4 addi     38010098   1     AI        gr0=gr1,152
   39| 0000D8 ori      609D8000   1     OIL       gr29=gr4,0x8000
    0| 0000DC std      F8010118   1     ST8       <a1:d280:l8>(gr1,280)=gr0
    0| 0000E0 addi     38000008   1     LI        gr0=8
    0| 0000E4 addi     387F0010   1     AI        gr3=gr31,16
    0| 0000E8 std      F80100F8   1     ST8       <a1:d248:l8>(gr1,248)=gr0
    0| 0000EC std      F80100C8   1     ST8       <a1:d200:l8>(gr1,200)=gr0
    0| 0000F0 addi     38800002   1     LI        gr4=2
    0| 0000F4 std      F80100D0   1     ST8       <a1:d208:l8>(gr1,208)=gr0
    0| 0000F8 std      F86100D8   1     ST8       <a1:d216:l8>(gr1,216)=gr3
    0| 0000FC addi     38A10090   1     AI        gr5=gr1,144
    0| 000100 addi     38C00081   1     LI        gr6=129
    0| 000104 addi     38FF000C   1     AI        gr7=gr31,12
    0| 000108 std      F8010100   1     ST8       <a1:d256:l8>(gr1,256)=gr0
    0| 00010C std      F88100B8   1     ST8       <a1:d184:l8>(gr1,184)=gr4
    0| 000110 std      F88100E0   1     ST8       <a1:d224:l8>(gr1,224)=gr4
    0| 000114 std      F8A100E8   1     ST8       <a1:d232:l8>(gr1,232)=gr5
    0| 000118 stw      90C100A0   1     ST4Z      <a1:d160:l4>(gr1,160)=gr6
    0| 00011C std      F8E100A8   1     ST8       <a1:d168:l8>(gr1,168)=gr7
    0| 000120 std      F8810110   1     ST8       <a1:d272:l8>(gr1,272)=gr4
   39| 000124 addi     38600001   1     LI        gr3=1
   39| 000128 or       7F85E378   1     LR        gr5=gr28
   39| 00012C or       7FA6EB78   1     LR        gr6=gr29
   39| 000130 addi     38E00000   1     LI        gr7=0
   39| 000134 addi     39000000   1     LI        gr8=0
   39| 000138 addi     392100A0   1     AI        gr9=gr1,160
   39| 00013C bl       48000001   1     CALL      gr3=_xlfBeginIO,7,gr3,gr4,#1",gr5,gr6,@PALI_SHADOW_CONST.rns0.,gr7,gr8,|pgen,gr9,#def_xlfBeginIO11",_xlfBeginIO",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   39| 000140 ori      60000000   1
   39| 000144 bl       48000001   1     CALL      gr3=_xlfEndIO,1,gr3,_xlfEndIO",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   39| 000148 ori      60000000   1
   40| 00014C addi     38BC0040   1     AI        gr5=gr28,64
   40| 000150 addi     38600002   1     LI        gr3=2
   40| 000154 addi     38800102   1     LI        gr4=258
   40| 000158 or       7FA6EB78   1     LR        gr6=gr29
   40| 00015C addi     38E00000   1     LI        gr7=0
   40| 000160 addi     39000000   1     LI        gr8=0
   40| 000164 addi     392100A0   1     AI        gr9=gr1,160
   40| 000168 bl       48000001   1     CALL      gr3=_xlfBeginIO,7,gr3,gr4,#3",gr5,gr6,@PALI_SHADOW_CONST.rns0.,gr7,gr8,|pgen,gr9,#use_xlfBeginIO21,_xlfBeginIO",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   40| 00016C ori      60000000   1
   40| 000170 bl       48000001   1     CALL      gr3=_xlfEndIO,1,gr3,_xlfEndIO",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   40| 000174 ori      60000000   1
   41| 000178 lfd      CBC10090   1     LFL       fp30=d0(gr1,144)
   42| 00017C lfd      CBE10098   1     LFL       fp31=e0(gr1,152)
   41| 000180 stfd     DBDE06D0   1     STFL      <s115:d1744:l8>(gr30,1744)=fp30
   42| 000184 stfd     DBFE06D8   1     STFL      <s115:d1752:l8>(gr30,1752)=fp31
   43|                              CL.1:
   44| 000188 addis    3C604C00   1     LIU       gr3=19456
   44| 00018C addi     38800002   1     LI        gr4=2
   44| 000190 addi     3803081F   1     AI        gr0=gr3,2079
   44| 000194 stw      90810080   1     ST4Z      T_2(gr1,128)=gr4
   44| 000198 stw      90010084   1     ST4Z      T_3(gr1,132)=gr0
   44| 00019C addi     3BA00000   1     LI        gr29=0
   44| 0001A0 addis    3C604400   1     LIU       gr3=17408
   44| 0001A4 std      FBA10138   1     ST8       #SPILL0(gr1,312)=gr29
   44| 0001A8 stw      93A10088   1     ST4Z      T_4(gr1,136)=gr29
   44| 0001AC stw      9061008C   1     ST4Z      T_5(gr1,140)=gr3
   44| 0001B0 addi     391E0014   1     AI        gr8=gr30,20
   44| 0001B4 addi     38E1008C   1     AI        gr7=gr1,140
   44| 0001B8 addi     38C10088   1     AI        gr6=gr1,136
   44| 0001BC addi     38A10084   1     AI        gr5=gr1,132
   44| 0001C0 addi     38810080   1     AI        gr4=gr1,128
   44| 0001C4 addi     387E06D0   1     AI        gr3=gr30,1744
   44| 0001C8 bl       48000001   1     CALL      mpi_bcast,6,buf_in[]",gr3,T_2",gr4,T_3",gr5,T_4",gr6,T_5",gr7,ierr",gr8,#ProcAlias",mpi_bcast",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
   44| 0001CC ori      60000000   1
   46| 0001D0 lwz      801E0008   1     L4Z       gr0=<s115:d8:l4>(gr30,8)
   46| 0001D4 cmpdi    2C200000   1     C8        cr0=gr0,0
   46| 0001D8 bc       4182000C   1     BT        CL.2,cr0,0x4/eq,taken=50%(0,0)
   47| 0001DC lfd      CBDE06D0   1     LFL       fp30=<s115:d1744:l8>(gr30,1744)
   48| 0001E0 lfd      CBFE06D8   1     LFL       fp31=<s115:d1752:l8>(gr30,1752)
   49|                              CL.2:
   55| 0001E4 ld       E8C20000   1     L8        gr6=.&&N&&param(gr2,0)
   51| 0001E8 ld       E8820000   1     L8        gr4=.&&N&&root(gr2,0)
   51| 0001EC lfs      C01F0030   1     LFS       fp0=+CONSTANT_AREA(gr31,48)
   55| 0001F0 lwa      E8E6000A   1     L4A       gr7=<s141:d8:l4>(gr6,8)
   51| 0001F4 lfd      C82400E0   1     LFL       fp1=<s137:d224:l8>(gr4,224)
   55| 0001F8 sradi    7CE01674   1     SRA8CA    gr0,ca=gr7,2
   55| 0001FC cmpwi    2F070000   1     C4        cr6=gr7,0
   51| 000200 fadd     FC41002A   1     AFL       fp2=fp1,fp0,fcr
   55| 000204 addze    7C000194   1     ADDE      gr0,ca=gr0,0,ca
   55| 000208 std      F8E10140   1     ST8       #SPILL1(gr1,320)=gr7
   55| 00020C rldicr   78051764   1     SLL8      gr5=gr0,2
   55| 000210 subf     7C653851   1     S_R       gr3,cr0=gr7,gr5
   55| 000214 crand    4C390A02   1     CR_N      cr0=cr[60],0x2/gt,0x2/gt,0x2/gt,cr0
   51| 000218 stfd     D84400E8   1     STFL      <s137:d232:l8>(gr4,232)=fp2
   55| 00021C bc       408100B8   1     BF        CL.76,cr0,0x2/gt,taken=50%(0,0)
   58| 000220 ld       E8E20000   1     L8        gr7=.&&N&field(gr2,0)
   56| 000224 lwa      E8060006   1     L4A       gr0=<s141:d4:l4>(gr6,4)
   57| 000228 lwa      E9660002   1     L4A       gr11=<s141:d0:l4>(gr6,0)
   55| 00022C addi     38800000   1     LI        gr4=0
   58| 000230 ld       E9070000   1     L8        gr8=<s31:d0:l8>(gr7,0)
   59| 000234 ld       E92700D0   1     L8        gr9=<s31:d208:l8>(gr7,208)
   58| 000238 ld       EB870018   1     L8        gr28=<s31:d24:l8>(gr7,24)
   59| 00023C ld       E94700E8   1     L8        gr10=<s31:d232:l8>(gr7,232)
   58| 000240 ld       E9870048   1     L8        gr12=<s31:d72:l8>(gr7,72)
   59| 000244 ld       EBC70118   1     L8        gr30=<s31:d280:l8>(gr7,280)
    0| 000248 cmpwi    2C800000   1     C4        cr1=gr0,0
   58| 00024C ld       EBA70030   1     L8        gr29=<s31:d48:l8>(gr7,48)
   59| 000250 ld       EB070100   1     L8        gr24=<s31:d256:l8>(gr7,256)
   58| 000254 ld       E8C70060   1     L8        gr6=<s31:d96:l8>(gr7,96)
   59| 000258 ld       E8E70130   1     L8        gr7=<s31:d304:l8>(gr7,304)
    0| 00025C bc       40850B5C   1     BF        CL.212,cr1,0x2/gt,taken=40%(40,60)
    0| 000260 add      7D295214   1     A         gr9=gr9,gr10
    0| 000264 add      7D08E214   1     A         gr8=gr8,gr28
    0| 000268 add      7D29F214   1     A         gr9=gr9,gr30
    0| 00026C add      7D086214   1     A         gr8=gr8,gr12
    0| 000270 add      7F89C214   1     A         gr28=gr9,gr24
    0| 000274 add      7F68EA14   1     A         gr27=gr8,gr29
    0| 000278 cmpdi    2C2B0000   1     C8        cr0=gr11,0
   55|                              CL.71:
   56| 00027C ld       E9010138   1     L8        gr8=#SPILL0(gr1,312)
    0| 000280 bc       40810040   1     BF        CL.75,cr0,0x2/gt,taken=50%(0,0)
    0| 000284 or       7F7ADB78   1     LR        gr26=gr27
    0| 000288 or       7F99E378   1     LR        gr25=gr28
   56|                              CL.72:
    0| 00028C addi     39080001   1     AI        gr8=gr8,1
   59| 000290 or       7F29CB78   1     LR        gr9=gr25
   58| 000294 or       7F4AD378   1     LR        gr10=gr26
    0| 000298 mtspr    7D6903A6   1     LCTR      ctr=gr11
    0| 00029C ori      60210000   1     XNOP      
    0| 0002A0 ori      60210000   1     XNOP      
    0|                              CL.385:
   58| 0002A4 stfdux   7FCA35EE   1     STFDU     gr10,d(gr10,gr6,0)=fp30
   59| 0002A8 stfdux   7C093DEE   1     STFDU     gr9,p(gr9,gr7,0)=fp0
    0| 0002AC bc       4200FFF8   1     BCT       ctr=CL.385,taken=100%(100,0)
   60| 0002B0 cmpld    7CA80040   1     CL8       cr1=gr8,gr0
    0| 0002B4 add      7F4CD214   1     A         gr26=gr12,gr26
    0| 0002B8 add      7F39F214   1     A         gr25=gr25,gr30
   60| 0002BC bc       4184FFD0   1     BT        CL.72,cr1,0x8/llt,taken=80%(80,20)
   60|                              CL.75:
   60| 0002C0 addi     38840001   1     AI        gr4=gr4,1
    0| 0002C4 add      7F7BEA14   1     A         gr27=gr27,gr29
   60| 0002C8 cmpd     7CA32000   1     C8        cr1=gr3,gr4
    0| 0002CC add      7F98E214   1     A         gr28=gr24,gr28
   60| 0002D0 bc       4185FFAC   1     BT        CL.71,cr1,0x2/gt,taken=80%(80,20)
   60|                              CL.76:
   55| 0002D4 ld       E8010140   1     L8        gr0=#SPILL1(gr1,320)
   55| 0002D8 cmpd     7CA01800   1     C8        cr1=gr0,gr3
   55| 0002DC crand    4C392A02   1     CR_N      cr0=cr[61],0x2/gt,0x2/gt,0x2/gt,cr0
   55| 0002E0 bc       408101F4   1     BF        CL.37,cr0,0x2/gt,taken=50%(0,0)
   58| 0002E4 ld       E8820000   1     L8        gr4=.&&N&field(gr2,0)
   56| 0002E8 ld       EB420000   1     L8        gr26=.&&N&&param(gr2,0)
   60| 0002EC addi     38A5FFFF   1     AI        gr5=gr5,-1
   55| 0002F0 addi     3B200000   1     LI        gr25=0
   60| 0002F4 sradi    7CA51674   1     SRA8CA    gr5,ca=gr5,2
   55| 0002F8 std      FB210148   1     ST8       #SPILL2(gr1,328)=gr25
   58| 0002FC ld       E8C40030   1     L8        gr6=<s31:d48:l8>(gr4,48)
   59| 000300 ld       EBC40100   1     L8        gr30=<s31:d256:l8>(gr4,256)
   58| 000304 ld       E8E40000   1     L8        gr7=<s31:d0:l8>(gr4,0)
   59| 000308 ld       E92400D0   1     L8        gr9=<s31:d208:l8>(gr4,208)
   58| 00030C ld       E9640018   1     L8        gr11=<s31:d24:l8>(gr4,24)
   59| 000310 ld       E94400E8   1     L8        gr10=<s31:d232:l8>(gr4,232)
   58| 000314 ld       EB840048   1     L8        gr28=<s31:d72:l8>(gr4,72)
   59| 000318 ld       EB640118   1     L8        gr27=<s31:d280:l8>(gr4,280)
   56| 00031C lwa      E81A0006   1     L4A       gr0=<s141:d4:l4>(gr26,4)
    0| 000320 mulld    7D03F1D2   1     M         gr8=gr3,gr30
    0| 000324 mulld    7C6331D2   1     M         gr3=gr3,gr6
    0| 000328 add      7D295214   1     A         gr9=gr9,gr10
    0| 00032C add      7CE75A14   1     A         gr7=gr7,gr11
    0| 000330 add      7D29DA14   1     A         gr9=gr9,gr27
    0| 000334 add      7CE7E214   1     A         gr7=gr7,gr28
   57| 000338 lwa      EBBA0002   1     L4A       gr29=<s141:d0:l4>(gr26,0)
    0| 00033C rldicr   7BD81764   1     SLL8      gr24=gr30,2
    0| 000340 rldicr   78D71764   1     SLL8      gr23=gr6,2
    0| 000344 std      FB010150   1     ST8       #SPILL3(gr1,336)=gr24
    0| 000348 std      FAE10158   1     ST8       #SPILL4(gr1,344)=gr23
   60| 00034C addze    7CA50194   1     ADDE      gr5,ca=gr5,0,ca
    0| 000350 cmpwi    2C000000   1     C4        cr0=gr0,0
    0| 000354 add      7D484A14   1     A         gr10=gr8,gr9
    0| 000358 rldicr   7BCC0FA4   1     SLL8      gr12=gr30,1
    0| 00035C add      7CE33A14   1     A         gr7=gr3,gr7
    0| 000360 subf     7D7EC050   1     S         gr11=gr24,gr30
    0| 000364 rldicr   78C90FA4   1     SLL8      gr9=gr6,1
    0| 000368 subf     7D06B850   1     S         gr8=gr23,gr6
   58| 00036C ld       E8640060   1     L8        gr3=<s31:d96:l8>(gr4,96)
   59| 000370 ld       E8840130   1     L8        gr4=<s31:d304:l8>(gr4,304)
    0| 000374 bc       40810160   1     BF        CL.37,cr0,0x2/gt,taken=20%(20,80)
    0| 000378 add      7EAAC214   1     A         gr21=gr10,gr24
    0| 00037C add      7E8AF214   1     A         gr20=gr10,gr30
    0| 000380 std      FAA10160   1     ST8       #SPILL5(gr1,352)=gr21
    0| 000384 std      FA810168   1     ST8       #SPILL6(gr1,360)=gr20
    0| 000388 add      7FCA6214   1     A         gr30=gr10,gr12
    0| 00038C add      7EC63A14   1     A         gr22=gr6,gr7
    0| 000390 std      FBC10170   1     ST8       #SPILL7(gr1,368)=gr30
    0| 000394 addi     38C50001   1     AI        gr6=gr5,1
    0| 000398 add      7F4A5A14   1     A         gr26=gr10,gr11
    0| 00039C std      F8C10178   1     ST8       #SPILL8(gr1,376)=gr6
    0| 0003A0 add      7F274A14   1     A         gr25=gr7,gr9
    0| 0003A4 add      7F074214   1     A         gr24=gr7,gr8
    0| 0003A8 add      7EF73A14   1     A         gr23=gr23,gr7
    0| 0003AC cmpdi    2C3D0000   1     C8        cr0=gr29,0
   55|                              CL.38:
   56| 0003B0 ld       E8A10138   1     L8        gr5=#SPILL0(gr1,312)
    0| 0003B4 bc       408100C8   1     BF        CL.39,cr0,0x2/gt,taken=20%(20,80)
    0| 0003B8 or       7F15C378   1     LR        gr21=gr24
    0| 0003BC or       7EF4BB78   1     LR        gr20=gr23
    0| 0003C0 or       7ED3B378   1     LR        gr19=gr22
    0| 0003C4 or       7F32CB78   1     LR        gr18=gr25
    0| 0003C8 ld       EA210160   1     L8        gr17=#SPILL5(gr1,352)
    0| 0003CC ld       EA010168   1     L8        gr16=#SPILL6(gr1,360)
    0| 0003D0 or       7F4FD378   1     LR        gr15=gr26
    0| 0003D4 ld       E9C10170   1     L8        gr14=#SPILL7(gr1,368)
   56|                              CL.40:
   58| 0003D8 or       7E669B78   1     LR        gr6=gr19
   59| 0003DC or       7E078378   1     LR        gr7=gr16
   58| 0003E0 stfdux   7FC61DEE   1     STFDU     gr6,d(gr6,gr3,0)=fp30
   59| 0003E4 or       7DC97378   1     LR        gr9=gr14
   59| 0003E8 stfdux   7C0725EE   1     STFDU     gr7,p(gr7,gr4,0)=fp0
   58| 0003EC or       7E8CA378   1     LR        gr12=gr20
   59| 0003F0 stfdux   7C0925EE   1     STFDU     gr9,p(gr9,gr4,0)=fp0
   58| 0003F4 or       7E489378   1     LR        gr8=gr18
   58| 0003F8 or       7EAAAB78   1     LR        gr10=gr21
   58| 0003FC stfdux   7FC81DEE   1     STFDU     gr8,d(gr8,gr3,0)=fp30
    0| 000400 mtspr    7FA903A6   1     LCTR      ctr=gr29
   58| 000404 stfdux   7FCA1DEE   1     STFDU     gr10,d(gr10,gr3,0)=fp30
   58| 000408 stfdux   7FCC1DEE   1     STFDU     gr12,d(gr12,gr3,0)=fp30
   59| 00040C or       7DEB7B78   1     LR        gr11=gr15
    0| 000410 addi     38A50001   1     AI        gr5=gr5,1
   59| 000414 stfdux   7C0B25EE   1     STFDU     gr11,p(gr11,gr4,0)=fp0
   59| 000418 or       7E3E8B78   1     LR        gr30=gr17
    0| 00041C bc       42400034   1     BCF       ctr=CL.386,taken=0%(0,100)
    0| 000420 ori      60210000   1     XNOP      
    0| 000424 ori      60210000   1     XNOP      
    0| 000428 ori      60210000   1     XNOP      
    0|                              CL.387:
   58| 00042C stfdux   7FC61DEE   1     STFDU     gr6,d(gr6,gr3,0)=fp30
   58| 000430 stfdux   7FC81DEE   1     STFDU     gr8,d(gr8,gr3,0)=fp30
   58| 000434 stfdux   7FCA1DEE   1     STFDU     gr10,d(gr10,gr3,0)=fp30
   59| 000438 stfdux   7C1E25EE   1     STFDU     gr30,p(gr30,gr4,0)=fp0
   58| 00043C stfdux   7FCC1DEE   1     STFDU     gr12,d(gr12,gr3,0)=fp30
   59| 000440 stfdux   7C0725EE   1     STFDU     gr7,p(gr7,gr4,0)=fp0
   59| 000444 stfdux   7C0925EE   1     STFDU     gr9,p(gr9,gr4,0)=fp0
   59| 000448 stfdux   7C0B25EE   1     STFDU     gr11,p(gr11,gr4,0)=fp0
    0| 00044C bc       4200FFE0   1     BCT       ctr=CL.387,taken=100%(100,0)
    0|                              CL.386:
   60| 000450 cmpld    7CA50040   1     CL8       cr1=gr5,gr0
   59| 000454 stfdux   7C1E25EE   1     STFDU     gr30,p(gr30,gr4,0)=fp0
    0| 000458 add      7EB5E214   1     A         gr21=gr21,gr28
    0| 00045C add      7E94E214   1     A         gr20=gr20,gr28
    0| 000460 add      7E73E214   1     A         gr19=gr19,gr28
    0| 000464 add      7E52E214   1     A         gr18=gr18,gr28
    0| 000468 add      7E31DA14   1     A         gr17=gr17,gr27
    0| 00046C add      7E10DA14   1     A         gr16=gr16,gr27
    0| 000470 add      7DEFDA14   1     A         gr15=gr15,gr27
    0| 000474 add      7DCEDA14   1     A         gr14=gr14,gr27
   60| 000478 bc       4184FF60   1     BT        CL.40,cr1,0x8/llt,taken=80%(80,20)
   60|                              CL.39:
   60| 00047C ld       E8A10148   1     L8        gr5=#SPILL2(gr1,328)
    0| 000480 ld       E8C10150   1     L8        gr6=#SPILL3(gr1,336)
    0| 000484 ld       E8E10160   1     L8        gr7=#SPILL5(gr1,352)
   60| 000488 ld       E9010178   1     L8        gr8=#SPILL8(gr1,376)
    0| 00048C ld       E9210168   1     L8        gr9=#SPILL6(gr1,360)
    0| 000490 ld       E9410170   1     L8        gr10=#SPILL7(gr1,368)
    0| 000494 ld       E9610158   1     L8        gr11=#SPILL4(gr1,344)
   60| 000498 addi     38A50001   1     AI        gr5=gr5,1
    0| 00049C add      7CE63A14   1     A         gr7=gr6,gr7
   60| 0004A0 std      F8A10148   1     ST8       #SPILL2(gr1,328)=gr5
    0| 0004A4 std      F8E10160   1     ST8       #SPILL5(gr1,352)=gr7
   60| 0004A8 cmpld    7CA54040   1     CL8       cr1=gr5,gr8
    0| 0004AC add      7D264A14   1     A         gr9=gr6,gr9
    0| 0004B0 add      7D465214   1     A         gr10=gr6,gr10
    0| 0004B4 std      F9210168   1     ST8       #SPILL6(gr1,360)=gr9
    0| 0004B8 std      F9410170   1     ST8       #SPILL7(gr1,368)=gr10
    0| 0004BC add      7F46D214   1     A         gr26=gr6,gr26
    0| 0004C0 add      7F2BCA14   1     A         gr25=gr11,gr25
    0| 0004C4 add      7F0BC214   1     A         gr24=gr11,gr24
    0| 0004C8 add      7EEBBA14   1     A         gr23=gr11,gr23
    0| 0004CC add      7ECBB214   1     A         gr22=gr11,gr22
   60| 0004D0 bc       4184FEE0   1     BT        CL.38,cr1,0x8/llt,taken=80%(80,20)
   60|                              CL.37:
   64| 0004D4 ld       E8620000   1     L8        gr3=.&&N&&cons(gr2,0)
   64| 0004D8 fmul     FC9E07F2   1     MFL       fp4=fp30,fp31,fcr
   64| 0004DC lfd      C81F0038   1     LFL       fp0=+CONSTANT_AREA(gr31,56)
   66| 0004E0 fmul     FC7F07F2   1     MFL       fp3=fp31,fp31,fcr
   66| 0004E4 lfs      C03F0040   1     LFS       fp1=+CONSTANT_AREA(gr31,64)
   64| 0004E8 ld       EB820000   1     L8        gr28=.&&N&&bndry(gr2,0)
   64| 0004EC lfd      C8A30008   1     LFL       fp5=<s148:d8:l8>(gr3,8)
   66| 0004F0 fmul     FC6300F2   1     MFL       fp3=fp3,fp3,fcr
   64| 0004F4 fmul     FC420172   2     MFL       fp2=fp2,fp5,fcr
   66| 0004F8 fmul     FC630072   2     MFL       fp3=fp3,fp1,fcr
   64| 0004FC fdiv     FC841024   2     DFL       fp4=fp4,fp2,fcr
   66| 000500 stfd     D87C00C8   1     STFL      <s151:d200:l8>(gr28,200)=fp3
   64| 000504 fmul     FC840032   1     MFL       fp4=fp4,fp0,fcr
   64| 000508 stfd     D89C0078   1     STFL      <s151:d120:l8>(gr28,120)=fp4
   68| 00050C bc       4099084C   1     BF        CL.526,cr6,0x2/gt,taken=30%(30,70)
   72| 000510 ld       E9020000   1     L8        gr8=.&&N&field(gr2,0)
   69| 000514 ld       EB220000   1     L8        gr25=.&&N&&param(gr2,0)
   70| 000518 ld       EBA20000   1     L8        gr29=.&&N&&grid(gr2,0)
   72| 00051C ld       EB620000   1     L8        gr27=.&&N&grid(gr2,0)
   73| 000520 ld       EB420000   1     L8        gr26=.&&N&&config(gr2,0)
   76| 000524 lfd      C8BC0080   1     LFL       fp5=<s151:d128:l8>(gr28,128)
   78| 000528 ld       E9C802A0   1     L8        gr14=<s31:d672:l8>(gr8,672)
   76| 00052C ld       E9E801D0   1     L8        gr15=<s31:d464:l8>(gr8,464)
   69| 000530 lwa      E8190006   1     L4A       gr0=<s141:d4:l4>(gr25,4)
   70| 000534 lwa      E93D0002   1     L4A       gr9=<s153:d0:l4>(gr29,0)
   74| 000538 ld       EAA80410   1     L8        gr21=<s31:d1040:l8>(gr8,1040)
   74| 00053C ld       E9480428   1     L8        gr10=<s31:d1064:l8>(gr8,1064)
   78| 000540 std      F9C10198   1     ST8       #SPILL12(gr1,408)=gr14
   72| 000544 ld       EA1B06C8   1     L8        gr16=<s20:d1736:l8>(gr27,1736)
   70| 000548 lwa      EBBD0006   1     L4A       gr29=<s153:d4:l4>(gr29,4)
   77| 00054C ld       EAC80238   1     L8        gr22=<s31:d568:l8>(gr8,568)
   74| 000550 ld       EB880440   1     L8        gr28=<s31:d1088:l8>(gr8,1088)
   72| 000554 ld       E9DB06E0   1     L8        gr14=<s20:d1760:l8>(gr27,1760)
   72| 000558 ld       EB680098   1     L8        gr27=<s31:d152:l8>(gr8,152)
   76| 00055C std      F9E10188   1     ST8       #SPILL10(gr1,392)=gr15
   72| 000560 ld       E86800C8   1     L8        gr3=<s31:d200:l8>(gr8,200)
   72| 000564 ld       EA280068   1     L8        gr17=<s31:d104:l8>(gr8,104)
   76| 000568 ld       EA4801A0   1     L8        gr18=<s31:d416:l8>(gr8,416)
   76| 00056C ld       E96801B8   1     L8        gr11=<s31:d440:l8>(gr8,440)
   68| 000570 addi     3B000000   1     LI        gr24=0
   74| 000574 std      FB8101A0   1     ST8       #SPILL13(gr1,416)=gr28
    0| 000578 cmpwi    2C000000   1     C4        cr0=gr0,0
   76| 00057C ld       E8880200   1     L8        gr4=<s31:d512:l8>(gr8,512)
   77| 000580 ld       EA680208   1     L8        gr19=<s31:d520:l8>(gr8,520)
   77| 000584 ld       E9880220   1     L8        gr12=<s31:d544:l8>(gr8,544)
   72| 000588 ld       EAE80080   1     L8        gr23=<s31:d128:l8>(gr8,128)
   68| 00058C std      FB010180   1     ST8       #SPILL9(gr1,384)=gr24
   77| 000590 ld       E8A80268   1     L8        gr5=<s31:d616:l8>(gr8,616)
   78| 000594 ld       E8C802D0   1     L8        gr6=<s31:d720:l8>(gr8,720)
   74| 000598 ld       E8E80470   1     L8        gr7=<s31:d1136:l8>(gr8,1136)
   78| 00059C ld       EA880270   1     L8        gr20=<s31:d624:l8>(gr8,624)
   78| 0005A0 ld       EBC80288   1     L8        gr30=<s31:d648:l8>(gr8,648)
   77| 0005A4 std      FAC10190   1     ST8       #SPILL11(gr1,400)=gr22
   73| 0005A8 lwa      EADA001A   1     L4A       gr22=<s159:d24:l4>(gr26,24)
   72| 0005AC std      FB6101A8   1     ST8       #SPILL14(gr1,424)=gr27
   72| 0005B0 ld       EB8800B0   1     L8        gr28=<s31:d176:l8>(gr8,176)
   76| 0005B4 ld       EB6801E8   1     L8        gr27=<s31:d488:l8>(gr8,488)
   77| 0005B8 ld       EB480250   1     L8        gr26=<s31:d592:l8>(gr8,592)
   78| 0005BC ld       EB2802B8   1     L8        gr25=<s31:d696:l8>(gr8,696)
   74| 0005C0 ld       EB080458   1     L8        gr24=<s31:d1112:l8>(gr8,1112)
    0| 0005C4 bc       40810794   1     BF        CL.526,cr0,0x2/gt,taken=40%(40,60)
    0| 0005C8 add      7DEAAA14   1     A         gr15=gr10,gr21
    0| 0005CC subf     7D49E850   1     S         gr10=gr29,gr9
    0| 0005D0 add      7D0B9214   1     A         gr8=gr11,gr18
    0| 0005D4 subf     7D638850   1     S         gr11=gr17,gr3
    0| 0005D8 addic.   354A0001   1     AI_R      gr10,cr0=gr10,1,ca"
    0| 0005DC add      7EAC9A14   1     A         gr21=gr12,gr19
    0| 0005E0 add      7D8BBA14   1     A         gr12=gr11,gr23
    0| 0005E4 ld       EAE10188   1     L8        gr23=#SPILL10(gr1,392)
    0| 0005E8 mulld    7D4449D2   1     M         gr10=gr4,gr9
    0| 0005EC ld       EA4101A0   1     L8        gr18=#SPILL13(gr1,416)
    0| 0005F0 add      7D08BA14   1     A         gr8=gr8,gr23
    0| 0005F4 add      7E94F214   1     A         gr20=gr20,gr30
    0| 0005F8 cmpwi    2C960001   1     C4        cr1=gr22,1
   72| 0005FC addi     3BD0FFF8   1     AI        gr30=gr16,-8
    0| 000600 add      7ECADA14   1     A         gr22=gr10,gr27
    0| 000604 subf     7E044050   1     S         gr16=gr8,gr4
    0| 000608 subfic   21090001   1     SFI       gr8=1,gr9,ca"
    0| 00060C std      FAC101B8   1     ST8       #SPILL16(gr1,440)=gr22
    0| 000610 add      7ECF9214   1     A         gr22=gr15,gr18
    0| 000614 ld       E9E10198   1     L8        gr15=#SPILL12(gr1,408)
    0| 000618 add      7D08EA14   1     A         gr8=gr8,gr29
    0| 00061C ld       EBA10190   1     L8        gr29=#SPILL11(gr1,400)
    0| 000620 std      F98101B0   1     ST8       #SPILL15(gr1,432)=gr12
    0| 000624 mulld    7D8749D2   1     M         gr12=gr7,gr9
    0| 000628 mulld    7D4649D2   1     M         gr10=gr6,gr9
    0| 00062C mulld    7E6549D2   1     M         gr19=gr5,gr9
    0| 000630 add      7D6FA214   1     A         gr11=gr15,gr20
    0| 000634 add      7EF5EA14   1     A         gr23=gr21,gr29
    0| 000638 lfd      C8DF0048   1     LFL       fp6=+CONSTANT_AREA(gr31,72)
    0| 00063C lfd      C8FF0050   1     LFL       fp7=+CONSTANT_AREA(gr31,80)
    0| 000640 lfs      C11F0058   1     LFS       fp8=+CONSTANT_AREA(gr31,88)
    0| 000644 mulld    7E2349D2   1     M         gr17=gr3,gr9
   72| 000648 rldicr   79341F24   1     SLL8      gr20=gr9,3
   72| 00064C add      7EAEF214   1     A         gr21=gr14,gr30
    0| 000650 subf     7FC7B050   1     S         gr30=gr22,gr7
    0| 000654 add      7FACC214   1     A         gr29=gr12,gr24
    0| 000658 subf     7D665850   1     S         gr11=gr11,gr6
    0| 00065C add      7D8ACA14   1     A         gr12=gr10,gr25
    0| 000660 subf     7D25B850   1     S         gr9=gr23,gr5
    0| 000664 add      7D53D214   1     A         gr10=gr19,gr26
    0| 000668 ld       EAC101B0   1     L8        gr22=#SPILL15(gr1,432)
    0| 00066C ld       E9C101A8   1     L8        gr14=#SPILL14(gr1,424)
    0| 000670 rldicl   7917F842   1     SRL8      gr23=gr8,1
    0| 000674 rlwinm   550807FE   1     RN4       gr8=gr8,0,0x1
    0| 000678 cmpdi    2F370000   1     C8        cr6=gr23,0
    0| 00067C cmpdi    2EA80000   1     C8        cr5=gr8,0
    0| 000680 add      7E71B214   1     A         gr19=gr17,gr22
    0| 000684 add      7E3DF214   1     A         gr17=gr29,gr30
    0| 000688 ld       EBA101B8   1     L8        gr29=#SPILL16(gr1,440)
    0| 00068C add      7FCB6214   1     A         gr30=gr11,gr12
    0| 000690 std      FA2101C0   1     ST8       #SPILL17(gr1,448)=gr17
    0| 000694 std      FBC101C8   1     ST8       #SPILL18(gr1,456)=gr30
    0| 000698 add      7E4EE214   1     A         gr18=gr14,gr28
   72| 00069C add      7ED4AA14   1     A         gr22=gr20,gr21
    0| 0006A0 add      7EA95214   1     A         gr21=gr9,gr10
    0| 0006A4 add      7E90EA14   1     A         gr20=gr16,gr29
    0| 0006A8 add      7E729A14   1     A         gr19=gr18,gr19
   72| 0006AC lfs      C2DF0020   1     LFS       fp22=+CONSTANT_AREA(gr31,32)
   72| 0006B0 lfs      C2BF005C   1     LFS       fp21=+CONSTANT_AREA(gr31,92)
   72| 0006B4 lfs      C29F005C   1     LFS       fp20=+CONSTANT_AREA(gr31,92)
   68|                              CL.44:
   69| 0006B8 ld       E9010138   1     L8        gr8=#SPILL0(gr1,312)
    0| 0006BC bc       408102B4   1     BF        CL.45,cr0,0x2/gt,taken=20%(20,80)
    0| 0006C0 or       7E729B78   1     LR        gr18=gr19
    0| 0006C4 or       7E91A378   1     LR        gr17=gr20
    0| 0006C8 or       7EB0AB78   1     LR        gr16=gr21
    0| 0006CC ld       E9E101C8   1     L8        gr15=#SPILL18(gr1,456)
    0| 0006D0 ld       E9C101C0   1     L8        gr14=#SPILL17(gr1,448)
   69|                              CL.46:
    0| 0006D4 addi     39080001   1     AI        gr8=gr8,1
    0| 0006D8 bc       4086047C   1     BF        CL.219,cr1,0x4/eq,taken=50%(0,0)
   72| 0006DC lfs      C13F0020   1     LFS       fp9=+CONSTANT_AREA(gr31,32)
   72| 0006E0 or       7EC9B378   1     LR        gr9=gr22
   72| 0006E4 lfs      C17F005C   1     LFS       fp11=+CONSTANT_AREA(gr31,92)
   72| 0006E8 lfs      C19F0060   1     LFS       fp12=+CONSTANT_AREA(gr31,96)
   74| 0006EC or       7DCA7378   1     LR        gr10=gr14
   72| 0006F0 or       7E4B9378   1     LR        gr11=gr18
   78| 0006F4 or       7DEC7B78   1     LR        gr12=gr15
   72| 0006F8 fmr      FD404890   1     LRFL      fp10=fp9
   77| 0006FC or       7E1E8378   2     LR        gr30=gr16
   76| 000700 or       7E3D8B78   1     LR        gr29=gr17
    0| 000704 mtspr    7EE903A6   1     LCTR      ctr=gr23
    0| 000708 bc       4196005C   1     BT        CL.375,cr5,0x4/eq,taken=50%(0,0)
   76| 00070C stfdux   7CBD25EE   1     STFDU     gr29,v1(gr29,gr4,0)=fp5
   77| 000710 stfdux   7D1E2DEE   1     STFDU     gr30,v2(gr30,gr5,0)=fp8
   72| 000714 lfdu     CDA90008   1     LFDU      fp13,gr9=x1b(gr9,8)
   72| 000718 fre      FFA01030   1     FRED      fp29=fp2
   72| 00071C fnmsub   FD224F7C   1     FNMS      fp9=fp9,fp2,fp29,fcr
   78| 000720 stfdux   7D0C35EE   1     STFDU     gr12,v3(gr12,gr6,0)=fp8
   72| 000724 fadd     FDAD302A   1     AFL       fp13=fp13,fp6,fcr
   72| 000728 fmadd    FD695A7A   2     FMA       fp11=fp11,fp9,fp9,fcr
   72| 00072C fmadd    FDADF9FA   2     FMA       fp13=fp31,fp13,fp7,fcr
   72| 000730 fmadd    FD6B62FA   2     FMA       fp11=fp12,fp11,fp11,fcr
   72| 000734 fmul     FD9E0372   2     MFL       fp12=fp30,fp13,fcr
   74| 000738 fmul     FDAD0372   2     MFL       fp13=fp13,fp13,fcr
   72| 00073C fmul     FD8C0772   2     MFL       fp12=fp12,fp29,fcr
   74| 000740 fmul     FDAD0372   2     MFL       fp13=fp13,fp13,fcr
   72| 000744 fmadd    FFAC627A   2     FMA       fp29=fp12,fp12,fp9,fcr
   74| 000748 fmul     FDAD0072   2     MFL       fp13=fp13,fp1,fcr
   72| 00074C fmul     FD290772   2     MFL       fp9=fp9,fp29,fcr
   74| 000750 stfdux   7DAA3DEE   1     STFDU     gr10,er(gr10,gr7,0)=fp13
   72| 000754 fmadd    FD2B627A   1     FMA       fp9=fp12,fp11,fp9,fcr
   72| 000758 fmul     FD290032   2     MFL       fp9=fp9,fp0,fcr
   72| 00075C stfdux   7D2B1DEE   2     STFDU     gr11,e(gr11,gr3,0)=fp9
    0| 000760 bc       419A01F4   1     BT        CL.47,cr6,0x4/eq,taken=20%(20,80)
    0|                              CL.375:
   72| 000764 lfd      C9A90008   1     LFL       fp13=x1b(gr9,8)
   72| 000768 lfdu     CF690010   1     LFDU      fp27,gr9=x1b(gr9,16)
   72| 00076C fre      FD201030   1     FRED      fp9=fp2
   72| 000770 fnmsub   FD42527C   1     FNMS      fp10=fp10,fp2,fp9,fcr
   72| 000774 lfs      C17F0060   1     LFS       fp11=+CONSTANT_AREA(gr31,96)
   76| 000778 stfdux   7CBD25EE   1     STFDU     gr29,v1(gr29,gr4,0)=fp5
   72| 00077C lfs      C19F0020   1     LFS       fp12=+CONSTANT_AREA(gr31,32)
   72| 000780 fadd     FF8D302A   1     AFL       fp28=fp13,fp6,fcr
   72| 000784 fadd     FF3B302A   2     AFL       fp25=fp27,fp6,fcr
   72| 000788 fmadd    FFAAA2BA   2     FMA       fp29=fp20,fp10,fp10,fcr
   72| 00078C fmr      FDA0A090   2     LRFL      fp13=fp20
   72| 000790 fmadd    FF9CF9FA   2     FMA       fp28=fp31,fp28,fp7,fcr
   72| 000794 fmul     FF7E0732   2     MFL       fp27=fp30,fp28,fcr
   74| 000798 fmul     FF9C0732   2     MFL       fp28=fp28,fp28,fcr
   72| 00079C fmul     FF7B0272   2     MFL       fp27=fp27,fp9,fcr
   74| 0007A0 fmul     FF9C0732   2     MFL       fp28=fp28,fp28,fcr
   72| 0007A4 fmadd    FF1BDABA   2     FMA       fp24=fp27,fp27,fp10,fcr
   74| 0007A8 fmul     FF9C0072   2     MFL       fp28=fp28,fp1,fcr
    0| 0007AC bc       4240014C   1     BCF       ctr=CL.388,taken=0%(0,100)
   72| 0007B0 fmadd    FF59F9FA   1     FMA       fp26=fp31,fp25,fp7,fcr
   77| 0007B4 stfdux   7D1E2DEE   1     STFDU     gr30,v2(gr30,gr5,0)=fp8
   72| 0007B8 fmadd    FFBD5F7A   1     FMA       fp29=fp11,fp29,fp29,fcr
   76| 0007BC stfdux   7CBD25EE   1     STFDU     gr29,v1(gr29,gr4,0)=fp5
   72| 0007C0 fmul     FF2A0632   1     MFL       fp25=fp10,fp24,fcr
   74| 0007C4 stfdux   7F8A3DEE   1     STFDU     gr10,er(gr10,gr7,0)=fp28
   72| 0007C8 fmul     FF1E06B2   1     MFL       fp24=fp30,fp26,fcr
   77| 0007CC stfdux   7D1E2DEE   1     STFDU     gr30,v2(gr30,gr5,0)=fp8
   74| 0007D0 fmul     FF5A06B2   1     MFL       fp26=fp26,fp26,fcr
   72| 0007D4 lfd      C9690008   1     LFL       fp11=x1b(gr9,8)
   72| 0007D8 fmadd    FF9DDE7A   1     FMA       fp28=fp27,fp29,fp25,fcr
   76| 0007DC stfdux   7CBD25EE   1     STFDU     gr29,v1(gr29,gr4,0)=fp5
   72| 0007E0 fmul     FF780272   1     MFL       fp27=fp24,fp9,fcr
   72| 0007E4 lfdu     CF290010   1     LFDU      fp25,gr9=x1b(gr9,16)
   74| 0007E8 fmul     FF5A06B2   1     MFL       fp26=fp26,fp26,fcr
   78| 0007EC stfdux   7D0C35EE   1     STFDU     gr12,v3(gr12,gr6,0)=fp8
   72| 0007F0 fadd     FF0B302A   1     AFL       fp24=fp11,fp6,fcr
   72| 0007F4 lfs      C17F0060   1     LFS       fp11=+CONSTANT_AREA(gr31,96)
   72| 0007F8 fmul     FF9C0032   1     MFL       fp28=fp28,fp0,fcr
   72| 0007FC fmadd    FEFBDABA   2     FMA       fp23=fp27,fp27,fp10,fcr
   74| 000800 fmul     FF5A0072   2     MFL       fp26=fp26,fp1,fcr
   72| 000804 fadd     FF39302A   2     AFL       fp25=fp25,fp6,fcr
   72| 000808 fmadd    FF18F9FA   2     FMA       fp24=fp31,fp24,fp7,fcr
   72| 00080C stfdux   7F8B1DEE   2     STFDU     gr11,e(gr11,gr3,0)=fp28
   72| 000810 fmul     FEEA05F2   1     MFL       fp23=fp10,fp23,fcr
   74| 000814 stfdux   7F4A3DEE   1     STFDU     gr10,er(gr10,gr7,0)=fp26
   72| 000818 fnmsub   FD42627C   1     FNMS      fp10=fp12,fp2,fp9,fcr
   72| 00081C fmul     FD9E0632   2     MFL       fp12=fp30,fp24,fcr
   74| 000820 fmul     FF980632   2     MFL       fp28=fp24,fp24,fcr
   72| 000824 fmadd    FF5DDDFA   2     FMA       fp26=fp27,fp29,fp23,fcr
   72| 000828 fmadd    FFAA6ABA   2     FMA       fp29=fp13,fp10,fp10,fcr
   72| 00082C fmul     FF6C0272   2     MFL       fp27=fp12,fp9,fcr
   74| 000830 fmul     FDBC0732   2     MFL       fp13=fp28,fp28,fcr
   72| 000834 fmul     FD9A0032   2     MFL       fp12=fp26,fp0,fcr
   72| 000838 fmadd    FF1BDABA   2     FMA       fp24=fp27,fp27,fp10,fcr
   74| 00083C fmul     FF8D0072   2     MFL       fp28=fp13,fp1,fcr
    0| 000840 bc       424000B0   1     BCF       ctr=CL.389,taken=0%(0,100)
   72| 000844 lfs      C2FF005C   1     LFS       fp23=+CONSTANT_AREA(gr31,92)
    0| 000848 ori      60210000   1     XNOP      
    0| 00084C ori      60210000   1     XNOP      
    0|                              CL.390:
   72| 000850 lfd      C9A90008   1     LFL       fp13=x1b(gr9,8)
   72| 000854 fmadd    FF59F9FA   1     FMA       fp26=fp31,fp25,fp7,fcr
   72| 000858 stfdux   7D8B1DEE   2     STFDU     gr11,e(gr11,gr3,0)=fp12
   72| 00085C fmadd    FD9D5F7A   1     FMA       fp12=fp11,fp29,fp29,fcr
   72| 000860 fmul     FD6A0632   2     MFL       fp11=fp10,fp24,fcr
   78| 000864 stfdux   7D0C35EE   1     STFDU     gr12,v3(gr12,gr6,0)=fp8
   74| 000868 stfdux   7F8A3DEE   1     STFDU     gr10,er(gr10,gr7,0)=fp28
   72| 00086C fmul     FFBE06B2   1     MFL       fp29=fp30,fp26,fcr
   74| 000870 fmul     FF5A06B2   2     MFL       fp26=fp26,fp26,fcr
   77| 000874 stfdux   7D1E2DEE   1     STFDU     gr30,v2(gr30,gr5,0)=fp8
   72| 000878 fmadd    FD6CDAFA   1     FMA       fp11=fp27,fp12,fp11,fcr
   76| 00087C stfdux   7CBD25EE   1     STFDU     gr29,v1(gr29,gr4,0)=fp5
   72| 000880 fmul     FF9D0272   1     MFL       fp28=fp29,fp9,fcr
   74| 000884 fmul     FD3A06B2   2     MFL       fp9=fp26,fp26,fcr
   72| 000888 fadd     FF6D302A   2     AFL       fp27=fp13,fp6,fcr
   72| 00088C fmul     FD6B0032   2     MFL       fp11=fp11,fp0,fcr
   76| 000890 stfdux   7CBD25EE   1     STFDU     gr29,v1(gr29,gr4,0)=fp5
   78| 000894 stfdux   7D0C35EE   1     STFDU     gr12,v3(gr12,gr6,0)=fp8
   72| 000898 fmadd    FDBCE2BA   1     FMA       fp13=fp28,fp28,fp10,fcr
   74| 00089C fmul     FFA90072   2     MFL       fp29=fp9,fp1,fcr
   77| 0008A0 stfdux   7D1E2DEE   1     STFDU     gr30,v2(gr30,gr5,0)=fp8
   72| 0008A4 fmadd    FD3BF9FA   1     FMA       fp9=fp31,fp27,fp7,fcr
   72| 0008A8 stfdux   7D6B1DEE   2     STFDU     gr11,e(gr11,gr3,0)=fp11
   72| 0008AC lfs      C17F0060   1     LFS       fp11=+CONSTANT_AREA(gr31,96)
   72| 0008B0 fmul     FF2A0372   1     MFL       fp25=fp10,fp13,fcr
   72| 0008B4 lfdu     CF490010   1     LFDU      fp26,gr9=x1b(gr9,16)
   72| 0008B8 fmul     FF7E0272   1     MFL       fp27=fp30,fp9,fcr
   74| 0008BC fmul     FDA90272   2     MFL       fp13=fp9,fp9,fcr
   72| 0008C0 fre      FD201030   1     FRED      fp9=fp2
   72| 0008C4 fmadd    FD8CE67A   1     FMA       fp12=fp28,fp12,fp25,fcr
   72| 0008C8 fnmsub   FD42B27C   2     FNMS      fp10=fp22,fp2,fp9,fcr
   72| 0008CC fmul     FF7B0272   2     MFL       fp27=fp27,fp9,fcr
   74| 0008D0 fmul     FDAD0372   2     MFL       fp13=fp13,fp13,fcr
   72| 0008D4 fadd     FF3A302A   2     AFL       fp25=fp26,fp6,fcr
   72| 0008D8 fmul     FD8C0032   2     MFL       fp12=fp12,fp0,fcr
   74| 0008DC stfdux   7FAA3DEE   1     STFDU     gr10,er(gr10,gr7,0)=fp29
   72| 0008E0 fmadd    FFAABABA   1     FMA       fp29=fp23,fp10,fp10,fcr
   72| 0008E4 fmadd    FF1BDABA   2     FMA       fp24=fp27,fp27,fp10,fcr
   74| 0008E8 fmul     FF8D0072   2     MFL       fp28=fp13,fp1,fcr
    0| 0008EC bc       4200FF64   1     BCT       ctr=CL.390,taken=100%(100,0)
    0|                              CL.389:
   78| 0008F0 stfdux   7D0C35EE   1     STFDU     gr12,v3(gr12,gr6,0)=fp8
   72| 0008F4 stfdux   7D8B1DEE   1     STFDU     gr11,e(gr11,gr3,0)=fp12
    0|                              CL.388:
   76| 0008F8 stfdux   7CBD25EE   1     STFDU     gr29,v1(gr29,gr4,0)=fp5
   72| 0008FC fmadd    FD99F9FA   1     FMA       fp12=fp31,fp25,fp7,fcr
   74| 000900 stfdux   7F8A3DEE   1     STFDU     gr10,er(gr10,gr7,0)=fp28
   72| 000904 fmadd    FD7D5F7A   1     FMA       fp11=fp11,fp29,fp29,fcr
   77| 000908 stfdux   7D1E2DEE   1     STFDU     gr30,v2(gr30,gr5,0)=fp8
   72| 00090C fmul     FDAA0632   1     MFL       fp13=fp10,fp24,fcr
   78| 000910 stfdux   7D0C35EE   1     STFDU     gr12,v3(gr12,gr6,0)=fp8
   72| 000914 fmul     FFBE0332   1     MFL       fp29=fp30,fp12,fcr
   77| 000918 stfdux   7D1E2DEE   1     STFDU     gr30,v2(gr30,gr5,0)=fp8
   74| 00091C fmul     FD8C0332   1     MFL       fp12=fp12,fp12,fcr
   78| 000920 stfdux   7D0C35EE   1     STFDU     gr12,v3(gr12,gr6,0)=fp8
   72| 000924 fmadd    FDABDB7A   1     FMA       fp13=fp27,fp11,fp13,fcr
   72| 000928 fmul     FD3D0272   2     MFL       fp9=fp29,fp9,fcr
   74| 00092C fmul     FD8C0332   2     MFL       fp12=fp12,fp12,fcr
   72| 000930 fmul     FDAD0032   2     MFL       fp13=fp13,fp0,fcr
   72| 000934 fmadd    FFA94ABA   2     FMA       fp29=fp9,fp9,fp10,fcr
   74| 000938 fmul     FD8C0072   2     MFL       fp12=fp12,fp1,fcr
   72| 00093C stfdux   7DAB1DEE   2     STFDU     gr11,e(gr11,gr3,0)=fp13
   72| 000940 fmul     FD4A0772   1     MFL       fp10=fp10,fp29,fcr
   74| 000944 stfdux   7D8A3DEE   1     STFDU     gr10,er(gr10,gr7,0)=fp12
   72| 000948 fmadd    FD2B4ABA   1     FMA       fp9=fp9,fp11,fp10,fcr
   72| 00094C fmul     FD290032   2     MFL       fp9=fp9,fp0,fcr
   72| 000950 stfdux   7D2B1DEE   2     STFDU     gr11,e(gr11,gr3,0)=fp9
   79|                              CL.47:
   79| 000954 cmpld    7FA80040   1     CL8       cr7=gr8,gr0
    0| 000958 add      7E52E214   1     A         gr18=gr18,gr28
    0| 00095C add      7E31DA14   1     A         gr17=gr17,gr27
    0| 000960 add      7E10D214   1     A         gr16=gr16,gr26
    0| 000964 add      7DEFCA14   1     A         gr15=gr15,gr25
    0| 000968 add      7DCEC214   1     A         gr14=gr14,gr24
   79| 00096C bc       419CFD68   1     BT        CL.46,cr7,0x8/llt,taken=80%(80,20)
   79|                              CL.45:
   79| 000970 ld       E9010180   1     L8        gr8=#SPILL9(gr1,384)
    0| 000974 ld       E92101A0   1     L8        gr9=#SPILL13(gr1,416)
    0| 000978 ld       E94101C0   1     L8        gr10=#SPILL17(gr1,448)
   79| 00097C ld       E9610140   1     L8        gr11=#SPILL1(gr1,320)
    0| 000980 ld       E9810198   1     L8        gr12=#SPILL12(gr1,408)
    0| 000984 ld       EBC101C8   1     L8        gr30=#SPILL18(gr1,456)
    0| 000988 ld       EBA10190   1     L8        gr29=#SPILL11(gr1,400)
    0| 00098C ld       EA410188   1     L8        gr18=#SPILL10(gr1,392)
    0| 000990 ld       EA2101A8   1     L8        gr17=#SPILL14(gr1,424)
   79| 000994 addi     39080001   1     AI        gr8=gr8,1
    0| 000998 add      7D495214   1     A         gr10=gr9,gr10
   79| 00099C std      F9010180   1     ST8       #SPILL9(gr1,384)=gr8
   79| 0009A0 cmpld    7FA85840   1     CL8       cr7=gr8,gr11
    0| 0009A4 std      F94101C0   1     ST8       #SPILL17(gr1,448)=gr10
    0| 0009A8 add      7FCCF214   1     A         gr30=gr12,gr30
    0| 0009AC add      7EB5EA14   1     A         gr21=gr21,gr29
    0| 0009B0 std      FBC101C8   1     ST8       #SPILL18(gr1,456)=gr30
    0| 0009B4 add      7E92A214   1     A         gr20=gr18,gr20
    0| 0009B8 add      7E719A14   1     A         gr19=gr17,gr19
   79| 0009BC bc       419CFCFC   1     BT        CL.44,cr7,0x8/llt,taken=80%(80,20)
   85| 0009C0 ld       E8820000   1     L8        gr4=.&&N&bndry(gr2,0)
    0| 0009C4 andi.    70030001   1     RN4_R     gr3,cr0=gr0,0,0x1
    0| 0009C8 rldicl   7809F842   1     SRL8      gr9=gr0,1
    0| 0009CC cmpdi    2F290000   1     C8        cr6=gr9,0
   85| 0009D0 ld       E8A40C38   1     L8        gr5=<s96:d3128:l8>(gr4,3128)
   88| 0009D4 ld       E8642798   1     L8        gr3=<s96:d10136:l8>(gr4,10136)
   85| 0009D8 ld       E9040C50   1     L8        gr8=<s96:d3152:l8>(gr4,3152)
   88| 0009DC ld       E8C427B0   1     L8        gr6=<s96:d10160:l8>(gr4,10160)
   85| 0009E0 ld       E9840C68   1     L8        gr12=<s96:d3176:l8>(gr4,3176)
   85| 0009E4 ld       E9440C80   1     L8        gr10=<s96:d3200:l8>(gr4,3200)
   88| 0009E8 ld       E8E427C8   1     L8        gr7=<s96:d10184:l8>(gr4,10184)
   88| 0009EC ld       E96427E0   1     L8        gr11=<s96:d10208:l8>(gr4,10208)
    0| 0009F0 add      7CA54214   1     A         gr5=gr5,gr8
    0| 0009F4 add      7C633214   1     A         gr3=gr3,gr6
    0| 0009F8 rldicr   79880FA4   1     SLL8      gr8=gr12,1
    0| 0009FC add      7FE55214   1     A         gr31=gr5,gr10
    0| 000A00 rldicr   78E50FA4   1     SLL8      gr5=gr7,1
    0| 000A04 add      7CC35A14   1     A         gr6=gr3,gr11
   85| 000A08 ld       E8640C98   1     L8        gr3=<s96:d3224:l8>(gr4,3224)
   88| 000A0C ld       E88427F8   1     L8        gr4=<s96:d10232:l8>(gr4,10232)
    0| 000A10 add      7D8CFA14   1     A         gr12=gr12,gr31
    0| 000A14 add      7FFF4214   1     A         gr31=gr31,gr8
    0| 000A18 add      7FC63A14   1     A         gr30=gr6,gr7
    0| 000A1C add      7FA53214   1     A         gr29=gr5,gr6
   83|                              CL.50:
    0| 000A20 ld       E8A10138   1     L8        gr5=#SPILL0(gr1,312)
    0| 000A24 addi     38A50001   1     AI        gr5=gr5,1
    0| 000A28 std      F8A10138   1     ST8       #SPILL0(gr1,312)=gr5
    0| 000A2C bc       408600E8   1     BF        CL.224,cr1,0x4/eq,taken=50%(0,0)
   89| 000A30 or       7FA5EB78   1     LR        gr5=gr29
   88| 000A34 or       7FC6F378   1     LR        gr6=gr30
   86| 000A38 or       7FE7FB78   1     LR        gr7=gr31
   85| 000A3C or       7D886378   1     LR        gr8=gr12
    0| 000A40 mtspr    7C0903A6   1     LCTR      ctr=gr0
    0| 000A44 ori      60210000   1     XNOP      
    0| 000A48 ori      60210000   1     XNOP      
    0|                              CL.394:
   85| 000A4C stfdux   7C881DEE   1     STFDU     gr8,eoib(gr8,gr3,0)=fp4
   86| 000A50 stfdux   7C871DEE   1     STFDU     gr7,eoib(gr7,gr3,0)=fp4
   88| 000A54 stfdux   7C6625EE   1     STFDU     gr6,eroib(gr6,gr4,0)=fp3
   89| 000A58 stfdux   7C6525EE   1     STFDU     gr5,eroib(gr5,gr4,0)=fp3
    0| 000A5C bc       4200FFF0   1     BCT       ctr=CL.394,taken=100%(100,0)
    0| 000A60 ori      60210000   1     XNOP      
    0| 000A64 ori      60210000   1     XNOP      
    0| 000A68 ori      60210000   1     XNOP      
   91|                              CL.51:
   92| 000A6C ld       E8A10138   1     L8        gr5=#SPILL0(gr1,312)
   92| 000A70 ld       E8C10140   1     L8        gr6=#SPILL1(gr1,320)
    0| 000A74 add      7D8A6214   1     A         gr12=gr10,gr12
    0| 000A78 add      7FEAFA14   1     A         gr31=gr10,gr31
    0| 000A7C add      7FCBF214   1     A         gr30=gr11,gr30
    0| 000A80 add      7FABEA14   1     A         gr29=gr11,gr29
   92| 000A84 cmpld    7FA53040   1     CL8       cr7=gr5,gr6
   92| 000A88 bc       419CFF98   1     BT        CL.50,cr7,0x8/llt,taken=80%(80,20)
   95|                              CL.90:
   95| 000A8C ld       E98102F0   1     L8        gr12=#stack(gr1,752)
   95| 000A90 lfd      CBE102D8   1     LFL       fp31=#stack(gr1,728)
   95| 000A94 lfd      CBC102D0   1     LFL       fp30=#stack(gr1,720)
   95| 000A98 lfd      CBA102C8   1     LFL       fp29=#stack(gr1,712)
   95| 000A9C lfd      CB8102C0   1     LFL       fp28=#stack(gr1,704)
   95| 000AA0 lfd      CB6102B8   1     LFL       fp27=#stack(gr1,696)
   95| 000AA4 lfd      CB4102B0   1     LFL       fp26=#stack(gr1,688)
   95| 000AA8 lfd      CB2102A8   1     LFL       fp25=#stack(gr1,680)
   95| 000AAC lfd      CB0102A0   1     LFL       fp24=#stack(gr1,672)
   95| 000AB0 lfd      CAE10298   1     LFL       fp23=#stack(gr1,664)
   95| 000AB4 lfd      CAC10290   1     LFL       fp22=#stack(gr1,656)
   95| 000AB8 lfd      CAA10288   1     LFL       fp21=#stack(gr1,648)
   95| 000ABC lfd      CA810280   1     LFL       fp20=#stack(gr1,640)
   95| 000AC0 addi     382102E0   1     AI        gr1=gr1,736
   95| 000AC4 mtspr    7D8803A6   1     LLR       lr=gr12
   95| 000AC8 ld       E9C1FF10   1     L8        gr14=#stack(gr1,-240)
   95| 000ACC ld       E9E1FF18   1     L8        gr15=#stack(gr1,-232)
   95| 000AD0 ld       EA01FF20   1     L8        gr16=#stack(gr1,-224)
   95| 000AD4 ld       EA21FF28   1     L8        gr17=#stack(gr1,-216)
   95| 000AD8 ld       EA41FF30   1     L8        gr18=#stack(gr1,-208)
   95| 000ADC ld       EA61FF38   1     L8        gr19=#stack(gr1,-200)
   95| 000AE0 ld       EA81FF40   1     L8        gr20=#stack(gr1,-192)
   95| 000AE4 ld       EAA1FF48   1     L8        gr21=#stack(gr1,-184)
   95| 000AE8 ld       EAC1FF50   1     L8        gr22=#stack(gr1,-176)
   95| 000AEC ld       EAE1FF58   1     L8        gr23=#stack(gr1,-168)
   95| 000AF0 ld       EB01FF60   1     L8        gr24=#stack(gr1,-160)
   95| 000AF4 ld       EB21FF68   1     L8        gr25=#stack(gr1,-152)
   95| 000AF8 ld       EB41FF70   1     L8        gr26=#stack(gr1,-144)
   95| 000AFC ld       EB61FF78   1     L8        gr27=#stack(gr1,-136)
   95| 000B00 ld       EB81FF80   1     L8        gr28=#stack(gr1,-128)
   95| 000B04 ld       EBA1FF88   1     L8        gr29=#stack(gr1,-120)
   95| 000B08 ld       EBC1FF90   1     L8        gr30=#stack(gr1,-112)
   95| 000B0C ld       EBE1FF98   1     L8        gr31=#stack(gr1,-104)
   95| 000B10 bclr     4E800020   1     BA        lr
    0|                              CL.224:
   85| 000B14 or       7D856378   1     LR        gr5=gr12
   86| 000B18 or       7FE6FB78   1     LR        gr6=gr31
    0| 000B1C mtspr    7D2903A6   1     LCTR      ctr=gr9
    0| 000B20 bc       4182001C   1     BT        CL.381,cr0,0x4/eq,taken=50%(0,0)
   85| 000B24 stfdux   7C851DEE   1     STFDU     gr5,eoib(gr5,gr3,0)=fp4
   86| 000B28 stfdux   7C861DEE   1     STFDU     gr6,eoib(gr6,gr3,0)=fp4
    0| 000B2C bc       419AFF40   1     BT        CL.51,cr6,0x4/eq,taken=20%(20,80)
    0| 000B30 ori      60210000   1     XNOP      
    0| 000B34 ori      60210000   1     XNOP      
    0| 000B38 ori      60210000   1     XNOP      
    0|                              CL.381:
   85| 000B3C stfdux   7C851DEE   1     STFDU     gr5,eoib(gr5,gr3,0)=fp4
   86| 000B40 stfdux   7C861DEE   1     STFDU     gr6,eoib(gr6,gr3,0)=fp4
   85| 000B44 stfdux   7C851DEE   1     STFDU     gr5,eoib(gr5,gr3,0)=fp4
   86| 000B48 stfdux   7C861DEE   1     STFDU     gr6,eoib(gr6,gr3,0)=fp4
    0| 000B4C bc       4200FFF0   1     BCT       ctr=CL.381,taken=100%(100,0)
    0| 000B50 b        4BFFFF1C   1     B         CL.51,-1
    0|                              CL.219:
   72| 000B54 lfs      C13F0020   1     LFS       fp9=+CONSTANT_AREA(gr31,32)
   72| 000B58 or       7EC9B378   1     LR        gr9=gr22
   72| 000B5C lfs      C17F005C   1     LFS       fp11=+CONSTANT_AREA(gr31,92)
   72| 000B60 lfs      C19F0060   1     LFS       fp12=+CONSTANT_AREA(gr31,96)
   72| 000B64 or       7E4A9378   1     LR        gr10=gr18
   78| 000B68 or       7DEB7B78   1     LR        gr11=gr15
   77| 000B6C or       7E0C8378   1     LR        gr12=gr16
   72| 000B70 fmr      FD404890   1     LRFL      fp10=fp9
   76| 000B74 or       7E3E8B78   2     LR        gr30=gr17
    0| 000B78 mtspr    7EE903A6   1     LCTR      ctr=gr23
    0| 000B7C bc       4196004C   1     BT        CL.377,cr5,0x4/eq,taken=50%(0,0)
   76| 000B80 stfdux   7CBE25EE   1     STFDU     gr30,v1(gr30,gr4,0)=fp5
   72| 000B84 fre      FFA01030   1     FRED      fp29=fp2
   72| 000B88 fnmsub   FD224F7C   1     FNMS      fp9=fp9,fp2,fp29,fcr
   77| 000B8C stfdux   7D0C2DEE   1     STFDU     gr12,v2(gr12,gr5,0)=fp8
   78| 000B90 stfdux   7D0B35EE   1     STFDU     gr11,v3(gr11,gr6,0)=fp8
   72| 000B94 lfdu     CDA90008   1     LFDU      fp13,gr9=x1b(gr9,8)
   72| 000B98 fmadd    FD695A7A   1     FMA       fp11=fp11,fp9,fp9,fcr
   72| 000B9C fadd     FDAD302A   2     AFL       fp13=fp13,fp6,fcr
   72| 000BA0 fmadd    FD6B62FA   2     FMA       fp11=fp12,fp11,fp11,fcr
   72| 000BA4 fmadd    FDADF9FA   2     FMA       fp13=fp31,fp13,fp7,fcr
   72| 000BA8 fmul     FD9E0372   2     MFL       fp12=fp30,fp13,fcr
   72| 000BAC fmul     FDAC0772   2     MFL       fp13=fp12,fp29,fcr
   72| 000BB0 fmadd    FD8D6A7A   2     FMA       fp12=fp13,fp13,fp9,fcr
   72| 000BB4 fmul     FD290332   2     MFL       fp9=fp9,fp12,fcr
   72| 000BB8 fmadd    FD2B6A7A   2     FMA       fp9=fp13,fp11,fp9,fcr
   72| 000BBC fmul     FD290032   2     MFL       fp9=fp9,fp0,fcr
   72| 000BC0 stfdux   7D2A1DEE   2     STFDU     gr10,e(gr10,gr3,0)=fp9
    0| 000BC4 bc       419AFD90   1     BT        CL.47,cr6,0x4/eq,taken=20%(20,80)
    0|                              CL.377:
   72| 000BC8 lfd      C9A90008   1     LFL       fp13=x1b(gr9,8)
   72| 000BCC lfdu     CF690010   1     LFDU      fp27,gr9=x1b(gr9,16)
   72| 000BD0 fre      FD201030   1     FRED      fp9=fp2
   72| 000BD4 fnmsub   FD42527C   1     FNMS      fp10=fp10,fp2,fp9,fcr
   72| 000BD8 lfs      C17F0060   1     LFS       fp11=+CONSTANT_AREA(gr31,96)
   72| 000BDC lfs      C19F0020   1     LFS       fp12=+CONSTANT_AREA(gr31,32)
   72| 000BE0 fadd     FF8D302A   1     AFL       fp28=fp13,fp6,fcr
   72| 000BE4 fadd     FF7B302A   2     AFL       fp27=fp27,fp6,fcr
   72| 000BE8 fmr      FDA0A890   2     LRFL      fp13=fp21
   72| 000BEC fmadd    FFAAAABA   2     FMA       fp29=fp21,fp10,fp10,fcr
   72| 000BF0 fmadd    FF9CF9FA   2     FMA       fp28=fp31,fp28,fp7,fcr
   72| 000BF4 fmadd    FF7BF9FA   2     FMA       fp27=fp31,fp27,fp7,fcr
   72| 000BF8 fmul     FF9E0732   2     MFL       fp28=fp30,fp28,fcr
   72| 000BFC fmul     FF3C0272   2     MFL       fp25=fp28,fp9,fcr
   72| 000C00 fmadd    FF59CABA   2     FMA       fp26=fp25,fp25,fp10,fcr
    0| 000C04 bc       42400108   1     BCF       ctr=CL.391,taken=0%(0,100)
   72| 000C08 fmul     FF9E06F2   1     MFL       fp28=fp30,fp27,fcr
   77| 000C0C stfdux   7D0C2DEE   1     STFDU     gr12,v2(gr12,gr5,0)=fp8
   72| 000C10 fmadd    FFBD5F7A   1     FMA       fp29=fp11,fp29,fp29,fcr
   76| 000C14 stfdux   7CBE25EE   1     STFDU     gr30,v1(gr30,gr4,0)=fp5
   72| 000C18 fmul     FD6A06B2   1     MFL       fp11=fp10,fp26,fcr
   78| 000C1C stfdux   7D0B35EE   1     STFDU     gr11,v3(gr11,gr6,0)=fp8
   72| 000C20 fmul     FF9C0272   1     MFL       fp28=fp28,fp9,fcr
   77| 000C24 stfdux   7D0C2DEE   1     STFDU     gr12,v2(gr12,gr5,0)=fp8
   72| 000C28 lfd      CB690008   1     LFL       fp27=x1b(gr9,8)
   72| 000C2C lfdu     CF490010   1     LFDU      fp26,gr9=x1b(gr9,16)
   72| 000C30 fmadd    FF3DCAFA   1     FMA       fp25=fp25,fp29,fp11,fcr
   76| 000C34 stfdux   7CBE25EE   1     STFDU     gr30,v1(gr30,gr4,0)=fp5
   72| 000C38 fmadd    FF1CE2BA   1     FMA       fp24=fp28,fp28,fp10,fcr
   72| 000C3C lfs      C17F0060   1     LFS       fp11=+CONSTANT_AREA(gr31,96)
   72| 000C40 fadd     FF7B302A   1     AFL       fp27=fp27,fp6,fcr
   72| 000C44 fmul     FF390032   2     MFL       fp25=fp25,fp0,fcr
   72| 000C48 fadd     FF5A302A   2     AFL       fp26=fp26,fp6,fcr
   72| 000C4C fmul     FF0A0632   2     MFL       fp24=fp10,fp24,fcr
   72| 000C50 fnmsub   FD42627C   2     FNMS      fp10=fp12,fp2,fp9,fcr
   72| 000C54 fmadd    FD9BF9FA   2     FMA       fp12=fp31,fp27,fp7,fcr
   72| 000C58 stfdux   7F2A1DEE   2     STFDU     gr10,e(gr10,gr3,0)=fp25
   72| 000C5C fmadd    FF7AF9FA   1     FMA       fp27=fp31,fp26,fp7,fcr
   72| 000C60 fmadd    FF9DE63A   2     FMA       fp28=fp28,fp29,fp24,fcr
   72| 000C64 fmadd    FFAA6ABA   2     FMA       fp29=fp13,fp10,fp10,fcr
   72| 000C68 fmul     FD9E0332   2     MFL       fp12=fp30,fp12,fcr
   72| 000C6C fmul     FF2C0272   2     MFL       fp25=fp12,fp9,fcr
   72| 000C70 fmadd    FF59CABA   2     FMA       fp26=fp25,fp25,fp10,fcr
    0| 000C74 bc       4240008C   1     BCF       ctr=CL.392,taken=0%(0,100)
   72| 000C78 lfs      C31F0020   1     LFS       fp24=+CONSTANT_AREA(gr31,32)
    0|                              CL.393:
   72| 000C7C lfd      C9890008   1     LFL       fp12=x1b(gr9,8)
   72| 000C80 fmul     FDBC0032   1     MFL       fp13=fp28,fp0,fcr
   78| 000C84 stfdux   7D0B35EE   1     STFDU     gr11,v3(gr11,gr6,0)=fp8
   72| 000C88 fmadd    FD7D5F7A   1     FMA       fp11=fp11,fp29,fp29,fcr
   72| 000C8C fmul     FFBE06F2   2     MFL       fp29=fp30,fp27,fcr
   72| 000C90 fmul     FF8A06B2   2     MFL       fp28=fp10,fp26,fcr
   77| 000C94 stfdux   7D0C2DEE   1     STFDU     gr12,v2(gr12,gr5,0)=fp8
   72| 000C98 fadd     FD8C302A   1     AFL       fp12=fp12,fp6,fcr
   72| 000C9C stfdux   7DAA1DEE   2     STFDU     gr10,e(gr10,gr3,0)=fp13
   76| 000CA0 stfdux   7CBE25EE   1     STFDU     gr30,v1(gr30,gr4,0)=fp5
   72| 000CA4 fmul     FFBD0272   1     MFL       fp29=fp29,fp9,fcr
   72| 000CA8 fmadd    FD2BCF3A   2     FMA       fp9=fp25,fp11,fp28,fcr
   76| 000CAC stfdux   7CBE25EE   1     STFDU     gr30,v1(gr30,gr4,0)=fp5
   77| 000CB0 stfdux   7D0C2DEE   1     STFDU     gr12,v2(gr12,gr5,0)=fp8
   72| 000CB4 fmadd    FDACF9FA   1     FMA       fp13=fp31,fp12,fp7,fcr
   72| 000CB8 fmadd    FF9DEABA   2     FMA       fp28=fp29,fp29,fp10,fcr
   72| 000CBC fmul     FF490032   2     MFL       fp26=fp9,fp0,fcr
   72| 000CC0 lfdu     CF290010   1     LFDU      fp25,gr9=x1b(gr9,16)
   72| 000CC4 fre      FD201030   1     FRED      fp9=fp2
   72| 000CC8 fmul     FF7E0372   1     MFL       fp27=fp30,fp13,fcr
   72| 000CCC lfs      C1BF005C   1     LFS       fp13=+CONSTANT_AREA(gr31,92)
   72| 000CD0 fmul     FF8A0732   1     MFL       fp28=fp10,fp28,fcr
   72| 000CD4 fnmsub   FD42C27C   2     FNMS      fp10=fp24,fp2,fp9,fcr
   72| 000CD8 stfdux   7F4A1DEE   2     STFDU     gr10,e(gr10,gr3,0)=fp26
   72| 000CDC fadd     FD99302A   1     AFL       fp12=fp25,fp6,fcr
   72| 000CE0 fmul     FF3B0272   2     MFL       fp25=fp27,fp9,fcr
   78| 000CE4 stfdux   7D0B35EE   1     STFDU     gr11,v3(gr11,gr6,0)=fp8
   72| 000CE8 fmadd    FF8BEF3A   1     FMA       fp28=fp29,fp11,fp28,fcr
   72| 000CEC lfs      C17F0060   1     LFS       fp11=+CONSTANT_AREA(gr31,96)
   72| 000CF0 fmadd    FFAA6ABA   1     FMA       fp29=fp13,fp10,fp10,fcr
   72| 000CF4 fmadd    FF6CF9FA   2     FMA       fp27=fp31,fp12,fp7,fcr
   72| 000CF8 fmadd    FF59CABA   2     FMA       fp26=fp25,fp25,fp10,fcr
    0| 000CFC bc       4200FF80   1     BCT       ctr=CL.393,taken=100%(100,0)
    0|                              CL.392:
   72| 000D00 fmul     FD9C0032   1     MFL       fp12=fp28,fp0,fcr
   78| 000D04 stfdux   7D0B35EE   1     STFDU     gr11,v3(gr11,gr6,0)=fp8
   72| 000D08 stfdux   7D8A1DEE   1     STFDU     gr10,e(gr10,gr3,0)=fp12
    0|                              CL.391:
   72| 000D0C fmul     FDAA06B2   1     MFL       fp13=fp10,fp26,fcr
   77| 000D10 stfdux   7D0C2DEE   1     STFDU     gr12,v2(gr12,gr5,0)=fp8
   72| 000D14 fmul     FD9E06F2   1     MFL       fp12=fp30,fp27,fcr
   76| 000D18 stfdux   7CBE25EE   1     STFDU     gr30,v1(gr30,gr4,0)=fp5
   72| 000D1C fmadd    FD7D5F7A   1     FMA       fp11=fp11,fp29,fp29,fcr
   78| 000D20 stfdux   7D0B35EE   1     STFDU     gr11,v3(gr11,gr6,0)=fp8
   76| 000D24 stfdux   7CBE25EE   1     STFDU     gr30,v1(gr30,gr4,0)=fp5
   77| 000D28 stfdux   7D0C2DEE   1     STFDU     gr12,v2(gr12,gr5,0)=fp8
   72| 000D2C fmul     FD2C0272   1     MFL       fp9=fp12,fp9,fcr
   78| 000D30 stfdux   7D0B35EE   1     STFDU     gr11,v3(gr11,gr6,0)=fp8
   72| 000D34 fmadd    FD8BCB7A   1     FMA       fp12=fp25,fp11,fp13,fcr
   72| 000D38 fmadd    FDA94ABA   2     FMA       fp13=fp9,fp9,fp10,fcr
   72| 000D3C fmul     FD8C0032   2     MFL       fp12=fp12,fp0,fcr
   72| 000D40 fmul     FD4A0372   2     MFL       fp10=fp10,fp13,fcr
   72| 000D44 stfdux   7D8A1DEE   2     STFDU     gr10,e(gr10,gr3,0)=fp12
   72| 000D48 fmadd    FD2B4ABA   1     FMA       fp9=fp9,fp11,fp10,fcr
   72| 000D4C fmul     FD290032   2     MFL       fp9=fp9,fp0,fcr
   72| 000D50 stfdux   7D2A1DEE   2     STFDU     gr10,e(gr10,gr3,0)=fp9
    0| 000D54 b        4BFFFC00   1     B         CL.47,-1
   68|                              CL.526:
   95| 000D58 ld       E98102F0   1     L8        gr12=#stack(gr1,752)
   95| 000D5C lfd      CBE102D8   1     LFL       fp31=#stack(gr1,728)
   95| 000D60 lfd      CBC102D0   1     LFL       fp30=#stack(gr1,720)
   95| 000D64 addi     382102E0   1     AI        gr1=gr1,736
   95| 000D68 ld       E9C1FF10   1     L8        gr14=#stack(gr1,-240)
   95| 000D6C mtspr    7D8803A6   1     LLR       lr=gr12
   95| 000D70 ld       E9E1FF18   1     L8        gr15=#stack(gr1,-232)
   95| 000D74 ld       EA01FF20   1     L8        gr16=#stack(gr1,-224)
   95| 000D78 ld       EA21FF28   1     L8        gr17=#stack(gr1,-216)
   95| 000D7C ld       EA41FF30   1     L8        gr18=#stack(gr1,-208)
   95| 000D80 ld       EA61FF38   1     L8        gr19=#stack(gr1,-200)
   95| 000D84 ld       EA81FF40   1     L8        gr20=#stack(gr1,-192)
   95| 000D88 ld       EAA1FF48   1     L8        gr21=#stack(gr1,-184)
   95| 000D8C ld       EAC1FF50   1     L8        gr22=#stack(gr1,-176)
   95| 000D90 ld       EAE1FF58   1     L8        gr23=#stack(gr1,-168)
   95| 000D94 ld       EB01FF60   1     L8        gr24=#stack(gr1,-160)
   95| 000D98 ld       EB21FF68   1     L8        gr25=#stack(gr1,-152)
   95| 000D9C ld       EB41FF70   1     L8        gr26=#stack(gr1,-144)
   95| 000DA0 ld       EB61FF78   1     L8        gr27=#stack(gr1,-136)
   95| 000DA4 ld       EB81FF80   1     L8        gr28=#stack(gr1,-128)
   95| 000DA8 ld       EBA1FF88   1     L8        gr29=#stack(gr1,-120)
   95| 000DAC ld       EBC1FF90   1     L8        gr30=#stack(gr1,-112)
   95| 000DB0 ld       EBE1FF98   1     L8        gr31=#stack(gr1,-104)
   95| 000DB4 bclr     4E800020   1     BA        lr
   60|                              CL.212:
    0| 000DB8 mtspr    7C6903A6   1     LCTR      ctr=gr3
   60|                              CL.201:
   60| 000DBC addi     38840001   1     AI        gr4=gr4,1
   60| 000DC0 cmpd     7CA41800   1     C8        cr1=gr4,gr3
   60| 000DC4 bc       4104FFF8   1     BCTT      ctr=CL.201,cr1,0x1/lt,taken=80%(80,20)
    0| 000DC8 b        4BFFF50C   1     B         CL.76,-1
     |               Tag Table
     | 000DCC        00000000 00012201 8C120000 00000DCC
     |               Instruction count          883
     |               Straight-line exec time    994
     |               Constant Area
     | 000000        7273686F 636B2E66 39300000 7067656E 64306530 7273686F
     | 000018        636B2E66 39304942 3F800000 49424D20 3F1A36E2 EB1C432D
     | 000030        BF800000 49424D20 4193D2D0 4A10ECAC 28083059 49424D20
     | 000048        C2304C53 3C000000 BE126831 54299CC4 00000000 3F000000
     | 000060        3F400000

 
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> OPTIONS SECTION <<<<<
***   Options In Effect   ***
  
         ==  On / Off Options  ==
         CR              NODIRECTSTORAG  ESCAPE          I4
         INLGLUE         NOLIBESSL       NOLIBPOSIX      OBJECT
         SWAPOMP         THREADED        UNWIND          ZEROSIZE
  
         ==  Options Of Integer Type ==
         ALIAS_SIZE(65536)     MAXMEM(-1)            OPTIMIZE(3)
         SPILLSIZE(512)        STACKTEMP(0)
  
         ==  Options of Integer and Character Type ==
         CACHE(LEVEL(1),TYPE(I),ASSOC(4),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(I),ASSOC(16),COST(80),LINE(128))
         CACHE(LEVEL(1),TYPE(D),ASSOC(8),COST(6),LINE(64),SIZE(16))
         CACHE(LEVEL(2),TYPE(D),ASSOC(16),COST(80),LINE(128))
         INLINE(NOAUTO,LEVEL(5))
         HOT(FASTMATH,LEVEL(0))
         SIMD(AUTO)
  
         ==  Options Of Character Type  ==
         64()                  ALIAS(STD,NOINTPTR)   ALIGN(BINDC(LINUXPPC),STRUCT(NATURAL))
         ARCH(QP)              AUTODBL(NONE)         DESCRIPTOR(V1)
         DIRECTIVE(IBM*,IBMT)  ENUM()                FLAG(I,I)
         FLOAT(MAF,FOLD,RSQRT,FLTINT)
         FREE(F90)             GNU_VERSION(DOT_TRIPLE)
         HALT(S)               IEEE(NEAR)            INTSIZE(4)
         LIST()                LANGLVL(EXTENDED)     REALSIZE(4)
         REPORT(HOTLIST)       STRICT(NONE,NOPRECISION,NOEXCEPTIONS,NOIEEEFP,NONANS,NOINFINITIES,NOSUBNORMALS,NOZEROSIGNS,NOOPERATIONPRECISION,ORDER,NOLIBRARY,NOCONSTRUCTCOPY,NOVECTORPRECISION)
         TUNE(QP)              UNROLL(AUTO)          XFLAG()
         XLF2003(NOPOLYMORPHIC,NOBOZLITARGS,NOSIGNDZEROINTR,NOSTOPEXCEPT,NOVOLATILE,NOAUTOREALLOC,OLDNANINF)
         XLF2008(NOCHECKPRESENCE)
         XLF77(LEADZERO,BLANKPAD)
         XLF90(SIGNEDZERO,AUTODEALLOC)
  
>>>>> SOURCE SECTION <<<<<
** rshockres   === End of Compilation 2 ===
 
>>>>> LOOP TRANSFORMATION SECTION <<<<<




    96|         SUBROUTINE rshockres ()
                  |pgen%nlitems%type.off32 = 4
                  |pgen%nlitems%kind.off40 = 
                  |pgen%nlitems%size.off48 = 
                  |pgen%nlitems%name_addr.off56 = "pgend0e0rshock.f90" + 4
                  |pgen%nlitems%name_len.off64 = 2
                  |pgen%nlitems%item_addr.off72 = loc(d0)
   121|           d0 =  1.0000000000000000E+000
   122|           e0 =  1.0000000000000000E-004
   124|           IF ((myid_w == 0)) THEN
    96|             |pgen%version = 129
                    |pgen%name_addr = "pgend0e0rshock.f90"
                    |pgen%name_len = 4
                    |pgen%num_of_items = 2
                    |pgen%nlitems%type.off80 = 4
                    |pgen%nlitems%kind.off88 = 
                    |pgen%nlitems%size.off96 = 
                    |pgen%nlitems%name_addr.off104 = "pgend0e0rshock.f90" + 6
                    |pgen%nlitems%name_len.off112 = 2
                    |pgen%nlitems%item_addr.off120 = loc(e0)
   125|             |pgen%name_flags = 0
                    #2 = _xlfBeginIO(1,2,#1,32768,NULL,0,|pgen)
                    _xlfEndIO(%VAL(#2))
   126|             |pgen%name_flags = 0
                    #4 = _xlfBeginIO(2,258,#3,32768,NULL,0,|pgen)
                    _xlfEndIO(%VAL(#4))
   127|             buf_in[].off1744 = d0
   128|             buf_in[].off1752 = e0
   129|           ENDIF
   130|           T_7 = 2
                  T_8 = 1275070495
                  T_9 = 0
                  T_10 = 1140850688
                  CALL mpi_bcast(buf_in,T_7,T_8,T_9,T_10,ierr)
   132|           IF ((myid_w <> 0)) THEN
   133|             d0 = buf_in[].off1744
   135|           ENDIF
   137|           gamm1 = gamma -  1.0000000000000000E+000
   140|           RETURN
                END SUBROUTINE rshockres


    96|         SUBROUTINE rshockres ()
                  |pgen%nlitems%type.off32 = 4
                  |pgen%nlitems%kind.off40 = 
                  |pgen%nlitems%size.off48 = 
                  |pgen%nlitems%name_addr.off56 = "pgend0e0rshock.f90" + 4
                  |pgen%nlitems%name_len.off64 = 2
                  |pgen%nlitems%item_addr.off72 = loc(d0)
   121|           d0 =  1.0000000000000000E+000
   122|           e0 =  1.0000000000000000E-004
   124|           IF ((myid_w == 0)) THEN
    96|             |pgen%version = 129
                    |pgen%name_addr = "pgend0e0rshock.f90"
                    |pgen%name_len = 4
                    |pgen%num_of_items = 2
                    |pgen%nlitems%type.off80 = 4
                    |pgen%nlitems%kind.off88 = 
                    |pgen%nlitems%size.off96 = 
                    |pgen%nlitems%name_addr.off104 = "pgend0e0rshock.f90" + 6
                    |pgen%nlitems%name_len.off112 = 2
                    |pgen%nlitems%item_addr.off120 = loc(e0)
   125|             |pgen%name_flags = 0
                    #2 = _xlfBeginIO(1,2,#1,32768,NULL,0,|pgen)
                    _xlfEndIO(%VAL(#2))
   126|             |pgen%name_flags = 0
                    #4 = _xlfBeginIO(2,258,#3,32768,NULL,0,|pgen)
                    _xlfEndIO(%VAL(#4))
   127|             buf_in[].off1744 = d0
   128|             buf_in[].off1752 = e0
   129|           ENDIF
   130|           T_7 = 2
                  T_8 = 1275070495
                  T_9 = 0
                  T_10 = 1140850688
                  CALL mpi_bcast(buf_in,T_7,T_8,T_9,T_10,ierr)
   132|           IF ((myid_w <> 0)) THEN
   133|             d0 = buf_in[].off1744
   135|           ENDIF
   137|           gamm1 = gamma -  1.0000000000000000E+000
   140|           RETURN
                END SUBROUTINE rshockres

 
 
>>>>> OBJECT SECTION <<<<<
 GPR's set/used:   ssus ssss ssss s---  ---- ---- ---s ssss
 FPR's set/used:   ssss ssss ssss ss--  ---- ---- ---- ----
 CCR's set/used:   ss-- -sss
     | 000000                           PDEF     rshockres
   96|                                  PROC      
    0| 000000 std      FBE1FFF8   1     ST8       #stack(gr1,-8)=gr31
    0| 000004 std      FBC1FFF0   1     ST8       #stack(gr1,-16)=gr30
    0| 000008 std      FBA1FFE8   1     ST8       #stack(gr1,-24)=gr29
    0| 00000C std      FB81FFE0   1     ST8       #stack(gr1,-32)=gr28
    0| 000010 std      FB61FFD8   1     ST8       #stack(gr1,-40)=gr27
    0| 000014 mfspr    7C0802A6   1     LFLR      gr0=lr
    0| 000018 std      F8010010   1     ST8       #stack(gr1,16)=gr0
    0| 00001C stdu     F821FE81   1     ST8U      gr1,#stack(gr1,-384)=gr1
  124| 000020 ld       EBE20000   1     L8        gr31=.&&N&&mpipar(gr2,0)
    0| 000024 ld       EBC20000   1     L8        gr30=.+CONSTANT_AREA(gr2,0)
  121| 000028 addi     386003FF   1     LI        gr3=1023
    0| 00002C addi     38000004   1     LI        gr0=4
  121| 000030 rldicr   7863A2C6   1     SLL8      gr3=gr3,52
    0| 000034 std      F80100C0   1     ST8       <a1:d192:l8>(gr1,192)=gr0
  121| 000038 std      F8610090   1     ST8       d0(gr1,144)=gr3
  124| 00003C lwz      80BF0008   1     L4Z       gr5=<s19:d8:l4>(gr31,8)
  122| 000040 lfd      C81E0020   1     LFL       fp0=+CONSTANT_AREA(gr30,32)
    0| 000044 addi     389E0010   1     AI        gr4=gr30,16
    0| 000048 addi     38600008   1     LI        gr3=8
    0| 00004C std      F88100D8   1     ST8       <a1:d216:l8>(gr1,216)=gr4
    0| 000050 std      F86100C8   1     ST8       <a1:d200:l8>(gr1,200)=gr3
    0| 000054 std      F86100D0   1     ST8       <a1:d208:l8>(gr1,208)=gr3
    0| 000058 addi     3BA00002   1     LI        gr29=2
    0| 00005C addi     38810090   1     AI        gr4=gr1,144
  122| 000060 stfd     D8010098   1     STFL      e0(gr1,152)=fp0
  124| 000064 cmpdi    2C250000   1     C8        cr0=gr5,0
    0| 000068 std      FBA100E0   1     ST8       <a1:d224:l8>(gr1,224)=gr29
    0| 00006C std      F88100E8   1     ST8       <a1:d232:l8>(gr1,232)=gr4
  124| 000070 bc       408200B4   1     BF        CL.1,cr0,0x4/eq,taken=60%(60,40)
  125| 000074 ld       EB620000   1     L8        gr27=.$STATIC(gr2,0)
    0| 000078 std      F80100F0   1     ST8       <a1:d240:l8>(gr1,240)=gr0
    0| 00007C std      F86100F8   1     ST8       <a1:d248:l8>(gr1,248)=gr3
  125| 000080 addi     38800000   1     LI        gr4=0
    0| 000084 addi     39000081   1     LI        gr8=129
    0| 000088 addi     38BE000C   1     AI        gr5=gr30,12
    0| 00008C addi     38DE0012   1     AI        gr6=gr30,18
    0| 000090 std      F8A100A8   1     ST8       <a1:d168:l8>(gr1,168)=gr5
    0| 000094 addi     38E10098   1     AI        gr7=gr1,152
  125| 000098 ori      609C8000   1     OIL       gr28=gr4,0x8000
    0| 00009C std      F80100B0   1     ST8       <a1:d176:l8>(gr1,176)=gr0
    0| 0000A0 std      FBA100B8   1     ST8       <a1:d184:l8>(gr1,184)=gr29
    0| 0000A4 stw      910100A0   1     ST4Z      <a1:d160:l4>(gr1,160)=gr8
    0| 0000A8 std      F8610100   1     ST8       <a1:d256:l8>(gr1,256)=gr3
    0| 0000AC std      F8C10108   1     ST8       <a1:d264:l8>(gr1,264)=gr6
    0| 0000B0 std      FBA10110   1     ST8       <a1:d272:l8>(gr1,272)=gr29
    0| 0000B4 std      F8E10118   1     ST8       <a1:d280:l8>(gr1,280)=gr7
  125| 0000B8 stw      908100A4   1     ST4Z      <a1:d164:l4>(gr1,164)=gr4
  125| 0000BC addi     38600001   1     LI        gr3=1
  125| 0000C0 addi     38800002   1     LI        gr4=2
  125| 0000C4 or       7F65DB78   1     LR        gr5=gr27
  125| 0000C8 or       7F86E378   1     LR        gr6=gr28
  125| 0000CC addi     38E00000   1     LI        gr7=0
  125| 0000D0 addi     39000000   1     LI        gr8=0
  125| 0000D4 addi     392100A0   1     AI        gr9=gr1,160
  125| 0000D8 bl       48000001   1     CALL      gr3=_xlfBeginIO,7,gr3,gr4,#1",gr5,gr6,@PALI_SHADOW_CONST.rns11.,gr7,gr8,|pgen,gr9,#def_xlfBeginIO11",_xlfBeginIO",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  125| 0000DC ori      60000000   1
  125| 0000E0 bl       48000001   1     CALL      gr3=_xlfEndIO,1,gr3,_xlfEndIO",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  125| 0000E4 ori      60000000   1
  126| 0000E8 addi     38BB0040   1     AI        gr5=gr27,64
  126| 0000EC addi     38600002   1     LI        gr3=2
  126| 0000F0 addi     38800102   1     LI        gr4=258
  126| 0000F4 or       7F86E378   1     LR        gr6=gr28
  126| 0000F8 addi     38E00000   1     LI        gr7=0
  126| 0000FC addi     39000000   1     LI        gr8=0
  126| 000100 addi     392100A0   1     AI        gr9=gr1,160
  126| 000104 bl       48000001   1     CALL      gr3=_xlfBeginIO,7,gr3,gr4,#3",gr5,gr6,@PALI_SHADOW_CONST.rns11.,gr7,gr8,|pgen,gr9,#use_xlfBeginIO21,_xlfBeginIO",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  126| 000108 ori      60000000   1
  126| 00010C bl       48000001   1     CALL      gr3=_xlfEndIO,1,gr3,_xlfEndIO",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr4"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  126| 000110 ori      60000000   1
  127| 000114 lfd      C8010090   1     LFL       fp0=d0(gr1,144)
  128| 000118 lfd      C8210098   1     LFL       fp1=e0(gr1,152)
  127| 00011C stfd     D81F06D0   1     STFL      <s19:d1744:l8>(gr31,1744)=fp0
  128| 000120 stfd     D83F06D8   1     STFL      <s19:d1752:l8>(gr31,1752)=fp1
  129|                              CL.1:
  130| 000124 addis    3C604C00   1     LIU       gr3=19456
  130| 000128 addi     38000000   1     LI        gr0=0
  130| 00012C addi     3863081F   1     AI        gr3=gr3,2079
  130| 000130 stw      90010088   1     ST4Z      T_9(gr1,136)=gr0
  130| 000134 addis    3C804400   1     LIU       gr4=17408
  130| 000138 stw      93A10080   1     ST4Z      T_7(gr1,128)=gr29
  130| 00013C stw      90610084   1     ST4Z      T_8(gr1,132)=gr3
  130| 000140 stw      9081008C   1     ST4Z      T_10(gr1,140)=gr4
  130| 000144 addi     391F0014   1     AI        gr8=gr31,20
  130| 000148 addi     38E1008C   1     AI        gr7=gr1,140
  130| 00014C addi     38C10088   1     AI        gr6=gr1,136
  130| 000150 addi     38A10084   1     AI        gr5=gr1,132
  130| 000154 addi     38810080   1     AI        gr4=gr1,128
  130| 000158 addi     387F06D0   1     AI        gr3=gr31,1744
  130| 00015C bl       48000001   1     CALL      mpi_bcast,6,buf_in[]",gr3,T_7",gr4,T_8",gr5,T_9",gr6,T_10",gr7,ierr",gr8,#ProcAlias",mpi_bcast",fcr",#MX_TEMP1",gr1,cr[01567]",gr0",gr3"-gr12",fp0"-fp13",mq",lr",xer",fsr",ca",ctr"
  130| 000160 ori      60000000   1
  132| 000164 lwz      801F0008   1     L4Z       gr0=<s19:d8:l4>(gr31,8)
  137| 000168 lfs      C03E0028   1     LFS       fp1=+CONSTANT_AREA(gr30,40)
  137| 00016C ld       E8620000   1     L8        gr3=.&&N&&root(gr2,0)
  132| 000170 cmpdi    2C200000   1     C8        cr0=gr0,0
  137| 000174 fmr      FC000890   1     LRFL      fp0=fp1
  137| 000178 or       7C641B78   2     LR        gr4=gr3
  132| 00017C bc       40820014   1     BF        CL.13,cr0,0x4/eq,taken=50%(0,0)
  137| 000180 lfd      C80300E0   1     LFL       fp0=<s41:d224:l8>(gr3,224)
  137| 000184 fadd     FC00082A   1     AFL       fp0=fp0,fp1,fcr
  137| 000188 stfd     D80300E8   1     STFL      <s41:d232:l8>(gr3,232)=fp0
    0| 00018C b        48000010   1     B         CL.11,-1
    0|                              CL.13:
  137| 000190 lfd      C82300E0   1     LFL       fp1=<s41:d224:l8>(gr3,224)
  137| 000194 fadd     FC01002A   1     AFL       fp0=fp1,fp0,fcr
  137| 000198 stfd     D80400E8   1     STFL      <s41:d232:l8>(gr4,232)=fp0
  140|                              CL.11:
  140| 00019C ld       E9810190   1     L8        gr12=#stack(gr1,400)
  140| 0001A0 addi     38210180   1     AI        gr1=gr1,384
  140| 0001A4 ld       EB61FFD8   1     L8        gr27=#stack(gr1,-40)
  140| 0001A8 ld       EB81FFE0   1     L8        gr28=#stack(gr1,-32)
  140| 0001AC ld       EBA1FFE8   1     L8        gr29=#stack(gr1,-24)
  140| 0001B0 mtspr    7D8803A6   1     LLR       lr=gr12
  140| 0001B4 ld       EBC1FFF0   1     L8        gr30=#stack(gr1,-16)
  140| 0001B8 ld       EBE1FFF8   1     L8        gr31=#stack(gr1,-8)
  140| 0001BC bclr     4E800020   1     BA        lr
     |               Tag Table
     | 0001C0        00000000 00012201 80050000 000001C0
     |               Instruction count          112
     |               Straight-line exec time    113
     |               Constant Area
     | 000000        7273686F 636B2E66 39300000 7067656E 64306530 7273686F
     | 000018        636B2E66 39304942 3F1A36E2 EB1C432D BF800000

 
 
>>>>> COMPILATION UNIT EPILOGUE SECTION <<<<<
 
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
>>>>> FILE TABLE SECTION <<<<<
 
 
                                       FILE CREATION        FROM
FILE NO   FILENAME                    DATE       TIME       FILE    LINE
     0    rshock.f90                  07/08/15   15:48:49
 
 
>>>>> COMPILATION EPILOGUE SECTION <<<<<
 
 
FORTRAN Summary of Diagnosed Conditions
 
TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
               (U)       (S)         (E)        (W)          (I)
    0           0         0           0          0            0
 
 
    Source records read.......................................     140
1501-510  Compilation successful for file rshock.f90.
1501-543  Object file created.
